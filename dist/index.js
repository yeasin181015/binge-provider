'use strict';

var require$$2$1 = require('react/jsx-runtime');
var React = require('react');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;
  if (!css || typeof document === 'undefined') {
    return;
  }
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z$2 = "* {\r\n    font-family: 'Manrope', \"sans-serif\" !important;\r\n}\r\n\r\n.banner-text {\r\n  font-family: \"Manrope\", sans-serif !important;\r\n  font-weight: 700 !important;\r\n  font-style: normal !important;\r\n}\r\n\r\n.binge-text {\r\n  font-family: \"Manrope\", sans-serif !important;\r\n  font-weight: 400 !important;\r\n  font-style: normal !important;\r\n}\r\n  \r\n/* .slick-slide.slick-active {\r\n  padding-left: 16px !important;\r\n  padding-right: 16px !important;\r\n} */\r\n\r\n.watchnow-text {\r\n  font-family: \"Manrope\", sans-serif !important;\r\n  font-weight: 600 !important;\r\n  font-style: normal !important;\r\n}\r\n\r\n@media only screen and (max-width: 600px) {\r\n  .slick-slide.slick-active {\r\n    padding-left: 0px;\r\n    padding-right: 0px;\r\n  }\r\n}\r\n.slick-track {\r\n  display: flex !important;\r\n  align-items: center;\r\n}";
styleInject(css_248z$2);

const breakPoints = {
    values: {
        xs: 0,
        sm: 600,
        md: 900,
        lg: 1200,
        xlg: 1400,
        xl: 1536,
        xxl: 1920,
        xxxl: 2560,
    },
};
const PRIMARY = {
    // light: "#B8B8B8",
    main: "#141414",
    dark: "#0E0A0A",
};
const SECONDARY = {
    light: "#808080",
    main: "#E50914",
    dark: "#C11119",
};
const GREY = {
    100: "#F9FAFB",
    200: "#F4F6F8",
    300: "#DFE3E8",
    400: "#C4CDD5",
    500: "#919EAB",
    600: "#637381",
    700: "#454F5B",
    800: "#B0B0B080",
    900: "#161C24",
    1000: "#484c4f80",
    1100: "#b3b3b3",
    1200: "#d8d8d8",
    1300: "#bcbcbc",
    1400: "#e5e5e5",
    1500: "#a0b3b0",
    1600: "#dcdcdc",
    1700: "#0000007F",
    1800: "#dadde9",
    1900: "#3D3D3D",
    2000: "#202020",
};
const COMMON = {
    common: {
        black: "#000",
        //  white: "#fff"
    },
    primary: { ...PRIMARY, contrastText: "#fff" },
    secondary: { ...SECONDARY, contrastText: "#fff" },
    // white:{...WHITE, contrastText:"#DE2537"},
    grey: GREY,
    action: {
        active: GREY[500],
        hoverOpacity: 0.08,
        disabledOpacity: 0.48,
    },
};
const palette = {
    ...COMMON,
    text: { primary: "#fff", secondary: "#d8d8d8", disabled: GREY[600] },
    background: { default: PRIMARY.main, paper: PRIMARY.main },
    mode: "dark",
    breakpoints: breakPoints,
    typography: {
        fontFamily: [
            'Manrope !important',
            'sans-serif',
        ].join(','),
    }
};

const common = {
  black: '#000',
  white: '#fff'
};
var common$1 = common;

const red = {
  50: '#ffebee',
  100: '#ffcdd2',
  200: '#ef9a9a',
  300: '#e57373',
  400: '#ef5350',
  500: '#f44336',
  600: '#e53935',
  700: '#d32f2f',
  800: '#c62828',
  900: '#b71c1c',
  A100: '#ff8a80',
  A200: '#ff5252',
  A400: '#ff1744',
  A700: '#d50000'
};
var red$1 = red;

const purple = {
  50: '#f3e5f5',
  100: '#e1bee7',
  200: '#ce93d8',
  300: '#ba68c8',
  400: '#ab47bc',
  500: '#9c27b0',
  600: '#8e24aa',
  700: '#7b1fa2',
  800: '#6a1b9a',
  900: '#4a148c',
  A100: '#ea80fc',
  A200: '#e040fb',
  A400: '#d500f9',
  A700: '#aa00ff'
};
var purple$1 = purple;

const blue = {
  50: '#e3f2fd',
  100: '#bbdefb',
  200: '#90caf9',
  300: '#64b5f6',
  400: '#42a5f5',
  500: '#2196f3',
  600: '#1e88e5',
  700: '#1976d2',
  800: '#1565c0',
  900: '#0d47a1',
  A100: '#82b1ff',
  A200: '#448aff',
  A400: '#2979ff',
  A700: '#2962ff'
};
var blue$1 = blue;

const lightBlue = {
  50: '#e1f5fe',
  100: '#b3e5fc',
  200: '#81d4fa',
  300: '#4fc3f7',
  400: '#29b6f6',
  500: '#03a9f4',
  600: '#039be5',
  700: '#0288d1',
  800: '#0277bd',
  900: '#01579b',
  A100: '#80d8ff',
  A200: '#40c4ff',
  A400: '#00b0ff',
  A700: '#0091ea'
};
var lightBlue$1 = lightBlue;

const green = {
  50: '#e8f5e9',
  100: '#c8e6c9',
  200: '#a5d6a7',
  300: '#81c784',
  400: '#66bb6a',
  500: '#4caf50',
  600: '#43a047',
  700: '#388e3c',
  800: '#2e7d32',
  900: '#1b5e20',
  A100: '#b9f6ca',
  A200: '#69f0ae',
  A400: '#00e676',
  A700: '#00c853'
};
var green$1 = green;

const orange = {
  50: '#fff3e0',
  100: '#ffe0b2',
  200: '#ffcc80',
  300: '#ffb74d',
  400: '#ffa726',
  500: '#ff9800',
  600: '#fb8c00',
  700: '#f57c00',
  800: '#ef6c00',
  900: '#e65100',
  A100: '#ffd180',
  A200: '#ffab40',
  A400: '#ff9100',
  A700: '#ff6d00'
};
var orange$1 = orange;

const grey = {
  50: '#fafafa',
  100: '#f5f5f5',
  200: '#eeeeee',
  300: '#e0e0e0',
  400: '#bdbdbd',
  500: '#9e9e9e',
  600: '#757575',
  700: '#616161',
  800: '#424242',
  900: '#212121',
  A100: '#f5f5f5',
  A200: '#eeeeee',
  A400: '#bdbdbd',
  A700: '#616161'
};
var grey$1 = grey;

/**
 * WARNING: Don't import this directly.
 * Use `MuiError` from `@mui/internal-babel-macros/MuiError.macro` instead.
 * @param {number} code
 */
function formatMuiErrorMessage$1(code) {
  // Apply babel-plugin-transform-template-literals in loose mode
  // loose mode is safe if we're concatenating primitives
  // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose
  /* eslint-disable prefer-template */
  let url = 'https://mui.com/production-error/?code=' + code;
  for (let i = 1; i < arguments.length; i += 1) {
    // rest params over-transpile for this case
    // eslint-disable-next-line prefer-rest-params
    url += '&args[]=' + encodeURIComponent(arguments[i]);
  }
  return 'Minified MUI error #' + code + '; visit ' + url + ' for the full message.';
  /* eslint-enable prefer-template */
}

var formatMuiErrorMessage = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: formatMuiErrorMessage$1
});

var THEME_ID = '$$material';

function _extends$5() {
  return _extends$5 = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends$5.apply(null, arguments);
}

function _objectWithoutPropertiesLoose$1(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (-1 !== e.indexOf(n)) continue;
    t[n] = r[n];
  }
  return t;
}

var isDevelopment$3 = false;

/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/

function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  } // this weirdness brought to you by firefox

  /* istanbul ignore next */

  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  } // this function should always return with a value
  // TS can't understand it though so we make it stop complaining here

  return undefined;
}
function createStyleElement(options) {
  var tag = document.createElement('style');
  tag.setAttribute('data-emotion', options.key);
  if (options.nonce !== undefined) {
    tag.setAttribute('nonce', options.nonce);
  }
  tag.appendChild(document.createTextNode(''));
  tag.setAttribute('data-s', '');
  return tag;
}
var StyleSheet = /*#__PURE__*/function () {
  // Using Node instead of HTMLElement since container may be a ShadowRoot
  function StyleSheet(options) {
    var _this = this;
    this._insertTag = function (tag) {
      var before;
      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }
      _this.container.insertBefore(tag, before);
      _this.tags.push(tag);
    };
    this.isSpeedy = options.speedy === undefined ? !isDevelopment$3 : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

    this.key = options.key;
    this.container = options.container;
    this.prepend = options.prepend;
    this.insertionPoint = options.insertionPoint;
    this.before = null;
  }
  var _proto = StyleSheet.prototype;
  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };
  _proto.insert = function insert(rule) {
    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
    // it's 1 in dev because we insert source maps that map a single rule to a location
    // and you can only have one source map per style tag
    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }
    var tag = this.tags[this.tags.length - 1];
    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);
      try {
        // this is the ultrafast version, works across browsers
        // the big drawback is that the css won't be editable in devtools
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {}
    } else {
      tag.appendChild(document.createTextNode(rule));
    }
    this.ctr++;
  };
  _proto.flush = function flush() {
    this.tags.forEach(function (tag) {
      var _tag$parentNode;
      return (_tag$parentNode = tag.parentNode) == null ? void 0 : _tag$parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
  };
  return StyleSheet;
}();

var MS$1 = '-ms-';
var MOZ$1 = '-moz-';
var WEBKIT$1 = '-webkit-';
var COMMENT$1 = 'comm';
var RULESET$1 = 'rule';
var DECLARATION$1 = 'decl';
var IMPORT$1 = '@import';
var KEYFRAMES$1 = '@keyframes';
var LAYER$1 = '@layer';

/**
 * @param {number}
 * @return {number}
 */
var abs$1 = Math.abs;

/**
 * @param {number}
 * @return {string}
 */
var from$1 = String.fromCharCode;

/**
 * @param {object}
 * @return {object}
 */
var assign$2 = Object.assign;

/**
 * @param {string} value
 * @param {number} length
 * @return {number}
 */
function hash$2(value, length) {
  return charat$1(value, 0) ^ 45 ? (((length << 2 ^ charat$1(value, 0)) << 2 ^ charat$1(value, 1)) << 2 ^ charat$1(value, 2)) << 2 ^ charat$1(value, 3) : 0;
}

/**
 * @param {string} value
 * @return {string}
 */
function trim$1(value) {
  return value.trim();
}

/**
 * @param {string} value
 * @param {RegExp} pattern
 * @return {string?}
 */
function match$1(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}

/**
 * @param {string} value
 * @param {(string|RegExp)} pattern
 * @param {string} replacement
 * @return {string}
 */
function replace$1(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}

/**
 * @param {string} value
 * @param {string} search
 * @return {number}
 */
function indexof$1(value, search) {
  return value.indexOf(search);
}

/**
 * @param {string} value
 * @param {number} index
 * @return {number}
 */
function charat$1(value, index) {
  return value.charCodeAt(index) | 0;
}

/**
 * @param {string} value
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function substr$1(value, begin, end) {
  return value.slice(begin, end);
}

/**
 * @param {string} value
 * @return {number}
 */
function strlen$1(value) {
  return value.length;
}

/**
 * @param {any[]} value
 * @return {number}
 */
function sizeof$1(value) {
  return value.length;
}

/**
 * @param {any} value
 * @param {any[]} array
 * @return {any}
 */
function append$1(value, array) {
  return array.push(value), value;
}

/**
 * @param {string[]} array
 * @param {function} callback
 * @return {string}
 */
function combine$1(array, callback) {
  return array.map(callback).join('');
}

var line$1 = 1;
var column$1 = 1;
var length$1 = 0;
var position$1 = 0;
var character$1 = 0;
var characters$1 = '';

/**
 * @param {string} value
 * @param {object | null} root
 * @param {object | null} parent
 * @param {string} type
 * @param {string[] | string} props
 * @param {object[] | string} children
 * @param {number} length
 */
function node$1(value, root, parent, type, props, children, length) {
  return {
    value: value,
    root: root,
    parent: parent,
    type: type,
    props: props,
    children: children,
    line: line$1,
    column: column$1,
    length: length,
    return: ''
  };
}

/**
 * @param {object} root
 * @param {object} props
 * @return {object}
 */
function copy$1(root, props) {
  return assign$2(node$1('', null, null, '', null, null, 0), root, {
    length: -root.length
  }, props);
}

/**
 * @return {number}
 */
function char$1() {
  return character$1;
}

/**
 * @return {number}
 */
function prev$1() {
  character$1 = position$1 > 0 ? charat$1(characters$1, --position$1) : 0;
  if (column$1--, character$1 === 10) column$1 = 1, line$1--;
  return character$1;
}

/**
 * @return {number}
 */
function next$1() {
  character$1 = position$1 < length$1 ? charat$1(characters$1, position$1++) : 0;
  if (column$1++, character$1 === 10) column$1 = 1, line$1++;
  return character$1;
}

/**
 * @return {number}
 */
function peek$1() {
  return charat$1(characters$1, position$1);
}

/**
 * @return {number}
 */
function caret$1() {
  return position$1;
}

/**
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function slice$1(begin, end) {
  return substr$1(characters$1, begin, end);
}

/**
 * @param {number} type
 * @return {number}
 */
function token$1(type) {
  switch (type) {
    // \0 \t \n \r \s whitespace token
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    // ! + , / > @ ~ isolate token
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    // ; { } breakpoint token
    case 59:
    case 123:
    case 125:
      return 4;
    // : accompanied token
    case 58:
      return 3;
    // " ' ( [ opening delimit token
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    // ) ] closing delimit token
    case 41:
    case 93:
      return 1;
  }
  return 0;
}

/**
 * @param {string} value
 * @return {any[]}
 */
function alloc$1(value) {
  return line$1 = column$1 = 1, length$1 = strlen$1(characters$1 = value), position$1 = 0, [];
}

/**
 * @param {any} value
 * @return {any}
 */
function dealloc$1(value) {
  return characters$1 = '', value;
}

/**
 * @param {number} type
 * @return {string}
 */
function delimit$1(type) {
  return trim$1(slice$1(position$1 - 1, delimiter$1(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}

/**
 * @param {number} type
 * @return {string}
 */
function whitespace$1(type) {
  while (character$1 = peek$1()) if (character$1 < 33) next$1();else break;
  return token$1(type) > 2 || token$1(character$1) > 3 ? '' : ' ';
}

/**
 * @param {number} index
 * @param {number} count
 * @return {string}
 */
function escaping$1(index, count) {
  while (--count && next$1())
  // not 0-9 A-F a-f
  if (character$1 < 48 || character$1 > 102 || character$1 > 57 && character$1 < 65 || character$1 > 70 && character$1 < 97) break;
  return slice$1(index, caret$1() + (count < 6 && peek$1() == 32 && next$1() == 32));
}

/**
 * @param {number} type
 * @return {number}
 */
function delimiter$1(type) {
  while (next$1()) switch (character$1) {
    // ] ) " '
    case type:
      return position$1;
    // " '
    case 34:
    case 39:
      if (type !== 34 && type !== 39) delimiter$1(character$1);
      break;
    // (
    case 40:
      if (type === 41) delimiter$1(type);
      break;
    // \
    case 92:
      next$1();
      break;
  }
  return position$1;
}

/**
 * @param {number} type
 * @param {number} index
 * @return {number}
 */
function commenter$1(type, index) {
  while (next$1())
  // //
  if (type + character$1 === 47 + 10) break;
  // /*
  else if (type + character$1 === 42 + 42 && peek$1() === 47) break;
  return '/*' + slice$1(index, position$1 - 1) + '*' + from$1(type === 47 ? type : next$1());
}

/**
 * @param {number} index
 * @return {string}
 */
function identifier$1(index) {
  while (!token$1(peek$1())) next$1();
  return slice$1(index, position$1);
}

/**
 * @param {string} value
 * @return {object[]}
 */
function compile$1(value) {
  return dealloc$1(parse$1('', null, null, null, [''], value = alloc$1(value), 0, [0], value));
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {string[]} rule
 * @param {string[]} rules
 * @param {string[]} rulesets
 * @param {number[]} pseudo
 * @param {number[]} points
 * @param {string[]} declarations
 * @return {object}
 */
function parse$1(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index = 0;
  var offset = 0;
  var length = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character = 0;
  var type = '';
  var props = rules;
  var children = rulesets;
  var reference = rule;
  var characters = type;
  while (scanning) switch (previous = character, character = next$1()) {
    // (
    case 40:
      if (previous != 108 && charat$1(characters, length - 1) == 58) {
        if (indexof$1(characters += replace$1(delimit$1(character), '&', '&\f'), '&\f') != -1) ampersand = -1;
        break;
      }
    // " ' [
    case 34:
    case 39:
    case 91:
      characters += delimit$1(character);
      break;
    // \t \n \r \s
    case 9:
    case 10:
    case 13:
    case 32:
      characters += whitespace$1(previous);
      break;
    // \
    case 92:
      characters += escaping$1(caret$1() - 1, 7);
      continue;
    // /
    case 47:
      switch (peek$1()) {
        case 42:
        case 47:
          append$1(comment$1(commenter$1(next$1(), caret$1()), root, parent), declarations);
          break;
        default:
          characters += '/';
      }
      break;
    // {
    case 123 * variable:
      points[index++] = strlen$1(characters) * ampersand;
    // } ; \0
    case 125 * variable:
    case 59:
    case 0:
      switch (character) {
        // \0 }
        case 0:
        case 125:
          scanning = 0;
        // ;
        case 59 + offset:
          if (ampersand == -1) characters = replace$1(characters, /\f/g, '');
          if (property > 0 && strlen$1(characters) - length) append$1(property > 32 ? declaration$1(characters + ';', rule, parent, length - 1) : declaration$1(replace$1(characters, ' ', '') + ';', rule, parent, length - 2), declarations);
          break;
        // @ ;
        case 59:
          characters += ';';
        // { rule/at-rule
        default:
          append$1(reference = ruleset$1(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);
          if (character === 123) if (offset === 0) parse$1(characters, root, reference, reference, props, rulesets, length, points, children);else switch (atrule === 99 && charat$1(characters, 3) === 110 ? 100 : atrule) {
            // d l m s
            case 100:
            case 108:
            case 109:
            case 115:
              parse$1(value, reference, reference, rule && append$1(ruleset$1(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);
              break;
            default:
              parse$1(characters, reference, reference, reference, [''], children, 0, points, children);
          }
      }
      index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
      break;
    // :
    case 58:
      length = 1 + strlen$1(characters), property = previous;
    default:
      if (variable < 1) if (character == 123) --variable;else if (character == 125 && variable++ == 0 && prev$1() == 125) continue;
      switch (characters += from$1(character), character * variable) {
        // &
        case 38:
          ampersand = offset > 0 ? 1 : (characters += '\f', -1);
          break;
        // ,
        case 44:
          points[index++] = (strlen$1(characters) - 1) * ampersand, ampersand = 1;
          break;
        // @
        case 64:
          // -
          if (peek$1() === 45) characters += delimit$1(next$1());
          atrule = peek$1(), offset = length = strlen$1(type = characters += identifier$1(caret$1())), character++;
          break;
        // -
        case 45:
          if (previous === 45 && strlen$1(characters) == 2) variable = 0;
      }
  }
  return rulesets;
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} index
 * @param {number} offset
 * @param {string[]} rules
 * @param {number[]} points
 * @param {string} type
 * @param {string[]} props
 * @param {string[]} children
 * @param {number} length
 * @return {object}
 */
function ruleset$1(value, root, parent, index, offset, rules, points, type, props, children, length) {
  var post = offset - 1;
  var rule = offset === 0 ? rules : [''];
  var size = sizeof$1(rule);
  for (var i = 0, j = 0, k = 0; i < index; ++i) for (var x = 0, y = substr$1(value, post + 1, post = abs$1(j = points[i])), z = value; x < size; ++x) if (z = trim$1(j > 0 ? rule[x] + ' ' + y : replace$1(y, /&\f/g, rule[x]))) props[k++] = z;
  return node$1(value, root, parent, offset === 0 ? RULESET$1 : type, props, children, length);
}

/**
 * @param {number} value
 * @param {object} root
 * @param {object?} parent
 * @return {object}
 */
function comment$1(value, root, parent) {
  return node$1(value, root, parent, COMMENT$1, from$1(char$1()), substr$1(value, 2, -2), 0);
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} length
 * @return {object}
 */
function declaration$1(value, root, parent, length) {
  return node$1(value, root, parent, DECLARATION$1, substr$1(value, 0, length), substr$1(value, length + 1, -1), length);
}

/**
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function serialize$1(children, callback) {
  var output = '';
  var length = sizeof$1(children);
  for (var i = 0; i < length; i++) output += callback(children[i], i, children, callback) || '';
  return output;
}

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function stringify$1(element, index, children, callback) {
  switch (element.type) {
    case LAYER$1:
      if (element.children.length) break;
    case IMPORT$1:
    case DECLARATION$1:
      return element.return = element.return || element.value;
    case COMMENT$1:
      return '';
    case KEYFRAMES$1:
      return element.return = element.value + '{' + serialize$1(element.children, callback) + '}';
    case RULESET$1:
      element.value = element.props.join(',');
  }
  return strlen$1(children = serialize$1(element.children, callback)) ? element.return = element.value + '{' + children + '}' : '';
}

/**
 * @param {function[]} collection
 * @return {function}
 */
function middleware$1(collection) {
  var length = sizeof$1(collection);
  return function (element, index, children, callback) {
    var output = '';
    for (var i = 0; i < length; i++) output += collection[i](element, index, children, callback) || '';
    return output;
  };
}

/**
 * @param {function} callback
 * @return {function}
 */
function rulesheet$1(callback) {
  return function (element) {
    if (!element.root) if (element = element.return) callback(element);
  };
}

var weakMemoize = function weakMemoize(func) {
  var cache = new WeakMap();
  return function (arg) {
    if (cache.has(arg)) {
      // Use non-null assertion because we just checked that the cache `has` it
      // This allows us to remove `undefined` from the return value
      return cache.get(arg);
    }
    var ret = func(arg);
    cache.set(arg, ret);
    return ret;
  };
};

function memoize$2(fn) {
  var cache = Object.create(null);
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

var isBrowser$5 = typeof document !== 'undefined';
var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
  var previous = 0;
  var character = 0;
  while (true) {
    previous = character;
    character = peek$1(); // &\f

    if (previous === 38 && character === 12) {
      points[index] = 1;
    }
    if (token$1(character)) {
      break;
    }
    next$1();
  }
  return slice$1(begin, position$1);
};
var toRules = function toRules(parsed, points) {
  // pretend we've started with a comma
  var index = -1;
  var character = 44;
  do {
    switch (token$1(character)) {
      case 0:
        // &\f
        if (character === 38 && peek$1() === 12) {
          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
          // and when it should just concatenate the outer and inner selectors
          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
          points[index] = 1;
        }
        parsed[index] += identifierWithPointTracking(position$1 - 1, points, index);
        break;
      case 2:
        parsed[index] += delimit$1(character);
        break;
      case 4:
        // comma
        if (character === 44) {
          // colon
          parsed[++index] = peek$1() === 58 ? '&\f' : '';
          points[index] = parsed[index].length;
          break;
        }

      // fallthrough

      default:
        parsed[index] += from$1(character);
    }
  } while (character = next$1());
  return parsed;
};
var getRules = function getRules(value, points) {
  return dealloc$1(toRules(alloc$1(value), points));
}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11

var fixedElements = /* #__PURE__ */new WeakMap();
var compat = function compat(element) {
  if (element.type !== 'rule' || !element.parent ||
  // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element.length < 1) {
    return;
  }
  var value = element.value;
  var parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;
  while (parent.type !== 'rule') {
    parent = parent.parent;
    if (!parent) return;
  } // short-circuit for the simplest case

  if (element.props.length === 1 && value.charCodeAt(0) !== 58
  /* colon */ && !fixedElements.get(parent)) {
    return;
  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"

  if (isImplicitRule) {
    return;
  }
  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;
  for (var i = 0, k = 0; i < rules.length; i++) {
    for (var j = 0; j < parentRules.length; j++, k++) {
      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
    }
  }
};
var removeLabel = function removeLabel(element) {
  if (element.type === 'decl') {
    var value = element.value;
    if (
    // charcode for l
    value.charCodeAt(0) === 108 &&
    // charcode for b
    value.charCodeAt(2) === 98) {
      // this ignores label
      element["return"] = '';
      element.value = '';
    }
  }
};

/* eslint-disable no-fallthrough */

function prefix$1(value, length) {
  switch (hash$2(value, length)) {
    // color-adjust
    case 5103:
      return WEBKIT$1 + 'print-' + value + value;
    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT$1 + value + value;
    // appearance, user-select, transform, hyphens, text-size-adjust

    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT$1 + value + MOZ$1 + value + MS$1 + value + value;
    // flex, flex-direction

    case 6828:
    case 4268:
      return WEBKIT$1 + value + MS$1 + value + value;
    // order

    case 6165:
      return WEBKIT$1 + value + MS$1 + 'flex-' + value + value;
    // align-items

    case 5187:
      return WEBKIT$1 + value + replace$1(value, /(\w+).+(:[^]+)/, WEBKIT$1 + 'box-$1$2' + MS$1 + 'flex-$1$2') + value;
    // align-self

    case 5443:
      return WEBKIT$1 + value + MS$1 + 'flex-item-' + replace$1(value, /flex-|-self/, '') + value;
    // align-content

    case 4675:
      return WEBKIT$1 + value + MS$1 + 'flex-line-pack' + replace$1(value, /align-content|flex-|-self/, '') + value;
    // flex-shrink

    case 5548:
      return WEBKIT$1 + value + MS$1 + replace$1(value, 'shrink', 'negative') + value;
    // flex-basis

    case 5292:
      return WEBKIT$1 + value + MS$1 + replace$1(value, 'basis', 'preferred-size') + value;
    // flex-grow

    case 6060:
      return WEBKIT$1 + 'box-' + replace$1(value, '-grow', '') + WEBKIT$1 + value + MS$1 + replace$1(value, 'grow', 'positive') + value;
    // transition

    case 4554:
      return WEBKIT$1 + replace$1(value, /([^-])(transform)/g, '$1' + WEBKIT$1 + '$2') + value;
    // cursor

    case 6187:
      return replace$1(replace$1(replace$1(value, /(zoom-|grab)/, WEBKIT$1 + '$1'), /(image-set)/, WEBKIT$1 + '$1'), value, '') + value;
    // background, background-image

    case 5495:
    case 3959:
      return replace$1(value, /(image-set\([^]*)/, WEBKIT$1 + '$1' + '$`$1');
    // justify-content

    case 4968:
      return replace$1(replace$1(value, /(.+:)(flex-)?(.*)/, WEBKIT$1 + 'box-pack:$3' + MS$1 + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT$1 + value + value;
    // (margin|padding)-inline-(start|end)

    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace$1(value, /(.+)-inline(.+)/, WEBKIT$1 + '$1$2') + value;
    // (min|max)?(width|height|inline-size|block-size)

    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      // stretch, max-content, min-content, fill-available
      if (strlen$1(value) - 1 - length > 6) switch (charat$1(value, length + 1)) {
        // (m)ax-content, (m)in-content
        case 109:
          // -
          if (charat$1(value, length + 4) !== 45) break;
        // (f)ill-available, (f)it-content

        case 102:
          return replace$1(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT$1 + '$2-$3' + '$1' + MOZ$1 + (charat$1(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
        // (s)tretch

        case 115:
          return ~indexof$1(value, 'stretch') ? prefix$1(replace$1(value, 'stretch', 'fill-available'), length) + value : value;
      }
      break;
    // position: sticky

    case 4949:
      // (s)ticky?
      if (charat$1(value, length + 1) !== 115) break;
    // display: (flex|inline-flex)

    case 6444:
      switch (charat$1(value, strlen$1(value) - 3 - (~indexof$1(value, '!important') && 10))) {
        // stic(k)y
        case 107:
          return replace$1(value, ':', ':' + WEBKIT$1) + value;
        // (inline-)?fl(e)x

        case 101:
          return replace$1(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + WEBKIT$1 + (charat$1(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT$1 + '$2$3' + '$1' + MS$1 + '$2box$3') + value;
      }
      break;
    // writing-mode

    case 5936:
      switch (charat$1(value, length + 11)) {
        // vertical-l(r)
        case 114:
          return WEBKIT$1 + value + MS$1 + replace$1(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
        // vertical-r(l)

        case 108:
          return WEBKIT$1 + value + MS$1 + replace$1(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
        // horizontal(-)tb

        case 45:
          return WEBKIT$1 + value + MS$1 + replace$1(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
      }
      return WEBKIT$1 + value + MS$1 + value + value;
  }
  return value;
}
var prefixer$1 = function prefixer(element, index, children, callback) {
  if (element.length > -1) if (!element["return"]) switch (element.type) {
    case DECLARATION$1:
      element["return"] = prefix$1(element.value, element.length);
      break;
    case KEYFRAMES$1:
      return serialize$1([copy$1(element, {
        value: replace$1(element.value, '@', '@' + WEBKIT$1)
      })], callback);
    case RULESET$1:
      if (element.length) return combine$1(element.props, function (value) {
        switch (match$1(value, /(::plac\w+|:read-\w+)/)) {
          // :read-(only|write)
          case ':read-only':
          case ':read-write':
            return serialize$1([copy$1(element, {
              props: [replace$1(value, /:(read-\w+)/, ':' + MOZ$1 + '$1')]
            })], callback);
          // :placeholder

          case '::placeholder':
            return serialize$1([copy$1(element, {
              props: [replace$1(value, /:(plac\w+)/, ':' + WEBKIT$1 + 'input-$1')]
            }), copy$1(element, {
              props: [replace$1(value, /:(plac\w+)/, ':' + MOZ$1 + '$1')]
            }), copy$1(element, {
              props: [replace$1(value, /:(plac\w+)/, MS$1 + 'input-$1')]
            })], callback);
        }
        return '';
      });
  }
};
var getServerStylisCache = isBrowser$5 ? undefined : weakMemoize(function () {
  return memoize$2(function () {
    return {};
  });
});
var defaultStylisPlugins = [prefixer$1];
var createCache = function createCache(options) {
  var key = options.key;
  if (isBrowser$5 && key === 'css') {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
    // note this very very intentionally targets all style elements regardless of the key to ensure
    // that creating a cache works inside of render of a React component

    Array.prototype.forEach.call(ssrStyles, function (node) {
      // we want to only move elements which have a space in the data-emotion attribute value
      // because that indicates that it is an Emotion 11 server-side rendered style elements
      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
      // will not result in the Emotion 10 styles being destroyed
      var dataEmotionAttribute = node.getAttribute('data-emotion');
      if (dataEmotionAttribute.indexOf(' ') === -1) {
        return;
      }
      document.head.appendChild(node);
      node.setAttribute('data-s', '');
    });
  }
  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
  var inserted = {};
  var container;
  var nodesToHydrate = [];
  if (isBrowser$5) {
    container = options.container || document.head;
    Array.prototype.forEach.call(
    // this means we will ignore elements which don't have a space in them which
    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
      var attrib = node.getAttribute("data-emotion").split(' ');
      for (var i = 1; i < attrib.length; i++) {
        inserted[attrib[i]] = true;
      }
      nodesToHydrate.push(node);
    });
  }
  var _insert;
  var omnipresentPlugins = [compat, removeLabel];
  if (!getServerStylisCache) {
    var currentSheet;
    var finalizingPlugins = [stringify$1, rulesheet$1(function (rule) {
      currentSheet.insert(rule);
    })];
    var serializer = middleware$1(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis(styles) {
      return serialize$1(compile$1(styles), serializer);
    };
    _insert = function insert(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;
      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  } else {
    var _finalizingPlugins = [stringify$1];
    var _serializer = middleware$1(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));
    var _stylis = function _stylis(styles) {
      return serialize$1(compile$1(styles), _serializer);
    };
    var serverStylisCache = getServerStylisCache(stylisPlugins)(key);
    var getRules = function getRules(selector, serialized) {
      var name = serialized.name;
      if (serverStylisCache[name] === undefined) {
        serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      }
      return serverStylisCache[name];
    };
    _insert = function _insert(selector, serialized, sheet, shouldCache) {
      var name = serialized.name;
      var rules = getRules(selector, serialized);
      if (cache.compat === undefined) {
        // in regular mode, we don't set the styles on the inserted cache
        // since we don't need to and that would be wasting memory
        // we return them so that they are rendered in a style tag
        if (shouldCache) {
          cache.inserted[name] = true;
        }
        return rules;
      } else {
        // in compat mode, we put the styles on the inserted cache so
        // that emotion-server can pull out the styles
        // except when we don't want to cache it which was in Global but now
        // is nowhere but we don't want to do a major right now
        // and just in case we're going to leave the case here
        // it's also not affecting client side bundle size
        // so it's really not a big deal
        if (shouldCache) {
          cache.inserted[name] = rules;
        } else {
          return rules;
        }
      }
    };
  }
  var cache = {
    key: key,
    sheet: new StyleSheet({
      key: key,
      container: container,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend,
      insertionPoint: options.insertionPoint
    }),
    nonce: options.nonce,
    inserted: inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs$1 (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var reactIs$3 = {exports: {}};

var reactIs_production_min$1 = {};

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_production_min$1;

function requireReactIs_production_min$1 () {
	if (hasRequiredReactIs_production_min$1) return reactIs_production_min$1;
	hasRequiredReactIs_production_min$1 = 1;

	var b = "function" === typeof Symbol && Symbol.for,
	  c = b ? Symbol.for("react.element") : 60103,
	  d = b ? Symbol.for("react.portal") : 60106,
	  e = b ? Symbol.for("react.fragment") : 60107,
	  f = b ? Symbol.for("react.strict_mode") : 60108,
	  g = b ? Symbol.for("react.profiler") : 60114,
	  h = b ? Symbol.for("react.provider") : 60109,
	  k = b ? Symbol.for("react.context") : 60110,
	  l = b ? Symbol.for("react.async_mode") : 60111,
	  m = b ? Symbol.for("react.concurrent_mode") : 60111,
	  n = b ? Symbol.for("react.forward_ref") : 60112,
	  p = b ? Symbol.for("react.suspense") : 60113,
	  q = b ? Symbol.for("react.suspense_list") : 60120,
	  r = b ? Symbol.for("react.memo") : 60115,
	  t = b ? Symbol.for("react.lazy") : 60116,
	  v = b ? Symbol.for("react.block") : 60121,
	  w = b ? Symbol.for("react.fundamental") : 60117,
	  x = b ? Symbol.for("react.responder") : 60118,
	  y = b ? Symbol.for("react.scope") : 60119;
	function z(a) {
	  if ("object" === typeof a && null !== a) {
	    var u = a.$$typeof;
	    switch (u) {
	      case c:
	        switch (a = a.type, a) {
	          case l:
	          case m:
	          case e:
	          case g:
	          case f:
	          case p:
	            return a;
	          default:
	            switch (a = a && a.$$typeof, a) {
	              case k:
	              case n:
	              case t:
	              case r:
	              case h:
	                return a;
	              default:
	                return u;
	            }
	        }
	      case d:
	        return u;
	    }
	  }
	}
	function A(a) {
	  return z(a) === m;
	}
	reactIs_production_min$1.AsyncMode = l;
	reactIs_production_min$1.ConcurrentMode = m;
	reactIs_production_min$1.ContextConsumer = k;
	reactIs_production_min$1.ContextProvider = h;
	reactIs_production_min$1.Element = c;
	reactIs_production_min$1.ForwardRef = n;
	reactIs_production_min$1.Fragment = e;
	reactIs_production_min$1.Lazy = t;
	reactIs_production_min$1.Memo = r;
	reactIs_production_min$1.Portal = d;
	reactIs_production_min$1.Profiler = g;
	reactIs_production_min$1.StrictMode = f;
	reactIs_production_min$1.Suspense = p;
	reactIs_production_min$1.isAsyncMode = function (a) {
	  return A(a) || z(a) === l;
	};
	reactIs_production_min$1.isConcurrentMode = A;
	reactIs_production_min$1.isContextConsumer = function (a) {
	  return z(a) === k;
	};
	reactIs_production_min$1.isContextProvider = function (a) {
	  return z(a) === h;
	};
	reactIs_production_min$1.isElement = function (a) {
	  return "object" === typeof a && null !== a && a.$$typeof === c;
	};
	reactIs_production_min$1.isForwardRef = function (a) {
	  return z(a) === n;
	};
	reactIs_production_min$1.isFragment = function (a) {
	  return z(a) === e;
	};
	reactIs_production_min$1.isLazy = function (a) {
	  return z(a) === t;
	};
	reactIs_production_min$1.isMemo = function (a) {
	  return z(a) === r;
	};
	reactIs_production_min$1.isPortal = function (a) {
	  return z(a) === d;
	};
	reactIs_production_min$1.isProfiler = function (a) {
	  return z(a) === g;
	};
	reactIs_production_min$1.isStrictMode = function (a) {
	  return z(a) === f;
	};
	reactIs_production_min$1.isSuspense = function (a) {
	  return z(a) === p;
	};
	reactIs_production_min$1.isValidElementType = function (a) {
	  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
	};
	reactIs_production_min$1.typeOf = z;
	return reactIs_production_min$1;
}

var reactIs_development$2 = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development$2;

function requireReactIs_development$2 () {
	if (hasRequiredReactIs_development$2) return reactIs_development$2;
	hasRequiredReactIs_development$2 = 1;

	if (process.env.NODE_ENV !== "production") {
	  (function () {

	    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	    // nor polyfill, then a plain number is used for performance.
	    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	    // (unstable) APIs that have been removed. Can we remove the symbols?

	    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
	    function isValidElementType(type) {
	      return typeof type === 'string' || typeof type === 'function' ||
	      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	    }
	    function typeOf(object) {
	      if (typeof object === 'object' && object !== null) {
	        var $$typeof = object.$$typeof;
	        switch ($$typeof) {
	          case REACT_ELEMENT_TYPE:
	            var type = object.type;
	            switch (type) {
	              case REACT_ASYNC_MODE_TYPE:
	              case REACT_CONCURRENT_MODE_TYPE:
	              case REACT_FRAGMENT_TYPE:
	              case REACT_PROFILER_TYPE:
	              case REACT_STRICT_MODE_TYPE:
	              case REACT_SUSPENSE_TYPE:
	                return type;
	              default:
	                var $$typeofType = type && type.$$typeof;
	                switch ($$typeofType) {
	                  case REACT_CONTEXT_TYPE:
	                  case REACT_FORWARD_REF_TYPE:
	                  case REACT_LAZY_TYPE:
	                  case REACT_MEMO_TYPE:
	                  case REACT_PROVIDER_TYPE:
	                    return $$typeofType;
	                  default:
	                    return $$typeof;
	                }
	            }
	          case REACT_PORTAL_TYPE:
	            return $$typeof;
	        }
	      }
	      return undefined;
	    } // AsyncMode is deprecated along with isAsyncMode

	    var AsyncMode = REACT_ASYNC_MODE_TYPE;
	    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	    var ContextConsumer = REACT_CONTEXT_TYPE;
	    var ContextProvider = REACT_PROVIDER_TYPE;
	    var Element = REACT_ELEMENT_TYPE;
	    var ForwardRef = REACT_FORWARD_REF_TYPE;
	    var Fragment = REACT_FRAGMENT_TYPE;
	    var Lazy = REACT_LAZY_TYPE;
	    var Memo = REACT_MEMO_TYPE;
	    var Portal = REACT_PORTAL_TYPE;
	    var Profiler = REACT_PROFILER_TYPE;
	    var StrictMode = REACT_STRICT_MODE_TYPE;
	    var Suspense = REACT_SUSPENSE_TYPE;
	    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	    function isAsyncMode(object) {
	      {
	        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	        }
	      }
	      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	    }
	    function isConcurrentMode(object) {
	      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	    }
	    function isContextConsumer(object) {
	      return typeOf(object) === REACT_CONTEXT_TYPE;
	    }
	    function isContextProvider(object) {
	      return typeOf(object) === REACT_PROVIDER_TYPE;
	    }
	    function isElement(object) {
	      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	    }
	    function isForwardRef(object) {
	      return typeOf(object) === REACT_FORWARD_REF_TYPE;
	    }
	    function isFragment(object) {
	      return typeOf(object) === REACT_FRAGMENT_TYPE;
	    }
	    function isLazy(object) {
	      return typeOf(object) === REACT_LAZY_TYPE;
	    }
	    function isMemo(object) {
	      return typeOf(object) === REACT_MEMO_TYPE;
	    }
	    function isPortal(object) {
	      return typeOf(object) === REACT_PORTAL_TYPE;
	    }
	    function isProfiler(object) {
	      return typeOf(object) === REACT_PROFILER_TYPE;
	    }
	    function isStrictMode(object) {
	      return typeOf(object) === REACT_STRICT_MODE_TYPE;
	    }
	    function isSuspense(object) {
	      return typeOf(object) === REACT_SUSPENSE_TYPE;
	    }
	    reactIs_development$2.AsyncMode = AsyncMode;
	    reactIs_development$2.ConcurrentMode = ConcurrentMode;
	    reactIs_development$2.ContextConsumer = ContextConsumer;
	    reactIs_development$2.ContextProvider = ContextProvider;
	    reactIs_development$2.Element = Element;
	    reactIs_development$2.ForwardRef = ForwardRef;
	    reactIs_development$2.Fragment = Fragment;
	    reactIs_development$2.Lazy = Lazy;
	    reactIs_development$2.Memo = Memo;
	    reactIs_development$2.Portal = Portal;
	    reactIs_development$2.Profiler = Profiler;
	    reactIs_development$2.StrictMode = StrictMode;
	    reactIs_development$2.Suspense = Suspense;
	    reactIs_development$2.isAsyncMode = isAsyncMode;
	    reactIs_development$2.isConcurrentMode = isConcurrentMode;
	    reactIs_development$2.isContextConsumer = isContextConsumer;
	    reactIs_development$2.isContextProvider = isContextProvider;
	    reactIs_development$2.isElement = isElement;
	    reactIs_development$2.isForwardRef = isForwardRef;
	    reactIs_development$2.isFragment = isFragment;
	    reactIs_development$2.isLazy = isLazy;
	    reactIs_development$2.isMemo = isMemo;
	    reactIs_development$2.isPortal = isPortal;
	    reactIs_development$2.isProfiler = isProfiler;
	    reactIs_development$2.isStrictMode = isStrictMode;
	    reactIs_development$2.isSuspense = isSuspense;
	    reactIs_development$2.isValidElementType = isValidElementType;
	    reactIs_development$2.typeOf = typeOf;
	  })();
	}
	return reactIs_development$2;
}

if (process.env.NODE_ENV === 'production') {
  reactIs$3.exports = requireReactIs_production_min$1();
} else {
  reactIs$3.exports = requireReactIs_development$2();
}

var reactIsExports$1 = reactIs$3.exports;

var reactIs$2 = reactIsExports$1;
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs$2.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs$2.Memo] = MEMO_STATICS;

var isBrowser$4 = typeof document !== 'undefined';
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = '';
  classNames.split(' ').forEach(function (className) {
    if (registered[className] !== undefined) {
      registeredStyles.push(registered[className] + ";");
    } else if (className) {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;
  if (
  // we only need to add the styles to the registered cache if the
  // class name could be used further down
  // the tree but if it's a string tag, we know it won't
  // so we don't have to add it to registered cache.
  // this improves memory usage since we can avoid storing the whole style string
  (isStringTag === false ||
  // we need to always store it if we're in compat mode and
  // in node since emotion-server relies on whether a style is in
  // the registered cache to know whether a style is global or not
  // also, note that this check will be dead code eliminated in the browser
  isBrowser$4 === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
  registerStyles(cache, serialized, isStringTag);
  var className = cache.key + "-" + serialized.name;
  if (cache.inserted[serialized.name] === undefined) {
    var stylesForSSR = '';
    var current = serialized;
    do {
      var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);
      if (!isBrowser$4 && maybeStyles !== undefined) {
        stylesForSSR += maybeStyles;
      }
      current = current.next;
    } while (current !== undefined);
    if (!isBrowser$4 && stylesForSSR.length !== 0) {
      return stylesForSSR;
    }
  }
};

/* eslint-disable */
// Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
  // 'm' and 'r' are mixing constants generated offline.
  // They're not really 'magic', they just happen to work well.
  // const m = 0x5bd1e995;
  // const r = 24;
  // Initialize the hash
  var h = 0; // Mix 4 bytes at a time into the hash

  var k,
    i = 0,
    len = str.length;
  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
    k = /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
    k ^= /* k >>> r: */
    k >>> 24;
    h = /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^ /* Math.imul(h, m): */
    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Handle the last few bytes of the input array

  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
    case 2:
      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
    case 1:
      h ^= str.charCodeAt(i) & 0xff;
      h = /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Do a few final mixes of the hash to ensure the last few
  // bytes are well-incorporated.

  h ^= h >>> 13;
  h = /* Math.imul(h, m): */
  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}

var unitlessKeys$1 = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  scale: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

var isDevelopment$2 = false;
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty(property) {
  return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue(value) {
  return value != null && typeof value !== 'boolean';
};
var processStyleName = /* #__PURE__ */memoize$2(function (styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});
var processStyleValue = function processStyleValue(key, value) {
  switch (key) {
    case 'animation':
    case 'animationName':
      {
        if (typeof value === 'string') {
          return value.replace(animationRegex, function (match, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
  }
  if (unitlessKeys$1[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
    return value + 'px';
  }
  return value;
};
var noComponentSelectorMessage = 'Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.';
function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return '';
  }
  var componentSelector = interpolation;
  if (componentSelector.__emotion_styles !== undefined) {
    return componentSelector;
  }
  switch (typeof interpolation) {
    case 'boolean':
      {
        return '';
      }
    case 'object':
      {
        var keyframes = interpolation;
        if (keyframes.anim === 1) {
          cursor = {
            name: keyframes.name,
            styles: keyframes.styles,
            next: cursor
          };
          return keyframes.name;
        }
        var serializedStyles = interpolation;
        if (serializedStyles.styles !== undefined) {
          var next = serializedStyles.next;
          if (next !== undefined) {
            // not the most efficient thing ever but this is a pretty rare case
            // and there will be very few iterations of this generally
            while (next !== undefined) {
              cursor = {
                name: next.name,
                styles: next.styles,
                next: cursor
              };
              next = next.next;
            }
          }
          var styles = serializedStyles.styles + ";";
          return styles;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
    case 'function':
      {
        if (mergedProps !== undefined) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        }
        break;
      }
  } // finalize string values (regular strings and functions interpolated into css calls)

  var asString = interpolation;
  if (registered == null) {
    return asString;
  }
  var cached = registered[asString];
  return cached !== undefined ? cached : asString;
}
function createStringFromObject(mergedProps, registered, obj) {
  var string = '';
  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var key in obj) {
      var value = obj[key];
      if (typeof value !== 'object') {
        var asString = value;
        if (registered != null && registered[asString] !== undefined) {
          string += key + "{" + registered[asString] + "}";
        } else if (isProcessableValue(asString)) {
          string += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
        }
      } else {
        if (key === 'NO_COMPONENT_SELECTOR' && isDevelopment$2) {
          throw new Error(noComponentSelectorMessage);
        }
        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(key) + ":" + processStyleValue(key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);
          switch (key) {
            case 'animation':
            case 'animationName':
              {
                string += processStyleName(key) + ":" + interpolated + ";";
                break;
              }
            default:
              {
                string += key + "{" + interpolated + "}";
              }
          }
        }
      }
    }
  }
  return string;
}
var labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g; // this is the cursor for keyframes
// keyframes are stored on the SerializedStyles object as a linked list

var cursor;
function serializeStyles(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
    return args[0];
  }
  var stringMode = true;
  var styles = '';
  cursor = undefined;
  var strings = args[0];
  if (strings == null || strings.raw === undefined) {
    stringMode = false;
    styles += handleInterpolation(mergedProps, registered, strings);
  } else {
    var asTemplateStringsArr = strings;
    styles += asTemplateStringsArr[0];
  } // we start at 1 since we've already handled the first arg

  for (var i = 1; i < args.length; i++) {
    styles += handleInterpolation(mergedProps, registered, args[i]);
    if (stringMode) {
      var templateStringsArr = strings;
      styles += templateStringsArr[i];
    }
  } // using a global regex with .exec is stateful so lastIndex has to be reset each time

  labelPattern.lastIndex = 0;
  var identifierName = '';
  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

  while ((match = labelPattern.exec(styles)) !== null) {
    identifierName += '-' + match[1];
  }
  var name = murmur2(styles) + identifierName;
  return {
    name: name,
    styles: styles,
    next: cursor
  };
}

var isBrowser$3 = typeof document !== 'undefined';
var syncFallback = function syncFallback(create) {
  return create();
};
var useInsertionEffect = React__namespace['useInsertion' + 'Effect'] ? React__namespace['useInsertion' + 'Effect'] : false;
var useInsertionEffectAlwaysWithSyncFallback = !isBrowser$3 ? syncFallback : useInsertionEffect || syncFallback;
var useInsertionEffectWithLayoutFallback = useInsertionEffect || React__namespace.useLayoutEffect;

var isDevelopment$1 = false;
var isBrowser$2 = typeof document !== 'undefined';
var EmotionCacheContext = /* #__PURE__ */React__namespace.createContext(
// we're doing this to avoid preconstruct's dead code elimination in this one case
// because this module is primarily intended for the browser and node
// but it's also required in react native and similar environments sometimes
// and we could have a special build just for that
// but this is much easier and the native packages
// might use a different theme context in the future anyway
typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({
  key: 'css'
}) : null);
var CacheProvider = EmotionCacheContext.Provider;
var withEmotionCache = function withEmotionCache(func) {
  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    // the cache will never be null in the browser
    var cache = React.useContext(EmotionCacheContext);
    return func(props, cache, ref);
  });
};
if (!isBrowser$2) {
  withEmotionCache = function withEmotionCache(func) {
    return function (props) {
      var cache = React.useContext(EmotionCacheContext);
      if (cache === null) {
        // yes, we're potentially creating this on every render
        // it doesn't actually matter though since it's only on the server
        // so there will only every be a single render
        // that could change in the future because of suspense and etc. but for now,
        // this works and i don't want to optimise for a future thing that we aren't sure about
        cache = createCache({
          key: 'css'
        });
        return /*#__PURE__*/React__namespace.createElement(EmotionCacheContext.Provider, {
          value: cache
        }, func(props, cache));
      } else {
        return func(props, cache);
      }
    };
  };
}
var ThemeContext$2 = /* #__PURE__ */React__namespace.createContext({});
var hasOwn = {}.hasOwnProperty;
var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
var createEmotionProps = function createEmotionProps(type, props) {
  var newProps = {};
  for (var _key in props) {
    if (hasOwn.call(props, _key)) {
      newProps[_key] = props[_key];
    }
  }
  newProps[typePropName] = type; // Runtime labeling is an opt-in feature because:

  return newProps;
};
var Insertion$1 = function Insertion(_ref) {
  var cache = _ref.cache,
    serialized = _ref.serialized,
    isStringTag = _ref.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  var rules = useInsertionEffectAlwaysWithSyncFallback(function () {
    return insertStyles(cache, serialized, isStringTag);
  });
  if (!isBrowser$2 && rules !== undefined) {
    var _ref2;
    var serializedNames = serialized.name;
    var next = serialized.next;
    while (next !== undefined) {
      serializedNames += ' ' + next.name;
      next = next.next;
    }
    return /*#__PURE__*/React__namespace.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
      __html: rules
    }, _ref2.nonce = cache.sheet.nonce, _ref2));
  }
  return null;
};
var Emotion = /* #__PURE__ */withEmotionCache(function (props, cache, ref) {
  var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
  // not passing the registered cache to serializeStyles because it would
  // make certain babel optimisations not possible

  if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
    cssProp = cache.registered[cssProp];
  }
  var WrappedComponent = props[typePropName];
  var registeredStyles = [cssProp];
  var className = '';
  if (typeof props.className === 'string') {
    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
  } else if (props.className != null) {
    className = props.className + " ";
  }
  var serialized = serializeStyles(registeredStyles, undefined, React__namespace.useContext(ThemeContext$2));
  className += cache.key + "-" + serialized.name;
  var newProps = {};
  for (var _key2 in props) {
    if (hasOwn.call(props, _key2) && _key2 !== 'css' && _key2 !== typePropName && !isDevelopment$1) {
      newProps[_key2] = props[_key2];
    }
  }
  newProps.className = className;
  if (ref) {
    newProps.ref = ref;
  }
  return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement(Insertion$1, {
    cache: cache,
    serialized: serialized,
    isStringTag: typeof WrappedComponent === 'string'
  }), /*#__PURE__*/React__namespace.createElement(WrappedComponent, newProps));
});
var Emotion$1 = Emotion;

var jsx = function jsx(type, props) {
  // eslint-disable-next-line prefer-rest-params
  var args = arguments;
  if (props == null || !hasOwn.call(props, 'css')) {
    return React__namespace.createElement.apply(undefined, args);
  }
  var argsLength = args.length;
  var createElementArgArray = new Array(argsLength);
  createElementArgArray[0] = Emotion$1;
  createElementArgArray[1] = createEmotionProps(type, props);
  for (var i = 2; i < argsLength; i++) {
    createElementArgArray[i] = args[i];
  }
  return React__namespace.createElement.apply(null, createElementArgArray);
};
(function (_jsx) {
  var JSX;
  (function (_JSX) {})(JSX || (JSX = _jsx.JSX || (_jsx.JSX = {})));
})(jsx || (jsx = {}));

// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
// initial client-side render from SSR, use place of hydrating tag

var Global = /* #__PURE__ */withEmotionCache(function (props, cache) {
  var styles = props.styles;
  var serialized = serializeStyles([styles], undefined, React__namespace.useContext(ThemeContext$2));
  if (!isBrowser$2) {
    var _ref;
    var serializedNames = serialized.name;
    var serializedStyles = serialized.styles;
    var next = serialized.next;
    while (next !== undefined) {
      serializedNames += ' ' + next.name;
      serializedStyles += next.styles;
      next = next.next;
    }
    var shouldCache = cache.compat === true;
    var rules = cache.insert("", {
      name: serializedNames,
      styles: serializedStyles
    }, cache.sheet, shouldCache);
    if (shouldCache) {
      return null;
    }
    return /*#__PURE__*/React__namespace.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
      __html: rules
    }, _ref.nonce = cache.sheet.nonce, _ref));
  } // yes, i know these hooks are used conditionally
  // but it is based on a constant that will never change at runtime
  // it's effectively like having two implementations and switching them out
  // so it's not actually breaking anything

  var sheetRef = React__namespace.useRef();
  useInsertionEffectWithLayoutFallback(function () {
    var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675

    var sheet = new cache.sheet.constructor({
      key: key,
      nonce: cache.sheet.nonce,
      container: cache.sheet.container,
      speedy: cache.sheet.isSpeedy
    });
    var rehydrating = false;
    var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");
    if (cache.sheet.tags.length) {
      sheet.before = cache.sheet.tags[0];
    }
    if (node !== null) {
      rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

      node.setAttribute('data-emotion', key);
      sheet.hydrate([node]);
    }
    sheetRef.current = [sheet, rehydrating];
    return function () {
      sheet.flush();
    };
  }, [cache]);
  useInsertionEffectWithLayoutFallback(function () {
    var sheetRefCurrent = sheetRef.current;
    var sheet = sheetRefCurrent[0],
      rehydrating = sheetRefCurrent[1];
    if (rehydrating) {
      sheetRefCurrent[1] = false;
      return;
    }
    if (serialized.next !== undefined) {
      // insert keyframes
      insertStyles(cache, serialized.next, true);
    }
    if (sheet.tags.length) {
      // if this doesn't exist then it will be null so the style element will be appended
      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
      sheet.before = element;
      sheet.flush();
    }
    cache.insert("", serialized, sheet, false);
  }, [cache, serialized.name]);
  return null;
});
function css() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return serializeStyles(args);
}
function keyframes() {
  var insertable = css.apply(void 0, arguments);
  var name = "animation-" + insertable.name;
  return {
    name: name,
    styles: "@keyframes " + name + "{" + insertable.styles + "}",
    anim: 1,
    toString: function toString() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
}

// eslint-disable-next-line no-undef
var reactPropsRegex$1 = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

var isPropValid$1 = /* #__PURE__ */memoize$2(function (prop) {
  return reactPropsRegex$1.test(prop) || prop.charCodeAt(0) === 111
  /* o */ && prop.charCodeAt(1) === 110
  /* n */ && prop.charCodeAt(2) < 91;
}
/* Z+1 */);

var isBrowser$1 = typeof document !== 'undefined';
var isDevelopment = false;
var testOmitPropsOnStringTag = isPropValid$1;
var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
  return key !== 'theme';
};
var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
  return typeof tag === 'string' &&
  // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
  var shouldForwardProp;
  if (options) {
    var optionsShouldForwardProp = options.shouldForwardProp;
    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
    } : optionsShouldForwardProp;
  }
  if (typeof shouldForwardProp !== 'function' && isReal) {
    shouldForwardProp = tag.__emotion_forwardProp;
  }
  return shouldForwardProp;
};
var Insertion = function Insertion(_ref) {
  var cache = _ref.cache,
    serialized = _ref.serialized,
    isStringTag = _ref.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  var rules = useInsertionEffectAlwaysWithSyncFallback(function () {
    return insertStyles(cache, serialized, isStringTag);
  });
  if (!isBrowser$1 && rules !== undefined) {
    var _ref2;
    var serializedNames = serialized.name;
    var next = serialized.next;
    while (next !== undefined) {
      serializedNames += ' ' + next.name;
      next = next.next;
    }
    return /*#__PURE__*/React__namespace.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
      __html: rules
    }, _ref2.nonce = cache.sheet.nonce, _ref2));
  }
  return null;
};
var createStyled$3 = function createStyled(tag, options) {
  var isReal = tag.__emotion_real === tag;
  var baseTag = isReal && tag.__emotion_base || tag;
  var identifierName;
  var targetClassName;
  if (options !== undefined) {
    identifierName = options.label;
    targetClassName = options.target;
  }
  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
  var shouldUseAs = !defaultShouldForwardProp('as');
  return function () {
    // eslint-disable-next-line prefer-rest-params
    var args = arguments;
    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];
    if (identifierName !== undefined) {
      styles.push("label:" + identifierName + ";");
    }
    if (args[0] == null || args[0].raw === undefined) {
      // eslint-disable-next-line prefer-spread
      styles.push.apply(styles, args);
    } else {
      var templateStringsArr = args[0];
      styles.push(templateStringsArr[0]);
      var len = args.length;
      var i = 1;
      for (; i < len; i++) {
        styles.push(args[i], templateStringsArr[i]);
      }
    }
    var Styled = withEmotionCache(function (props, cache, ref) {
      var FinalTag = shouldUseAs && props.as || baseTag;
      var className = '';
      var classInterpolations = [];
      var mergedProps = props;
      if (props.theme == null) {
        mergedProps = {};
        for (var key in props) {
          mergedProps[key] = props[key];
        }
        mergedProps.theme = React__namespace.useContext(ThemeContext$2);
      }
      if (typeof props.className === 'string') {
        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
      } else if (props.className != null) {
        className = props.className + " ";
      }
      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
      className += cache.key + "-" + serialized.name;
      if (targetClassName !== undefined) {
        className += " " + targetClassName;
      }
      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
      var newProps = {};
      for (var _key in props) {
        if (shouldUseAs && _key === 'as') continue;
        if (finalShouldForwardProp(_key)) {
          newProps[_key] = props[_key];
        }
      }
      newProps.className = className;
      if (ref) {
        newProps.ref = ref;
      }
      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement(Insertion, {
        cache: cache,
        serialized: serialized,
        isStringTag: typeof FinalTag === 'string'
      }), /*#__PURE__*/React__namespace.createElement(FinalTag, newProps));
    });
    Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
    Styled.defaultProps = tag.defaultProps;
    Styled.__emotion_real = Styled;
    Styled.__emotion_base = baseTag;
    Styled.__emotion_styles = styles;
    Styled.__emotion_forwardProp = shouldForwardProp;
    Object.defineProperty(Styled, 'toString', {
      value: function value() {
        if (targetClassName === undefined && isDevelopment) {
          return 'NO_COMPONENT_SELECTOR';
        }
        return "." + targetClassName;
      }
    });
    Styled.withComponent = function (nextTag, nextOptions) {
      var newStyled = createStyled(nextTag, _extends$5({}, options, nextOptions, {
        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
      }));
      return newStyled.apply(void 0, styles);
    };
    return Styled;
  };
};

var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr',
// SVG
'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

// bind it to avoid mutating the original function
var newStyled = createStyled$3.bind(null);
tags.forEach(function (tagName) {
  newStyled[tagName] = newStyled(tagName);
});

var propTypes = {exports: {}};

var reactIs$1 = {exports: {}};

var reactIs_production_min = {};

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_production_min;

function requireReactIs_production_min () {
	if (hasRequiredReactIs_production_min) return reactIs_production_min;
	hasRequiredReactIs_production_min = 1;

	var b = "function" === typeof Symbol && Symbol.for,
	  c = b ? Symbol.for("react.element") : 60103,
	  d = b ? Symbol.for("react.portal") : 60106,
	  e = b ? Symbol.for("react.fragment") : 60107,
	  f = b ? Symbol.for("react.strict_mode") : 60108,
	  g = b ? Symbol.for("react.profiler") : 60114,
	  h = b ? Symbol.for("react.provider") : 60109,
	  k = b ? Symbol.for("react.context") : 60110,
	  l = b ? Symbol.for("react.async_mode") : 60111,
	  m = b ? Symbol.for("react.concurrent_mode") : 60111,
	  n = b ? Symbol.for("react.forward_ref") : 60112,
	  p = b ? Symbol.for("react.suspense") : 60113,
	  q = b ? Symbol.for("react.suspense_list") : 60120,
	  r = b ? Symbol.for("react.memo") : 60115,
	  t = b ? Symbol.for("react.lazy") : 60116,
	  v = b ? Symbol.for("react.block") : 60121,
	  w = b ? Symbol.for("react.fundamental") : 60117,
	  x = b ? Symbol.for("react.responder") : 60118,
	  y = b ? Symbol.for("react.scope") : 60119;
	function z(a) {
	  if ("object" === typeof a && null !== a) {
	    var u = a.$$typeof;
	    switch (u) {
	      case c:
	        switch (a = a.type, a) {
	          case l:
	          case m:
	          case e:
	          case g:
	          case f:
	          case p:
	            return a;
	          default:
	            switch (a = a && a.$$typeof, a) {
	              case k:
	              case n:
	              case t:
	              case r:
	              case h:
	                return a;
	              default:
	                return u;
	            }
	        }
	      case d:
	        return u;
	    }
	  }
	}
	function A(a) {
	  return z(a) === m;
	}
	reactIs_production_min.AsyncMode = l;
	reactIs_production_min.ConcurrentMode = m;
	reactIs_production_min.ContextConsumer = k;
	reactIs_production_min.ContextProvider = h;
	reactIs_production_min.Element = c;
	reactIs_production_min.ForwardRef = n;
	reactIs_production_min.Fragment = e;
	reactIs_production_min.Lazy = t;
	reactIs_production_min.Memo = r;
	reactIs_production_min.Portal = d;
	reactIs_production_min.Profiler = g;
	reactIs_production_min.StrictMode = f;
	reactIs_production_min.Suspense = p;
	reactIs_production_min.isAsyncMode = function (a) {
	  return A(a) || z(a) === l;
	};
	reactIs_production_min.isConcurrentMode = A;
	reactIs_production_min.isContextConsumer = function (a) {
	  return z(a) === k;
	};
	reactIs_production_min.isContextProvider = function (a) {
	  return z(a) === h;
	};
	reactIs_production_min.isElement = function (a) {
	  return "object" === typeof a && null !== a && a.$$typeof === c;
	};
	reactIs_production_min.isForwardRef = function (a) {
	  return z(a) === n;
	};
	reactIs_production_min.isFragment = function (a) {
	  return z(a) === e;
	};
	reactIs_production_min.isLazy = function (a) {
	  return z(a) === t;
	};
	reactIs_production_min.isMemo = function (a) {
	  return z(a) === r;
	};
	reactIs_production_min.isPortal = function (a) {
	  return z(a) === d;
	};
	reactIs_production_min.isProfiler = function (a) {
	  return z(a) === g;
	};
	reactIs_production_min.isStrictMode = function (a) {
	  return z(a) === f;
	};
	reactIs_production_min.isSuspense = function (a) {
	  return z(a) === p;
	};
	reactIs_production_min.isValidElementType = function (a) {
	  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
	};
	reactIs_production_min.typeOf = z;
	return reactIs_production_min;
}

var reactIs_development$1 = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development$1;

function requireReactIs_development$1 () {
	if (hasRequiredReactIs_development$1) return reactIs_development$1;
	hasRequiredReactIs_development$1 = 1;

	if (process.env.NODE_ENV !== "production") {
	  (function () {

	    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	    // nor polyfill, then a plain number is used for performance.
	    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	    // (unstable) APIs that have been removed. Can we remove the symbols?

	    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
	    function isValidElementType(type) {
	      return typeof type === 'string' || typeof type === 'function' ||
	      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	    }
	    function typeOf(object) {
	      if (typeof object === 'object' && object !== null) {
	        var $$typeof = object.$$typeof;
	        switch ($$typeof) {
	          case REACT_ELEMENT_TYPE:
	            var type = object.type;
	            switch (type) {
	              case REACT_ASYNC_MODE_TYPE:
	              case REACT_CONCURRENT_MODE_TYPE:
	              case REACT_FRAGMENT_TYPE:
	              case REACT_PROFILER_TYPE:
	              case REACT_STRICT_MODE_TYPE:
	              case REACT_SUSPENSE_TYPE:
	                return type;
	              default:
	                var $$typeofType = type && type.$$typeof;
	                switch ($$typeofType) {
	                  case REACT_CONTEXT_TYPE:
	                  case REACT_FORWARD_REF_TYPE:
	                  case REACT_LAZY_TYPE:
	                  case REACT_MEMO_TYPE:
	                  case REACT_PROVIDER_TYPE:
	                    return $$typeofType;
	                  default:
	                    return $$typeof;
	                }
	            }
	          case REACT_PORTAL_TYPE:
	            return $$typeof;
	        }
	      }
	      return undefined;
	    } // AsyncMode is deprecated along with isAsyncMode

	    var AsyncMode = REACT_ASYNC_MODE_TYPE;
	    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	    var ContextConsumer = REACT_CONTEXT_TYPE;
	    var ContextProvider = REACT_PROVIDER_TYPE;
	    var Element = REACT_ELEMENT_TYPE;
	    var ForwardRef = REACT_FORWARD_REF_TYPE;
	    var Fragment = REACT_FRAGMENT_TYPE;
	    var Lazy = REACT_LAZY_TYPE;
	    var Memo = REACT_MEMO_TYPE;
	    var Portal = REACT_PORTAL_TYPE;
	    var Profiler = REACT_PROFILER_TYPE;
	    var StrictMode = REACT_STRICT_MODE_TYPE;
	    var Suspense = REACT_SUSPENSE_TYPE;
	    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	    function isAsyncMode(object) {
	      {
	        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	        }
	      }
	      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	    }
	    function isConcurrentMode(object) {
	      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	    }
	    function isContextConsumer(object) {
	      return typeOf(object) === REACT_CONTEXT_TYPE;
	    }
	    function isContextProvider(object) {
	      return typeOf(object) === REACT_PROVIDER_TYPE;
	    }
	    function isElement(object) {
	      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	    }
	    function isForwardRef(object) {
	      return typeOf(object) === REACT_FORWARD_REF_TYPE;
	    }
	    function isFragment(object) {
	      return typeOf(object) === REACT_FRAGMENT_TYPE;
	    }
	    function isLazy(object) {
	      return typeOf(object) === REACT_LAZY_TYPE;
	    }
	    function isMemo(object) {
	      return typeOf(object) === REACT_MEMO_TYPE;
	    }
	    function isPortal(object) {
	      return typeOf(object) === REACT_PORTAL_TYPE;
	    }
	    function isProfiler(object) {
	      return typeOf(object) === REACT_PROFILER_TYPE;
	    }
	    function isStrictMode(object) {
	      return typeOf(object) === REACT_STRICT_MODE_TYPE;
	    }
	    function isSuspense(object) {
	      return typeOf(object) === REACT_SUSPENSE_TYPE;
	    }
	    reactIs_development$1.AsyncMode = AsyncMode;
	    reactIs_development$1.ConcurrentMode = ConcurrentMode;
	    reactIs_development$1.ContextConsumer = ContextConsumer;
	    reactIs_development$1.ContextProvider = ContextProvider;
	    reactIs_development$1.Element = Element;
	    reactIs_development$1.ForwardRef = ForwardRef;
	    reactIs_development$1.Fragment = Fragment;
	    reactIs_development$1.Lazy = Lazy;
	    reactIs_development$1.Memo = Memo;
	    reactIs_development$1.Portal = Portal;
	    reactIs_development$1.Profiler = Profiler;
	    reactIs_development$1.StrictMode = StrictMode;
	    reactIs_development$1.Suspense = Suspense;
	    reactIs_development$1.isAsyncMode = isAsyncMode;
	    reactIs_development$1.isConcurrentMode = isConcurrentMode;
	    reactIs_development$1.isContextConsumer = isContextConsumer;
	    reactIs_development$1.isContextProvider = isContextProvider;
	    reactIs_development$1.isElement = isElement;
	    reactIs_development$1.isForwardRef = isForwardRef;
	    reactIs_development$1.isFragment = isFragment;
	    reactIs_development$1.isLazy = isLazy;
	    reactIs_development$1.isMemo = isMemo;
	    reactIs_development$1.isPortal = isPortal;
	    reactIs_development$1.isProfiler = isProfiler;
	    reactIs_development$1.isStrictMode = isStrictMode;
	    reactIs_development$1.isSuspense = isSuspense;
	    reactIs_development$1.isValidElementType = isValidElementType;
	    reactIs_development$1.typeOf = typeOf;
	  })();
	}
	return reactIs_development$1;
}

var hasRequiredReactIs;

function requireReactIs () {
	if (hasRequiredReactIs) return reactIs$1.exports;
	hasRequiredReactIs = 1;

	if (process.env.NODE_ENV === 'production') {
	  reactIs$1.exports = requireReactIs_production_min();
	} else {
	  reactIs$1.exports = requireReactIs_development$1();
	}
	return reactIs$1.exports;
}

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

var objectAssign;
var hasRequiredObjectAssign;

function requireObjectAssign () {
	if (hasRequiredObjectAssign) return objectAssign;
	hasRequiredObjectAssign = 1;

	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	function toObject(val) {
	  if (val === null || val === undefined) {
	    throw new TypeError('Object.assign cannot be called with null or undefined');
	  }
	  return Object(val);
	}
	function shouldUseNative() {
	  try {
	    if (!Object.assign) {
	      return false;
	    }

	    // Detect buggy property enumeration order in older V8 versions.

	    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
	    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
	    test1[5] = 'de';
	    if (Object.getOwnPropertyNames(test1)[0] === '5') {
	      return false;
	    }

	    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
	    var test2 = {};
	    for (var i = 0; i < 10; i++) {
	      test2['_' + String.fromCharCode(i)] = i;
	    }
	    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
	      return test2[n];
	    });
	    if (order2.join('') !== '0123456789') {
	      return false;
	    }

	    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
	    var test3 = {};
	    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
	      test3[letter] = letter;
	    });
	    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
	      return false;
	    }
	    return true;
	  } catch (err) {
	    // We don't expect any of the above to throw, but better to be safe.
	    return false;
	  }
	}
	objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	  var from;
	  var to = toObject(target);
	  var symbols;
	  for (var s = 1; s < arguments.length; s++) {
	    from = Object(arguments[s]);
	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	    if (getOwnPropertySymbols) {
	      symbols = getOwnPropertySymbols(from);
	      for (var i = 0; i < symbols.length; i++) {
	        if (propIsEnumerable.call(from, symbols[i])) {
	          to[symbols[i]] = from[symbols[i]];
	        }
	      }
	    }
	  }
	  return to;
	};
	return objectAssign;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret_1;
var hasRequiredReactPropTypesSecret;

function requireReactPropTypesSecret () {
	if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
	hasRequiredReactPropTypesSecret = 1;

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	ReactPropTypesSecret_1 = ReactPropTypesSecret;
	return ReactPropTypesSecret_1;
}

var has;
var hasRequiredHas;

function requireHas () {
	if (hasRequiredHas) return has;
	hasRequiredHas = 1;
	has = Function.call.bind(Object.prototype.hasOwnProperty);
	return has;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var checkPropTypes_1;
var hasRequiredCheckPropTypes;

function requireCheckPropTypes () {
	if (hasRequiredCheckPropTypes) return checkPropTypes_1;
	hasRequiredCheckPropTypes = 1;

	var printWarning = function () {};
	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret = requireReactPropTypesSecret();
	  var loggedTypeFailures = {};
	  var has = requireHas();
	  printWarning = function (text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {/**/}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;
	          var stack = getStack ? getStack() : '';
	          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function () {
	  if (process.env.NODE_ENV !== 'production') {
	    loggedTypeFailures = {};
	  }
	};
	checkPropTypes_1 = checkPropTypes;
	return checkPropTypes_1;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithTypeCheckers;
var hasRequiredFactoryWithTypeCheckers;

function requireFactoryWithTypeCheckers () {
	if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
	hasRequiredFactoryWithTypeCheckers = 1;

	var ReactIs = requireReactIs();
	var assign = requireObjectAssign();
	var ReactPropTypesSecret = requireReactPropTypesSecret();
	var has = requireHas();
	var checkPropTypes = requireCheckPropTypes();
	var printWarning = function () {};
	if (process.env.NODE_ENV !== 'production') {
	  printWarning = function (text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}
	function emptyFunctionThatReturnsNull() {
	  return null;
	}
	factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bigint: createPrimitiveTypeChecker('bigint'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),
	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message, data) {
	    this.message = message;
	    this.data = data && typeof data === 'object' ? data : {};
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;
	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;
	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (!manualPropTypeCallCache[cacheKey] &&
	          // Avoid spamming the console because they are often not actionable except for lib authors
	          manualPropTypeWarningCount < 3) {
	            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }
	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);
	    return chainedCheckType;
	  }
	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
	          expectedType: expectedType
	        });
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }
	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!ReactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (arguments.length > 1) {
	          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }
	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
	        return emptyFunctionThatReturnsNull;
	      }
	    }
	    function validate(props, propName, componentName, location, propFullName) {
	      var expectedTypes = [];
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
	        if (checkerResult == null) {
	          return null;
	        }
	        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
	          expectedTypes.push(checkerResult.data.expectedType);
	        }
	      }
	      var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function invalidValidatorError(componentName, location, propFullName, key, type) {
	    return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
	  }
	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (has(shapeTypes, key) && typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        if (!checker) {
	          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }
	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }
	        return true;
	      default:
	        return false;
	    }
	  }
	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }
	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }
	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	  return ReactPropTypes;
	};
	return factoryWithTypeCheckers;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithThrowingShims;
var hasRequiredFactoryWithThrowingShims;

function requireFactoryWithThrowingShims () {
	if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
	hasRequiredFactoryWithThrowingShims = 1;

	var ReactPropTypesSecret = requireReactPropTypesSecret();
	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;
	factoryWithThrowingShims = function () {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
	    err.name = 'Invariant Violation';
	    throw err;
	  }
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  }
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bigint: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,
	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,
	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };
	  ReactPropTypes.PropTypes = ReactPropTypes;
	  return ReactPropTypes;
	};
	return factoryWithThrowingShims;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = requireReactIs();

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  propTypes.exports = requireFactoryWithThrowingShims()();
}

var propTypesExports = propTypes.exports;
var PropTypes = /*@__PURE__*/getDefaultExportFromCjs$1(propTypesExports);

let cache;
if (typeof document === 'object') {
  cache = createCache({
    key: 'css',
    prepend: true
  });
}
function StyledEngineProvider(props) {
  const {
    injectFirst,
    children
  } = props;
  return injectFirst && cache ? /*#__PURE__*/require$$2$1.jsx(CacheProvider, {
    value: cache,
    children: children
  }) : children;
}
process.env.NODE_ENV !== "production" ? StyledEngineProvider.propTypes = {
  /**
   * Your component tree.
   */
  children: PropTypes.node,
  /**
   * By default, the styles are injected last in the <head> element of the page.
   * As a result, they gain more specificity than any other style sheet.
   * If you want to override MUI's styles, set this prop.
   */
  injectFirst: PropTypes.bool
} : void 0;

function isEmpty$5(obj) {
  return obj === undefined || obj === null || Object.keys(obj).length === 0;
}
function GlobalStyles(props) {
  const {
    styles,
    defaultTheme = {}
  } = props;
  const globalStyles = typeof styles === 'function' ? themeInput => styles(isEmpty$5(themeInput) ? defaultTheme : themeInput) : styles;
  return /*#__PURE__*/require$$2$1.jsx(Global, {
    styles: globalStyles
  });
}
process.env.NODE_ENV !== "production" ? GlobalStyles.propTypes = {
  defaultTheme: PropTypes.object,
  styles: PropTypes.oneOfType([PropTypes.array, PropTypes.string, PropTypes.object, PropTypes.func])
} : void 0;

/**
 * @mui/styled-engine v5.16.14
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
function styled$3(tag, options) {
  const stylesFactory = newStyled(tag, options);
  if (process.env.NODE_ENV !== 'production') {
    return (...styles) => {
      const component = typeof tag === 'string' ? `"${tag}"` : 'component';
      if (styles.length === 0) {
        console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join('\n'));
      } else if (styles.some(style => style === undefined)) {
        console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
      }
      return stylesFactory(...styles);
    };
  }
  return stylesFactory;
}

// eslint-disable-next-line @typescript-eslint/naming-convention
const internal_processStyles = (tag, processor) => {
  // Emotion attaches all the styles as `__emotion_styles`.
  // Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186
  if (Array.isArray(tag.__emotion_styles)) {
    tag.__emotion_styles = processor(tag.__emotion_styles);
  }
};

var styledEngine = /*#__PURE__*/Object.freeze({
  __proto__: null,
  GlobalStyles: GlobalStyles,
  StyledEngineProvider: StyledEngineProvider,
  ThemeContext: ThemeContext$2,
  css: css,
  default: styled$3,
  internal_processStyles: internal_processStyles,
  keyframes: keyframes
});

// https://github.com/sindresorhus/is-plain-obj/blob/main/index.js
function isPlainObject(item) {
  if (typeof item !== 'object' || item === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(item);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
}
function deepClone(source) {
  if (/*#__PURE__*/ /*#__PURE__*/React__namespace.isValidElement(source) || !isPlainObject(source)) {
    return source;
  }
  const output = {};
  Object.keys(source).forEach(key => {
    output[key] = deepClone(source[key]);
  });
  return output;
}
function deepmerge$1(target, source, options = {
  clone: true
}) {
  const output = options.clone ? _extends$5({}, target) : target;
  if (isPlainObject(target) && isPlainObject(source)) {
    Object.keys(source).forEach(key => {
      if (/*#__PURE__*/React__namespace.isValidElement(source[key])) {
        output[key] = source[key];
      } else if (isPlainObject(source[key]) &&
      // Avoid prototype pollution
      Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) {
        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
        output[key] = deepmerge$1(target[key], source[key], options);
      } else if (options.clone) {
        output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
      } else {
        output[key] = source[key];
      }
    });
  }
  return output;
}

var deepmerge = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: deepmerge$1,
  isPlainObject: isPlainObject
});

const _excluded$i = ["values", "unit", "step"];
const sortBreakpointsValues = values => {
  const breakpointsAsArray = Object.keys(values).map(key => ({
    key,
    val: values[key]
  })) || [];
  // Sort in ascending order
  breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
  return breakpointsAsArray.reduce((acc, obj) => {
    return _extends$5({}, acc, {
      [obj.key]: obj.val
    });
  }, {});
};

// Keep in mind that @media is inclusive by the CSS specification.
function createBreakpoints(breakpoints) {
  const {
      // The breakpoint **start** at this value.
      // For instance with the first breakpoint xs: [xs, sm).
      values = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536 // large screen
      },
      unit = 'px',
      step = 5
    } = breakpoints,
    other = _objectWithoutPropertiesLoose$1(breakpoints, _excluded$i);
  const sortedValues = sortBreakpointsValues(values);
  const keys = Object.keys(sortedValues);
  function up(key) {
    const value = typeof values[key] === 'number' ? values[key] : key;
    return `@media (min-width:${value}${unit})`;
  }
  function down(key) {
    const value = typeof values[key] === 'number' ? values[key] : key;
    return `@media (max-width:${value - step / 100}${unit})`;
  }
  function between(start, end) {
    const endIndex = keys.indexOf(end);
    return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
  }
  function only(key) {
    if (keys.indexOf(key) + 1 < keys.length) {
      return between(key, keys[keys.indexOf(key) + 1]);
    }
    return up(key);
  }
  function not(key) {
    // handle first and last key separately, for better readability
    const keyIndex = keys.indexOf(key);
    if (keyIndex === 0) {
      return up(keys[1]);
    }
    if (keyIndex === keys.length - 1) {
      return down(keys[keyIndex]);
    }
    return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
  }
  return _extends$5({
    keys,
    values: sortedValues,
    up,
    down,
    between,
    only,
    not,
    unit
  }, other);
}

const shape = {
  borderRadius: 4
};
var shape$1 = shape;

const responsivePropType = process.env.NODE_ENV !== 'production' ? PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object, PropTypes.array]) : {};
var responsivePropType$1 = responsivePropType;

function merge(acc, item) {
  if (!item) {
    return acc;
  }
  return deepmerge$1(acc, item, {
    clone: false // No need to clone deep, it's way faster.
  });
}

// The breakpoint **start** at this value.
// For instance with the first breakpoint xs: [xs, sm[.
const values$1 = {
  xs: 0,
  // phone
  sm: 600,
  // tablet
  md: 900,
  // small laptop
  lg: 1200,
  // desktop
  xl: 1536 // large screen
};
const defaultBreakpoints = {
  // Sorted ASC by size. That's important.
  // It can't be configured as it's used statically for propTypes.
  keys: ['xs', 'sm', 'md', 'lg', 'xl'],
  up: key => `@media (min-width:${values$1[key]}px)`
};
function handleBreakpoints(props, propValue, styleFromPropValue) {
  const theme = props.theme || {};
  if (Array.isArray(propValue)) {
    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
    return propValue.reduce((acc, item, index) => {
      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
      return acc;
    }, {});
  }
  if (typeof propValue === 'object') {
    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
    return Object.keys(propValue).reduce((acc, breakpoint) => {
      // key is breakpoint
      if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
        const mediaKey = themeBreakpoints.up(breakpoint);
        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
      } else {
        const cssKey = breakpoint;
        acc[cssKey] = propValue[cssKey];
      }
      return acc;
    }, {});
  }
  const output = styleFromPropValue(propValue);
  return output;
}
function createEmptyBreakpointObject(breakpointsInput = {}) {
  var _breakpointsInput$key;
  const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
    const breakpointStyleKey = breakpointsInput.up(key);
    acc[breakpointStyleKey] = {};
    return acc;
  }, {});
  return breakpointsInOrder || {};
}
function removeUnusedBreakpoints(breakpointKeys, style) {
  return breakpointKeys.reduce((acc, key) => {
    const breakpointOutput = acc[key];
    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
    if (isBreakpointUnused) {
      delete acc[key];
    }
    return acc;
  }, style);
}

// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
//
// A strict capitalization should uppercase the first letter of each word in the sentence.
// We only handle the first word.
function capitalize$1(string) {
  if (typeof string !== 'string') {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: \`capitalize(string)\` expects a string argument.` : formatMuiErrorMessage$1(7));
  }
  return string.charAt(0).toUpperCase() + string.slice(1);
}

var capitalize = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: capitalize$1
});

function getPath(obj, path, checkVars = true) {
  if (!path || typeof path !== 'string') {
    return null;
  }

  // Check if CSS variables are used
  if (obj && obj.vars && checkVars) {
    const val = `vars.${path}`.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
    if (val != null) {
      return val;
    }
  }
  return path.split('.').reduce((acc, item) => {
    if (acc && acc[item] != null) {
      return acc[item];
    }
    return null;
  }, obj);
}
function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
  let value;
  if (typeof themeMapping === 'function') {
    value = themeMapping(propValueFinal);
  } else if (Array.isArray(themeMapping)) {
    value = themeMapping[propValueFinal] || userValue;
  } else {
    value = getPath(themeMapping, propValueFinal) || userValue;
  }
  if (transform) {
    value = transform(value, userValue, themeMapping);
  }
  return value;
}
function style$1(options) {
  const {
    prop,
    cssProperty = options.prop,
    themeKey,
    transform
  } = options;

  // false positive
  // eslint-disable-next-line react/function-component-definition
  const fn = props => {
    if (props[prop] == null) {
      return null;
    }
    const propValue = props[prop];
    const theme = props.theme;
    const themeMapping = getPath(theme, themeKey) || {};
    const styleFromPropValue = propValueFinal => {
      let value = getStyleValue(themeMapping, transform, propValueFinal);
      if (propValueFinal === value && typeof propValueFinal === 'string') {
        // Haven't found value
        value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize$1(propValueFinal)}`, propValueFinal);
      }
      if (cssProperty === false) {
        return value;
      }
      return {
        [cssProperty]: value
      };
    };
    return handleBreakpoints(props, propValue, styleFromPropValue);
  };
  fn.propTypes = process.env.NODE_ENV !== 'production' ? {
    [prop]: responsivePropType$1
  } : {};
  fn.filterProps = [prop];
  return fn;
}

function memoize$1(fn) {
  const cache = {};
  return arg => {
    if (cache[arg] === undefined) {
      cache[arg] = fn(arg);
    }
    return cache[arg];
  };
}

const properties = {
  m: 'margin',
  p: 'padding'
};
const directions = {
  t: 'Top',
  r: 'Right',
  b: 'Bottom',
  l: 'Left',
  x: ['Left', 'Right'],
  y: ['Top', 'Bottom']
};
const aliases = {
  marginX: 'mx',
  marginY: 'my',
  paddingX: 'px',
  paddingY: 'py'
};

// memoize() impact:
// From 300,000 ops/sec
// To 350,000 ops/sec
const getCssProperties = memoize$1(prop => {
  // It's not a shorthand notation.
  if (prop.length > 2) {
    if (aliases[prop]) {
      prop = aliases[prop];
    } else {
      return [prop];
    }
  }
  const [a, b] = prop.split('');
  const property = properties[a];
  const direction = directions[b] || '';
  return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];
});
const marginKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'marginInline', 'marginInlineStart', 'marginInlineEnd', 'marginBlock', 'marginBlockStart', 'marginBlockEnd'];
const paddingKeys = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd'];
const spacingKeys = [...marginKeys, ...paddingKeys];
function createUnaryUnit(theme, themeKey, defaultValue, propName) {
  var _getPath;
  const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
  if (typeof themeSpacing === 'number') {
    return abs => {
      if (typeof abs === 'string') {
        return abs;
      }
      if (process.env.NODE_ENV !== 'production') {
        if (typeof abs !== 'number') {
          console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs}.`);
        }
      }
      return themeSpacing * abs;
    };
  }
  if (Array.isArray(themeSpacing)) {
    return abs => {
      if (typeof abs === 'string') {
        return abs;
      }
      if (process.env.NODE_ENV !== 'production') {
        if (!Number.isInteger(abs)) {
          console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.` + `You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join('\n'));
        } else if (abs > themeSpacing.length - 1) {
          console.error([`MUI: The value provided (${abs}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`].join('\n'));
        }
      }
      return themeSpacing[abs];
    };
  }
  if (typeof themeSpacing === 'function') {
    return themeSpacing;
  }
  if (process.env.NODE_ENV !== 'production') {
    console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, 'It should be a number, an array or a function.'].join('\n'));
  }
  return () => undefined;
}
function createUnarySpacing(theme) {
  return createUnaryUnit(theme, 'spacing', 8, 'spacing');
}
function getValue(transformer, propValue) {
  if (typeof propValue === 'string' || propValue == null) {
    return propValue;
  }
  const abs = Math.abs(propValue);
  const transformed = transformer(abs);
  if (propValue >= 0) {
    return transformed;
  }
  if (typeof transformed === 'number') {
    return -transformed;
  }
  return `-${transformed}`;
}
function getStyleFromPropValue(cssProperties, transformer) {
  return propValue => cssProperties.reduce((acc, cssProperty) => {
    acc[cssProperty] = getValue(transformer, propValue);
    return acc;
  }, {});
}
function resolveCssProperty(props, keys, prop, transformer) {
  // Using a hash computation over an array iteration could be faster, but with only 28 items,
  // it's doesn't worth the bundle size.
  if (keys.indexOf(prop) === -1) {
    return null;
  }
  const cssProperties = getCssProperties(prop);
  const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
  const propValue = props[prop];
  return handleBreakpoints(props, propValue, styleFromPropValue);
}
function style(props, keys) {
  const transformer = createUnarySpacing(props.theme);
  return Object.keys(props).map(prop => resolveCssProperty(props, keys, prop, transformer)).reduce(merge, {});
}
function margin(props) {
  return style(props, marginKeys);
}
margin.propTypes = process.env.NODE_ENV !== 'production' ? marginKeys.reduce((obj, key) => {
  obj[key] = responsivePropType$1;
  return obj;
}, {}) : {};
margin.filterProps = marginKeys;
function padding(props) {
  return style(props, paddingKeys);
}
padding.propTypes = process.env.NODE_ENV !== 'production' ? paddingKeys.reduce((obj, key) => {
  obj[key] = responsivePropType$1;
  return obj;
}, {}) : {};
padding.filterProps = paddingKeys;
process.env.NODE_ENV !== 'production' ? spacingKeys.reduce((obj, key) => {
  obj[key] = responsivePropType$1;
  return obj;
}, {}) : {};

// The different signatures imply different meaning for their arguments that can't be expressed structurally.
// We express the difference with variable names.

function createSpacing(spacingInput = 8) {
  // Already transformed.
  if (spacingInput.mui) {
    return spacingInput;
  }

  // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
  // Smaller components, such as icons, can align to a 4dp grid.
  // https://m2.material.io/design/layout/understanding-layout.html
  const transform = createUnarySpacing({
    spacing: spacingInput
  });
  const spacing = (...argsInput) => {
    if (process.env.NODE_ENV !== 'production') {
      if (!(argsInput.length <= 4)) {
        console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
      }
    }
    const args = argsInput.length === 0 ? [1] : argsInput;
    return args.map(argument => {
      const output = transform(argument);
      return typeof output === 'number' ? `${output}px` : output;
    }).join(' ');
  };
  spacing.mui = true;
  return spacing;
}

function compose(...styles) {
  const handlers = styles.reduce((acc, style) => {
    style.filterProps.forEach(prop => {
      acc[prop] = style;
    });
    return acc;
  }, {});

  // false positive
  // eslint-disable-next-line react/function-component-definition
  const fn = props => {
    return Object.keys(props).reduce((acc, prop) => {
      if (handlers[prop]) {
        return merge(acc, handlers[prop](props));
      }
      return acc;
    }, {});
  };
  fn.propTypes = process.env.NODE_ENV !== 'production' ? styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) : {};
  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
  return fn;
}

function borderTransform(value) {
  if (typeof value !== 'number') {
    return value;
  }
  return `${value}px solid`;
}
function createBorderStyle(prop, transform) {
  return style$1({
    prop,
    themeKey: 'borders',
    transform
  });
}
const border = createBorderStyle('border', borderTransform);
const borderTop = createBorderStyle('borderTop', borderTransform);
const borderRight = createBorderStyle('borderRight', borderTransform);
const borderBottom = createBorderStyle('borderBottom', borderTransform);
const borderLeft = createBorderStyle('borderLeft', borderTransform);
const borderColor = createBorderStyle('borderColor');
const borderTopColor = createBorderStyle('borderTopColor');
const borderRightColor = createBorderStyle('borderRightColor');
const borderBottomColor = createBorderStyle('borderBottomColor');
const borderLeftColor = createBorderStyle('borderLeftColor');
const outline = createBorderStyle('outline', borderTransform);
const outlineColor = createBorderStyle('outlineColor');

// false positive
// eslint-disable-next-line react/function-component-definition
const borderRadius = props => {
  if (props.borderRadius !== undefined && props.borderRadius !== null) {
    const transformer = createUnaryUnit(props.theme, 'shape.borderRadius', 4, 'borderRadius');
    const styleFromPropValue = propValue => ({
      borderRadius: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
  }
  return null;
};
borderRadius.propTypes = process.env.NODE_ENV !== 'production' ? {
  borderRadius: responsivePropType$1
} : {};
borderRadius.filterProps = ['borderRadius'];
compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);

// false positive
// eslint-disable-next-line react/function-component-definition
const gap = props => {
  if (props.gap !== undefined && props.gap !== null) {
    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'gap');
    const styleFromPropValue = propValue => ({
      gap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.gap, styleFromPropValue);
  }
  return null;
};
gap.propTypes = process.env.NODE_ENV !== 'production' ? {
  gap: responsivePropType$1
} : {};
gap.filterProps = ['gap'];

// false positive
// eslint-disable-next-line react/function-component-definition
const columnGap = props => {
  if (props.columnGap !== undefined && props.columnGap !== null) {
    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'columnGap');
    const styleFromPropValue = propValue => ({
      columnGap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.columnGap, styleFromPropValue);
  }
  return null;
};
columnGap.propTypes = process.env.NODE_ENV !== 'production' ? {
  columnGap: responsivePropType$1
} : {};
columnGap.filterProps = ['columnGap'];

// false positive
// eslint-disable-next-line react/function-component-definition
const rowGap = props => {
  if (props.rowGap !== undefined && props.rowGap !== null) {
    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'rowGap');
    const styleFromPropValue = propValue => ({
      rowGap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.rowGap, styleFromPropValue);
  }
  return null;
};
rowGap.propTypes = process.env.NODE_ENV !== 'production' ? {
  rowGap: responsivePropType$1
} : {};
rowGap.filterProps = ['rowGap'];
const gridColumn = style$1({
  prop: 'gridColumn'
});
const gridRow = style$1({
  prop: 'gridRow'
});
const gridAutoFlow = style$1({
  prop: 'gridAutoFlow'
});
const gridAutoColumns = style$1({
  prop: 'gridAutoColumns'
});
const gridAutoRows = style$1({
  prop: 'gridAutoRows'
});
const gridTemplateColumns = style$1({
  prop: 'gridTemplateColumns'
});
const gridTemplateRows = style$1({
  prop: 'gridTemplateRows'
});
const gridTemplateAreas = style$1({
  prop: 'gridTemplateAreas'
});
const gridArea = style$1({
  prop: 'gridArea'
});
compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

function paletteTransform(value, userValue) {
  if (userValue === 'grey') {
    return userValue;
  }
  return value;
}
const color = style$1({
  prop: 'color',
  themeKey: 'palette',
  transform: paletteTransform
});
const bgcolor = style$1({
  prop: 'bgcolor',
  cssProperty: 'backgroundColor',
  themeKey: 'palette',
  transform: paletteTransform
});
const backgroundColor = style$1({
  prop: 'backgroundColor',
  themeKey: 'palette',
  transform: paletteTransform
});
compose(color, bgcolor, backgroundColor);

function sizingTransform(value) {
  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}
const width = style$1({
  prop: 'width',
  transform: sizingTransform
});
const maxWidth = props => {
  if (props.maxWidth !== undefined && props.maxWidth !== null) {
    const styleFromPropValue = propValue => {
      var _props$theme, _props$theme2;
      const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || values$1[propValue];
      if (!breakpoint) {
        return {
          maxWidth: sizingTransform(propValue)
        };
      }
      if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== 'px') {
        return {
          maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
        };
      }
      return {
        maxWidth: breakpoint
      };
    };
    return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
  }
  return null;
};
maxWidth.filterProps = ['maxWidth'];
const minWidth = style$1({
  prop: 'minWidth',
  transform: sizingTransform
});
const height = style$1({
  prop: 'height',
  transform: sizingTransform
});
const maxHeight = style$1({
  prop: 'maxHeight',
  transform: sizingTransform
});
const minHeight = style$1({
  prop: 'minHeight',
  transform: sizingTransform
});
style$1({
  prop: 'size',
  cssProperty: 'width',
  transform: sizingTransform
});
style$1({
  prop: 'size',
  cssProperty: 'height',
  transform: sizingTransform
});
const boxSizing = style$1({
  prop: 'boxSizing'
});
compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);

const defaultSxConfig = {
  // borders
  border: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderTop: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderRight: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderBottom: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderLeft: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderColor: {
    themeKey: 'palette'
  },
  borderTopColor: {
    themeKey: 'palette'
  },
  borderRightColor: {
    themeKey: 'palette'
  },
  borderBottomColor: {
    themeKey: 'palette'
  },
  borderLeftColor: {
    themeKey: 'palette'
  },
  outline: {
    themeKey: 'borders',
    transform: borderTransform
  },
  outlineColor: {
    themeKey: 'palette'
  },
  borderRadius: {
    themeKey: 'shape.borderRadius',
    style: borderRadius
  },
  // palette
  color: {
    themeKey: 'palette',
    transform: paletteTransform
  },
  bgcolor: {
    themeKey: 'palette',
    cssProperty: 'backgroundColor',
    transform: paletteTransform
  },
  backgroundColor: {
    themeKey: 'palette',
    transform: paletteTransform
  },
  // spacing
  p: {
    style: padding
  },
  pt: {
    style: padding
  },
  pr: {
    style: padding
  },
  pb: {
    style: padding
  },
  pl: {
    style: padding
  },
  px: {
    style: padding
  },
  py: {
    style: padding
  },
  padding: {
    style: padding
  },
  paddingTop: {
    style: padding
  },
  paddingRight: {
    style: padding
  },
  paddingBottom: {
    style: padding
  },
  paddingLeft: {
    style: padding
  },
  paddingX: {
    style: padding
  },
  paddingY: {
    style: padding
  },
  paddingInline: {
    style: padding
  },
  paddingInlineStart: {
    style: padding
  },
  paddingInlineEnd: {
    style: padding
  },
  paddingBlock: {
    style: padding
  },
  paddingBlockStart: {
    style: padding
  },
  paddingBlockEnd: {
    style: padding
  },
  m: {
    style: margin
  },
  mt: {
    style: margin
  },
  mr: {
    style: margin
  },
  mb: {
    style: margin
  },
  ml: {
    style: margin
  },
  mx: {
    style: margin
  },
  my: {
    style: margin
  },
  margin: {
    style: margin
  },
  marginTop: {
    style: margin
  },
  marginRight: {
    style: margin
  },
  marginBottom: {
    style: margin
  },
  marginLeft: {
    style: margin
  },
  marginX: {
    style: margin
  },
  marginY: {
    style: margin
  },
  marginInline: {
    style: margin
  },
  marginInlineStart: {
    style: margin
  },
  marginInlineEnd: {
    style: margin
  },
  marginBlock: {
    style: margin
  },
  marginBlockStart: {
    style: margin
  },
  marginBlockEnd: {
    style: margin
  },
  // display
  displayPrint: {
    cssProperty: false,
    transform: value => ({
      '@media print': {
        display: value
      }
    })
  },
  display: {},
  overflow: {},
  textOverflow: {},
  visibility: {},
  whiteSpace: {},
  // flexbox
  flexBasis: {},
  flexDirection: {},
  flexWrap: {},
  justifyContent: {},
  alignItems: {},
  alignContent: {},
  order: {},
  flex: {},
  flexGrow: {},
  flexShrink: {},
  alignSelf: {},
  justifyItems: {},
  justifySelf: {},
  // grid
  gap: {
    style: gap
  },
  rowGap: {
    style: rowGap
  },
  columnGap: {
    style: columnGap
  },
  gridColumn: {},
  gridRow: {},
  gridAutoFlow: {},
  gridAutoColumns: {},
  gridAutoRows: {},
  gridTemplateColumns: {},
  gridTemplateRows: {},
  gridTemplateAreas: {},
  gridArea: {},
  // positions
  position: {},
  zIndex: {
    themeKey: 'zIndex'
  },
  top: {},
  right: {},
  bottom: {},
  left: {},
  // shadows
  boxShadow: {
    themeKey: 'shadows'
  },
  // sizing
  width: {
    transform: sizingTransform
  },
  maxWidth: {
    style: maxWidth
  },
  minWidth: {
    transform: sizingTransform
  },
  height: {
    transform: sizingTransform
  },
  maxHeight: {
    transform: sizingTransform
  },
  minHeight: {
    transform: sizingTransform
  },
  boxSizing: {},
  // typography
  fontFamily: {
    themeKey: 'typography'
  },
  fontSize: {
    themeKey: 'typography'
  },
  fontStyle: {
    themeKey: 'typography'
  },
  fontWeight: {
    themeKey: 'typography'
  },
  letterSpacing: {},
  textTransform: {},
  lineHeight: {},
  textAlign: {},
  typography: {
    cssProperty: false,
    themeKey: 'typography'
  }
};
var defaultSxConfig$1 = defaultSxConfig;

function objectsHaveSameKeys(...objects) {
  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
  const union = new Set(allKeys);
  return objects.every(object => union.size === Object.keys(object).length);
}
function callIfFn(maybeFn, arg) {
  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
}

// eslint-disable-next-line @typescript-eslint/naming-convention
function unstable_createStyleFunctionSx() {
  function getThemeValue(prop, val, theme, config) {
    const props = {
      [prop]: val,
      theme
    };
    const options = config[prop];
    if (!options) {
      return {
        [prop]: val
      };
    }
    const {
      cssProperty = prop,
      themeKey,
      transform,
      style
    } = options;
    if (val == null) {
      return null;
    }

    // TODO v6: remove, see https://github.com/mui/material-ui/pull/38123
    if (themeKey === 'typography' && val === 'inherit') {
      return {
        [prop]: val
      };
    }
    const themeMapping = getPath(theme, themeKey) || {};
    if (style) {
      return style(props);
    }
    const styleFromPropValue = propValueFinal => {
      let value = getStyleValue(themeMapping, transform, propValueFinal);
      if (propValueFinal === value && typeof propValueFinal === 'string') {
        // Haven't found value
        value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize$1(propValueFinal)}`, propValueFinal);
      }
      if (cssProperty === false) {
        return value;
      }
      return {
        [cssProperty]: value
      };
    };
    return handleBreakpoints(props, val, styleFromPropValue);
  }
  function styleFunctionSx(props) {
    var _theme$unstable_sxCon;
    const {
      sx,
      theme = {}
    } = props || {};
    if (!sx) {
      return null; // Emotion & styled-components will neglect null
    }
    const config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig$1;

    /*
     * Receive `sxInput` as object or callback
     * and then recursively check keys & values to create media query object styles.
     * (the result will be used in `styled`)
     */
    function traverse(sxInput) {
      let sxObject = sxInput;
      if (typeof sxInput === 'function') {
        sxObject = sxInput(theme);
      } else if (typeof sxInput !== 'object') {
        // value
        return sxInput;
      }
      if (!sxObject) {
        return null;
      }
      const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
      const breakpointsKeys = Object.keys(emptyBreakpoints);
      let css = emptyBreakpoints;
      Object.keys(sxObject).forEach(styleKey => {
        const value = callIfFn(sxObject[styleKey], theme);
        if (value !== null && value !== undefined) {
          if (typeof value === 'object') {
            if (config[styleKey]) {
              css = merge(css, getThemeValue(styleKey, value, theme, config));
            } else {
              const breakpointsValues = handleBreakpoints({
                theme
              }, value, x => ({
                [styleKey]: x
              }));
              if (objectsHaveSameKeys(breakpointsValues, value)) {
                css[styleKey] = styleFunctionSx({
                  sx: value,
                  theme
                });
              } else {
                css = merge(css, breakpointsValues);
              }
            }
          } else {
            css = merge(css, getThemeValue(styleKey, value, theme, config));
          }
        }
      });
      return removeUnusedBreakpoints(breakpointsKeys, css);
    }
    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
  }
  return styleFunctionSx;
}
const styleFunctionSx$1 = unstable_createStyleFunctionSx();
styleFunctionSx$1.filterProps = ['sx'];
var styleFunctionSx$2 = styleFunctionSx$1;

/**
 * A universal utility to style components with multiple color modes. Always use it from the theme object.
 * It works with:
 *  - [Basic theme](https://mui.com/material-ui/customization/dark-mode/)
 *  - [CSS theme variables](https://mui.com/material-ui/experimental-api/css-theme-variables/overview/)
 *  - Zero-runtime engine
 *
 * Tips: Use an array over object spread and place `theme.applyStyles()` last.
 *
 * ✅ [{ background: '#e5e5e5' }, theme.applyStyles('dark', { background: '#1c1c1c' })]
 *
 * 🚫 { background: '#e5e5e5', ...theme.applyStyles('dark', { background: '#1c1c1c' })}
 *
 * @example
 * 1. using with `styled`:
 * ```jsx
 *   const Component = styled('div')(({ theme }) => [
 *     { background: '#e5e5e5' },
 *     theme.applyStyles('dark', {
 *       background: '#1c1c1c',
 *       color: '#fff',
 *     }),
 *   ]);
 * ```
 *
 * @example
 * 2. using with `sx` prop:
 * ```jsx
 *   <Box sx={theme => [
 *     { background: '#e5e5e5' },
 *     theme.applyStyles('dark', {
 *        background: '#1c1c1c',
 *        color: '#fff',
 *      }),
 *     ]}
 *   />
 * ```
 *
 * @example
 * 3. theming a component:
 * ```jsx
 *   extendTheme({
 *     components: {
 *       MuiButton: {
 *         styleOverrides: {
 *           root: ({ theme }) => [
 *             { background: '#e5e5e5' },
 *             theme.applyStyles('dark', {
 *               background: '#1c1c1c',
 *               color: '#fff',
 *             }),
 *           ],
 *         },
 *       }
 *     }
 *   })
 *```
 */
function applyStyles(key, styles) {
  // @ts-expect-error this is 'any' type
  const theme = this;
  if (theme.vars && typeof theme.getColorSchemeSelector === 'function') {
    // If CssVarsProvider is used as a provider,
    // returns '* :where([data-mui-color-scheme="light|dark"]) &'
    const selector = theme.getColorSchemeSelector(key).replace(/(\[[^\]]+\])/, '*:where($1)');
    return {
      [selector]: styles
    };
  }
  if (theme.palette.mode === key) {
    return styles;
  }
  return {};
}

const _excluded$h = ["breakpoints", "palette", "spacing", "shape"];
function createTheme$2(options = {}, ...args) {
  const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options,
    other = _objectWithoutPropertiesLoose$1(options, _excluded$h);
  const breakpoints = createBreakpoints(breakpointsInput);
  const spacing = createSpacing(spacingInput);
  let muiTheme = deepmerge$1({
    breakpoints,
    direction: 'ltr',
    components: {},
    // Inject component definitions.
    palette: _extends$5({
      mode: 'light'
    }, paletteInput),
    spacing,
    shape: _extends$5({}, shape$1, shapeInput)
  }, other);
  muiTheme.applyStyles = applyStyles;
  muiTheme = args.reduce((acc, argument) => deepmerge$1(acc, argument), muiTheme);
  muiTheme.unstable_sxConfig = _extends$5({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
  muiTheme.unstable_sx = function sx(props) {
    return styleFunctionSx$2({
      sx: props,
      theme: this
    });
  };
  return muiTheme;
}

var createTheme$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: createTheme$2,
  private_createBreakpoints: createBreakpoints,
  unstable_applyStyles: applyStyles
});

function isObjectEmpty(obj) {
  return Object.keys(obj).length === 0;
}
function useTheme$2(defaultTheme = null) {
  const contextTheme = React__namespace.useContext(ThemeContext$2);
  return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
}

const systemDefaultTheme$2 = createTheme$2();
function useTheme$1(defaultTheme = systemDefaultTheme$2) {
  return useTheme$2(defaultTheme);
}

const _excluded$g = ["sx"];
const splitProps = props => {
  var _props$theme$unstable, _props$theme;
  const result = {
    systemProps: {},
    otherProps: {}
  };
  const config = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig$1;
  Object.keys(props).forEach(prop => {
    if (config[prop]) {
      result.systemProps[prop] = props[prop];
    } else {
      result.otherProps[prop] = props[prop];
    }
  });
  return result;
};
function extendSxProp(props) {
  const {
      sx: inSx
    } = props,
    other = _objectWithoutPropertiesLoose$1(props, _excluded$g);
  const {
    systemProps,
    otherProps
  } = splitProps(other);
  let finalSx;
  if (Array.isArray(inSx)) {
    finalSx = [systemProps, ...inSx];
  } else if (typeof inSx === 'function') {
    finalSx = (...args) => {
      const result = inSx(...args);
      if (!isPlainObject(result)) {
        return systemProps;
      }
      return _extends$5({}, systemProps, result);
    };
  } else {
    finalSx = _extends$5({}, systemProps, inSx);
  }
  return _extends$5({}, otherProps, {
    sx: finalSx
  });
}

var styleFunctionSx = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: styleFunctionSx$2,
  extendSxProp: extendSxProp,
  unstable_createStyleFunctionSx: unstable_createStyleFunctionSx,
  unstable_defaultSxConfig: defaultSxConfig$1
});

const defaultGenerator = componentName => componentName;
const createClassNameGenerator = () => {
  let generate = defaultGenerator;
  return {
    configure(generator) {
      generate = generator;
    },
    generate(componentName) {
      return generate(componentName);
    },
    reset() {
      generate = defaultGenerator;
    }
  };
};
const ClassNameGenerator = createClassNameGenerator();
var ClassNameGenerator$1 = ClassNameGenerator;

function r(e) {
  var t,
    f,
    n = "";
  if ("string" == typeof e || "number" == typeof e) n += e;else if ("object" == typeof e) if (Array.isArray(e)) {
    var o = e.length;
    for (t = 0; t < o; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
  } else for (f in e) e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++) (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}

const _excluded$f = ["className", "component"];
function createBox(options = {}) {
  const {
    themeId,
    defaultTheme,
    defaultClassName = 'MuiBox-root',
    generateClassName
  } = options;
  const BoxRoot = styled$3('div', {
    shouldForwardProp: prop => prop !== 'theme' && prop !== 'sx' && prop !== 'as'
  })(styleFunctionSx$2);
  const Box = /*#__PURE__*/React__namespace.forwardRef(function Box(inProps, ref) {
    const theme = useTheme$1(defaultTheme);
    const _extendSxProp = extendSxProp(inProps),
      {
        className,
        component = 'div'
      } = _extendSxProp,
      other = _objectWithoutPropertiesLoose$1(_extendSxProp, _excluded$f);
    return /*#__PURE__*/require$$2$1.jsx(BoxRoot, _extends$5({
      as: component,
      ref: ref,
      className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
      theme: themeId ? theme[themeId] || theme : theme
    }, other));
  });
  return Box;
}

const globalStateClasses = {
  active: 'active',
  checked: 'checked',
  completed: 'completed',
  disabled: 'disabled',
  error: 'error',
  expanded: 'expanded',
  focused: 'focused',
  focusVisible: 'focusVisible',
  open: 'open',
  readOnly: 'readOnly',
  required: 'required',
  selected: 'selected'
};
function generateUtilityClass(componentName, slot, globalStatePrefix = 'Mui') {
  const globalStateClass = globalStateClasses[slot];
  return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator$1.generate(componentName)}-${slot}`;
}

function generateUtilityClasses(componentName, slots, globalStatePrefix = 'Mui') {
  const result = {};
  slots.forEach(slot => {
    result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
  });
  return result;
}

var reactIs = {exports: {}};

var reactIs_production = {};

/**
 * @license React
 * react-is.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_production;

function requireReactIs_production () {
	if (hasRequiredReactIs_production) return reactIs_production;
	hasRequiredReactIs_production = 1;

	var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
	  REACT_PORTAL_TYPE = Symbol.for("react.portal"),
	  REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
	  REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
	  REACT_PROFILER_TYPE = Symbol.for("react.profiler");
	var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
	  REACT_CONTEXT_TYPE = Symbol.for("react.context"),
	  REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
	  REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
	  REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
	  REACT_MEMO_TYPE = Symbol.for("react.memo"),
	  REACT_LAZY_TYPE = Symbol.for("react.lazy"),
	  REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"),
	  REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
	function typeOf(object) {
	  if ("object" === typeof object && null !== object) {
	    var $$typeof = object.$$typeof;
	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        switch (object = object.type, object) {
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	          case REACT_SUSPENSE_LIST_TYPE:
	            return object;
	          default:
	            switch (object = object && object.$$typeof, object) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	                return object;
	              case REACT_CONSUMER_TYPE:
	                return object;
	              default:
	                return $$typeof;
	            }
	        }
	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }
	}
	reactIs_production.ContextConsumer = REACT_CONSUMER_TYPE;
	reactIs_production.ContextProvider = REACT_CONTEXT_TYPE;
	reactIs_production.Element = REACT_ELEMENT_TYPE;
	reactIs_production.ForwardRef = REACT_FORWARD_REF_TYPE;
	reactIs_production.Fragment = REACT_FRAGMENT_TYPE;
	reactIs_production.Lazy = REACT_LAZY_TYPE;
	reactIs_production.Memo = REACT_MEMO_TYPE;
	reactIs_production.Portal = REACT_PORTAL_TYPE;
	reactIs_production.Profiler = REACT_PROFILER_TYPE;
	reactIs_production.StrictMode = REACT_STRICT_MODE_TYPE;
	reactIs_production.Suspense = REACT_SUSPENSE_TYPE;
	reactIs_production.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
	reactIs_production.isContextConsumer = function (object) {
	  return typeOf(object) === REACT_CONSUMER_TYPE;
	};
	reactIs_production.isContextProvider = function (object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	};
	reactIs_production.isElement = function (object) {
	  return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	reactIs_production.isForwardRef = function (object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	};
	reactIs_production.isFragment = function (object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	};
	reactIs_production.isLazy = function (object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	};
	reactIs_production.isMemo = function (object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	};
	reactIs_production.isPortal = function (object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	};
	reactIs_production.isProfiler = function (object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	};
	reactIs_production.isStrictMode = function (object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	};
	reactIs_production.isSuspense = function (object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	};
	reactIs_production.isSuspenseList = function (object) {
	  return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
	};
	reactIs_production.isValidElementType = function (type) {
	  return "string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || void 0 !== type.getModuleId) ? !0 : !1;
	};
	reactIs_production.typeOf = typeOf;
	return reactIs_production;
}

var reactIs_development = {};

/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development;

function requireReactIs_development () {
	if (hasRequiredReactIs_development) return reactIs_development;
	hasRequiredReactIs_development = 1;

	"production" !== process.env.NODE_ENV && function () {
	  function typeOf(object) {
	    if ("object" === typeof object && null !== object) {
	      var $$typeof = object.$$typeof;
	      switch ($$typeof) {
	        case REACT_ELEMENT_TYPE:
	          switch (object = object.type, object) {
	            case REACT_FRAGMENT_TYPE:
	            case REACT_PROFILER_TYPE:
	            case REACT_STRICT_MODE_TYPE:
	            case REACT_SUSPENSE_TYPE:
	            case REACT_SUSPENSE_LIST_TYPE:
	              return object;
	            default:
	              switch (object = object && object.$$typeof, object) {
	                case REACT_CONTEXT_TYPE:
	                case REACT_FORWARD_REF_TYPE:
	                case REACT_LAZY_TYPE:
	                case REACT_MEMO_TYPE:
	                  return object;
	                case REACT_CONSUMER_TYPE:
	                  return object;
	                default:
	                  return $$typeof;
	              }
	          }
	        case REACT_PORTAL_TYPE:
	          return $$typeof;
	      }
	    }
	  }
	  var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
	    REACT_PORTAL_TYPE = Symbol.for("react.portal"),
	    REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
	    REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
	    REACT_PROFILER_TYPE = Symbol.for("react.profiler");
	  var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
	    REACT_CONTEXT_TYPE = Symbol.for("react.context"),
	    REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
	    REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
	    REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
	    REACT_MEMO_TYPE = Symbol.for("react.memo"),
	    REACT_LAZY_TYPE = Symbol.for("react.lazy"),
	    REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"),
	    REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
	  reactIs_development.ContextConsumer = REACT_CONSUMER_TYPE;
	  reactIs_development.ContextProvider = REACT_CONTEXT_TYPE;
	  reactIs_development.Element = REACT_ELEMENT_TYPE;
	  reactIs_development.ForwardRef = REACT_FORWARD_REF_TYPE;
	  reactIs_development.Fragment = REACT_FRAGMENT_TYPE;
	  reactIs_development.Lazy = REACT_LAZY_TYPE;
	  reactIs_development.Memo = REACT_MEMO_TYPE;
	  reactIs_development.Portal = REACT_PORTAL_TYPE;
	  reactIs_development.Profiler = REACT_PROFILER_TYPE;
	  reactIs_development.StrictMode = REACT_STRICT_MODE_TYPE;
	  reactIs_development.Suspense = REACT_SUSPENSE_TYPE;
	  reactIs_development.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
	  reactIs_development.isContextConsumer = function (object) {
	    return typeOf(object) === REACT_CONSUMER_TYPE;
	  };
	  reactIs_development.isContextProvider = function (object) {
	    return typeOf(object) === REACT_CONTEXT_TYPE;
	  };
	  reactIs_development.isElement = function (object) {
	    return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
	  };
	  reactIs_development.isForwardRef = function (object) {
	    return typeOf(object) === REACT_FORWARD_REF_TYPE;
	  };
	  reactIs_development.isFragment = function (object) {
	    return typeOf(object) === REACT_FRAGMENT_TYPE;
	  };
	  reactIs_development.isLazy = function (object) {
	    return typeOf(object) === REACT_LAZY_TYPE;
	  };
	  reactIs_development.isMemo = function (object) {
	    return typeOf(object) === REACT_MEMO_TYPE;
	  };
	  reactIs_development.isPortal = function (object) {
	    return typeOf(object) === REACT_PORTAL_TYPE;
	  };
	  reactIs_development.isProfiler = function (object) {
	    return typeOf(object) === REACT_PROFILER_TYPE;
	  };
	  reactIs_development.isStrictMode = function (object) {
	    return typeOf(object) === REACT_STRICT_MODE_TYPE;
	  };
	  reactIs_development.isSuspense = function (object) {
	    return typeOf(object) === REACT_SUSPENSE_TYPE;
	  };
	  reactIs_development.isSuspenseList = function (object) {
	    return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
	  };
	  reactIs_development.isValidElementType = function (type) {
	    return "string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || void 0 !== type.getModuleId) ? !0 : !1;
	  };
	  reactIs_development.typeOf = typeOf;
	}();
	return reactIs_development;
}

if (process.env.NODE_ENV === 'production') {
  reactIs.exports = requireReactIs_production();
} else {
  reactIs.exports = requireReactIs_development();
}

var reactIsExports = reactIs.exports;

// Simplified polyfill for IE11 support
// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3
const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
function getFunctionName(fn) {
  const match = `${fn}`.match(fnNameMatchRegex);
  const name = match && match[1];
  return name || '';
}
function getFunctionComponentName(Component, fallback = '') {
  return Component.displayName || Component.name || getFunctionName(Component) || fallback;
}
function getWrappedName(outerType, innerType, wrapperName) {
  const functionName = getFunctionComponentName(innerType);
  return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
}

/**
 * cherry-pick from
 * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
 * originally forked from recompose/getDisplayName with added IE11 support
 */
function getDisplayName$1(Component) {
  if (Component == null) {
    return undefined;
  }
  if (typeof Component === 'string') {
    return Component;
  }
  if (typeof Component === 'function') {
    return getFunctionComponentName(Component, 'Component');
  }

  // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`
  if (typeof Component === 'object') {
    switch (Component.$$typeof) {
      case reactIsExports.ForwardRef:
        return getWrappedName(Component, Component.render, 'ForwardRef');
      case reactIsExports.Memo:
        return getWrappedName(Component, Component.type, 'memo');
      default:
        return undefined;
    }
  }
  return undefined;
}

var getDisplayName = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: getDisplayName$1,
  getFunctionName: getFunctionName
});

const _excluded$e = ["ownerState"],
  _excluded2$1 = ["variants"],
  _excluded3$1 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
function isEmpty$4(obj) {
  return Object.keys(obj).length === 0;
}

// https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
function isStringTag$1(tag) {
  return typeof tag === 'string' &&
  // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96;
}

// Update /system/styled/#api in case if this changes
function shouldForwardProp$1(prop) {
  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
}
const systemDefaultTheme$1 = createTheme$2();
const lowercaseFirstLetter$1 = string => {
  if (!string) {
    return string;
  }
  return string.charAt(0).toLowerCase() + string.slice(1);
};
function resolveTheme$1({
  defaultTheme,
  theme,
  themeId
}) {
  return isEmpty$4(theme) ? defaultTheme : theme[themeId] || theme;
}
function defaultOverridesResolver$1(slot) {
  if (!slot) {
    return null;
  }
  return (props, styles) => styles[slot];
}
function processStyleArg$1(callableStyle, _ref) {
  let {
      ownerState
    } = _ref,
    props = _objectWithoutPropertiesLoose$1(_ref, _excluded$e);
  const resolvedStylesArg = typeof callableStyle === 'function' ? callableStyle(_extends$5({
    ownerState
  }, props)) : callableStyle;
  if (Array.isArray(resolvedStylesArg)) {
    return resolvedStylesArg.flatMap(resolvedStyle => processStyleArg$1(resolvedStyle, _extends$5({
      ownerState
    }, props)));
  }
  if (!!resolvedStylesArg && typeof resolvedStylesArg === 'object' && Array.isArray(resolvedStylesArg.variants)) {
    const {
        variants = []
      } = resolvedStylesArg,
      otherStyles = _objectWithoutPropertiesLoose$1(resolvedStylesArg, _excluded2$1);
    let result = otherStyles;
    variants.forEach(variant => {
      let isMatch = true;
      if (typeof variant.props === 'function') {
        isMatch = variant.props(_extends$5({
          ownerState
        }, props, ownerState));
      } else {
        Object.keys(variant.props).forEach(key => {
          if ((ownerState == null ? void 0 : ownerState[key]) !== variant.props[key] && props[key] !== variant.props[key]) {
            isMatch = false;
          }
        });
      }
      if (isMatch) {
        if (!Array.isArray(result)) {
          result = [result];
        }
        result.push(typeof variant.style === 'function' ? variant.style(_extends$5({
          ownerState
        }, props, ownerState)) : variant.style);
      }
    });
    return result;
  }
  return resolvedStylesArg;
}
function createStyled$2(input = {}) {
  const {
    themeId,
    defaultTheme = systemDefaultTheme$1,
    rootShouldForwardProp = shouldForwardProp$1,
    slotShouldForwardProp = shouldForwardProp$1
  } = input;
  const systemSx = props => {
    return styleFunctionSx$2(_extends$5({}, props, {
      theme: resolveTheme$1(_extends$5({}, props, {
        defaultTheme,
        themeId
      }))
    }));
  };
  systemSx.__mui_systemSx = true;
  return (tag, inputOptions = {}) => {
    // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
    internal_processStyles(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
    const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        overridesResolver = defaultOverridesResolver$1(lowercaseFirstLetter$1(componentSlot))
      } = inputOptions,
      options = _objectWithoutPropertiesLoose$1(inputOptions, _excluded3$1);

    // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
    // TODO v6: remove `Root` in the next major release
    // For more details: https://github.com/mui/material-ui/pull/37908
    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
    const skipSx = inputSkipSx || false;
    let label;
    if (process.env.NODE_ENV !== 'production') {
      if (componentName) {
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        label = `${componentName}-${lowercaseFirstLetter$1(componentSlot || 'Root')}`;
      }
    }
    let shouldForwardPropOption = shouldForwardProp$1;

    // TODO v6: remove `Root` in the next major release
    // For more details: https://github.com/mui/material-ui/pull/37908
    if (componentSlot === 'Root' || componentSlot === 'root') {
      shouldForwardPropOption = rootShouldForwardProp;
    } else if (componentSlot) {
      // any other slot specified
      shouldForwardPropOption = slotShouldForwardProp;
    } else if (isStringTag$1(tag)) {
      // for string (html) tag, preserve the behavior in emotion & styled-components.
      shouldForwardPropOption = undefined;
    }
    const defaultStyledResolver = styled$3(tag, _extends$5({
      shouldForwardProp: shouldForwardPropOption,
      label
    }, options));
    const transformStyleArg = stylesArg => {
      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
      // component stays as a function. This condition makes sure that we do not interpolate functions
      // which are basically components used as a selectors.
      if (typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg || isPlainObject(stylesArg)) {
        return props => processStyleArg$1(stylesArg, _extends$5({}, props, {
          theme: resolveTheme$1({
            theme: props.theme,
            defaultTheme,
            themeId
          })
        }));
      }
      return stylesArg;
    };
    const muiStyledResolver = (styleArg, ...expressions) => {
      let transformedStyleArg = transformStyleArg(styleArg);
      const expressionsWithDefaultTheme = expressions ? expressions.map(transformStyleArg) : [];
      if (componentName && overridesResolver) {
        expressionsWithDefaultTheme.push(props => {
          const theme = resolveTheme$1(_extends$5({}, props, {
            defaultTheme,
            themeId
          }));
          if (!theme.components || !theme.components[componentName] || !theme.components[componentName].styleOverrides) {
            return null;
          }
          const styleOverrides = theme.components[componentName].styleOverrides;
          const resolvedStyleOverrides = {};
          // TODO: v7 remove iteration and use `resolveStyleArg(styleOverrides[slot])` directly
          Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
            resolvedStyleOverrides[slotKey] = processStyleArg$1(slotStyle, _extends$5({}, props, {
              theme
            }));
          });
          return overridesResolver(props, resolvedStyleOverrides);
        });
      }
      if (componentName && !skipVariantsResolver) {
        expressionsWithDefaultTheme.push(props => {
          var _theme$components;
          const theme = resolveTheme$1(_extends$5({}, props, {
            defaultTheme,
            themeId
          }));
          const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[componentName]) == null ? void 0 : _theme$components.variants;
          return processStyleArg$1({
            variants: themeVariants
          }, _extends$5({}, props, {
            theme
          }));
        });
      }
      if (!skipSx) {
        expressionsWithDefaultTheme.push(systemSx);
      }
      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
        const placeholders = new Array(numOfCustomFnsApplied).fill('');
        // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
        transformedStyleArg = [...styleArg, ...placeholders];
        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
      }
      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
      if (process.env.NODE_ENV !== 'production') {
        let displayName;
        if (componentName) {
          displayName = `${componentName}${capitalize$1(componentSlot || '')}`;
        }
        if (displayName === undefined) {
          displayName = `Styled(${getDisplayName$1(tag)})`;
        }
        Component.displayName = displayName;
      }
      if (tag.muiName) {
        Component.muiName = tag.muiName;
      }
      return Component;
    };
    if (defaultStyledResolver.withConfig) {
      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
    }
    return muiStyledResolver;
  };
}

const styled$2 = createStyled$2();
var systemStyled = styled$2;

/**
 * Add keys, values of `defaultProps` that does not exist in `props`
 * @param {object} defaultProps
 * @param {object} props
 * @returns {object} resolved props
 */
function resolveProps(defaultProps, props) {
  const output = _extends$5({}, props);
  Object.keys(defaultProps).forEach(propName => {
    if (propName.toString().match(/^(components|slots)$/)) {
      output[propName] = _extends$5({}, defaultProps[propName], output[propName]);
    } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
      const defaultSlotProps = defaultProps[propName] || {};
      const slotProps = props[propName];
      output[propName] = {};
      if (!slotProps || !Object.keys(slotProps)) {
        // Reduce the iteration if the slot props is empty
        output[propName] = defaultSlotProps;
      } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
        // Reduce the iteration if the default slot props is empty
        output[propName] = slotProps;
      } else {
        output[propName] = _extends$5({}, slotProps);
        Object.keys(defaultSlotProps).forEach(slotPropName => {
          output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
        });
      }
    } else if (output[propName] === undefined) {
      output[propName] = defaultProps[propName];
    }
  });
  return output;
}

function getThemeProps$1(params) {
  const {
    theme,
    name,
    props
  } = params;
  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
    return props;
  }
  return resolveProps(theme.components[name].defaultProps, props);
}

function useThemeProps({
  props,
  name,
  defaultTheme,
  themeId
}) {
  let theme = useTheme$1(defaultTheme);
  if (themeId) {
    theme = theme[themeId] || theme;
  }
  const mergedProps = getThemeProps$1({
    theme,
    name,
    props
  });
  return mergedProps;
}

/**
 * A version of `React.useLayoutEffect` that does not show a warning when server-side rendering.
 * This is useful for effects that are only needed for client-side rendering but not for SSR.
 *
 * Before you use this hook, make sure to read https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85
 * and confirm it doesn't apply to your use-case.
 */
const useEnhancedEffect = typeof window !== 'undefined' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
var useEnhancedEffect$1 = useEnhancedEffect;

/**
 * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.
 */

/**
 * @deprecated Not used internally. Use `MediaQueryList` from lib.dom.d.ts instead.
 */

/**
 * @deprecated Not used internally. Use `(event: MediaQueryListEvent) => void` instead.
 */

function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
  const [match, setMatch] = React__namespace.useState(() => {
    if (noSsr && matchMedia) {
      return matchMedia(query).matches;
    }
    if (ssrMatchMedia) {
      return ssrMatchMedia(query).matches;
    }

    // Once the component is mounted, we rely on the
    // event listeners to return the correct matches value.
    return defaultMatches;
  });
  useEnhancedEffect$1(() => {
    let active = true;
    if (!matchMedia) {
      return undefined;
    }
    const queryList = matchMedia(query);
    const updateMatch = () => {
      // Workaround Safari wrong implementation of matchMedia
      // TODO can we remove it?
      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677
      if (active) {
        setMatch(queryList.matches);
      }
    };
    updateMatch();
    // TODO: Use `addEventListener` once support for Safari < 14 is dropped
    queryList.addListener(updateMatch);
    return () => {
      active = false;
      queryList.removeListener(updateMatch);
    };
  }, [query, matchMedia]);
  return match;
}

// eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814
const maybeReactUseSyncExternalStore = React__namespace['useSyncExternalStore' + ''];
function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
  const getDefaultSnapshot = React__namespace.useCallback(() => defaultMatches, [defaultMatches]);
  const getServerSnapshot = React__namespace.useMemo(() => {
    if (noSsr && matchMedia) {
      return () => matchMedia(query).matches;
    }
    if (ssrMatchMedia !== null) {
      const {
        matches
      } = ssrMatchMedia(query);
      return () => matches;
    }
    return getDefaultSnapshot;
  }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);
  const [getSnapshot, subscribe] = React__namespace.useMemo(() => {
    if (matchMedia === null) {
      return [getDefaultSnapshot, () => () => {}];
    }
    const mediaQueryList = matchMedia(query);
    return [() => mediaQueryList.matches, notify => {
      // TODO: Use `addEventListener` once support for Safari < 14 is dropped
      mediaQueryList.addListener(notify);
      return () => {
        mediaQueryList.removeListener(notify);
      };
    }];
  }, [getDefaultSnapshot, matchMedia, query]);
  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
  return match;
}
function useMediaQuery(queryInput, options = {}) {
  const theme = useTheme$2();
  // Wait for jsdom to support the match media feature.
  // All the browsers MUI support have this built-in.
  // This defensive check is here for simplicity.
  // Most of the time, the match media logic isn't central to people tests.
  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';
  const {
    defaultMatches = false,
    matchMedia = supportMatchMedia ? window.matchMedia : null,
    ssrMatchMedia = null,
    noSsr = false
  } = getThemeProps$1({
    name: 'MuiUseMediaQuery',
    props: options,
    theme
  });
  if (process.env.NODE_ENV !== 'production') {
    if (typeof queryInput === 'function' && theme === null) {
      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\n'));
    }
  }
  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;
  query = query.replace(/^@media( ?)/m, '');

  // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable
  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;
  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React__namespace.useDebugValue({
      query,
      match
    });
  }
  return match;
}

function clamp$3(val, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER) {
  return Math.max(min, Math.min(val, max));
}

var clamp$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: clamp$3
});

/**
 * Returns a number whose value is limited to the given range.
 * @param {number} value The value to be clamped
 * @param {number} min The lower boundary of the output range
 * @param {number} max The upper boundary of the output range
 * @returns {number} A number in the range [min, max]
 */
function clampWrapper$1(value, min = 0, max = 1) {
  if (process.env.NODE_ENV !== 'production') {
    if (value < min || value > max) {
      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
    }
  }
  return clamp$3(value, min, max);
}

/**
 * Converts a color from CSS hex format to CSS rgb format.
 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
 * @returns {string} A CSS rgb color string
 */
function hexToRgb$1(color) {
  color = color.slice(1);
  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
  let colors = color.match(re);
  if (colors && colors[0].length === 1) {
    colors = colors.map(n => n + n);
  }
  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', ')})` : '';
}

/**
 * Returns an object with the type and values of a color.
 *
 * Note: Does not support rgb % values.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {object} - A MUI color object: {type: string, values: number[]}
 */
function decomposeColor$1(color) {
  // Idempotent
  if (color.type) {
    return color;
  }
  if (color.charAt(0) === '#') {
    return decomposeColor$1(hexToRgb$1(color));
  }
  const marker = color.indexOf('(');
  const type = color.substring(0, marker);
  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : formatMuiErrorMessage$1(9, color));
  }
  let values = color.substring(marker + 1, color.length - 1);
  let colorSpace;
  if (type === 'color') {
    values = values.split(' ');
    colorSpace = values.shift();
    if (values.length === 4 && values[3].charAt(0) === '/') {
      values[3] = values[3].slice(1);
    }
    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : formatMuiErrorMessage$1(10, colorSpace));
    }
  } else {
    values = values.split(',');
  }
  values = values.map(value => parseFloat(value));
  return {
    type,
    values,
    colorSpace
  };
}

/**
 * Converts a color object with type and values to a string.
 * @param {object} color - Decomposed color
 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'
 * @param {array} color.values - [n,n,n] or [n,n,n,n]
 * @returns {string} A CSS color string
 */
function recomposeColor$1(color) {
  const {
    type,
    colorSpace
  } = color;
  let {
    values
  } = color;
  if (type.indexOf('rgb') !== -1) {
    // Only convert the first 3 values to int (i.e. not alpha)
    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
  } else if (type.indexOf('hsl') !== -1) {
    values[1] = `${values[1]}%`;
    values[2] = `${values[2]}%`;
  }
  if (type.indexOf('color') !== -1) {
    values = `${colorSpace} ${values.join(' ')}`;
  } else {
    values = `${values.join(', ')}`;
  }
  return `${type}(${values})`;
}

/**
 * Sets the absolute transparency of a color.
 * Any existing alpha values are overwritten.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} value - value to set the alpha channel to in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */
function alpha$1(color, value) {
  color = decomposeColor$1(color);
  value = clampWrapper$1(value);
  if (color.type === 'rgb' || color.type === 'hsl') {
    color.type += 'a';
  }
  if (color.type === 'color') {
    color.values[3] = `/${value}`;
  } else {
    color.values[3] = value;
  }
  return recomposeColor$1(color);
}

function chainPropTypes(propType1, propType2) {
  if (process.env.NODE_ENV === 'production') {
    return () => null;
  }
  return function validate(...args) {
    return propType1(...args) || propType2(...args);
  };
}

function isClassComponent(elementType) {
  // elementType.prototype?.isReactComponent
  const {
    prototype = {}
  } = elementType;
  return Boolean(prototype.isReactComponent);
}
function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
  const propValue = props[propName];
  const safePropName = propFullName || propName;
  if (propValue == null ||
  // When server-side rendering React doesn't warn either.
  // This is not an accurate check for SSR.
  // This is only in place for emotion compat.
  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
  typeof window === 'undefined') {
    return null;
  }
  let warningHint;

  /**
   * Blacklisting instead of whitelisting
   *
   * Blacklisting will miss some components, such as React.Fragment. Those will at least
   * trigger a warning in React.
   * We can't whitelist because there is no safe way to detect React.forwardRef
   * or class components. "Safe" means there's no public API.
   *
   */
  if (typeof propValue === 'function' && !isClassComponent(propValue)) {
    warningHint = 'Did you accidentally provide a plain function component instead?';
  }
  if (warningHint !== undefined) {
    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
  }
  return null;
}
var elementTypeAcceptingRef$1 = chainPropTypes(PropTypes.elementType, elementTypeAcceptingRef);

// This module is based on https://github.com/airbnb/prop-types-exact repository.
// However, in order to reduce the number of dependencies and to remove some extra safe checks
// the module was forked.

const specialProperty = 'exact-prop: \u200b';
function exactProp(propTypes) {
  if (process.env.NODE_ENV === 'production') {
    return propTypes;
  }
  return _extends$5({}, propTypes, {
    [specialProperty]: props => {
      const unsupportedProps = Object.keys(props).filter(prop => !propTypes.hasOwnProperty(prop));
      if (unsupportedProps.length > 0) {
        return new Error(`The following props are not supported: ${unsupportedProps.map(prop => `\`${prop}\``).join(', ')}. Please remove them.`);
      }
      return null;
    }
  });
}

const refType = PropTypes.oneOfType([PropTypes.func, PropTypes.object]);
var refType$1 = refType;

/**
 * Safe chained function.
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 */
function createChainedFunction(...funcs) {
  return funcs.reduce((acc, func) => {
    if (func == null) {
      return acc;
    }
    return function chainedFunction(...args) {
      acc.apply(this, args);
      func.apply(this, args);
    };
  }, () => {});
}

// Corresponds to 10 frames at 60 Hz.
// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
function debounce$1(func, wait = 166) {
  let timeout;
  function debounced(...args) {
    const later = () => {
      // @ts-ignore
      func.apply(this, args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  }
  debounced.clear = () => {
    clearTimeout(timeout);
  };
  return debounced;
}

function deprecatedPropType(validator, reason) {
  if (process.env.NODE_ENV === 'production') {
    return () => null;
  }
  return (props, propName, componentName, location, propFullName) => {
    const componentNameSafe = componentName || '<<anonymous>>';
    const propFullNameSafe = propFullName || propName;
    if (typeof props[propName] !== 'undefined') {
      return new Error(`The ${location} \`${propFullNameSafe}\` of ` + `\`${componentNameSafe}\` is deprecated. ${reason}`);
    }
    return null;
  };
}

function isMuiElement(element, muiNames) {
  var _muiName, _element$type;
  return /*#__PURE__*/ /*#__PURE__*/React__namespace.isValidElement(element) && muiNames.indexOf(
  // For server components `muiName` is avaialble in element.type._payload.value.muiName
  // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
  // eslint-disable-next-line no-underscore-dangle
  (_muiName = element.type.muiName) != null ? _muiName : (_element$type = element.type) == null || (_element$type = _element$type._payload) == null || (_element$type = _element$type.value) == null ? void 0 : _element$type.muiName) !== -1;
}

function ownerDocument(node) {
  return node && node.ownerDocument || document;
}

function ownerWindow(node) {
  const doc = ownerDocument(node);
  return doc.defaultView || window;
}

function requirePropFactory(componentNameInError, Component) {
  if (process.env.NODE_ENV === 'production') {
    return () => null;
  }

  // eslint-disable-next-line react/forbid-foreign-prop-types
  const prevPropTypes = Component ? _extends$5({}, Component.propTypes) : null;
  const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {
    const propFullNameSafe = propFullName || propName;
    const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
    if (defaultTypeChecker) {
      const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
      if (typeCheckerResult) {
        return typeCheckerResult;
      }
    }
    if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {
      return new Error(`The prop \`${propFullNameSafe}\` of ` + `\`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
    }
    return null;
  };
  return requireProp;
}

/**
 * TODO v5: consider making it private
 *
 * passes {value} to {ref}
 *
 * WARNING: Be sure to only call this inside a callback that is passed as a ref.
 * Otherwise, make sure to cleanup the previous {ref} if it changes. See
 * https://github.com/mui/material-ui/issues/13539
 *
 * Useful if you want to expose the ref of an inner component to the public API
 * while still using it inside the component.
 * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
 */
function setRef(ref, value) {
  if (typeof ref === 'function') {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}

let globalId = 0;
function useGlobalId(idOverride) {
  const [defaultId, setDefaultId] = React__namespace.useState(idOverride);
  const id = idOverride || defaultId;
  React__namespace.useEffect(() => {
    if (defaultId == null) {
      // Fallback to this default id when possible.
      // Use the incrementing value for client-side rendering only.
      // We can't use it server-side.
      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem
      globalId += 1;
      setDefaultId(`mui-${globalId}`);
    }
  }, [defaultId]);
  return id;
}

// downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814
const maybeReactUseId = React__namespace['useId'.toString()];
/**
 *
 * @example <div id={useId()} />
 * @param idOverride
 * @returns {string}
 */
function useId(idOverride) {
  if (maybeReactUseId !== undefined) {
    const reactId = maybeReactUseId();
    return idOverride != null ? idOverride : reactId;
  }
  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.
  return useGlobalId(idOverride);
}

function unsupportedProp(props, propName, componentName, location, propFullName) {
  if (process.env.NODE_ENV === 'production') {
    return null;
  }
  const propFullNameSafe = propFullName || propName;
  if (typeof props[propName] !== 'undefined') {
    return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
  }
  return null;
}

function useControlled({
  controlled,
  default: defaultProp,
  name,
  state = 'value'
}) {
  // isControlled is ignored in the hook dependency lists as it should never change.
  const {
    current: isControlled
  } = React__namespace.useRef(controlled !== undefined);
  const [valueState, setValue] = React__namespace.useState(defaultProp);
  const value = isControlled ? controlled : valueState;
  if (process.env.NODE_ENV !== 'production') {
    React__namespace.useEffect(() => {
      if (isControlled !== (controlled !== undefined)) {
        console.error([`MUI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.', "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", 'More info: https://fb.me/react-controlled-components'].join('\n'));
      }
    }, [state, name, controlled]);
    const {
      current: defaultValue
    } = React__namespace.useRef(defaultProp);
    React__namespace.useEffect(() => {
      if (!isControlled && !Object.is(defaultValue, defaultProp)) {
        console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`].join('\n'));
      }
    }, [JSON.stringify(defaultProp)]);
  }
  const setValueIfUncontrolled = React__namespace.useCallback(newValue => {
    if (!isControlled) {
      setValue(newValue);
    }
  }, []);
  return [value, setValueIfUncontrolled];
}

/**
 * Inspired by https://github.com/facebook/react/issues/14099#issuecomment-440013892
 * See RFC in https://github.com/reactjs/rfcs/pull/220
 */

function useEventCallback(fn) {
  const ref = React__namespace.useRef(fn);
  useEnhancedEffect$1(() => {
    ref.current = fn;
  });
  return React__namespace.useRef((...args) =>
  // @ts-expect-error hide `this`
  (0, ref.current)(...args)).current;
}

function useForkRef(...refs) {
  /**
   * This will create a new function if the refs passed to this hook change and are all defined.
   * This means react will call the old forkRef with `null` and the new forkRef
   * with the ref. Cleanup naturally emerges from this behavior.
   */
  return React__namespace.useMemo(() => {
    if (refs.every(ref => ref == null)) {
      return null;
    }
    return instance => {
      refs.forEach(ref => {
        setRef(ref, instance);
      });
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, refs);
}

const UNINITIALIZED = {};

/**
 * A React.useRef() that is initialized lazily with a function. Note that it accepts an optional
 * initialization argument, so the initialization function doesn't need to be an inline closure.
 *
 * @usage
 *   const ref = useLazyRef(sortColumns, columns)
 */
function useLazyRef(init, initArg) {
  const ref = React__namespace.useRef(UNINITIALIZED);
  if (ref.current === UNINITIALIZED) {
    ref.current = init(initArg);
  }
  return ref;
}

const EMPTY = [];

/**
 * A React.useEffect equivalent that runs once, when the component is mounted.
 */
function useOnMount(fn) {
  /* eslint-disable react-hooks/exhaustive-deps */
  React__namespace.useEffect(fn, EMPTY);
  /* eslint-enable react-hooks/exhaustive-deps */
}

class Timeout {
  constructor() {
    this.currentId = null;
    this.clear = () => {
      if (this.currentId !== null) {
        clearTimeout(this.currentId);
        this.currentId = null;
      }
    };
    this.disposeEffect = () => {
      return this.clear;
    };
  }
  static create() {
    return new Timeout();
  }
  /**
   * Executes `fn` after `delay`, clearing any previously scheduled call.
   */
  start(delay, fn) {
    this.clear();
    this.currentId = setTimeout(() => {
      this.currentId = null;
      fn();
    }, delay);
  }
}
function useTimeout() {
  const timeout = useLazyRef(Timeout.create).current;
  useOnMount(timeout.disposeEffect);
  return timeout;
}

let hadKeyboardEvent = true;
let hadFocusVisibleRecently = false;
const hadFocusVisibleRecentlyTimeout = new Timeout();
const inputTypesWhitelist = {
  text: true,
  search: true,
  url: true,
  tel: true,
  email: true,
  password: true,
  number: true,
  date: true,
  month: true,
  week: true,
  time: true,
  datetime: true,
  'datetime-local': true
};

/**
 * Computes whether the given element should automatically trigger the
 * `focus-visible` class being added, i.e. whether it should always match
 * `:focus-visible` when focused.
 * @param {Element} node
 * @returns {boolean}
 */
function focusTriggersKeyboardModality(node) {
  const {
    type,
    tagName
  } = node;
  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
    return true;
  }
  if (tagName === 'TEXTAREA' && !node.readOnly) {
    return true;
  }
  if (node.isContentEditable) {
    return true;
  }
  return false;
}

/**
 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
 * If the most recent user interaction was via the keyboard;
 * and the key press did not include a meta, alt/option, or control key;
 * then the modality is keyboard. Otherwise, the modality is not keyboard.
 * @param {KeyboardEvent} event
 */
function handleKeyDown(event) {
  if (event.metaKey || event.altKey || event.ctrlKey) {
    return;
  }
  hadKeyboardEvent = true;
}

/**
 * If at any point a user clicks with a pointing device, ensure that we change
 * the modality away from keyboard.
 * This avoids the situation where a user presses a key on an already focused
 * element, and then clicks on a different element, focusing it with a
 * pointing device, while we still think we're in keyboard modality.
 */
function handlePointerDown() {
  hadKeyboardEvent = false;
}
function handleVisibilityChange() {
  if (this.visibilityState === 'hidden') {
    // If the tab becomes active again, the browser will handle calling focus
    // on the element (Safari actually calls it twice).
    // If this tab change caused a blur on an element with focus-visible,
    // re-apply the class when the user switches back to the tab.
    if (hadFocusVisibleRecently) {
      hadKeyboardEvent = true;
    }
  }
}
function prepare(doc) {
  doc.addEventListener('keydown', handleKeyDown, true);
  doc.addEventListener('mousedown', handlePointerDown, true);
  doc.addEventListener('pointerdown', handlePointerDown, true);
  doc.addEventListener('touchstart', handlePointerDown, true);
  doc.addEventListener('visibilitychange', handleVisibilityChange, true);
}
function isFocusVisible(event) {
  const {
    target
  } = event;
  try {
    return target.matches(':focus-visible');
  } catch (error) {
    // Browsers not implementing :focus-visible will throw a SyntaxError.
    // We use our own heuristic for those browsers.
    // Rethrow might be better if it's not the expected error but do we really
    // want to crash if focus-visible malfunctioned?
  }

  // No need for validFocusTarget check. The user does that by attaching it to
  // focusable events only.
  return hadKeyboardEvent || focusTriggersKeyboardModality(target);
}
function useIsFocusVisible() {
  const ref = React__namespace.useCallback(node => {
    if (node != null) {
      prepare(node.ownerDocument);
    }
  }, []);
  const isFocusVisibleRef = React__namespace.useRef(false);

  /**
   * Should be called if a blur event is fired
   */
  function handleBlurVisible() {
    // checking against potential state variable does not suffice if we focus and blur synchronously.
    // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
    // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
    // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
    // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
    if (isFocusVisibleRef.current) {
      // To detect a tab/window switch, we look for a blur event followed
      // rapidly by a visibility change.
      // If we don't see a visibility change within 100ms, it's probably a
      // regular focus change.
      hadFocusVisibleRecently = true;
      hadFocusVisibleRecentlyTimeout.start(100, () => {
        hadFocusVisibleRecently = false;
      });
      isFocusVisibleRef.current = false;
      return true;
    }
    return false;
  }

  /**
   * Should be called if a blur event is fired
   */
  function handleFocusVisible(event) {
    if (isFocusVisible(event)) {
      isFocusVisibleRef.current = true;
      return true;
    }
    return false;
  }
  return {
    isFocusVisibleRef,
    onFocus: handleFocusVisible,
    onBlur: handleBlurVisible,
    ref
  };
}

function composeClasses(slots, getUtilityClass, classes = undefined) {
  const output = {};
  Object.keys(slots).forEach(
  // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
  // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
  slot => {
    output[slot] = slots[slot].reduce((acc, key) => {
      if (key) {
        const utilityClass = getUtilityClass(key);
        if (utilityClass !== '') {
          acc.push(utilityClass);
        }
        if (classes && classes[key]) {
          acc.push(classes[key]);
        }
      }
      return acc;
    }, []).join(' ');
  });
  return output;
}

const ThemeContext = /*#__PURE__*/React__namespace.createContext(null);
if (process.env.NODE_ENV !== 'production') {
  ThemeContext.displayName = 'ThemeContext';
}
var ThemeContext$1 = ThemeContext;

function useTheme() {
  const theme = React__namespace.useContext(ThemeContext$1);
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React__namespace.useDebugValue(theme);
  }
  return theme;
}

const hasSymbol = typeof Symbol === 'function' && Symbol.for;
var nested = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

function mergeOuterLocalTheme(outerTheme, localTheme) {
  if (typeof localTheme === 'function') {
    const mergedTheme = localTheme(outerTheme);
    if (process.env.NODE_ENV !== 'production') {
      if (!mergedTheme) {
        console.error(['MUI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\n'));
      }
    }
    return mergedTheme;
  }
  return _extends$5({}, outerTheme, localTheme);
}

/**
 * This component takes a `theme` prop.
 * It makes the `theme` available down the React tree thanks to React context.
 * This component should preferably be used at **the root of your component tree**.
 */
function ThemeProvider$2(props) {
  const {
    children,
    theme: localTheme
  } = props;
  const outerTheme = useTheme();
  if (process.env.NODE_ENV !== 'production') {
    if (outerTheme === null && typeof localTheme === 'function') {
      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\n'));
    }
  }
  const theme = React__namespace.useMemo(() => {
    const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
    if (output != null) {
      output[nested] = outerTheme !== null;
    }
    return output;
  }, [localTheme, outerTheme]);
  return /*#__PURE__*/require$$2$1.jsx(ThemeContext$1.Provider, {
    value: theme,
    children: children
  });
}
process.env.NODE_ENV !== "production" ? ThemeProvider$2.propTypes = {
  /**
   * Your component tree.
   */
  children: PropTypes.node,
  /**
   * A theme object. You can provide a function to extend the outer theme.
   */
  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired
} : void 0;
if (process.env.NODE_ENV !== 'production') {
  process.env.NODE_ENV !== "production" ? ThemeProvider$2.propTypes = exactProp(ThemeProvider$2.propTypes) : void 0;
}

const _excluded$d = ["value"];
const RtlContext = /*#__PURE__*/React__namespace.createContext();
function RtlProvider(_ref) {
  let {
      value
    } = _ref,
    props = _objectWithoutPropertiesLoose$1(_ref, _excluded$d);
  return /*#__PURE__*/require$$2$1.jsx(RtlContext.Provider, _extends$5({
    value: value != null ? value : true
  }, props));
}
process.env.NODE_ENV !== "production" ? RtlProvider.propTypes = {
  children: PropTypes.node,
  value: PropTypes.bool
} : void 0;

const PropsContext = /*#__PURE__*/React__namespace.createContext(undefined);
function DefaultPropsProvider({
  value,
  children
}) {
  return /*#__PURE__*/require$$2$1.jsx(PropsContext.Provider, {
    value: value,
    children: children
  });
}
process.env.NODE_ENV !== "production" ? DefaultPropsProvider.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * @ignore
   */
  value: PropTypes.object
} : void 0;
function getThemeProps(params) {
  const {
    theme,
    name,
    props
  } = params;
  if (!theme || !theme.components || !theme.components[name]) {
    return props;
  }
  const config = theme.components[name];
  if (config.defaultProps) {
    // compatible with v5 signature
    return resolveProps(config.defaultProps, props);
  }
  if (!config.styleOverrides && !config.variants) {
    // v6 signature, no property 'defaultProps'
    return resolveProps(config, props);
  }
  return props;
}
function useDefaultProps$1({
  props,
  name
}) {
  const ctx = React__namespace.useContext(PropsContext);
  return getThemeProps({
    props,
    name,
    theme: {
      components: ctx
    }
  });
}

const EMPTY_THEME = {};
function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
  return React__namespace.useMemo(() => {
    const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
    if (typeof localTheme === 'function') {
      const mergedTheme = localTheme(resolvedTheme);
      const result = themeId ? _extends$5({}, upperTheme, {
        [themeId]: mergedTheme
      }) : mergedTheme;
      // must return a function for the private theme to NOT merge with the upper theme.
      // see the test case "use provided theme from a callback" in ThemeProvider.test.js
      if (isPrivate) {
        return () => result;
      }
      return result;
    }
    return themeId ? _extends$5({}, upperTheme, {
      [themeId]: localTheme
    }) : _extends$5({}, upperTheme, localTheme);
  }, [themeId, upperTheme, localTheme, isPrivate]);
}

/**
 * This component makes the `theme` available down the React tree.
 * It should preferably be used at **the root of your component tree**.
 *
 * <ThemeProvider theme={theme}> // existing use case
 * <ThemeProvider theme={{ id: theme }}> // theme scoping
 */
function ThemeProvider$1(props) {
  const {
    children,
    theme: localTheme,
    themeId
  } = props;
  const upperTheme = useTheme$2(EMPTY_THEME);
  const upperPrivateTheme = useTheme() || EMPTY_THEME;
  if (process.env.NODE_ENV !== 'production') {
    if (upperTheme === null && typeof localTheme === 'function' || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === 'function') {
      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\n'));
    }
  }
  const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
  const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
  const rtlValue = engineTheme.direction === 'rtl';
  return /*#__PURE__*/require$$2$1.jsx(ThemeProvider$2, {
    theme: privateTheme,
    children: /*#__PURE__*/require$$2$1.jsx(ThemeContext$2.Provider, {
      value: engineTheme,
      children: /*#__PURE__*/require$$2$1.jsx(RtlProvider, {
        value: rtlValue,
        children: /*#__PURE__*/require$$2$1.jsx(DefaultPropsProvider, {
          value: engineTheme == null ? void 0 : engineTheme.components,
          children: children
        })
      })
    })
  });
}
process.env.NODE_ENV !== "production" ? ThemeProvider$1.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Your component tree.
   */
  children: PropTypes.node,
  /**
   * A theme object. You can provide a function to extend the outer theme.
   */
  theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,
  /**
   * The design system's unique id for getting the corresponded theme when there are multiple design systems.
   */
  themeId: PropTypes.string
} : void 0;
if (process.env.NODE_ENV !== 'production') {
  process.env.NODE_ENV !== "production" ? ThemeProvider$1.propTypes = exactProp(ThemeProvider$1.propTypes) : void 0;
}

const _excluded$c = ["className", "component", "disableGutters", "fixed", "maxWidth", "classes"];
const defaultTheme$3 = createTheme$2();
const defaultCreateStyledComponent = systemStyled('div', {
  name: 'MuiContainer',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[`maxWidth${capitalize$1(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];
  }
});
const useThemePropsDefault = inProps => useThemeProps({
  props: inProps,
  name: 'MuiContainer',
  defaultTheme: defaultTheme$3
});
const useUtilityClasses$5 = (ownerState, componentName) => {
  const getContainerUtilityClass = slot => {
    return generateUtilityClass(componentName, slot);
  };
  const {
    classes,
    fixed,
    disableGutters,
    maxWidth
  } = ownerState;
  const slots = {
    root: ['root', maxWidth && `maxWidth${capitalize$1(String(maxWidth))}`, fixed && 'fixed', disableGutters && 'disableGutters']
  };
  return composeClasses(slots, getContainerUtilityClass, classes);
};
function createContainer(options = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent = defaultCreateStyledComponent,
    useThemeProps = useThemePropsDefault,
    componentName = 'MuiContainer'
  } = options;
  const ContainerRoot = createStyledComponent(({
    theme,
    ownerState
  }) => _extends$5({
    width: '100%',
    marginLeft: 'auto',
    boxSizing: 'border-box',
    marginRight: 'auto',
    display: 'block'
  }, !ownerState.disableGutters && {
    paddingLeft: theme.spacing(2),
    paddingRight: theme.spacing(2),
    // @ts-ignore module augmentation fails if custom breakpoints are used
    [theme.breakpoints.up('sm')]: {
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    }
  }), ({
    theme,
    ownerState
  }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {
    const breakpoint = breakpointValueKey;
    const value = theme.breakpoints.values[breakpoint];
    if (value !== 0) {
      // @ts-ignore
      acc[theme.breakpoints.up(breakpoint)] = {
        maxWidth: `${value}${theme.breakpoints.unit}`
      };
    }
    return acc;
  }, {}), ({
    theme,
    ownerState
  }) => _extends$5({}, ownerState.maxWidth === 'xs' && {
    // @ts-ignore module augmentation fails if custom breakpoints are used
    [theme.breakpoints.up('xs')]: {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      maxWidth: Math.max(theme.breakpoints.values.xs, 444)
    }
  }, ownerState.maxWidth &&
  // @ts-ignore module augmentation fails if custom breakpoints are used
  ownerState.maxWidth !== 'xs' && {
    // @ts-ignore module augmentation fails if custom breakpoints are used
    [theme.breakpoints.up(ownerState.maxWidth)]: {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`
    }
  }));
  const Container = /*#__PURE__*/React__namespace.forwardRef(function Container(inProps, ref) {
    const props = useThemeProps(inProps);
    const {
        className,
        component = 'div',
        disableGutters = false,
        fixed = false,
        maxWidth = 'lg'
      } = props,
      other = _objectWithoutPropertiesLoose$1(props, _excluded$c);
    const ownerState = _extends$5({}, props, {
      component,
      disableGutters,
      fixed,
      maxWidth
    });

    // @ts-ignore module augmentation fails if custom breakpoints are used
    const classes = useUtilityClasses$5(ownerState, componentName);
    return (/*#__PURE__*/
      // @ts-ignore theme is injected by the styled util
      require$$2$1.jsx(ContainerRoot, _extends$5({
        as: component
        // @ts-ignore module augmentation fails if custom breakpoints are used
        ,

        ownerState: ownerState,
        className: clsx(classes.root, className),
        ref: ref
      }, other))
    );
  });
  process.env.NODE_ENV !== "production" ? Container.propTypes /* remove-proptypes */ = {
    children: PropTypes.node,
    classes: PropTypes.object,
    className: PropTypes.string,
    component: PropTypes.elementType,
    disableGutters: PropTypes.bool,
    fixed: PropTypes.bool,
    maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  return Container;
}

function createMixins(breakpoints, mixins) {
  return _extends$5({
    toolbar: {
      minHeight: 56,
      [breakpoints.up('xs')]: {
        '@media (orientation: landscape)': {
          minHeight: 48
        }
      },
      [breakpoints.up('sm')]: {
        minHeight: 64
      }
    }
  }, mixins);
}

var colorManipulator = {};

var interopRequireDefault = {exports: {}};

(function (module) {
	function _interopRequireDefault(e) {
	  return e && e.__esModule ? e : {
	    "default": e
	  };
	}
	module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports; 
} (interopRequireDefault));

var interopRequireDefaultExports = interopRequireDefault.exports;

var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(formatMuiErrorMessage);

var require$$2 = /*@__PURE__*/getAugmentedNamespace(clamp$2);

var _interopRequireDefault$8 = interopRequireDefaultExports;
Object.defineProperty(colorManipulator, "__esModule", {
  value: true
});
var alpha_1 = colorManipulator.alpha = alpha;
colorManipulator.blend = blend;
colorManipulator.colorChannel = void 0;
var darken_1 = colorManipulator.darken = darken;
colorManipulator.decomposeColor = decomposeColor;
colorManipulator.emphasize = emphasize;
var getContrastRatio_1 = colorManipulator.getContrastRatio = getContrastRatio;
colorManipulator.getLuminance = getLuminance;
colorManipulator.hexToRgb = hexToRgb;
colorManipulator.hslToRgb = hslToRgb;
var lighten_1 = colorManipulator.lighten = lighten;
colorManipulator.private_safeAlpha = private_safeAlpha;
colorManipulator.private_safeColorChannel = void 0;
colorManipulator.private_safeDarken = private_safeDarken;
colorManipulator.private_safeEmphasize = private_safeEmphasize;
colorManipulator.private_safeLighten = private_safeLighten;
colorManipulator.recomposeColor = recomposeColor;
colorManipulator.rgbToHex = rgbToHex;
var _formatMuiErrorMessage2 = _interopRequireDefault$8(require$$1$1);
var _clamp = _interopRequireDefault$8(require$$2);
/* eslint-disable @typescript-eslint/naming-convention */

/**
 * Returns a number whose value is limited to the given range.
 * @param {number} value The value to be clamped
 * @param {number} min The lower boundary of the output range
 * @param {number} max The upper boundary of the output range
 * @returns {number} A number in the range [min, max]
 */
function clampWrapper(value, min = 0, max = 1) {
  if (process.env.NODE_ENV !== 'production') {
    if (value < min || value > max) {
      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
    }
  }
  return (0, _clamp.default)(value, min, max);
}

/**
 * Converts a color from CSS hex format to CSS rgb format.
 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
 * @returns {string} A CSS rgb color string
 */
function hexToRgb(color) {
  color = color.slice(1);
  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
  let colors = color.match(re);
  if (colors && colors[0].length === 1) {
    colors = colors.map(n => n + n);
  }
  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', ')})` : '';
}
function intToHex(int) {
  const hex = int.toString(16);
  return hex.length === 1 ? `0${hex}` : hex;
}

/**
 * Returns an object with the type and values of a color.
 *
 * Note: Does not support rgb % values.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {object} - A MUI color object: {type: string, values: number[]}
 */
function decomposeColor(color) {
  // Idempotent
  if (color.type) {
    return color;
  }
  if (color.charAt(0) === '#') {
    return decomposeColor(hexToRgb(color));
  }
  const marker = color.indexOf('(');
  const type = color.substring(0, marker);
  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _formatMuiErrorMessage2.default)(9, color));
  }
  let values = color.substring(marker + 1, color.length - 1);
  let colorSpace;
  if (type === 'color') {
    values = values.split(' ');
    colorSpace = values.shift();
    if (values.length === 4 && values[3].charAt(0) === '/') {
      values[3] = values[3].slice(1);
    }
    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _formatMuiErrorMessage2.default)(10, colorSpace));
    }
  } else {
    values = values.split(',');
  }
  values = values.map(value => parseFloat(value));
  return {
    type,
    values,
    colorSpace
  };
}

/**
 * Returns a channel created from the input color.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {string} - The channel for the color, that can be used in rgba or hsla colors
 */
const colorChannel = color => {
  const decomposedColor = decomposeColor(color);
  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');
};
colorManipulator.colorChannel = colorChannel;
const private_safeColorChannel = (color, warning) => {
  try {
    return colorChannel(color);
  } catch (error) {
    if (warning && process.env.NODE_ENV !== 'production') {
      console.warn(warning);
    }
    return color;
  }
};

/**
 * Converts a color object with type and values to a string.
 * @param {object} color - Decomposed color
 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'
 * @param {array} color.values - [n,n,n] or [n,n,n,n]
 * @returns {string} A CSS color string
 */
colorManipulator.private_safeColorChannel = private_safeColorChannel;
function recomposeColor(color) {
  const {
    type,
    colorSpace
  } = color;
  let {
    values
  } = color;
  if (type.indexOf('rgb') !== -1) {
    // Only convert the first 3 values to int (i.e. not alpha)
    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
  } else if (type.indexOf('hsl') !== -1) {
    values[1] = `${values[1]}%`;
    values[2] = `${values[2]}%`;
  }
  if (type.indexOf('color') !== -1) {
    values = `${colorSpace} ${values.join(' ')}`;
  } else {
    values = `${values.join(', ')}`;
  }
  return `${type}(${values})`;
}

/**
 * Converts a color from CSS rgb format to CSS hex format.
 * @param {string} color - RGB color, i.e. rgb(n, n, n)
 * @returns {string} A CSS rgb color string, i.e. #nnnnnn
 */
function rgbToHex(color) {
  // Idempotent
  if (color.indexOf('#') === 0) {
    return color;
  }
  const {
    values
  } = decomposeColor(color);
  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;
}

/**
 * Converts a color from hsl format to rgb format.
 * @param {string} color - HSL color values
 * @returns {string} rgb color values
 */
function hslToRgb(color) {
  color = decomposeColor(color);
  const {
    values
  } = color;
  const h = values[0];
  const s = values[1] / 100;
  const l = values[2] / 100;
  const a = s * Math.min(l, 1 - l);
  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
  let type = 'rgb';
  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
  if (color.type === 'hsla') {
    type += 'a';
    rgb.push(values[3]);
  }
  return recomposeColor({
    type,
    values: rgb
  });
}
/**
 * The relative brightness of any point in a color space,
 * normalized to 0 for darkest black and 1 for lightest white.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {number} The relative brightness of the color in the range 0 - 1
 */
function getLuminance(color) {
  color = decomposeColor(color);
  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;
  rgb = rgb.map(val => {
    if (color.type !== 'color') {
      val /= 255; // normalized
    }
    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
  });

  // Truncate at 3 digits
  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
}

/**
 * Calculates the contrast ratio between two colors.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} A contrast ratio value in the range 0 - 21.
 */
function getContrastRatio(foreground, background) {
  const lumA = getLuminance(foreground);
  const lumB = getLuminance(background);
  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
}

/**
 * Sets the absolute transparency of a color.
 * Any existing alpha values are overwritten.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} value - value to set the alpha channel to in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */
function alpha(color, value) {
  color = decomposeColor(color);
  value = clampWrapper(value);
  if (color.type === 'rgb' || color.type === 'hsl') {
    color.type += 'a';
  }
  if (color.type === 'color') {
    color.values[3] = `/${value}`;
  } else {
    color.values[3] = value;
  }
  return recomposeColor(color);
}
function private_safeAlpha(color, value, warning) {
  try {
    return alpha(color, value);
  } catch (error) {
    if (warning && process.env.NODE_ENV !== 'production') {
      console.warn(warning);
    }
    return color;
  }
}

/**
 * Darkens a color.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */
function darken(color, coefficient) {
  color = decomposeColor(color);
  coefficient = clampWrapper(coefficient);
  if (color.type.indexOf('hsl') !== -1) {
    color.values[2] *= 1 - coefficient;
  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {
    for (let i = 0; i < 3; i += 1) {
      color.values[i] *= 1 - coefficient;
    }
  }
  return recomposeColor(color);
}
function private_safeDarken(color, coefficient, warning) {
  try {
    return darken(color, coefficient);
  } catch (error) {
    if (warning && process.env.NODE_ENV !== 'production') {
      console.warn(warning);
    }
    return color;
  }
}

/**
 * Lightens a color.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */
function lighten(color, coefficient) {
  color = decomposeColor(color);
  coefficient = clampWrapper(coefficient);
  if (color.type.indexOf('hsl') !== -1) {
    color.values[2] += (100 - color.values[2]) * coefficient;
  } else if (color.type.indexOf('rgb') !== -1) {
    for (let i = 0; i < 3; i += 1) {
      color.values[i] += (255 - color.values[i]) * coefficient;
    }
  } else if (color.type.indexOf('color') !== -1) {
    for (let i = 0; i < 3; i += 1) {
      color.values[i] += (1 - color.values[i]) * coefficient;
    }
  }
  return recomposeColor(color);
}
function private_safeLighten(color, coefficient, warning) {
  try {
    return lighten(color, coefficient);
  } catch (error) {
    if (warning && process.env.NODE_ENV !== 'production') {
      console.warn(warning);
    }
    return color;
  }
}

/**
 * Darken or lighten a color, depending on its luminance.
 * Light colors are darkened, dark colors are lightened.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */
function emphasize(color, coefficient = 0.15) {
  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
}
function private_safeEmphasize(color, coefficient, warning) {
  try {
    return emphasize(color, coefficient);
  } catch (error) {
    if (warning && process.env.NODE_ENV !== 'production') {
      console.warn(warning);
    }
    return color;
  }
}

/**
 * Blend a transparent overlay color with a background color, resulting in a single
 * RGB color.
 * @param {string} background - CSS color
 * @param {string} overlay - CSS color
 * @param {number} opacity - Opacity multiplier in the range 0 - 1
 * @param {number} [gamma=1.0] - Gamma correction factor. For gamma-correct blending, 2.2 is usual.
 */
function blend(background, overlay, opacity, gamma = 1.0) {
  const blendChannel = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);
  const backgroundColor = decomposeColor(background);
  const overlayColor = decomposeColor(overlay);
  const rgb = [blendChannel(backgroundColor.values[0], overlayColor.values[0]), blendChannel(backgroundColor.values[1], overlayColor.values[1]), blendChannel(backgroundColor.values[2], overlayColor.values[2])];
  return recomposeColor({
    type: 'rgb',
    values: rgb
  });
}

const _excluded$b = ["mode", "contrastThreshold", "tonalOffset"];
const light = {
  // The colors used to style the text.
  text: {
    // The most important text.
    primary: 'rgba(0, 0, 0, 0.87)',
    // Secondary text.
    secondary: 'rgba(0, 0, 0, 0.6)',
    // Disabled text have even lower visual prominence.
    disabled: 'rgba(0, 0, 0, 0.38)'
  },
  // The color used to divide different elements.
  divider: 'rgba(0, 0, 0, 0.12)',
  // The background colors used to style the surfaces.
  // Consistency between these values is important.
  background: {
    paper: common$1.white,
    default: common$1.white
  },
  // The colors used to style the action elements.
  action: {
    // The color of an active action like an icon button.
    active: 'rgba(0, 0, 0, 0.54)',
    // The color of an hovered action.
    hover: 'rgba(0, 0, 0, 0.04)',
    hoverOpacity: 0.04,
    // The color of a selected action.
    selected: 'rgba(0, 0, 0, 0.08)',
    selectedOpacity: 0.08,
    // The color of a disabled action.
    disabled: 'rgba(0, 0, 0, 0.26)',
    // The background color of a disabled action.
    disabledBackground: 'rgba(0, 0, 0, 0.12)',
    disabledOpacity: 0.38,
    focus: 'rgba(0, 0, 0, 0.12)',
    focusOpacity: 0.12,
    activatedOpacity: 0.12
  }
};
const dark = {
  text: {
    primary: common$1.white,
    secondary: 'rgba(255, 255, 255, 0.7)',
    disabled: 'rgba(255, 255, 255, 0.5)',
    icon: 'rgba(255, 255, 255, 0.5)'
  },
  divider: 'rgba(255, 255, 255, 0.12)',
  background: {
    paper: '#121212',
    default: '#121212'
  },
  action: {
    active: common$1.white,
    hover: 'rgba(255, 255, 255, 0.08)',
    hoverOpacity: 0.08,
    selected: 'rgba(255, 255, 255, 0.16)',
    selectedOpacity: 0.16,
    disabled: 'rgba(255, 255, 255, 0.3)',
    disabledBackground: 'rgba(255, 255, 255, 0.12)',
    disabledOpacity: 0.38,
    focus: 'rgba(255, 255, 255, 0.12)',
    focusOpacity: 0.12,
    activatedOpacity: 0.24
  }
};
function addLightOrDark(intent, direction, shade, tonalOffset) {
  const tonalOffsetLight = tonalOffset.light || tonalOffset;
  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
  if (!intent[direction]) {
    if (intent.hasOwnProperty(shade)) {
      intent[direction] = intent[shade];
    } else if (direction === 'light') {
      intent.light = lighten_1(intent.main, tonalOffsetLight);
    } else if (direction === 'dark') {
      intent.dark = darken_1(intent.main, tonalOffsetDark);
    }
  }
}
function getDefaultPrimary(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: blue$1[200],
      light: blue$1[50],
      dark: blue$1[400]
    };
  }
  return {
    main: blue$1[700],
    light: blue$1[400],
    dark: blue$1[800]
  };
}
function getDefaultSecondary(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: purple$1[200],
      light: purple$1[50],
      dark: purple$1[400]
    };
  }
  return {
    main: purple$1[500],
    light: purple$1[300],
    dark: purple$1[700]
  };
}
function getDefaultError(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: red$1[500],
      light: red$1[300],
      dark: red$1[700]
    };
  }
  return {
    main: red$1[700],
    light: red$1[400],
    dark: red$1[800]
  };
}
function getDefaultInfo(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: lightBlue$1[400],
      light: lightBlue$1[300],
      dark: lightBlue$1[700]
    };
  }
  return {
    main: lightBlue$1[700],
    light: lightBlue$1[500],
    dark: lightBlue$1[900]
  };
}
function getDefaultSuccess(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: green$1[400],
      light: green$1[300],
      dark: green$1[700]
    };
  }
  return {
    main: green$1[800],
    light: green$1[500],
    dark: green$1[900]
  };
}
function getDefaultWarning(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: orange$1[400],
      light: orange$1[300],
      dark: orange$1[700]
    };
  }
  return {
    main: '#ed6c02',
    // closest to orange[800] that pass 3:1.
    light: orange$1[500],
    dark: orange$1[900]
  };
}
function createPalette(palette) {
  const {
      mode = 'light',
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette,
    other = _objectWithoutPropertiesLoose$1(palette, _excluded$b);
  const primary = palette.primary || getDefaultPrimary(mode);
  const secondary = palette.secondary || getDefaultSecondary(mode);
  const error = palette.error || getDefaultError(mode);
  const info = palette.info || getDefaultInfo(mode);
  const success = palette.success || getDefaultSuccess(mode);
  const warning = palette.warning || getDefaultWarning(mode);

  // Use the same logic as
  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
  function getContrastText(background) {
    const contrastText = getContrastRatio_1(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
    if (process.env.NODE_ENV !== 'production') {
      const contrast = getContrastRatio_1(background, contrastText);
      if (contrast < 3) {
        console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
      }
    }
    return contrastText;
  }
  const augmentColor = ({
    color,
    name,
    mainShade = 500,
    lightShade = 300,
    darkShade = 700
  }) => {
    color = _extends$5({}, color);
    if (!color.main && color[mainShade]) {
      color.main = color[mainShade];
    }
    if (!color.hasOwnProperty('main')) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : formatMuiErrorMessage$1(11, name ? ` (${name})` : '', mainShade));
    }
    if (typeof color.main !== 'string') {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : formatMuiErrorMessage$1(12, name ? ` (${name})` : '', JSON.stringify(color.main)));
    }
    addLightOrDark(color, 'light', lightShade, tonalOffset);
    addLightOrDark(color, 'dark', darkShade, tonalOffset);
    if (!color.contrastText) {
      color.contrastText = getContrastText(color.main);
    }
    return color;
  };
  const modes = {
    dark,
    light
  };
  if (process.env.NODE_ENV !== 'production') {
    if (!modes[mode]) {
      console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
    }
  }
  const paletteOutput = deepmerge$1(_extends$5({
    // A collection of common colors.
    common: _extends$5({}, common$1),
    // prevent mutable object.
    // The palette mode, can be light or dark.
    mode,
    // The colors used to represent primary interface elements for a user.
    primary: augmentColor({
      color: primary,
      name: 'primary'
    }),
    // The colors used to represent secondary interface elements for a user.
    secondary: augmentColor({
      color: secondary,
      name: 'secondary',
      mainShade: 'A400',
      lightShade: 'A200',
      darkShade: 'A700'
    }),
    // The colors used to represent interface elements that the user should be made aware of.
    error: augmentColor({
      color: error,
      name: 'error'
    }),
    // The colors used to represent potentially dangerous actions or important messages.
    warning: augmentColor({
      color: warning,
      name: 'warning'
    }),
    // The colors used to present information to the user that is neutral and not necessarily important.
    info: augmentColor({
      color: info,
      name: 'info'
    }),
    // The colors used to indicate the successful completion of an action that user triggered.
    success: augmentColor({
      color: success,
      name: 'success'
    }),
    // The grey colors.
    grey: grey$1,
    // Used by `getContrastText()` to maximize the contrast between
    // the background and the text.
    contrastThreshold,
    // Takes a background color and returns the text color that maximizes the contrast.
    getContrastText,
    // Generate a rich color object.
    augmentColor,
    // Used by the functions below to shift a color's luminance by approximately
    // two indexes within its tonal palette.
    // E.g., shift from Red 500 to Red 300 or Red 700.
    tonalOffset
  }, modes[mode]), other);
  return paletteOutput;
}

const _excluded$a = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
function round$1(value) {
  return Math.round(value * 1e5) / 1e5;
}
const caseAllCaps = {
  textTransform: 'uppercase'
};
const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';

/**
 * @see @link{https://m2.material.io/design/typography/the-type-system.html}
 * @see @link{https://m2.material.io/design/typography/understanding-typography.html}
 */
function createTypography(palette, typography) {
  const _ref = typeof typography === 'function' ? typography(palette) : typography,
    {
      fontFamily = defaultFontFamily,
      // The default font size of the Material Specification.
      fontSize = 14,
      // px
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      // Tell MUI what's the font-size on the html element.
      // 16px is the default font-size used by browsers.
      htmlFontSize = 16,
      // Apply the CSS properties to all the variants.
      allVariants,
      pxToRem: pxToRem2
    } = _ref,
    other = _objectWithoutPropertiesLoose$1(_ref, _excluded$a);
  if (process.env.NODE_ENV !== 'production') {
    if (typeof fontSize !== 'number') {
      console.error('MUI: `fontSize` is required to be a number.');
    }
    if (typeof htmlFontSize !== 'number') {
      console.error('MUI: `htmlFontSize` is required to be a number.');
    }
  }
  const coef = fontSize / 14;
  const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);
  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends$5({
    fontFamily,
    fontWeight,
    fontSize: pxToRem(size),
    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
    lineHeight
  }, fontFamily === defaultFontFamily ? {
    letterSpacing: `${round$1(letterSpacing / size)}em`
  } : {}, casing, allVariants);
  const variants = {
    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
    // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
    inherit: {
      fontFamily: 'inherit',
      fontWeight: 'inherit',
      fontSize: 'inherit',
      lineHeight: 'inherit',
      letterSpacing: 'inherit'
    }
  };
  return deepmerge$1(_extends$5({
    htmlFontSize,
    pxToRem,
    fontFamily,
    fontSize,
    fontWeightLight,
    fontWeightRegular,
    fontWeightMedium,
    fontWeightBold
  }, variants), other, {
    clone: false // No need to clone deep
  });
}

const shadowKeyUmbraOpacity = 0.2;
const shadowKeyPenumbraOpacity = 0.14;
const shadowAmbientShadowOpacity = 0.12;
function createShadow(...px) {
  return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(',');
}

// Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss
const shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
var shadows$1 = shadows;

const _excluded$9 = ["duration", "easing", "delay"];
// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
// to learn the context in which each easing should be used.
const easing = {
  // This is the most common easing curve.
  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
  // Objects enter the screen at full velocity from off-screen and
  // slowly decelerate to a resting point.
  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
  // The sharp curve is used by objects that may return to the screen at any time.
  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
};

// Follow https://m2.material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
// to learn when use what timing
const duration = {
  shortest: 150,
  shorter: 200,
  short: 250,
  // most basic recommended timing
  standard: 300,
  // this is to be used in complex animations
  complex: 375,
  // recommended when something is entering screen
  enteringScreen: 225,
  // recommended when something is leaving screen
  leavingScreen: 195
};
function formatMs(milliseconds) {
  return `${Math.round(milliseconds)}ms`;
}
function getAutoHeightDuration(height) {
  if (!height) {
    return 0;
  }
  const constant = height / 36;

  // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
}
function createTransitions(inputTransitions) {
  const mergedEasing = _extends$5({}, easing, inputTransitions.easing);
  const mergedDuration = _extends$5({}, duration, inputTransitions.duration);
  const create = (props = ['all'], options = {}) => {
    const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options,
      other = _objectWithoutPropertiesLoose$1(options, _excluded$9);
    if (process.env.NODE_ENV !== 'production') {
      const isString = value => typeof value === 'string';
      // IE11 support, replace with Number.isNaN
      // eslint-disable-next-line no-restricted-globals
      const isNumber = value => !isNaN(parseFloat(value));
      if (!isString(props) && !Array.isArray(props)) {
        console.error('MUI: Argument "props" must be a string or Array.');
      }
      if (!isNumber(durationOption) && !isString(durationOption)) {
        console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
      }
      if (!isString(easingOption)) {
        console.error('MUI: Argument "easing" must be a string.');
      }
      if (!isNumber(delay) && !isString(delay)) {
        console.error('MUI: Argument "delay" must be a number or a string.');
      }
      if (typeof options !== 'object') {
        console.error(['MUI: Secong argument of transition.create must be an object.', "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join('\n'));
      }
      if (Object.keys(other).length !== 0) {
        console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);
      }
    }
    return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
  };
  return _extends$5({
    getAutoHeightDuration,
    create
  }, inputTransitions, {
    easing: mergedEasing,
    duration: mergedDuration
  });
}

// We need to centralize the zIndex definitions as they work
// like global values in the browser.
const zIndex = {
  mobileStepper: 1000,
  fab: 1050,
  speedDial: 1050,
  appBar: 1100,
  drawer: 1200,
  modal: 1300,
  snackbar: 1400,
  tooltip: 1500
};
var zIndex$1 = zIndex;

const _excluded$8 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
function createTheme(options = {}, ...args) {
  const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options,
    other = _objectWithoutPropertiesLoose$1(options, _excluded$8);
  if (options.vars) {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : formatMuiErrorMessage$1(18));
  }
  const palette = createPalette(paletteInput);
  const systemTheme = createTheme$2(options);
  let muiTheme = deepmerge$1(systemTheme, {
    mixins: createMixins(systemTheme.breakpoints, mixinsInput),
    palette,
    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
    shadows: shadows$1.slice(),
    typography: createTypography(palette, typographyInput),
    transitions: createTransitions(transitionsInput),
    zIndex: _extends$5({}, zIndex$1)
  });
  muiTheme = deepmerge$1(muiTheme, other);
  muiTheme = args.reduce((acc, argument) => deepmerge$1(acc, argument), muiTheme);
  if (process.env.NODE_ENV !== 'production') {
    // TODO v6: Refactor to use globalStateClassesMapping from @mui/utils once `readOnly` state class is used in Rating component.
    const stateClasses = ['active', 'checked', 'completed', 'disabled', 'error', 'expanded', 'focused', 'focusVisible', 'required', 'selected'];
    const traverse = (node, component) => {
      let key;

      // eslint-disable-next-line guard-for-in, no-restricted-syntax
      for (key in node) {
        const child = node[key];
        if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
          if (process.env.NODE_ENV !== 'production') {
            const stateClass = generateUtilityClass('', key);
            console.error([`MUI: The \`${component}\` component increases ` + `the CSS specificity of the \`${key}\` internal state.`, 'You can not override it like this: ', JSON.stringify(node, null, 2), '', `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
              root: {
                [`&.${stateClass}`]: child
              }
            }, null, 2), '', 'https://mui.com/r/state-classes-guide'].join('\n'));
          }
          // Remove the style to prevent global conflicts.
          node[key] = {};
        }
      }
    };
    Object.keys(muiTheme.components).forEach(component => {
      const styleOverrides = muiTheme.components[component].styleOverrides;
      if (styleOverrides && component.indexOf('Mui') === 0) {
        traverse(styleOverrides, component);
      }
    });
  }
  muiTheme.unstable_sxConfig = _extends$5({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
  muiTheme.unstable_sx = function sx(props) {
    return styleFunctionSx$2({
      sx: props,
      theme: this
    });
  };
  return muiTheme;
}

// Ported from Compass
// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss
// Emulate the sass function "unit"
function getUnit(input) {
  return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || '';
}

// Emulate the sass function "unitless"
function toUnitless(length) {
  return parseFloat(length);
}

const defaultTheme$1 = createTheme();
var defaultTheme$2 = defaultTheme$1;

var createStyled$1 = {};

var _extends$4 = {exports: {}};

var hasRequired_extends;

function require_extends () {
	if (hasRequired_extends) return _extends$4.exports;
	hasRequired_extends = 1;
	(function (module) {
		function _extends() {
		  return module.exports = _extends = Object.assign ? Object.assign.bind() : function (n) {
		    for (var e = 1; e < arguments.length; e++) {
		      var t = arguments[e];
		      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
		    }
		    return n;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _extends.apply(null, arguments);
		}
		module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (_extends$4));
	return _extends$4.exports;
}

var objectWithoutPropertiesLoose = {exports: {}};

var hasRequiredObjectWithoutPropertiesLoose;

function requireObjectWithoutPropertiesLoose () {
	if (hasRequiredObjectWithoutPropertiesLoose) return objectWithoutPropertiesLoose.exports;
	hasRequiredObjectWithoutPropertiesLoose = 1;
	(function (module) {
		function _objectWithoutPropertiesLoose(r, e) {
		  if (null == r) return {};
		  var t = {};
		  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
		    if (-1 !== e.indexOf(n)) continue;
		    t[n] = r[n];
		  }
		  return t;
		}
		module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (objectWithoutPropertiesLoose));
	return objectWithoutPropertiesLoose.exports;
}

var require$$1 = /*@__PURE__*/getAugmentedNamespace(styledEngine);

var require$$4 = /*@__PURE__*/getAugmentedNamespace(deepmerge);

var require$$5 = /*@__PURE__*/getAugmentedNamespace(capitalize);

var require$$6 = /*@__PURE__*/getAugmentedNamespace(getDisplayName);

var require$$7 = /*@__PURE__*/getAugmentedNamespace(createTheme$1);

var require$$8$1 = /*@__PURE__*/getAugmentedNamespace(styleFunctionSx);

var _interopRequireDefault$7 = interopRequireDefaultExports;
Object.defineProperty(createStyled$1, "__esModule", {
  value: true
});
var _default = createStyled$1.default = createStyled;
createStyled$1.shouldForwardProp = shouldForwardProp;
createStyled$1.systemDefaultTheme = void 0;
var _extends2 = _interopRequireDefault$7(require_extends());
var _objectWithoutPropertiesLoose2 = _interopRequireDefault$7(requireObjectWithoutPropertiesLoose());
var _styledEngine = _interopRequireWildcard(require$$1);
var _deepmerge = require$$4;
var _capitalize = _interopRequireDefault$7(require$$5);
var _getDisplayName = _interopRequireDefault$7(require$$6);
var _createTheme = _interopRequireDefault$7(require$$7);
var _styleFunctionSx = _interopRequireDefault$7(require$$8$1);
const _excluded$7 = ["ownerState"],
  _excluded2 = ["variants"],
  _excluded3 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
/* eslint-disable no-underscore-dangle */
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
function isEmpty$3(obj) {
  return Object.keys(obj).length === 0;
}

// https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
function isStringTag(tag) {
  return typeof tag === 'string' &&
  // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96;
}

// Update /system/styled/#api in case if this changes
function shouldForwardProp(prop) {
  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
}
const systemDefaultTheme = createStyled$1.systemDefaultTheme = (0, _createTheme.default)();
const lowercaseFirstLetter = string => {
  if (!string) {
    return string;
  }
  return string.charAt(0).toLowerCase() + string.slice(1);
};
function resolveTheme({
  defaultTheme,
  theme,
  themeId
}) {
  return isEmpty$3(theme) ? defaultTheme : theme[themeId] || theme;
}
function defaultOverridesResolver(slot) {
  if (!slot) {
    return null;
  }
  return (props, styles) => styles[slot];
}
function processStyleArg(callableStyle, _ref) {
  let {
      ownerState
    } = _ref,
    props = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded$7);
  const resolvedStylesArg = typeof callableStyle === 'function' ? callableStyle((0, _extends2.default)({
    ownerState
  }, props)) : callableStyle;
  if (Array.isArray(resolvedStylesArg)) {
    return resolvedStylesArg.flatMap(resolvedStyle => processStyleArg(resolvedStyle, (0, _extends2.default)({
      ownerState
    }, props)));
  }
  if (!!resolvedStylesArg && typeof resolvedStylesArg === 'object' && Array.isArray(resolvedStylesArg.variants)) {
    const {
        variants = []
      } = resolvedStylesArg,
      otherStyles = (0, _objectWithoutPropertiesLoose2.default)(resolvedStylesArg, _excluded2);
    let result = otherStyles;
    variants.forEach(variant => {
      let isMatch = true;
      if (typeof variant.props === 'function') {
        isMatch = variant.props((0, _extends2.default)({
          ownerState
        }, props, ownerState));
      } else {
        Object.keys(variant.props).forEach(key => {
          if ((ownerState == null ? void 0 : ownerState[key]) !== variant.props[key] && props[key] !== variant.props[key]) {
            isMatch = false;
          }
        });
      }
      if (isMatch) {
        if (!Array.isArray(result)) {
          result = [result];
        }
        result.push(typeof variant.style === 'function' ? variant.style((0, _extends2.default)({
          ownerState
        }, props, ownerState)) : variant.style);
      }
    });
    return result;
  }
  return resolvedStylesArg;
}
function createStyled(input = {}) {
  const {
    themeId,
    defaultTheme = systemDefaultTheme,
    rootShouldForwardProp = shouldForwardProp,
    slotShouldForwardProp = shouldForwardProp
  } = input;
  const systemSx = props => {
    return (0, _styleFunctionSx.default)((0, _extends2.default)({}, props, {
      theme: resolveTheme((0, _extends2.default)({}, props, {
        defaultTheme,
        themeId
      }))
    }));
  };
  systemSx.__mui_systemSx = true;
  return (tag, inputOptions = {}) => {
    // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
    (0, _styledEngine.internal_processStyles)(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
    const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
      } = inputOptions,
      options = (0, _objectWithoutPropertiesLoose2.default)(inputOptions, _excluded3);

    // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
    // TODO v6: remove `Root` in the next major release
    // For more details: https://github.com/mui/material-ui/pull/37908
    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
    const skipSx = inputSkipSx || false;
    let label;
    if (process.env.NODE_ENV !== 'production') {
      if (componentName) {
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
      }
    }
    let shouldForwardPropOption = shouldForwardProp;

    // TODO v6: remove `Root` in the next major release
    // For more details: https://github.com/mui/material-ui/pull/37908
    if (componentSlot === 'Root' || componentSlot === 'root') {
      shouldForwardPropOption = rootShouldForwardProp;
    } else if (componentSlot) {
      // any other slot specified
      shouldForwardPropOption = slotShouldForwardProp;
    } else if (isStringTag(tag)) {
      // for string (html) tag, preserve the behavior in emotion & styled-components.
      shouldForwardPropOption = undefined;
    }
    const defaultStyledResolver = (0, _styledEngine.default)(tag, (0, _extends2.default)({
      shouldForwardProp: shouldForwardPropOption,
      label
    }, options));
    const transformStyleArg = stylesArg => {
      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
      // component stays as a function. This condition makes sure that we do not interpolate functions
      // which are basically components used as a selectors.
      if (typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg || (0, _deepmerge.isPlainObject)(stylesArg)) {
        return props => processStyleArg(stylesArg, (0, _extends2.default)({}, props, {
          theme: resolveTheme({
            theme: props.theme,
            defaultTheme,
            themeId
          })
        }));
      }
      return stylesArg;
    };
    const muiStyledResolver = (styleArg, ...expressions) => {
      let transformedStyleArg = transformStyleArg(styleArg);
      const expressionsWithDefaultTheme = expressions ? expressions.map(transformStyleArg) : [];
      if (componentName && overridesResolver) {
        expressionsWithDefaultTheme.push(props => {
          const theme = resolveTheme((0, _extends2.default)({}, props, {
            defaultTheme,
            themeId
          }));
          if (!theme.components || !theme.components[componentName] || !theme.components[componentName].styleOverrides) {
            return null;
          }
          const styleOverrides = theme.components[componentName].styleOverrides;
          const resolvedStyleOverrides = {};
          // TODO: v7 remove iteration and use `resolveStyleArg(styleOverrides[slot])` directly
          Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
            resolvedStyleOverrides[slotKey] = processStyleArg(slotStyle, (0, _extends2.default)({}, props, {
              theme
            }));
          });
          return overridesResolver(props, resolvedStyleOverrides);
        });
      }
      if (componentName && !skipVariantsResolver) {
        expressionsWithDefaultTheme.push(props => {
          var _theme$components;
          const theme = resolveTheme((0, _extends2.default)({}, props, {
            defaultTheme,
            themeId
          }));
          const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[componentName]) == null ? void 0 : _theme$components.variants;
          return processStyleArg({
            variants: themeVariants
          }, (0, _extends2.default)({}, props, {
            theme
          }));
        });
      }
      if (!skipSx) {
        expressionsWithDefaultTheme.push(systemSx);
      }
      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
        const placeholders = new Array(numOfCustomFnsApplied).fill('');
        // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
        transformedStyleArg = [...styleArg, ...placeholders];
        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
      }
      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
      if (process.env.NODE_ENV !== 'production') {
        let displayName;
        if (componentName) {
          displayName = `${componentName}${(0, _capitalize.default)(componentSlot || '')}`;
        }
        if (displayName === undefined) {
          displayName = `Styled(${(0, _getDisplayName.default)(tag)})`;
        }
        Component.displayName = displayName;
      }
      if (tag.muiName) {
        Component.muiName = tag.muiName;
      }
      return Component;
    };
    if (defaultStyledResolver.withConfig) {
      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
    }
    return muiStyledResolver;
  };
}

// copied from @mui/system/createStyled
function slotShouldForwardProp(prop) {
  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
}

const rootShouldForwardProp = prop => slotShouldForwardProp(prop) && prop !== 'classes';
var rootShouldForwardProp$1 = rootShouldForwardProp;

const styled = _default({
  themeId: THEME_ID,
  defaultTheme: defaultTheme$2,
  rootShouldForwardProp: rootShouldForwardProp$1
});
var styled$1 = styled;

const _excluded$6 = ["theme"];
function ThemeProvider(_ref) {
  let {
      theme: themeInput
    } = _ref,
    props = _objectWithoutPropertiesLoose$1(_ref, _excluded$6);
  const scopedTheme = themeInput[THEME_ID];
  return /*#__PURE__*/require$$2$1.jsx(ThemeProvider$1, _extends$5({}, props, {
    themeId: scopedTheme ? THEME_ID : undefined,
    theme: scopedTheme || themeInput
  }));
}
process.env.NODE_ENV !== "production" ? ThemeProvider.propTypes = {
  /**
   * Your component tree.
   */
  children: PropTypes.node,
  /**
   * A theme object. You can provide a function to extend the outer theme.
   */
  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired
} : void 0;

process.env.NODE_ENV !== "production" ? {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * @ignore
   */
  value: PropTypes.object.isRequired
} : void 0;
function useDefaultProps(params) {
  return useDefaultProps$1(params);
}

function getSvgIconUtilityClass(slot) {
  return generateUtilityClass('MuiSvgIcon', slot);
}
generateUtilityClasses('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);

const _excluded$5 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
const useUtilityClasses$4 = ownerState => {
  const {
    color,
    fontSize,
    classes
  } = ownerState;
  const slots = {
    root: ['root', color !== 'inherit' && `color${capitalize$1(color)}`, `fontSize${capitalize$1(fontSize)}`]
  };
  return composeClasses(slots, getSvgIconUtilityClass, classes);
};
const SvgIconRoot = styled$1('svg', {
  name: 'MuiSvgIcon',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize$1(ownerState.color)}`], styles[`fontSize${capitalize$1(ownerState.fontSize)}`]];
  }
})(({
  theme,
  ownerState
}) => {
  var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette2, _palette3;
  return {
    userSelect: 'none',
    width: '1em',
    height: '1em',
    display: 'inline-block',
    // the <svg> will define the property that has `currentColor`
    // for example heroicons uses fill="none" and stroke="currentColor"
    fill: ownerState.hasSvgAsChild ? undefined : 'currentColor',
    flexShrink: 0,
    transition: (_theme$transitions = theme.transitions) == null || (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, 'fill', {
      duration: (_theme$transitions2 = theme.transitions) == null || (_theme$transitions2 = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2.shorter
    }),
    fontSize: {
      inherit: 'inherit',
      small: ((_theme$typography = theme.typography) == null || (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || '1.25rem',
      medium: ((_theme$typography2 = theme.typography) == null || (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || '1.5rem',
      large: ((_theme$typography3 = theme.typography) == null || (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || '2.1875rem'
    }[ownerState.fontSize],
    // TODO v5 deprecate, v6 remove for sx
    color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null || (_palette = _palette[ownerState.color]) == null ? void 0 : _palette.main) != null ? _palette$ownerState$c : {
      action: (_palette2 = (theme.vars || theme).palette) == null || (_palette2 = _palette2.action) == null ? void 0 : _palette2.active,
      disabled: (_palette3 = (theme.vars || theme).palette) == null || (_palette3 = _palette3.action) == null ? void 0 : _palette3.disabled,
      inherit: undefined
    }[ownerState.color]
  };
});
const SvgIcon = /*#__PURE__*/React__namespace.forwardRef(function SvgIcon(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: 'MuiSvgIcon'
  });
  const {
      children,
      className,
      color = 'inherit',
      component = 'svg',
      fontSize = 'medium',
      htmlColor,
      inheritViewBox = false,
      titleAccess,
      viewBox = '0 0 24 24'
    } = props,
    other = _objectWithoutPropertiesLoose$1(props, _excluded$5);
  const hasSvgAsChild = /*#__PURE__*/ /*#__PURE__*/React__namespace.isValidElement(children) && children.type === 'svg';
  const ownerState = _extends$5({}, props, {
    color,
    component,
    fontSize,
    instanceFontSize: inProps.fontSize,
    inheritViewBox,
    viewBox,
    hasSvgAsChild
  });
  const more = {};
  if (!inheritViewBox) {
    more.viewBox = viewBox;
  }
  const classes = useUtilityClasses$4(ownerState);
  return /*#__PURE__*/require$$2$1.jsxs(SvgIconRoot, _extends$5({
    as: component,
    className: clsx(classes.root, className),
    focusable: "false",
    color: htmlColor,
    "aria-hidden": titleAccess ? undefined : true,
    role: titleAccess ? 'img' : undefined,
    ref: ref
  }, more, other, hasSvgAsChild && children.props, {
    ownerState: ownerState,
    children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /*#__PURE__*/require$$2$1.jsx("title", {
      children: titleAccess
    }) : null]
  }));
});
process.env.NODE_ENV !== "production" ? SvgIcon.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Node passed into the SVG element.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
   * @default 'inherit'
   */
  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   * @default 'medium'
   */
  fontSize: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'large', 'medium', 'small']), PropTypes.string]),
  /**
   * Applies a color attribute to the SVG element.
   */
  htmlColor: PropTypes.string,
  /**
   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
   * prop will be ignored.
   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
   * `component`'s viewBox to the root node.
   * @default false
   */
  inheritViewBox: PropTypes.bool,
  /**
   * The shape-rendering attribute. The behavior of the different options is described on the
   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
   * If you are having issues with blurry icons you should investigate this prop.
   */
  shapeRendering: PropTypes.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * Provides a human-readable title for the element that contains it.
   * https://www.w3.org/TR/SVG-access/#Equivalent
   */
  titleAccess: PropTypes.string,
  /**
   * Allows you to redefine what the coordinates without units mean inside an SVG element.
   * For example, if the SVG element is 500 (width) by 200 (height),
   * and you pass viewBox="0 0 50 20",
   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
   * to bottom right (50,20) and each unit will be worth 10px.
   * @default '0 0 24 24'
   */
  viewBox: PropTypes.string
} : void 0;
SvgIcon.muiName = 'SvgIcon';
var SvgIcon$1 = SvgIcon;

function createSvgIcon$1(path, displayName) {
  function Component(props, ref) {
    return /*#__PURE__*/require$$2$1.jsx(SvgIcon$1, _extends$5({
      "data-testid": `${displayName}Icon`,
      ref: ref
    }, props, {
      children: path
    }));
  }
  if (process.env.NODE_ENV !== 'production') {
    // Need to set `displayName` on the inner component for React.memo.
    // React prior to 16.14 ignores `displayName` on the wrapper.
    Component.displayName = `${displayName}Icon`;
  }
  Component.muiName = SvgIcon$1.muiName;
  return /*#__PURE__*/React__namespace.memo(/*#__PURE__*/React__namespace.forwardRef(Component));
}

// TODO: remove this export once ClassNameGenerator is stable
// eslint-disable-next-line @typescript-eslint/naming-convention
const unstable_ClassNameGenerator = {
  configure: generator => {
    if (process.env.NODE_ENV !== 'production') {
      console.warn(['MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.', '', "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", '', 'The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401', '', 'The updated documentation: https://mui.com/guides/classname-generator/'].join('\n'));
    }
    ClassNameGenerator$1.configure(generator);
  }
};

var utils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  capitalize: capitalize$1,
  createChainedFunction: createChainedFunction,
  createSvgIcon: createSvgIcon$1,
  debounce: debounce$1,
  deprecatedPropType: deprecatedPropType,
  isMuiElement: isMuiElement,
  ownerDocument: ownerDocument,
  ownerWindow: ownerWindow,
  requirePropFactory: requirePropFactory,
  setRef: setRef,
  unstable_ClassNameGenerator: unstable_ClassNameGenerator,
  unstable_useEnhancedEffect: useEnhancedEffect$1,
  unstable_useId: useId,
  unsupportedProp: unsupportedProp,
  useControlled: useControlled,
  useEventCallback: useEventCallback,
  useForkRef: useForkRef,
  useIsFocusVisible: useIsFocusVisible
});

function _setPrototypeOf$4(t, e) {
  return _setPrototypeOf$4 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf$4(t, e);
}

function _inheritsLoose(t, o) {
  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf$4(t, o);
}

var TransitionGroupContext = /*#__PURE__*/React.createContext(null);

function _assertThisInitialized$4(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */

function getChildMapping(children, mapFn) {
  var mapper = function mapper(child) {
    return mapFn && /*#__PURE__*/React.isValidElement(child) ? mapFn(child) : child;
  };
  var result = Object.create(null);
  if (children) React.Children.map(children, function (c) {
    return c;
  }).forEach(function (child) {
    // run the map function here instead so that the key is the computed one
    result[child.key] = mapper(child);
  });
  return result;
}
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */

function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};
  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  } // For each key of `next`, the list of keys to insert before that key in
  // the combined list

  var nextKeysPending = Object.create(null);
  var pendingKeys = [];
  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }
  var i;
  var childMapping = {};
  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }
    childMapping[nextKey] = getValueForKey(nextKey);
  } // Finally, add the keys which didn't appear before any key in `next`

  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }
  return childMapping;
}
function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function (child) {
    return /*#__PURE__*/React.cloneElement(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, 'appear', props),
      enter: getProp(child, 'enter', props),
      exit: getProp(child, 'exit', props)
    });
  });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children).forEach(function (key) {
    var child = children[key];
    if (! /*#__PURE__*/React.isValidElement(child)) return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = /*#__PURE__*/React.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

    if (hasNext && (!hasPrev || isLeaving)) {
      // console.log('entering', key)
      children[key] = /*#__PURE__*/React.cloneElement(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      // item is old (exiting)
      // console.log('leaving', key)
      children[key] = /*#__PURE__*/React.cloneElement(child, {
        in: false
      });
    } else if (hasNext && hasPrev && /*#__PURE__*/React.isValidElement(prevChild)) {
      // item hasn't changed transition states
      // copy over the last transition props;
      // console.log('unchanged', key)
      children[key] = /*#__PURE__*/React.cloneElement(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    }
  });
  return children;
}

var values = Object.values || function (obj) {
  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
};
var defaultProps$1 = {
  component: 'div',
  childFactory: function childFactory(child) {
    return child;
  }
};
/**
 * The `<TransitionGroup>` component manages a set of transition components
 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
 * components, `<TransitionGroup>` is a state machine for managing the mounting
 * and unmounting of components over time.
 *
 * Consider the example below. As items are removed or added to the TodoList the
 * `in` prop is toggled automatically by the `<TransitionGroup>`.
 *
 * Note that `<TransitionGroup>`  does not define any animation behavior!
 * Exactly _how_ a list item animates is up to the individual transition
 * component. This means you can mix and match animations across different list
 * items.
 */

var TransitionGroup = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(TransitionGroup, _React$Component);
  function TransitionGroup(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var handleExited = _this.handleExited.bind(_assertThisInitialized$4(_this)); // Initial children should all be entering, dependent on appear

    _this.state = {
      contextValue: {
        isMounting: true
      },
      handleExited: handleExited,
      firstRender: true
    };
    return _this;
  }
  var _proto = TransitionGroup.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.mounted = true;
    this.setState({
      contextValue: {
        isMounting: false
      }
    });
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };
  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children,
      handleExited = _ref.handleExited,
      firstRender = _ref.firstRender;
    return {
      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  } // node is `undefined` when user provided `nodeRef` prop
  ;
  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = getChildMapping(this.props.children);
    if (child.key in currentChildMapping) return;
    if (child.props.onExited) {
      child.props.onExited(node);
    }
    if (this.mounted) {
      this.setState(function (state) {
        var children = _extends$5({}, state.children);
        delete children[child.key];
        return {
          children: children
        };
      });
    }
  };
  _proto.render = function render() {
    var _this$props = this.props,
      Component = _this$props.component,
      childFactory = _this$props.childFactory,
      props = _objectWithoutPropertiesLoose$1(_this$props, ["component", "childFactory"]);
    var contextValue = this.state.contextValue;
    var children = values(this.state.children).map(childFactory);
    delete props.appear;
    delete props.enter;
    delete props.exit;
    if (Component === null) {
      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
        value: contextValue
      }, children);
    }
    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
      value: contextValue
    }, /*#__PURE__*/React.createElement(Component, props, children));
  };
  return TransitionGroup;
}(React.Component);
TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: PropTypes.any,
  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: PropTypes.node,
  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: PropTypes.bool,
  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: PropTypes.bool,
  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: PropTypes.bool,
  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: PropTypes.func
} : {};
TransitionGroup.defaultProps = defaultProps$1;
var TransitionGroup$1 = TransitionGroup;

function Ripple(props) {
  const {
    className,
    classes,
    pulsate = false,
    rippleX,
    rippleY,
    rippleSize,
    in: inProp,
    onExited,
    timeout
  } = props;
  const [leaving, setLeaving] = React__namespace.useState(false);
  const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
  const rippleStyles = {
    width: rippleSize,
    height: rippleSize,
    top: -(rippleSize / 2) + rippleY,
    left: -(rippleSize / 2) + rippleX
  };
  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
  if (!inProp && !leaving) {
    setLeaving(true);
  }
  React__namespace.useEffect(() => {
    if (!inProp && onExited != null) {
      // react-transition-group#onExited
      const timeoutId = setTimeout(onExited, timeout);
      return () => {
        clearTimeout(timeoutId);
      };
    }
    return undefined;
  }, [onExited, inProp, timeout]);
  return /*#__PURE__*/require$$2$1.jsx("span", {
    className: rippleClassName,
    style: rippleStyles,
    children: /*#__PURE__*/require$$2$1.jsx("span", {
      className: childClassName
    })
  });
}
process.env.NODE_ENV !== "production" ? Ripple.propTypes = {
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object.isRequired,
  className: PropTypes.string,
  /**
   * @ignore - injected from TransitionGroup
   */
  in: PropTypes.bool,
  /**
   * @ignore - injected from TransitionGroup
   */
  onExited: PropTypes.func,
  /**
   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
   */
  pulsate: PropTypes.bool,
  /**
   * Diameter of the ripple.
   */
  rippleSize: PropTypes.number,
  /**
   * Horizontal position of the ripple center.
   */
  rippleX: PropTypes.number,
  /**
   * Vertical position of the ripple center.
   */
  rippleY: PropTypes.number,
  /**
   * exit delay
   */
  timeout: PropTypes.number.isRequired
} : void 0;

const touchRippleClasses = generateUtilityClasses('MuiTouchRipple', ['root', 'ripple', 'rippleVisible', 'ripplePulsate', 'child', 'childLeaving', 'childPulsate']);
var touchRippleClasses$1 = touchRippleClasses;

const _excluded$4 = ["center", "classes", "className"];
let _$2 = t => t,
  _t$1,
  _t2$1,
  _t3$1,
  _t4$1;
const DURATION = 550;
const DELAY_RIPPLE = 80;
const enterKeyframe = keyframes(_t$1 || (_t$1 = _$2`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
const exitKeyframe = keyframes(_t2$1 || (_t2$1 = _$2`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
const pulsateKeyframe = keyframes(_t3$1 || (_t3$1 = _$2`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
const TouchRippleRoot = styled$1('span', {
  name: 'MuiTouchRipple',
  slot: 'Root'
})({
  overflow: 'hidden',
  pointerEvents: 'none',
  position: 'absolute',
  zIndex: 0,
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  borderRadius: 'inherit'
});

// This `styled()` function invokes keyframes. `styled-components` only supports keyframes
// in string templates. Do not convert these styles in JS object as it will break.
const TouchRippleRipple = styled$1(Ripple, {
  name: 'MuiTouchRipple',
  slot: 'Ripple'
})(_t4$1 || (_t4$1 = _$2`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses$1.rippleVisible, enterKeyframe, DURATION, ({
  theme
}) => theme.transitions.easing.easeInOut, touchRippleClasses$1.ripplePulsate, ({
  theme
}) => theme.transitions.duration.shorter, touchRippleClasses$1.child, touchRippleClasses$1.childLeaving, exitKeyframe, DURATION, ({
  theme
}) => theme.transitions.easing.easeInOut, touchRippleClasses$1.childPulsate, pulsateKeyframe, ({
  theme
}) => theme.transitions.easing.easeInOut);

/**
 * @ignore - internal component.
 *
 * TODO v5: Make private
 */
const TouchRipple = /*#__PURE__*/React__namespace.forwardRef(function TouchRipple(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: 'MuiTouchRipple'
  });
  const {
      center: centerProp = false,
      classes = {},
      className
    } = props,
    other = _objectWithoutPropertiesLoose$1(props, _excluded$4);
  const [ripples, setRipples] = React__namespace.useState([]);
  const nextKey = React__namespace.useRef(0);
  const rippleCallback = React__namespace.useRef(null);
  React__namespace.useEffect(() => {
    if (rippleCallback.current) {
      rippleCallback.current();
      rippleCallback.current = null;
    }
  }, [ripples]);

  // Used to filter out mouse emulated events on mobile.
  const ignoringMouseDown = React__namespace.useRef(false);
  // We use a timer in order to only show the ripples for touch "click" like events.
  // We don't want to display the ripple for touch scroll events.
  const startTimer = useTimeout();

  // This is the hook called once the previous timeout is ready.
  const startTimerCommit = React__namespace.useRef(null);
  const container = React__namespace.useRef(null);
  const startCommit = React__namespace.useCallback(params => {
    const {
      pulsate,
      rippleX,
      rippleY,
      rippleSize,
      cb
    } = params;
    setRipples(oldRipples => [...oldRipples, /*#__PURE__*/require$$2$1.jsx(TouchRippleRipple, {
      classes: {
        ripple: clsx(classes.ripple, touchRippleClasses$1.ripple),
        rippleVisible: clsx(classes.rippleVisible, touchRippleClasses$1.rippleVisible),
        ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses$1.ripplePulsate),
        child: clsx(classes.child, touchRippleClasses$1.child),
        childLeaving: clsx(classes.childLeaving, touchRippleClasses$1.childLeaving),
        childPulsate: clsx(classes.childPulsate, touchRippleClasses$1.childPulsate)
      },
      timeout: DURATION,
      pulsate: pulsate,
      rippleX: rippleX,
      rippleY: rippleY,
      rippleSize: rippleSize
    }, nextKey.current)]);
    nextKey.current += 1;
    rippleCallback.current = cb;
  }, [classes]);
  const start = React__namespace.useCallback((event = {}, options = {}, cb = () => {}) => {
    const {
      pulsate = false,
      center = centerProp || options.pulsate,
      fakeElement = false // For test purposes
    } = options;
    if ((event == null ? void 0 : event.type) === 'mousedown' && ignoringMouseDown.current) {
      ignoringMouseDown.current = false;
      return;
    }
    if ((event == null ? void 0 : event.type) === 'touchstart') {
      ignoringMouseDown.current = true;
    }
    const element = fakeElement ? null : container.current;
    const rect = element ? element.getBoundingClientRect() : {
      width: 0,
      height: 0,
      left: 0,
      top: 0
    };

    // Get the size of the ripple
    let rippleX;
    let rippleY;
    let rippleSize;
    if (center || event === undefined || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
      rippleX = Math.round(rect.width / 2);
      rippleY = Math.round(rect.height / 2);
    } else {
      const {
        clientX,
        clientY
      } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
      rippleX = Math.round(clientX - rect.left);
      rippleY = Math.round(clientY - rect.top);
    }
    if (center) {
      rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);

      // For some reason the animation is broken on Mobile Chrome if the size is even.
      if (rippleSize % 2 === 0) {
        rippleSize += 1;
      }
    } else {
      const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
      const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
      rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
    }

    // Touche devices
    if (event != null && event.touches) {
      // check that this isn't another touchstart due to multitouch
      // otherwise we will only clear a single timer when unmounting while two
      // are running
      if (startTimerCommit.current === null) {
        // Prepare the ripple effect.
        startTimerCommit.current = () => {
          startCommit({
            pulsate,
            rippleX,
            rippleY,
            rippleSize,
            cb
          });
        };
        // Delay the execution of the ripple effect.
        // We have to make a tradeoff with this delay value.
        startTimer.start(DELAY_RIPPLE, () => {
          if (startTimerCommit.current) {
            startTimerCommit.current();
            startTimerCommit.current = null;
          }
        });
      }
    } else {
      startCommit({
        pulsate,
        rippleX,
        rippleY,
        rippleSize,
        cb
      });
    }
  }, [centerProp, startCommit, startTimer]);
  const pulsate = React__namespace.useCallback(() => {
    start({}, {
      pulsate: true
    });
  }, [start]);
  const stop = React__namespace.useCallback((event, cb) => {
    startTimer.clear();

    // The touch interaction occurs too quickly.
    // We still want to show ripple effect.
    if ((event == null ? void 0 : event.type) === 'touchend' && startTimerCommit.current) {
      startTimerCommit.current();
      startTimerCommit.current = null;
      startTimer.start(0, () => {
        stop(event, cb);
      });
      return;
    }
    startTimerCommit.current = null;
    setRipples(oldRipples => {
      if (oldRipples.length > 0) {
        return oldRipples.slice(1);
      }
      return oldRipples;
    });
    rippleCallback.current = cb;
  }, [startTimer]);
  React__namespace.useImperativeHandle(ref, () => ({
    pulsate,
    start,
    stop
  }), [pulsate, start, stop]);
  return /*#__PURE__*/require$$2$1.jsx(TouchRippleRoot, _extends$5({
    className: clsx(touchRippleClasses$1.root, classes.root, className),
    ref: container
  }, other, {
    children: /*#__PURE__*/require$$2$1.jsx(TransitionGroup$1, {
      component: null,
      exit: true,
      children: ripples
    })
  }));
});
process.env.NODE_ENV !== "production" ? TouchRipple.propTypes = {
  /**
   * If `true`, the ripple starts at the center of the component
   * rather than at the point of interaction.
   */
  center: PropTypes.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string
} : void 0;
var TouchRipple$1 = TouchRipple;

function getButtonBaseUtilityClass(slot) {
  return generateUtilityClass('MuiButtonBase', slot);
}
const buttonBaseClasses = generateUtilityClasses('MuiButtonBase', ['root', 'disabled', 'focusVisible']);
var buttonBaseClasses$1 = buttonBaseClasses;

const _excluded$3 = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
const useUtilityClasses$3 = ownerState => {
  const {
    disabled,
    focusVisible,
    focusVisibleClassName,
    classes
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
  };
  const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
  if (focusVisible && focusVisibleClassName) {
    composedClasses.root += ` ${focusVisibleClassName}`;
  }
  return composedClasses;
};
const ButtonBaseRoot = styled$1('button', {
  name: 'MuiButtonBase',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})({
  display: 'inline-flex',
  alignItems: 'center',
  justifyContent: 'center',
  position: 'relative',
  boxSizing: 'border-box',
  WebkitTapHighlightColor: 'transparent',
  backgroundColor: 'transparent',
  // Reset default value
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0,
  border: 0,
  margin: 0,
  // Remove the margin in Safari
  borderRadius: 0,
  padding: 0,
  // Remove the padding in Firefox
  cursor: 'pointer',
  userSelect: 'none',
  verticalAlign: 'middle',
  MozAppearance: 'none',
  // Reset
  WebkitAppearance: 'none',
  // Reset
  textDecoration: 'none',
  // So we take precedent over the style of a native <a /> element.
  color: 'inherit',
  '&::-moz-focus-inner': {
    borderStyle: 'none' // Remove Firefox dotted outline.
  },
  [`&.${buttonBaseClasses$1.disabled}`]: {
    pointerEvents: 'none',
    // Disable link interactions
    cursor: 'default'
  },
  '@media print': {
    colorAdjust: 'exact'
  }
});

/**
 * `ButtonBase` contains as few styles as possible.
 * It aims to be a simple building block for creating a button.
 * It contains a load of style reset and some focus/ripple logic.
 */
const ButtonBase = /*#__PURE__*/React__namespace.forwardRef(function ButtonBase(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: 'MuiButtonBase'
  });
  const {
      action,
      centerRipple = false,
      children,
      className,
      component = 'button',
      disabled = false,
      disableRipple = false,
      disableTouchRipple = false,
      focusRipple = false,
      LinkComponent = 'a',
      onBlur,
      onClick,
      onContextMenu,
      onDragLeave,
      onFocus,
      onFocusVisible,
      onKeyDown,
      onKeyUp,
      onMouseDown,
      onMouseLeave,
      onMouseUp,
      onTouchEnd,
      onTouchMove,
      onTouchStart,
      tabIndex = 0,
      TouchRippleProps,
      touchRippleRef,
      type
    } = props,
    other = _objectWithoutPropertiesLoose$1(props, _excluded$3);
  const buttonRef = React__namespace.useRef(null);
  const rippleRef = React__namespace.useRef(null);
  const handleRippleRef = useForkRef(rippleRef, touchRippleRef);
  const {
    isFocusVisibleRef,
    onFocus: handleFocusVisible,
    onBlur: handleBlurVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible();
  const [focusVisible, setFocusVisible] = React__namespace.useState(false);
  if (disabled && focusVisible) {
    setFocusVisible(false);
  }
  React__namespace.useImperativeHandle(action, () => ({
    focusVisible: () => {
      setFocusVisible(true);
      buttonRef.current.focus();
    }
  }), []);
  const [mountedState, setMountedState] = React__namespace.useState(false);
  React__namespace.useEffect(() => {
    setMountedState(true);
  }, []);
  const enableTouchRipple = mountedState && !disableRipple && !disabled;
  React__namespace.useEffect(() => {
    if (focusVisible && focusRipple && !disableRipple && mountedState) {
      rippleRef.current.pulsate();
    }
  }, [disableRipple, focusRipple, focusVisible, mountedState]);
  function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
    return useEventCallback(event => {
      if (eventCallback) {
        eventCallback(event);
      }
      const ignore = skipRippleAction;
      if (!ignore && rippleRef.current) {
        rippleRef.current[rippleAction](event);
      }
      return true;
    });
  }
  const handleMouseDown = useRippleHandler('start', onMouseDown);
  const handleContextMenu = useRippleHandler('stop', onContextMenu);
  const handleDragLeave = useRippleHandler('stop', onDragLeave);
  const handleMouseUp = useRippleHandler('stop', onMouseUp);
  const handleMouseLeave = useRippleHandler('stop', event => {
    if (focusVisible) {
      event.preventDefault();
    }
    if (onMouseLeave) {
      onMouseLeave(event);
    }
  });
  const handleTouchStart = useRippleHandler('start', onTouchStart);
  const handleTouchEnd = useRippleHandler('stop', onTouchEnd);
  const handleTouchMove = useRippleHandler('stop', onTouchMove);
  const handleBlur = useRippleHandler('stop', event => {
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setFocusVisible(false);
    }
    if (onBlur) {
      onBlur(event);
    }
  }, false);
  const handleFocus = useEventCallback(event => {
    // Fix for https://github.com/facebook/react/issues/7769
    if (!buttonRef.current) {
      buttonRef.current = event.currentTarget;
    }
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setFocusVisible(true);
      if (onFocusVisible) {
        onFocusVisible(event);
      }
    }
    if (onFocus) {
      onFocus(event);
    }
  });
  const isNonNativeButton = () => {
    const button = buttonRef.current;
    return component && component !== 'button' && !(button.tagName === 'A' && button.href);
  };

  /**
   * IE11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
   */
  const keydownRef = React__namespace.useRef(false);
  const handleKeyDown = useEventCallback(event => {
    // Check if key is already down to avoid repeats being counted as multiple activations
    if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
      keydownRef.current = true;
      rippleRef.current.stop(event, () => {
        rippleRef.current.start(event);
      });
    }
    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
      event.preventDefault();
    }
    if (onKeyDown) {
      onKeyDown(event);
    }

    // Keyboard accessibility for non interactive elements
    if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
      event.preventDefault();
      if (onClick) {
        onClick(event);
      }
    }
  });
  const handleKeyUp = useEventCallback(event => {
    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
    // https://codesandbox.io/p/sandbox/button-keyup-preventdefault-dn7f0
    if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
      keydownRef.current = false;
      rippleRef.current.stop(event, () => {
        rippleRef.current.pulsate(event);
      });
    }
    if (onKeyUp) {
      onKeyUp(event);
    }

    // Keyboard accessibility for non interactive elements
    if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
      onClick(event);
    }
  });
  let ComponentProp = component;
  if (ComponentProp === 'button' && (other.href || other.to)) {
    ComponentProp = LinkComponent;
  }
  const buttonProps = {};
  if (ComponentProp === 'button') {
    buttonProps.type = type === undefined ? 'button' : type;
    buttonProps.disabled = disabled;
  } else {
    if (!other.href && !other.to) {
      buttonProps.role = 'button';
    }
    if (disabled) {
      buttonProps['aria-disabled'] = disabled;
    }
  }
  const handleRef = useForkRef(ref, focusVisibleRef, buttonRef);
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React__namespace.useEffect(() => {
      if (enableTouchRipple && !rippleRef.current) {
        console.error(['MUI: The `component` prop provided to ButtonBase is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\n'));
      }
    }, [enableTouchRipple]);
  }
  const ownerState = _extends$5({}, props, {
    centerRipple,
    component,
    disabled,
    disableRipple,
    disableTouchRipple,
    focusRipple,
    tabIndex,
    focusVisible
  });
  const classes = useUtilityClasses$3(ownerState);
  return /*#__PURE__*/require$$2$1.jsxs(ButtonBaseRoot, _extends$5({
    as: ComponentProp,
    className: clsx(classes.root, className),
    ownerState: ownerState,
    onBlur: handleBlur,
    onClick: onClick,
    onContextMenu: handleContextMenu,
    onFocus: handleFocus,
    onKeyDown: handleKeyDown,
    onKeyUp: handleKeyUp,
    onMouseDown: handleMouseDown,
    onMouseLeave: handleMouseLeave,
    onMouseUp: handleMouseUp,
    onDragLeave: handleDragLeave,
    onTouchEnd: handleTouchEnd,
    onTouchMove: handleTouchMove,
    onTouchStart: handleTouchStart,
    ref: handleRef,
    tabIndex: disabled ? -1 : tabIndex,
    type: type
  }, buttonProps, other, {
    children: [children, enableTouchRipple ? /*#__PURE__*/
    /* TouchRipple is only needed client-side, x2 boost on the server. */
    require$$2$1.jsx(TouchRipple$1, _extends$5({
      ref: handleRippleRef,
      center: centerRipple
    }, TouchRippleProps)) : null]
  }));
});
process.env.NODE_ENV !== "production" ? ButtonBase.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions.
   * It currently only supports `focusVisible()` action.
   */
  action: refType$1,
  /**
   * If `true`, the ripples are centered.
   * They won't start at the cursor interaction position.
   * @default false
   */
  centerRipple: PropTypes.bool,
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: elementTypeAcceptingRef$1,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: PropTypes.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: PropTypes.bool,
  /**
   * If `true`, the touch ripple effect is disabled.
   * @default false
   */
  disableTouchRipple: PropTypes.bool,
  /**
   * If `true`, the base button will have a keyboard focus ripple.
   * @default false
   */
  focusRipple: PropTypes.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: PropTypes.string,
  /**
   * @ignore
   */
  href: PropTypes /* @typescript-to-proptypes-ignore */.any,
  /**
   * The component used to render a link when the `href` prop is provided.
   * @default 'a'
   */
  LinkComponent: PropTypes.elementType,
  /**
   * @ignore
   */
  onBlur: PropTypes.func,
  /**
   * @ignore
   */
  onClick: PropTypes.func,
  /**
   * @ignore
   */
  onContextMenu: PropTypes.func,
  /**
   * @ignore
   */
  onDragLeave: PropTypes.func,
  /**
   * @ignore
   */
  onFocus: PropTypes.func,
  /**
   * Callback fired when the component is focused with a keyboard.
   * We trigger a `onFocus` callback too.
   */
  onFocusVisible: PropTypes.func,
  /**
   * @ignore
   */
  onKeyDown: PropTypes.func,
  /**
   * @ignore
   */
  onKeyUp: PropTypes.func,
  /**
   * @ignore
   */
  onMouseDown: PropTypes.func,
  /**
   * @ignore
   */
  onMouseLeave: PropTypes.func,
  /**
   * @ignore
   */
  onMouseUp: PropTypes.func,
  /**
   * @ignore
   */
  onTouchEnd: PropTypes.func,
  /**
   * @ignore
   */
  onTouchMove: PropTypes.func,
  /**
   * @ignore
   */
  onTouchStart: PropTypes.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * @default 0
   */
  tabIndex: PropTypes.number,
  /**
   * Props applied to the `TouchRipple` element.
   */
  TouchRippleProps: PropTypes.object,
  /**
   * A ref that points to the `TouchRipple` element.
   */
  touchRippleRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
    current: PropTypes.shape({
      pulsate: PropTypes.func.isRequired,
      start: PropTypes.func.isRequired,
      stop: PropTypes.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  type: PropTypes.oneOfType([PropTypes.oneOf(['button', 'reset', 'submit']), PropTypes.string])
} : void 0;
var ButtonBase$1 = ButtonBase;

function getTypographyUtilityClass(slot) {
  return generateUtilityClass('MuiTypography', slot);
}
generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);

const _excluded$2 = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
const useUtilityClasses$2 = ownerState => {
  const {
    align,
    gutterBottom,
    noWrap,
    paragraph,
    variant,
    classes
  } = ownerState;
  const slots = {
    root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize$1(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']
  };
  return composeClasses(slots, getTypographyUtilityClass, classes);
};
const TypographyRoot = styled$1('span', {
  name: 'MuiTypography',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize$1(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
  }
})(({
  theme,
  ownerState
}) => _extends$5({
  margin: 0
}, ownerState.variant === 'inherit' && {
  // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
  font: 'inherit'
}, ownerState.variant !== 'inherit' && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
  textAlign: ownerState.align
}, ownerState.noWrap && {
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
}, ownerState.gutterBottom && {
  marginBottom: '0.35em'
}, ownerState.paragraph && {
  marginBottom: 16
}));
const defaultVariantMapping = {
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  subtitle1: 'h6',
  subtitle2: 'h6',
  body1: 'p',
  body2: 'p',
  inherit: 'p'
};

// TODO v6: deprecate these color values in v5.x and remove the transformation in v6
const colorTransformations = {
  primary: 'primary.main',
  textPrimary: 'text.primary',
  secondary: 'secondary.main',
  textSecondary: 'text.secondary',
  error: 'error.main'
};
const transformDeprecatedColors = color => {
  return colorTransformations[color] || color;
};
const Typography = /*#__PURE__*/React__namespace.forwardRef(function Typography(inProps, ref) {
  const themeProps = useDefaultProps({
    props: inProps,
    name: 'MuiTypography'
  });
  const color = transformDeprecatedColors(themeProps.color);
  const props = extendSxProp(_extends$5({}, themeProps, {
    color
  }));
  const {
      align = 'inherit',
      className,
      component,
      gutterBottom = false,
      noWrap = false,
      paragraph = false,
      variant = 'body1',
      variantMapping = defaultVariantMapping
    } = props,
    other = _objectWithoutPropertiesLoose$1(props, _excluded$2);
  const ownerState = _extends$5({}, props, {
    align,
    color,
    className,
    component,
    gutterBottom,
    noWrap,
    paragraph,
    variant,
    variantMapping
  });
  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
  const classes = useUtilityClasses$2(ownerState);
  return /*#__PURE__*/require$$2$1.jsx(TypographyRoot, _extends$5({
    as: Component,
    ref: ref,
    ownerState: ownerState,
    className: clsx(classes.root, className)
  }, other));
});
process.env.NODE_ENV !== "production" ? Typography.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the text-align on the component.
   * @default 'inherit'
   */
  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * If `true`, the text will have a bottom margin.
   * @default false
   */
  gutterBottom: PropTypes.bool,
  /**
   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
   *
   * Note that text overflow can only happen with block or inline-block level elements
   * (the element needs to have a width in order to overflow).
   * @default false
   */
  noWrap: PropTypes.bool,
  /**
   * If `true`, the element will be a paragraph element.
   * @default false
   */
  paragraph: PropTypes.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * Applies the theme typography styles.
   * @default 'body1'
   */
  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),
  /**
   * The component maps the variant prop to a range of different HTML element types.
   * For instance, subtitle1 to `<h6>`.
   * If you wish to change that mapping, you can provide your own.
   * Alternatively, you can use the `component` prop.
   * @default {
   *   h1: 'h1',
   *   h2: 'h2',
   *   h3: 'h3',
   *   h4: 'h4',
   *   h5: 'h5',
   *   h6: 'h6',
   *   subtitle1: 'h6',
   *   subtitle2: 'h6',
   *   body1: 'p',
   *   body2: 'p',
   *   inherit: 'p',
   * }
   */
  variantMapping: PropTypes /* @typescript-to-proptypes-ignore */.object
} : void 0;
var Typography$1 = Typography;

const boxClasses = generateUtilityClasses('MuiBox', ['root']);
var boxClasses$1 = boxClasses;

const defaultTheme = createTheme();
const Box = createBox({
  themeId: THEME_ID,
  defaultTheme,
  defaultClassName: boxClasses$1.root,
  generateClassName: ClassNameGenerator$1.generate
});
process.env.NODE_ENV !== "production" ? Box.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
} : void 0;
var Box$1 = Box;

function getButtonUtilityClass(slot) {
  return generateUtilityClass('MuiButton', slot);
}
const buttonClasses = generateUtilityClasses('MuiButton', ['root', 'text', 'textInherit', 'textPrimary', 'textSecondary', 'textSuccess', 'textError', 'textInfo', 'textWarning', 'outlined', 'outlinedInherit', 'outlinedPrimary', 'outlinedSecondary', 'outlinedSuccess', 'outlinedError', 'outlinedInfo', 'outlinedWarning', 'contained', 'containedInherit', 'containedPrimary', 'containedSecondary', 'containedSuccess', 'containedError', 'containedInfo', 'containedWarning', 'disableElevation', 'focusVisible', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'colorSuccess', 'colorError', 'colorInfo', 'colorWarning', 'textSizeSmall', 'textSizeMedium', 'textSizeLarge', 'outlinedSizeSmall', 'outlinedSizeMedium', 'outlinedSizeLarge', 'containedSizeSmall', 'containedSizeMedium', 'containedSizeLarge', 'sizeMedium', 'sizeSmall', 'sizeLarge', 'fullWidth', 'startIcon', 'endIcon', 'icon', 'iconSizeSmall', 'iconSizeMedium', 'iconSizeLarge']);
var buttonClasses$1 = buttonClasses;

/**
 * @ignore - internal component.
 */
const ButtonGroupContext = /*#__PURE__*/React__namespace.createContext({});
if (process.env.NODE_ENV !== 'production') {
  ButtonGroupContext.displayName = 'ButtonGroupContext';
}
var ButtonGroupContext$1 = ButtonGroupContext;

/**
 * @ignore - internal component.
 */
const ButtonGroupButtonContext = /*#__PURE__*/React__namespace.createContext(undefined);
if (process.env.NODE_ENV !== 'production') {
  ButtonGroupButtonContext.displayName = 'ButtonGroupButtonContext';
}
var ButtonGroupButtonContext$1 = ButtonGroupButtonContext;

const _excluded$1 = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
const useUtilityClasses$1 = ownerState => {
  const {
    color,
    disableElevation,
    fullWidth,
    size,
    variant,
    classes
  } = ownerState;
  const slots = {
    root: ['root', variant, `${variant}${capitalize$1(color)}`, `size${capitalize$1(size)}`, `${variant}Size${capitalize$1(size)}`, `color${capitalize$1(color)}`, disableElevation && 'disableElevation', fullWidth && 'fullWidth'],
    label: ['label'],
    startIcon: ['icon', 'startIcon', `iconSize${capitalize$1(size)}`],
    endIcon: ['icon', 'endIcon', `iconSize${capitalize$1(size)}`]
  };
  const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
  return _extends$5({}, classes, composedClasses);
};
const commonIconStyles = ownerState => _extends$5({}, ownerState.size === 'small' && {
  '& > *:nth-of-type(1)': {
    fontSize: 18
  }
}, ownerState.size === 'medium' && {
  '& > *:nth-of-type(1)': {
    fontSize: 20
  }
}, ownerState.size === 'large' && {
  '& > *:nth-of-type(1)': {
    fontSize: 22
  }
});
const ButtonRoot = styled$1(ButtonBase$1, {
  shouldForwardProp: prop => rootShouldForwardProp$1(prop) || prop === 'classes',
  name: 'MuiButton',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize$1(ownerState.color)}`], styles[`size${capitalize$1(ownerState.size)}`], styles[`${ownerState.variant}Size${capitalize$1(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, ownerState.disableElevation && styles.disableElevation, ownerState.fullWidth && styles.fullWidth];
  }
})(({
  theme,
  ownerState
}) => {
  var _theme$palette$getCon, _theme$palette;
  const inheritContainedBackgroundColor = theme.palette.mode === 'light' ? theme.palette.grey[300] : theme.palette.grey[800];
  const inheritContainedHoverBackgroundColor = theme.palette.mode === 'light' ? theme.palette.grey.A100 : theme.palette.grey[700];
  return _extends$5({}, theme.typography.button, {
    minWidth: 64,
    padding: '6px 16px',
    borderRadius: (theme.vars || theme).shape.borderRadius,
    transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {
      duration: theme.transitions.duration.short
    }),
    '&:hover': _extends$5({
      textDecoration: 'none',
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha_1(theme.palette.text.primary, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha_1(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
      border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha_1(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    }, ownerState.variant === 'contained' && {
      backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
      boxShadow: (theme.vars || theme).shadows[4],
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        boxShadow: (theme.vars || theme).shadows[2],
        backgroundColor: (theme.vars || theme).palette.grey[300]
      }
    }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
      }
    }),
    '&:active': _extends$5({}, ownerState.variant === 'contained' && {
      boxShadow: (theme.vars || theme).shadows[8]
    }),
    [`&.${buttonClasses$1.focusVisible}`]: _extends$5({}, ownerState.variant === 'contained' && {
      boxShadow: (theme.vars || theme).shadows[6]
    }),
    [`&.${buttonClasses$1.disabled}`]: _extends$5({
      color: (theme.vars || theme).palette.action.disabled
    }, ownerState.variant === 'outlined' && {
      border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
    }, ownerState.variant === 'contained' && {
      color: (theme.vars || theme).palette.action.disabled,
      boxShadow: (theme.vars || theme).shadows[0],
      backgroundColor: (theme.vars || theme).palette.action.disabledBackground
    })
  }, ownerState.variant === 'text' && {
    padding: '6px 8px'
  }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
    color: (theme.vars || theme).palette[ownerState.color].main
  }, ownerState.variant === 'outlined' && {
    padding: '5px 15px',
    border: '1px solid currentColor'
  }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
    color: (theme.vars || theme).palette[ownerState.color].main,
    border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha_1(theme.palette[ownerState.color].main, 0.5)}`
  }, ownerState.variant === 'contained' && {
    color: theme.vars ?
    // this is safe because grey does not change between default light/dark mode
    theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
    backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
    boxShadow: (theme.vars || theme).shadows[2]
  }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
    color: (theme.vars || theme).palette[ownerState.color].contrastText,
    backgroundColor: (theme.vars || theme).palette[ownerState.color].main
  }, ownerState.color === 'inherit' && {
    color: 'inherit',
    borderColor: 'currentColor'
  }, ownerState.size === 'small' && ownerState.variant === 'text' && {
    padding: '4px 5px',
    fontSize: theme.typography.pxToRem(13)
  }, ownerState.size === 'large' && ownerState.variant === 'text' && {
    padding: '8px 11px',
    fontSize: theme.typography.pxToRem(15)
  }, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
    padding: '3px 9px',
    fontSize: theme.typography.pxToRem(13)
  }, ownerState.size === 'large' && ownerState.variant === 'outlined' && {
    padding: '7px 21px',
    fontSize: theme.typography.pxToRem(15)
  }, ownerState.size === 'small' && ownerState.variant === 'contained' && {
    padding: '4px 10px',
    fontSize: theme.typography.pxToRem(13)
  }, ownerState.size === 'large' && ownerState.variant === 'contained' && {
    padding: '8px 22px',
    fontSize: theme.typography.pxToRem(15)
  }, ownerState.fullWidth && {
    width: '100%'
  });
}, ({
  ownerState
}) => ownerState.disableElevation && {
  boxShadow: 'none',
  '&:hover': {
    boxShadow: 'none'
  },
  [`&.${buttonClasses$1.focusVisible}`]: {
    boxShadow: 'none'
  },
  '&:active': {
    boxShadow: 'none'
  },
  [`&.${buttonClasses$1.disabled}`]: {
    boxShadow: 'none'
  }
});
const ButtonStartIcon = styled$1('span', {
  name: 'MuiButton',
  slot: 'StartIcon',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.startIcon, styles[`iconSize${capitalize$1(ownerState.size)}`]];
  }
})(({
  ownerState
}) => _extends$5({
  display: 'inherit',
  marginRight: 8,
  marginLeft: -4
}, ownerState.size === 'small' && {
  marginLeft: -2
}, commonIconStyles(ownerState)));
const ButtonEndIcon = styled$1('span', {
  name: 'MuiButton',
  slot: 'EndIcon',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.endIcon, styles[`iconSize${capitalize$1(ownerState.size)}`]];
  }
})(({
  ownerState
}) => _extends$5({
  display: 'inherit',
  marginRight: -4,
  marginLeft: 8
}, ownerState.size === 'small' && {
  marginRight: -2
}, commonIconStyles(ownerState)));
const Button = /*#__PURE__*/React__namespace.forwardRef(function Button(inProps, ref) {
  // props priority: `inProps` > `contextProps` > `themeDefaultProps`
  const contextProps = React__namespace.useContext(ButtonGroupContext$1);
  const buttonGroupButtonContextPositionClassName = React__namespace.useContext(ButtonGroupButtonContext$1);
  const resolvedProps = resolveProps(contextProps, inProps);
  const props = useDefaultProps({
    props: resolvedProps,
    name: 'MuiButton'
  });
  const {
      children,
      color = 'primary',
      component = 'button',
      className,
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      endIcon: endIconProp,
      focusVisibleClassName,
      fullWidth = false,
      size = 'medium',
      startIcon: startIconProp,
      type,
      variant = 'text'
    } = props,
    other = _objectWithoutPropertiesLoose$1(props, _excluded$1);
  const ownerState = _extends$5({}, props, {
    color,
    component,
    disabled,
    disableElevation,
    disableFocusRipple,
    fullWidth,
    size,
    type,
    variant
  });
  const classes = useUtilityClasses$1(ownerState);
  const startIcon = startIconProp && /*#__PURE__*/require$$2$1.jsx(ButtonStartIcon, {
    className: classes.startIcon,
    ownerState: ownerState,
    children: startIconProp
  });
  const endIcon = endIconProp && /*#__PURE__*/require$$2$1.jsx(ButtonEndIcon, {
    className: classes.endIcon,
    ownerState: ownerState,
    children: endIconProp
  });
  const positionClassName = buttonGroupButtonContextPositionClassName || '';
  return /*#__PURE__*/require$$2$1.jsxs(ButtonRoot, _extends$5({
    ownerState: ownerState,
    className: clsx(contextProps.className, classes.root, className, positionClassName),
    component: component,
    disabled: disabled,
    focusRipple: !disableFocusRipple,
    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
    ref: ref,
    type: type
  }, other, {
    classes: classes,
    children: [startIcon, children, endIcon]
  }));
});
process.env.NODE_ENV !== "production" ? Button.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'primary', 'secondary', 'success', 'error', 'info', 'warning']), PropTypes.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: PropTypes.bool,
  /**
   * If `true`, no elevation is used.
   * @default false
   */
  disableElevation: PropTypes.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: PropTypes.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: PropTypes.bool,
  /**
   * Element placed after the children.
   */
  endIcon: PropTypes.node,
  /**
   * @ignore
   */
  focusVisibleClassName: PropTypes.string,
  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: PropTypes.bool,
  /**
   * The URL to link to when the button is clicked.
   * If defined, an `a` element will be used as the root node.
   */
  href: PropTypes.string,
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),
  /**
   * Element placed before the children.
   */
  startIcon: PropTypes.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * @ignore
   */
  type: PropTypes.oneOfType([PropTypes.oneOf(['button', 'reset', 'submit']), PropTypes.string]),
  /**
   * The variant to use.
   * @default 'text'
   */
  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['contained', 'outlined', 'text']), PropTypes.string])
} : void 0;
var Button$1 = Button;

const Container = createContainer({
  createStyledComponent: styled$1('div', {
    name: 'MuiContainer',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[`maxWidth${capitalize$1(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];
    }
  }),
  useThemeProps: inProps => useDefaultProps({
    props: inProps,
    name: 'MuiContainer'
  })
});
process.env.NODE_ENV !== "production" ? Container.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: PropTypes.bool,
  /**
   * Set the max-width to match the min-width of the current breakpoint.
   * This is useful if you'd prefer to design for a fixed set of sizes
   * instead of trying to accommodate a fully fluid viewport.
   * It's fluid by default.
   * @default false
   */
  fixed: PropTypes.bool,
  /**
   * Determine the max-width of the container.
   * The container width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'lg'
   */
  maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
} : void 0;
var Container$1 = Container;

function getSkeletonUtilityClass(slot) {
  return generateUtilityClass('MuiSkeleton', slot);
}
generateUtilityClasses('MuiSkeleton', ['root', 'text', 'rectangular', 'rounded', 'circular', 'pulse', 'wave', 'withChildren', 'fitContent', 'heightAuto']);

const _excluded = ["animation", "className", "component", "height", "style", "variant", "width"];
let _$1 = t => t,
  _t,
  _t2,
  _t3,
  _t4;
const useUtilityClasses = ownerState => {
  const {
    classes,
    variant,
    animation,
    hasChildren,
    width,
    height
  } = ownerState;
  const slots = {
    root: ['root', variant, animation, hasChildren && 'withChildren', hasChildren && !width && 'fitContent', hasChildren && !height && 'heightAuto']
  };
  return composeClasses(slots, getSkeletonUtilityClass, classes);
};
const pulseKeyframe = keyframes(_t || (_t = _$1`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.4;
  }

  100% {
    opacity: 1;
  }
`));
const waveKeyframe = keyframes(_t2 || (_t2 = _$1`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`));
const SkeletonRoot = styled$1('span', {
  name: 'MuiSkeleton',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[ownerState.variant], ownerState.animation !== false && styles[ownerState.animation], ownerState.hasChildren && styles.withChildren, ownerState.hasChildren && !ownerState.width && styles.fitContent, ownerState.hasChildren && !ownerState.height && styles.heightAuto];
  }
})(({
  theme,
  ownerState
}) => {
  const radiusUnit = getUnit(theme.shape.borderRadius) || 'px';
  const radiusValue = toUnitless(theme.shape.borderRadius);
  return _extends$5({
    display: 'block',
    // Create a "on paper" color with sufficient contrast retaining the color
    backgroundColor: theme.vars ? theme.vars.palette.Skeleton.bg : alpha$1(theme.palette.text.primary, theme.palette.mode === 'light' ? 0.11 : 0.13),
    height: '1.2em'
  }, ownerState.variant === 'text' && {
    marginTop: 0,
    marginBottom: 0,
    height: 'auto',
    transformOrigin: '0 55%',
    transform: 'scale(1, 0.60)',
    borderRadius: `${radiusValue}${radiusUnit}/${Math.round(radiusValue / 0.6 * 10) / 10}${radiusUnit}`,
    '&:empty:before': {
      content: '"\\00a0"'
    }
  }, ownerState.variant === 'circular' && {
    borderRadius: '50%'
  }, ownerState.variant === 'rounded' && {
    borderRadius: (theme.vars || theme).shape.borderRadius
  }, ownerState.hasChildren && {
    '& > *': {
      visibility: 'hidden'
    }
  }, ownerState.hasChildren && !ownerState.width && {
    maxWidth: 'fit-content'
  }, ownerState.hasChildren && !ownerState.height && {
    height: 'auto'
  });
}, ({
  ownerState
}) => ownerState.animation === 'pulse' && css(_t3 || (_t3 = _$1`
      animation: ${0} 2s ease-in-out 0.5s infinite;
    `), pulseKeyframe), ({
  ownerState,
  theme
}) => ownerState.animation === 'wave' && css(_t4 || (_t4 = _$1`
      position: relative;
      overflow: hidden;

      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
      -webkit-mask-image: -webkit-radial-gradient(white, black);

      &::after {
        animation: ${0} 2s linear 0.5s infinite;
        background: linear-gradient(
          90deg,
          transparent,
          ${0},
          transparent
        );
        content: '';
        position: absolute;
        transform: translateX(-100%); /* Avoid flash during server-side hydration */
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
      }
    `), waveKeyframe, (theme.vars || theme).palette.action.hover));
const Skeleton = /*#__PURE__*/React__namespace.forwardRef(function Skeleton(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: 'MuiSkeleton'
  });
  const {
      animation = 'pulse',
      className,
      component = 'span',
      height,
      style,
      variant = 'text',
      width
    } = props,
    other = _objectWithoutPropertiesLoose$1(props, _excluded);
  const ownerState = _extends$5({}, props, {
    animation,
    component,
    variant,
    hasChildren: Boolean(other.children)
  });
  const classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/require$$2$1.jsx(SkeletonRoot, _extends$5({
    as: component,
    ref: ref,
    className: clsx(classes.root, className),
    ownerState: ownerState
  }, other, {
    style: _extends$5({
      width,
      height
    }, style)
  }));
});
process.env.NODE_ENV !== "production" ? Skeleton.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The animation.
   * If `false` the animation effect is disabled.
   * @default 'pulse'
   */
  animation: PropTypes.oneOf(['pulse', 'wave', false]),
  /**
   * Optional children to infer width and height from.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * Height of the skeleton.
   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.
   */
  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * @ignore
   */
  style: PropTypes.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * The type of content that will be rendered.
   * @default 'text'
   */
  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['circular', 'rectangular', 'rounded', 'text']), PropTypes.string]),
  /**
   * Width of the skeleton.
   * Useful when the skeleton is inside an inline element with no width of its own.
   */
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
} : void 0;
var Skeleton$1 = Skeleton;

const WatchIcon = () => {
    return (require$$2$1.jsx("svg", { width: "24", height: "24", viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: require$$2$1.jsx("g", { id: "play", children: require$$2$1.jsx("path", { id: "Icon", d: "M4.16675 4.1576C4.16675 3.3483 4.16675 2.94365 4.33549 2.72059C4.48249 2.52626 4.70718 2.40601 4.95041 2.39149C5.22961 2.37482 5.5663 2.59928 6.23968 3.0482L15.0026 8.89018C15.5591 9.26111 15.8373 9.44658 15.9342 9.68035C16.019 9.88473 16.019 10.1144 15.9342 10.3188C15.8373 10.5526 15.5591 10.738 15.0026 11.109L6.23968 16.951C5.5663 17.3999 5.22961 17.6243 4.95041 17.6077C4.70718 17.5931 4.48249 17.4729 4.33549 17.2786C4.16675 17.0555 4.16675 16.6509 4.16675 15.8416V4.1576Z", stroke: "white", strokeWidth: "1.66667", strokeLinecap: "round", strokeLinejoin: "round" }) }) }));
};

const BingeLogo = "https://pre.binge.buzz/assets/svg/binge-logo.svg";
const Banner = ({ isLoading, bannerImages }) => {
    const isXs = useMediaQuery("(max-width:600px)");
    const isLg = useMediaQuery("(min-width:1200px)");
    const is1400px = useMediaQuery("(min-width:1400px)");
    const imageSrc = isXs ? bannerImages.portrait : bannerImages.landscape;
    if (isLoading) {
        return (require$$2$1.jsx(Skeleton$1, { variant: "rectangular", width: "100%", animation: "wave", height: 300, sx: {
                bgcolor: "#f2eeeb",
                background: "linear-gradient(90deg, #f2eeeb 25%, #f2e8f2 50%, #f2eeeb 75%)",
                backgroundSize: "300% 100%",
                animation: "waveAnimation 1.6s ease-in-out infinite",
                "@keyframes waveAnimation": {
                    "0%": { backgroundPosition: "100% 0" },
                    "100%": { backgroundPosition: "-100% 0" },
                },
            } }));
    }
    return (require$$2$1.jsxs(Box$1, { sx: { position: "relative" }, children: [require$$2$1.jsx(Box$1, { sx: {
                    position: "relative",
                    display: "flex",
                    justifyContent: "end",
                    width: "100%",
                }, children: require$$2$1.jsx("img", { src: imageSrc, alt: "hero", style: { width: "70%", maxWidth: "1003px", height: "auto" } }) }), require$$2$1.jsx(Box$1, { sx: {
                    position: "absolute",
                    top: 0,
                    left: 0,
                    width: { xs: "100%", md: "80%" },
                    height: "100%",
                    display: "flex",
                    alignItems: "center",
                    background: {
                        xs: "linear-gradient(to right, #464A54 0%, #464A54 35%, rgba(255, 255, 255, 0.00))",
                        md: "linear-gradient(to right, #464A54 0%, #464A54 47%, rgba(255, 255, 255, 0.00))",
                    },
                }, children: require$$2$1.jsxs(Container$1, { sx: {
                        zIndex: 1,
                        paddingX: "0px !important",
                        marginLeft: is1400px
                            ? "150px"
                            : isLg
                                ? "80px"
                                : { xs: "20px", sm: "50px", md: "100px" },
                    }, children: [require$$2$1.jsxs(Typography$1, { variant: "h3", sx: {
                                fontWeight: { xs: "400", md: "700" },
                                fontSize: is1400px
                                    ? "48px"
                                    : isLg
                                        ? "38px"
                                        : { xs: "20px", sm: "25px", md: "30px" },
                                color: "#fff",
                                display: "flex",
                                alignItems: "center",
                                gap: "8px",
                            }, children: [require$$2$1.jsx(Box$1, { component: "img", src: BingeLogo, alt: "binge", sx: {
                                        width: is1400px
                                            ? 165
                                            : isLg
                                                ? 150
                                                : { xs: 80, sm: 100, md: 135 },
                                    } }), require$$2$1.jsx("span", { className: "banner-text", children: "is an online video" })] }), require$$2$1.jsx(Typography$1, { variant: "h3", sx: {
                                fontWeight: 700,
                                fontSize: is1400px
                                    ? "48px"
                                    : isLg
                                        ? "38px"
                                        : { xs: "20px", sm: "25px", md: "30px" },
                                color: "#fff",
                                display: "flex",
                                alignItems: "center",
                                gap: "8px",
                            }, children: require$$2$1.jsx("span", { className: "banner-text", style: {
                                    color: "#EEEFFC",
                                    marginTop: "0px",
                                    marginBottom: "0px",
                                }, children: "streaming platform" }) }), require$$2$1.jsxs(Button$1, { sx: {
                                background: "#FF4A50",
                                borderRadius: "32px",
                                display: "flex",
                                justifyContent: "center",
                                alignItems: "center",
                                gap: "6px",
                                padding: { xs: "8px 14px", lg: "12px 18px" },
                                color: "#fff",
                                textTransform: "none",
                                fontSize: { xs: "15px", sm: "14px", lg: "16px" },
                                fontWeight: { xs: "400", lg: "600" },
                                marginTop: { xs: "15px", md: "30px" },
                            }, 
                            // onClick={() => {
                            //   window.location.assign("https://www.binge.buzz");
                            // }}
                            className: "watchnow-text", children: ["Watch Now", require$$2$1.jsx(WatchIcon, {})] })] }) })] }));
};

function Image$1({ path, sx, onClick, }) {
    const onMediaFallback = (event) => {
        const { target } = event;
        target.src = "https://pre.binge.buzz/assets/svg/binge-logo.svg";
    };
    return (require$$2$1.jsx(Box$1, { sx: { ...sx }, component: "img", onClick: () => onClick?.(), src: path
            ? `${LOCAL_BASE_URL}/${path}`
            : "https://pre.binge.buzz/assets/svg/binge-logo.svg", onError: onMediaFallback }));
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function memoize(fn) {
  var cache = Object.create(null);
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

var isPropValid = /* #__PURE__ */memoize(function (prop) {
  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
  /* o */ && prop.charCodeAt(1) === 110
  /* n */ && prop.charCodeAt(2) < 91;
}
/* Z+1 */);

var MS = '-ms-';
var MOZ = '-moz-';
var WEBKIT = '-webkit-';
var COMMENT = 'comm';
var RULESET = 'rule';
var DECLARATION = 'decl';
var IMPORT = '@import';
var KEYFRAMES = '@keyframes';
var LAYER = '@layer';

/**
 * @param {number}
 * @return {number}
 */
var abs = Math.abs;

/**
 * @param {number}
 * @return {string}
 */
var from = String.fromCharCode;

/**
 * @param {object}
 * @return {object}
 */
var assign$1 = Object.assign;

/**
 * @param {string} value
 * @param {number} length
 * @return {number}
 */
function hash$1(value, length) {
  return charat(value, 0) ^ 45 ? (((length << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
}

/**
 * @param {string} value
 * @return {string}
 */
function trim(value) {
  return value.trim();
}

/**
 * @param {string} value
 * @param {RegExp} pattern
 * @return {string?}
 */
function match(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}

/**
 * @param {string} value
 * @param {(string|RegExp)} pattern
 * @param {string} replacement
 * @return {string}
 */
function replace(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}

/**
 * @param {string} value
 * @param {string} search
 * @param {number} position
 * @return {number}
 */
function indexof(value, search, position) {
  return value.indexOf(search, position);
}

/**
 * @param {string} value
 * @param {number} index
 * @return {number}
 */
function charat(value, index) {
  return value.charCodeAt(index) | 0;
}

/**
 * @param {string} value
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function substr(value, begin, end) {
  return value.slice(begin, end);
}

/**
 * @param {string} value
 * @return {number}
 */
function strlen(value) {
  return value.length;
}

/**
 * @param {any[]} value
 * @return {number}
 */
function sizeof(value) {
  return value.length;
}

/**
 * @param {any} value
 * @param {any[]} array
 * @return {any}
 */
function append(value, array) {
  return array.push(value), value;
}

/**
 * @param {string[]} array
 * @param {function} callback
 * @return {string}
 */
function combine(array, callback) {
  return array.map(callback).join('');
}

/**
 * @param {string[]} array
 * @param {RegExp} pattern
 * @return {string[]}
 */
function filter(array, pattern) {
  return array.filter(function (value) {
    return !match(value, pattern);
  });
}

var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = '';

/**
 * @param {string} value
 * @param {object | null} root
 * @param {object | null} parent
 * @param {string} type
 * @param {string[] | string} props
 * @param {object[] | string} children
 * @param {object[]} siblings
 * @param {number} length
 */
function node(value, root, parent, type, props, children, length, siblings) {
  return {
    value: value,
    root: root,
    parent: parent,
    type: type,
    props: props,
    children: children,
    line: line,
    column: column,
    length: length,
    return: '',
    siblings: siblings
  };
}

/**
 * @param {object} root
 * @param {object} props
 * @return {object}
 */
function copy(root, props) {
  return assign$1(node('', null, null, '', null, null, 0, root.siblings), root, {
    length: -root.length
  }, props);
}

/**
 * @param {object} root
 */
function lift(root) {
  while (root.root) root = copy(root.root, {
    children: [root]
  });
  append(root, root.siblings);
}

/**
 * @return {number}
 */
function char() {
  return character;
}

/**
 * @return {number}
 */
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10) column = 1, line--;
  return character;
}

/**
 * @return {number}
 */
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10) column = 1, line++;
  return character;
}

/**
 * @return {number}
 */
function peek() {
  return charat(characters, position);
}

/**
 * @return {number}
 */
function caret() {
  return position;
}

/**
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function slice(begin, end) {
  return substr(characters, begin, end);
}

/**
 * @param {number} type
 * @return {number}
 */
function token(type) {
  switch (type) {
    // \0 \t \n \r \s whitespace token
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    // ! + , / > @ ~ isolate token
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    // ; { } breakpoint token
    case 59:
    case 123:
    case 125:
      return 4;
    // : accompanied token
    case 58:
      return 3;
    // " ' ( [ opening delimit token
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    // ) ] closing delimit token
    case 41:
    case 93:
      return 1;
  }
  return 0;
}

/**
 * @param {string} value
 * @return {any[]}
 */
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}

/**
 * @param {any} value
 * @return {any}
 */
function dealloc(value) {
  return characters = '', value;
}

/**
 * @param {number} type
 * @return {string}
 */
function delimit(type) {
  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}

/**
 * @param {number} type
 * @return {string}
 */
function whitespace(type) {
  while (character = peek()) if (character < 33) next();else break;
  return token(type) > 2 || token(character) > 3 ? '' : ' ';
}

/**
 * @param {number} index
 * @param {number} count
 * @return {string}
 */
function escaping(index, count) {
  while (--count && next())
  // not 0-9 A-F a-f
  if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97) break;
  return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
}

/**
 * @param {number} type
 * @return {number}
 */
function delimiter(type) {
  while (next()) switch (character) {
    // ] ) " '
    case type:
      return position;
    // " '
    case 34:
    case 39:
      if (type !== 34 && type !== 39) delimiter(character);
      break;
    // (
    case 40:
      if (type === 41) delimiter(type);
      break;
    // \
    case 92:
      next();
      break;
  }
  return position;
}

/**
 * @param {number} type
 * @param {number} index
 * @return {number}
 */
function commenter(type, index) {
  while (next())
  // //
  if (type + character === 47 + 10) break;
  // /*
  else if (type + character === 42 + 42 && peek() === 47) break;
  return '/*' + slice(index, position - 1) + '*' + from(type === 47 ? type : next());
}

/**
 * @param {number} index
 * @return {string}
 */
function identifier(index) {
  while (!token(peek())) next();
  return slice(index, position);
}

/**
 * @param {string} value
 * @return {object[]}
 */
function compile(value) {
  return dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value));
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {string[]} rule
 * @param {string[]} rules
 * @param {string[]} rulesets
 * @param {number[]} pseudo
 * @param {number[]} points
 * @param {string[]} declarations
 * @return {object}
 */
function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index = 0;
  var offset = 0;
  var length = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character = 0;
  var type = '';
  var props = rules;
  var children = rulesets;
  var reference = rule;
  var characters = type;
  while (scanning) switch (previous = character, character = next()) {
    // (
    case 40:
      if (previous != 108 && charat(characters, length - 1) == 58) {
        if (indexof(characters += replace(delimit(character), '&', '&\f'), '&\f', abs(index ? points[index - 1] : 0)) != -1) ampersand = -1;
        break;
      }
    // " ' [
    case 34:
    case 39:
    case 91:
      characters += delimit(character);
      break;
    // \t \n \r \s
    case 9:
    case 10:
    case 13:
    case 32:
      characters += whitespace(previous);
      break;
    // \
    case 92:
      characters += escaping(caret() - 1, 7);
      continue;
    // /
    case 47:
      switch (peek()) {
        case 42:
        case 47:
          append(comment(commenter(next(), caret()), root, parent, declarations), declarations);
          break;
        default:
          characters += '/';
      }
      break;
    // {
    case 123 * variable:
      points[index++] = strlen(characters) * ampersand;
    // } ; \0
    case 125 * variable:
    case 59:
    case 0:
      switch (character) {
        // \0 }
        case 0:
        case 125:
          scanning = 0;
        // ;
        case 59 + offset:
          if (ampersand == -1) characters = replace(characters, /\f/g, '');
          if (property > 0 && strlen(characters) - length) append(property > 32 ? declaration(characters + ';', rule, parent, length - 1, declarations) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2, declarations), declarations);
          break;
        // @ ;
        case 59:
          characters += ';';
        // { rule/at-rule
        default:
          append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length, rulesets), rulesets);
          if (character === 123) if (offset === 0) parse(characters, root, reference, reference, props, rulesets, length, points, children);else switch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {
            // d l m s
            case 100:
            case 108:
            case 109:
            case 115:
              parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length, children), children), rules, children, length, points, rule ? props : children);
              break;
            default:
              parse(characters, reference, reference, reference, [''], children, 0, points, children);
          }
      }
      index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
      break;
    // :
    case 58:
      length = 1 + strlen(characters), property = previous;
    default:
      if (variable < 1) if (character == 123) --variable;else if (character == 125 && variable++ == 0 && prev() == 125) continue;
      switch (characters += from(character), character * variable) {
        // &
        case 38:
          ampersand = offset > 0 ? 1 : (characters += '\f', -1);
          break;
        // ,
        case 44:
          points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;
          break;
        // @
        case 64:
          // -
          if (peek() === 45) characters += delimit(next());
          atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;
          break;
        // -
        case 45:
          if (previous === 45 && strlen(characters) == 2) variable = 0;
      }
  }
  return rulesets;
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} index
 * @param {number} offset
 * @param {string[]} rules
 * @param {number[]} points
 * @param {string} type
 * @param {string[]} props
 * @param {string[]} children
 * @param {number} length
 * @param {object[]} siblings
 * @return {object}
 */
function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length, siblings) {
  var post = offset - 1;
  var rule = offset === 0 ? rules : [''];
  var size = sizeof(rule);
  for (var i = 0, j = 0, k = 0; i < index; ++i) for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x) if (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\f/g, rule[x]))) props[k++] = z;
  return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length, siblings);
}

/**
 * @param {number} value
 * @param {object} root
 * @param {object?} parent
 * @param {object[]} siblings
 * @return {object}
 */
function comment(value, root, parent, siblings) {
  return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0, siblings);
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} length
 * @param {object[]} siblings
 * @return {object}
 */
function declaration(value, root, parent, length, siblings) {
  return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length, siblings);
}

/**
 * @param {string} value
 * @param {number} length
 * @param {object[]} children
 * @return {string}
 */
function prefix(value, length, children) {
  switch (hash$1(value, length)) {
    // color-adjust
    case 5103:
      return WEBKIT + 'print-' + value + value;
    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    // tab-size
    case 4789:
      return MOZ + value + value;
    // appearance, user-select, transform, hyphens, text-size-adjust
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    // writing-mode
    case 5936:
      switch (charat(value, length + 11)) {
        // vertical-l(r)
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
        // vertical-r(l)
        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
        // horizontal(-)tb
        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
        // default: fallthrough to below
      }
    // flex, flex-direction, scroll-snap-type, writing-mode
    case 6828:
    case 4268:
    case 2903:
      return WEBKIT + value + MS + value + value;
    // order
    case 6165:
      return WEBKIT + value + MS + 'flex-' + value + value;
    // align-items
    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value;
    // align-self
    case 5443:
      return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/g, '') + (!match(value, /flex-|baseline/) ? MS + 'grid-row-' + replace(value, /flex-|-self/g, '') : '') + value;
    // align-content
    case 4675:
      return WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/g, '') + value;
    // flex-shrink
    case 5548:
      return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value;
    // flex-basis
    case 5292:
      return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value;
    // flex-grow
    case 6060:
      return WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value;
    // transition
    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value;
    // cursor
    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value;
    // background, background-image
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1');
    // justify-content
    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value;
    // justify-self
    case 4200:
      if (!match(value, /flex-|baseline/)) return MS + 'grid-column-align' + substr(value, length) + value;
      break;
    // grid-template-(columns|rows)
    case 2592:
    case 3360:
      return MS + replace(value, 'template-', '') + value;
    // grid-(row|column)-start
    case 4384:
    case 3616:
      if (children && children.some(function (element, index) {
        return length = index, match(element.props, /grid-\w+-end/);
      })) {
        return ~indexof(value + (children = children[length].value), 'span', 0) ? value : MS + replace(value, '-start', '') + value + MS + 'grid-row-span:' + (~indexof(children, 'span', 0) ? match(children, /\d+/) : +match(children, /\d+/) - +match(value, /\d+/)) + ';';
      }
      return MS + replace(value, '-start', '') + value;
    // grid-(row|column)-end
    case 4896:
    case 4128:
      return children && children.some(function (element) {
        return match(element.props, /grid-\w+-start/);
      }) ? value : MS + replace(replace(value, '-end', '-span'), 'span ', '') + value;
    // (margin|padding)-inline-(start|end)
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value;
    // (min|max)?(width|height|inline-size|block-size)
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      // stretch, max-content, min-content, fill-available
      if (strlen(value) - 1 - length > 6) switch (charat(value, length + 1)) {
        // (m)ax-content, (m)in-content
        case 109:
          // -
          if (charat(value, length + 4) !== 45) break;
        // (f)ill-available, (f)it-content
        case 102:
          return replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
        // (s)tretch
        case 115:
          return ~indexof(value, 'stretch', 0) ? prefix(replace(value, 'stretch', 'fill-available'), length, children) + value : value;
      }
      break;
    // grid-(column|row)
    case 5152:
    case 5920:
      return replace(value, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function (_, a, b, c, d, e, f) {
        return MS + a + ':' + b + f + (c ? MS + a + '-span:' + (d ? e : +e - +b) + f : '') + value;
      });
    // position: sticky
    case 4949:
      // stick(y)?
      if (charat(value, length + 6) === 121) return replace(value, ':', ':' + WEBKIT) + value;
      break;
    // display: (flex|inline-flex|grid|inline-grid)
    case 6444:
      switch (charat(value, charat(value, 14) === 45 ? 18 : 11)) {
        // (inline-)?fle(x)
        case 120:
          return replace(value, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value;
        // (inline-)?gri(d)
        case 100:
          return replace(value, ':', ':' + MS) + value;
      }
      break;
    // scroll-margin, scroll-margin-(top|right|bottom|left)
    case 5719:
    case 2647:
    case 2135:
    case 3927:
    case 2391:
      return replace(value, 'scroll-', 'scroll-snap-') + value;
  }
  return value;
}

/**
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function serialize(children, callback) {
  var output = '';
  for (var i = 0; i < children.length; i++) output += callback(children[i], i, children, callback) || '';
  return output;
}

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function stringify(element, index, children, callback) {
  switch (element.type) {
    case LAYER:
      if (element.children.length) break;
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return '';
    case KEYFRAMES:
      return element.return = element.value + '{' + serialize(element.children, callback) + '}';
    case RULESET:
      if (!strlen(element.value = element.props.join(','))) return '';
  }
  return strlen(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : '';
}

/**
 * @param {function[]} collection
 * @return {function}
 */
function middleware(collection) {
  var length = sizeof(collection);
  return function (element, index, children, callback) {
    var output = '';
    for (var i = 0; i < length; i++) output += collection[i](element, index, children, callback) || '';
    return output;
  };
}

/**
 * @param {function} callback
 * @return {function}
 */
function rulesheet(callback) {
  return function (element) {
    if (!element.root) if (element = element.return) callback(element);
  };
}

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 */
function prefixer(element, index, children, callback) {
  if (element.length > -1) if (!element.return) switch (element.type) {
    case DECLARATION:
      element.return = prefix(element.value, element.length, children);
      return;
    case KEYFRAMES:
      return serialize([copy(element, {
        value: replace(element.value, '@', '@' + WEBKIT)
      })], callback);
    case RULESET:
      if (element.length) return combine(children = element.props, function (value) {
        switch (match(value, callback = /(::plac\w+|:read-\w+)/)) {
          // :read-(only|write)
          case ':read-only':
          case ':read-write':
            lift(copy(element, {
              props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]
            }));
            lift(copy(element, {
              props: [value]
            }));
            assign$1(element, {
              props: filter(children, callback)
            });
            break;
          // :placeholder
          case '::placeholder':
            lift(copy(element, {
              props: [replace(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]
            }));
            lift(copy(element, {
              props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]
            }));
            lift(copy(element, {
              props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]
            }));
            lift(copy(element, {
              props: [value]
            }));
            assign$1(element, {
              props: filter(children, callback)
            });
            break;
        }
        return '';
      });
  }
}

var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

var f = "undefined" != typeof process && void 0 !== process.env && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || "data-styled",
  m = "active",
  y = "data-styled-version",
  v = "6.1.15",
  g = "/*!sc*/\n",
  S = "undefined" != typeof window && "HTMLElement" in window,
  w = Boolean("boolean" == typeof SC_DISABLE_SPEEDY ? SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== process.env && void 0 !== process.env.REACT_APP_SC_DISABLE_SPEEDY && "" !== process.env.REACT_APP_SC_DISABLE_SPEEDY ? "false" !== process.env.REACT_APP_SC_DISABLE_SPEEDY && process.env.REACT_APP_SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== process.env && void 0 !== process.env.SC_DISABLE_SPEEDY && "" !== process.env.SC_DISABLE_SPEEDY ? "false" !== process.env.SC_DISABLE_SPEEDY && process.env.SC_DISABLE_SPEEDY : "production" !== process.env.NODE_ENV),
  E = /invalid hook call/i,
  N = new Set(),
  P = function (t, n) {
    if ("production" !== process.env.NODE_ENV) {
      var r = n ? ' with the id of "'.concat(n, '"') : "",
        s = "The component ".concat(t).concat(r, " has been created dynamically.\n") + "You may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.",
        i = console.error;
      try {
        var a = !0;
        console.error = function (t) {
          for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
          E.test(t) ? (a = !1, N.delete(s)) : i.apply(void 0, __spreadArray([t], n, !1));
        }, React.useRef(), a && !N.has(s) && (console.warn(s), N.add(s));
      } catch (e) {
        E.test(e.message) && N.delete(s);
      } finally {
        console.error = i;
      }
    }
  },
  _ = Object.freeze([]),
  C = Object.freeze({});
function I(e, t, n) {
  return void 0 === n && (n = C), e.theme !== n.theme && e.theme || t || n.theme;
}
var A = new Set(["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "u", "ul", "use", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"]),
  O = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,
  D = /(^-|-$)/g;
function R(e) {
  return e.replace(O, "-").replace(D, "");
}
var T = /(a)(d)/gi,
  k = 52,
  j = function (e) {
    return String.fromCharCode(e + (e > 25 ? 39 : 97));
  };
function x(e) {
  var t,
    n = "";
  for (t = Math.abs(e); t > k; t = t / k | 0) n = j(t % k) + n;
  return (j(t % k) + n).replace(T, "$1-$2");
}
var V,
  F = 5381,
  M = function (e, t) {
    for (var n = t.length; n;) e = 33 * e ^ t.charCodeAt(--n);
    return e;
  },
  z = function (e) {
    return M(F, e);
  };
function $(e) {
  return x(z(e) >>> 0);
}
function B(e) {
  return "production" !== process.env.NODE_ENV && "string" == typeof e && e || e.displayName || e.name || "Component";
}
function L(e) {
  return "string" == typeof e && ("production" === process.env.NODE_ENV || e.charAt(0) === e.charAt(0).toLowerCase());
}
var G = "function" == typeof Symbol && Symbol.for,
  Y = G ? Symbol.for("react.memo") : 60115,
  q = G ? Symbol.for("react.forward_ref") : 60112,
  W = {
    childContextTypes: !0,
    contextType: !0,
    contextTypes: !0,
    defaultProps: !0,
    displayName: !0,
    getDefaultProps: !0,
    getDerivedStateFromError: !0,
    getDerivedStateFromProps: !0,
    mixins: !0,
    propTypes: !0,
    type: !0
  },
  H = {
    name: !0,
    length: !0,
    prototype: !0,
    caller: !0,
    callee: !0,
    arguments: !0,
    arity: !0
  },
  U = {
    $$typeof: !0,
    compare: !0,
    defaultProps: !0,
    displayName: !0,
    propTypes: !0,
    type: !0
  },
  J = ((V = {})[q] = {
    $$typeof: !0,
    render: !0,
    defaultProps: !0,
    displayName: !0,
    propTypes: !0
  }, V[Y] = U, V);
function X(e) {
  return ("type" in (t = e) && t.type.$$typeof) === Y ? U : "$$typeof" in e ? J[e.$$typeof] : W;
  var t;
}
var Z = Object.defineProperty,
  K = Object.getOwnPropertyNames,
  Q = Object.getOwnPropertySymbols,
  ee = Object.getOwnPropertyDescriptor,
  te = Object.getPrototypeOf,
  ne = Object.prototype;
function re(e, t, n) {
  if ("string" != typeof t) {
    if (ne) {
      var r = te(t);
      r && r !== ne && re(e, r, n);
    }
    var o = K(t);
    Q && (o = o.concat(Q(t)));
    for (var s = X(e), i = X(t), a = 0; a < o.length; ++a) {
      var c = o[a];
      if (!(c in H || n && n[c] || i && c in i || s && c in s)) {
        var l = ee(t, c);
        try {
          Z(e, c, l);
        } catch (e) {}
      }
    }
  }
  return e;
}
function oe(e) {
  return "function" == typeof e;
}
function se(e) {
  return "object" == typeof e && "styledComponentId" in e;
}
function ie(e, t) {
  return e && t ? "".concat(e, " ").concat(t) : e || t || "";
}
function ae(e, t) {
  if (0 === e.length) return "";
  for (var n = e[0], r = 1; r < e.length; r++) n += t ? t + e[r] : e[r];
  return n;
}
function ce(e) {
  return null !== e && "object" == typeof e && e.constructor.name === Object.name && !("props" in e && e.$$typeof);
}
function le(e, t, n) {
  if (void 0 === n && (n = !1), !n && !ce(e) && !Array.isArray(e)) return t;
  if (Array.isArray(t)) for (var r = 0; r < t.length; r++) e[r] = le(e[r], t[r]);else if (ce(t)) for (var r in t) e[r] = le(e[r], t[r]);
  return e;
}
function ue(e, t) {
  Object.defineProperty(e, "toString", {
    value: t
  });
}
var pe = "production" !== process.env.NODE_ENV ? {
  1: "Cannot create styled-component for component: %s.\n\n",
  2: "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n",
  3: "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n",
  4: "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n",
  5: "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n",
  6: "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n",
  7: 'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n',
  8: 'ThemeProvider: Please make your "theme" prop an object.\n\n',
  9: "Missing document `<head>`\n\n",
  10: "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n",
  11: "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n",
  12: "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n",
  13: "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n",
  14: 'ThemeProvider: "theme" prop is required.\n\n',
  15: "A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n",
  16: "Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n",
  17: "CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n",
  18: "ThemeProvider: Please make sure your useTheme hook is within a `<ThemeProvider>`"
} : {};
function de() {
  for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
  for (var n = e[0], r = [], o = 1, s = e.length; o < s; o += 1) r.push(e[o]);
  return r.forEach(function (e) {
    n = n.replace(/%[a-z]/, e);
  }), n;
}
function he(t) {
  for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
  return "production" === process.env.NODE_ENV ? new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#".concat(t, " for more information.").concat(n.length > 0 ? " Args: ".concat(n.join(", ")) : "")) : new Error(de.apply(void 0, __spreadArray([pe[t]], n, !1)).trim());
}
var fe = function () {
    function e(e) {
      this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e;
    }
    return e.prototype.indexOfGroup = function (e) {
      for (var t = 0, n = 0; n < e; n++) t += this.groupSizes[n];
      return t;
    }, e.prototype.insertRules = function (e, t) {
      if (e >= this.groupSizes.length) {
        for (var n = this.groupSizes, r = n.length, o = r; e >= o;) if ((o <<= 1) < 0) throw he(16, "".concat(e));
        this.groupSizes = new Uint32Array(o), this.groupSizes.set(n), this.length = o;
        for (var s = r; s < o; s++) this.groupSizes[s] = 0;
      }
      for (var i = this.indexOfGroup(e + 1), a = (s = 0, t.length); s < a; s++) this.tag.insertRule(i, t[s]) && (this.groupSizes[e]++, i++);
    }, e.prototype.clearGroup = function (e) {
      if (e < this.length) {
        var t = this.groupSizes[e],
          n = this.indexOfGroup(e),
          r = n + t;
        this.groupSizes[e] = 0;
        for (var o = n; o < r; o++) this.tag.deleteRule(n);
      }
    }, e.prototype.getGroup = function (e) {
      var t = "";
      if (e >= this.length || 0 === this.groupSizes[e]) return t;
      for (var n = this.groupSizes[e], r = this.indexOfGroup(e), o = r + n, s = r; s < o; s++) t += "".concat(this.tag.getRule(s)).concat(g);
      return t;
    }, e;
  }(),
  me = 1 << 30,
  ye = new Map(),
  ve = new Map(),
  ge = 1,
  Se = function (e) {
    if (ye.has(e)) return ye.get(e);
    for (; ve.has(ge);) ge++;
    var t = ge++;
    if ("production" !== process.env.NODE_ENV && ((0 | t) < 0 || t > me)) throw he(16, "".concat(t));
    return ye.set(e, t), ve.set(t, e), t;
  },
  we = function (e, t) {
    ge = t + 1, ye.set(e, t), ve.set(t, e);
  },
  be = "style[".concat(f, "][").concat(y, '="').concat(v, '"]'),
  Ee = new RegExp("^".concat(f, '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)')),
  Ne = function (e, t, n) {
    for (var r, o = n.split(","), s = 0, i = o.length; s < i; s++) (r = o[s]) && e.registerName(t, r);
  },
  Pe = function (e, t) {
    for (var n, r = (null !== (n = t.textContent) && void 0 !== n ? n : "").split(g), o = [], s = 0, i = r.length; s < i; s++) {
      var a = r[s].trim();
      if (a) {
        var c = a.match(Ee);
        if (c) {
          var l = 0 | parseInt(c[1], 10),
            u = c[2];
          0 !== l && (we(u, l), Ne(e, u, c[3]), e.getTag().insertRules(l, o)), o.length = 0;
        } else o.push(a);
      }
    }
  },
  _e = function (e) {
    for (var t = document.querySelectorAll(be), n = 0, r = t.length; n < r; n++) {
      var o = t[n];
      o && o.getAttribute(f) !== m && (Pe(e, o), o.parentNode && o.parentNode.removeChild(o));
    }
  };
function Ce() {
  return "undefined" != typeof __webpack_nonce__ ? __webpack_nonce__ : null;
}
var Ie = function (e) {
    var t = document.head,
      n = e || t,
      r = document.createElement("style"),
      o = function (e) {
        var t = Array.from(e.querySelectorAll("style[".concat(f, "]")));
        return t[t.length - 1];
      }(n),
      s = void 0 !== o ? o.nextSibling : null;
    r.setAttribute(f, m), r.setAttribute(y, v);
    var i = Ce();
    return i && r.setAttribute("nonce", i), n.insertBefore(r, s), r;
  },
  Ae = function () {
    function e(e) {
      this.element = Ie(e), this.element.appendChild(document.createTextNode("")), this.sheet = function (e) {
        if (e.sheet) return e.sheet;
        for (var t = document.styleSheets, n = 0, r = t.length; n < r; n++) {
          var o = t[n];
          if (o.ownerNode === e) return o;
        }
        throw he(17);
      }(this.element), this.length = 0;
    }
    return e.prototype.insertRule = function (e, t) {
      try {
        return this.sheet.insertRule(t, e), this.length++, !0;
      } catch (e) {
        return !1;
      }
    }, e.prototype.deleteRule = function (e) {
      this.sheet.deleteRule(e), this.length--;
    }, e.prototype.getRule = function (e) {
      var t = this.sheet.cssRules[e];
      return t && t.cssText ? t.cssText : "";
    }, e;
  }(),
  Oe = function () {
    function e(e) {
      this.element = Ie(e), this.nodes = this.element.childNodes, this.length = 0;
    }
    return e.prototype.insertRule = function (e, t) {
      if (e <= this.length && e >= 0) {
        var n = document.createTextNode(t);
        return this.element.insertBefore(n, this.nodes[e] || null), this.length++, !0;
      }
      return !1;
    }, e.prototype.deleteRule = function (e) {
      this.element.removeChild(this.nodes[e]), this.length--;
    }, e.prototype.getRule = function (e) {
      return e < this.length ? this.nodes[e].textContent : "";
    }, e;
  }(),
  De = function () {
    function e(e) {
      this.rules = [], this.length = 0;
    }
    return e.prototype.insertRule = function (e, t) {
      return e <= this.length && (this.rules.splice(e, 0, t), this.length++, !0);
    }, e.prototype.deleteRule = function (e) {
      this.rules.splice(e, 1), this.length--;
    }, e.prototype.getRule = function (e) {
      return e < this.length ? this.rules[e] : "";
    }, e;
  }(),
  Re = S,
  Te = {
    isServer: !S,
    useCSSOMInjection: !w
  },
  ke = function () {
    function e(e, n, r) {
      void 0 === e && (e = C), void 0 === n && (n = {});
      var o = this;
      this.options = __assign(__assign({}, Te), e), this.gs = n, this.names = new Map(r), this.server = !!e.isServer, !this.server && S && Re && (Re = !1, _e(this)), ue(this, function () {
        return function (e) {
          for (var t = e.getTag(), n = t.length, r = "", o = function (n) {
              var o = function (e) {
                return ve.get(e);
              }(n);
              if (void 0 === o) return "continue";
              var s = e.names.get(o),
                i = t.getGroup(n);
              if (void 0 === s || !s.size || 0 === i.length) return "continue";
              var a = "".concat(f, ".g").concat(n, '[id="').concat(o, '"]'),
                c = "";
              void 0 !== s && s.forEach(function (e) {
                e.length > 0 && (c += "".concat(e, ","));
              }), r += "".concat(i).concat(a, '{content:"').concat(c, '"}').concat(g);
            }, s = 0; s < n; s++) o(s);
          return r;
        }(o);
      });
    }
    return e.registerId = function (e) {
      return Se(e);
    }, e.prototype.rehydrate = function () {
      !this.server && S && _e(this);
    }, e.prototype.reconstructWithOptions = function (n, r) {
      return void 0 === r && (r = !0), new e(__assign(__assign({}, this.options), n), this.gs, r && this.names || void 0);
    }, e.prototype.allocateGSInstance = function (e) {
      return this.gs[e] = (this.gs[e] || 0) + 1;
    }, e.prototype.getTag = function () {
      return this.tag || (this.tag = (e = function (e) {
        var t = e.useCSSOMInjection,
          n = e.target;
        return e.isServer ? new De(n) : t ? new Ae(n) : new Oe(n);
      }(this.options), new fe(e)));
      var e;
    }, e.prototype.hasNameForId = function (e, t) {
      return this.names.has(e) && this.names.get(e).has(t);
    }, e.prototype.registerName = function (e, t) {
      if (Se(e), this.names.has(e)) this.names.get(e).add(t);else {
        var n = new Set();
        n.add(t), this.names.set(e, n);
      }
    }, e.prototype.insertRules = function (e, t, n) {
      this.registerName(e, t), this.getTag().insertRules(Se(e), n);
    }, e.prototype.clearNames = function (e) {
      this.names.has(e) && this.names.get(e).clear();
    }, e.prototype.clearRules = function (e) {
      this.getTag().clearGroup(Se(e)), this.clearNames(e);
    }, e.prototype.clearTag = function () {
      this.tag = void 0;
    }, e;
  }(),
  je = /&/g,
  xe = /^\s*\/\/.*$/gm;
function Ve(e, t) {
  return e.map(function (e) {
    return "rule" === e.type && (e.value = "".concat(t, " ").concat(e.value), e.value = e.value.replaceAll(",", ",".concat(t, " ")), e.props = e.props.map(function (e) {
      return "".concat(t, " ").concat(e);
    })), Array.isArray(e.children) && "@keyframes" !== e.type && (e.children = Ve(e.children, t)), e;
  });
}
function Fe(e) {
  var t,
    n,
    r,
    o = void 0 === e ? C : e,
    s = o.options,
    i = void 0 === s ? C : s,
    a = o.plugins,
    c = void 0 === a ? _ : a,
    l = function (e, r, o) {
      return o.startsWith(n) && o.endsWith(n) && o.replaceAll(n, "").length > 0 ? ".".concat(t) : e;
    },
    u = c.slice();
  u.push(function (e) {
    e.type === RULESET && e.value.includes("&") && (e.props[0] = e.props[0].replace(je, n).replace(r, l));
  }), i.prefix && u.push(prefixer), u.push(stringify);
  var p = function (e, o, s, a) {
    void 0 === o && (o = ""), void 0 === s && (s = ""), void 0 === a && (a = "&"), t = a, n = o, r = new RegExp("\\".concat(n, "\\b"), "g");
    var c = e.replace(xe, ""),
      l = compile(s || o ? "".concat(s, " ").concat(o, " { ").concat(c, " }") : c);
    i.namespace && (l = Ve(l, i.namespace));
    var p = [];
    return serialize(l, middleware(u.concat(rulesheet(function (e) {
      return p.push(e);
    })))), p;
  };
  return p.hash = c.length ? c.reduce(function (e, t) {
    return t.name || he(15), M(e, t.name);
  }, F).toString() : "", p;
}
var Me = new ke(),
  ze = Fe(),
  $e = /*#__PURE__*/React.createContext({
    shouldForwardProp: void 0,
    styleSheet: Me,
    stylis: ze
  });
  $e.Consumer;
function Ge() {
  return React.useContext($e);
}
var qe = function () {
    function e(e, t) {
      var n = this;
      this.inject = function (e, t) {
        void 0 === t && (t = ze);
        var r = n.name + t.hash;
        e.hasNameForId(n.id, r) || e.insertRules(n.id, r, t(n.rules, r, "@keyframes"));
      }, this.name = e, this.id = "sc-keyframes-".concat(e), this.rules = t, ue(this, function () {
        throw he(12, String(n.name));
      });
    }
    return e.prototype.getName = function (e) {
      return void 0 === e && (e = ze), this.name + e.hash;
    }, e;
  }(),
  We = function (e) {
    return e >= "A" && e <= "Z";
  };
function He(e) {
  for (var t = "", n = 0; n < e.length; n++) {
    var r = e[n];
    if (1 === n && "-" === r && "-" === e[0]) return e;
    We(r) ? t += "-" + r.toLowerCase() : t += r;
  }
  return t.startsWith("ms-") ? "-" + t : t;
}
var Ue = function (e) {
    return null == e || !1 === e || "" === e;
  },
  Je = function (t) {
    var n,
      r,
      o = [];
    for (var s in t) {
      var i = t[s];
      t.hasOwnProperty(s) && !Ue(i) && (Array.isArray(i) && i.isCss || oe(i) ? o.push("".concat(He(s), ":"), i, ";") : ce(i) ? o.push.apply(o, __spreadArray(__spreadArray(["".concat(s, " {")], Je(i), !1), ["}"], !1)) : o.push("".concat(He(s), ": ").concat((n = s, null == (r = i) || "boolean" == typeof r || "" === r ? "" : "number" != typeof r || 0 === r || n in unitlessKeys || n.startsWith("--") ? String(r).trim() : "".concat(r, "px")), ";")));
    }
    return o;
  };
function Xe(e, t, n, r) {
  if (Ue(e)) return [];
  if (se(e)) return [".".concat(e.styledComponentId)];
  if (oe(e)) {
    if (!oe(s = e) || s.prototype && s.prototype.isReactComponent || !t) return [e];
    var o = e(t);
    return "production" === process.env.NODE_ENV || "object" != typeof o || Array.isArray(o) || o instanceof qe || ce(o) || null === o || console.error("".concat(B(e), " is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.")), Xe(o, t, n, r);
  }
  var s;
  return e instanceof qe ? n ? (e.inject(n, r), [e.getName(r)]) : [e] : ce(e) ? Je(e) : Array.isArray(e) ? Array.prototype.concat.apply(_, e.map(function (e) {
    return Xe(e, t, n, r);
  })) : [e.toString()];
}
function Ze(e) {
  for (var t = 0; t < e.length; t += 1) {
    var n = e[t];
    if (oe(n) && !se(n)) return !1;
  }
  return !0;
}
var Ke = z(v),
  Qe = function () {
    function e(e, t, n) {
      this.rules = e, this.staticRulesId = "", this.isStatic = "production" === process.env.NODE_ENV && (void 0 === n || n.isStatic) && Ze(e), this.componentId = t, this.baseHash = M(Ke, t), this.baseStyle = n, ke.registerId(t);
    }
    return e.prototype.generateAndInjectStyles = function (e, t, n) {
      var r = this.baseStyle ? this.baseStyle.generateAndInjectStyles(e, t, n) : "";
      if (this.isStatic && !n.hash) {
        if (this.staticRulesId && t.hasNameForId(this.componentId, this.staticRulesId)) r = ie(r, this.staticRulesId);else {
          var o = ae(Xe(this.rules, e, t, n)),
            s = x(M(this.baseHash, o) >>> 0);
          if (!t.hasNameForId(this.componentId, s)) {
            var i = n(o, ".".concat(s), void 0, this.componentId);
            t.insertRules(this.componentId, s, i);
          }
          r = ie(r, s), this.staticRulesId = s;
        }
      } else {
        for (var a = M(this.baseHash, n.hash), c = "", l = 0; l < this.rules.length; l++) {
          var u = this.rules[l];
          if ("string" == typeof u) c += u, "production" !== process.env.NODE_ENV && (a = M(a, u));else if (u) {
            var p = ae(Xe(u, e, t, n));
            a = M(a, p + l), c += p;
          }
        }
        if (c) {
          var d = x(a >>> 0);
          t.hasNameForId(this.componentId, d) || t.insertRules(this.componentId, d, n(c, ".".concat(d), void 0, this.componentId)), r = ie(r, d);
        }
      }
      return r;
    }, e;
  }(),
  et = /*#__PURE__*/React.createContext(void 0);
  et.Consumer;
var ot = {},
  st = new Set();
function it(e, o, s) {
  var i = se(e),
    a = e,
    c = !L(e),
    p = o.attrs,
    d = void 0 === p ? _ : p,
    h = o.componentId,
    f = void 0 === h ? function (e, t) {
      var n = "string" != typeof e ? "sc" : R(e);
      ot[n] = (ot[n] || 0) + 1;
      var r = "".concat(n, "-").concat($(v + n + ot[n]));
      return t ? "".concat(t, "-").concat(r) : r;
    }(o.displayName, o.parentComponentId) : h,
    m = o.displayName,
    y = void 0 === m ? function (e) {
      return L(e) ? "styled.".concat(e) : "Styled(".concat(B(e), ")");
    }(e) : m,
    g = o.displayName && o.componentId ? "".concat(R(o.displayName), "-").concat(o.componentId) : o.componentId || f,
    S = i && a.attrs ? a.attrs.concat(d).filter(Boolean) : d,
    w = o.shouldForwardProp;
  if (i && a.shouldForwardProp) {
    var b = a.shouldForwardProp;
    if (o.shouldForwardProp) {
      var E = o.shouldForwardProp;
      w = function (e, t) {
        return b(e, t) && E(e, t);
      };
    } else w = b;
  }
  var N = new Qe(s, g, i ? a.componentStyle : void 0);
  function O(e, o) {
    return function (e, o, s) {
      var i = e.attrs,
        a = e.componentStyle,
        c = e.defaultProps,
        p = e.foldedComponentIds,
        d = e.styledComponentId,
        h = e.target,
        f = React.useContext(et),
        m = Ge(),
        y = e.shouldForwardProp || m.shouldForwardProp;
      "production" !== process.env.NODE_ENV && React.useDebugValue(d);
      var v = I(o, f, c) || C,
        g = function (e, n, r) {
          for (var o, s = __assign(__assign({}, n), {
              className: void 0,
              theme: r
            }), i = 0; i < e.length; i += 1) {
            var a = oe(o = e[i]) ? o(s) : o;
            for (var c in a) s[c] = "className" === c ? ie(s[c], a[c]) : "style" === c ? __assign(__assign({}, s[c]), a[c]) : a[c];
          }
          return n.className && (s.className = ie(s.className, n.className)), s;
        }(i, o, v),
        S = g.as || h,
        w = {};
      for (var b in g) void 0 === g[b] || "$" === b[0] || "as" === b || "theme" === b && g.theme === v || ("forwardedAs" === b ? w.as = g.forwardedAs : y && !y(b, S) || (w[b] = g[b], y || "development" !== process.env.NODE_ENV || isPropValid(b) || st.has(b) || !A.has(S) || (st.add(b), console.warn('styled-components: it looks like an unknown prop "'.concat(b, '" is being sent through to the DOM, which will likely trigger a React console error. If you would like automatic filtering of unknown props, you can opt-into that behavior via `<StyleSheetManager shouldForwardProp={...}>` (connect an API like `@emotion/is-prop-valid`) or consider using transient props (`$` prefix for automatic filtering.)')))));
      var E = function (e, t) {
        var n = Ge(),
          r = e.generateAndInjectStyles(t, n.styleSheet, n.stylis);
        return "production" !== process.env.NODE_ENV && React.useDebugValue(r), r;
      }(a, g);
      "production" !== process.env.NODE_ENV && e.warnTooManyClasses && e.warnTooManyClasses(E);
      var N = ie(p, d);
      return E && (N += " " + E), g.className && (N += " " + g.className), w[L(S) && !A.has(S) ? "class" : "className"] = N, s && (w.ref = s), /*#__PURE__*/React.createElement(S, w);
    }(D, e, o);
  }
  O.displayName = y;
  var D = /*#__PURE__*/React.forwardRef(O);
  return D.attrs = S, D.componentStyle = N, D.displayName = y, D.shouldForwardProp = w, D.foldedComponentIds = i ? ie(a.foldedComponentIds, a.styledComponentId) : "", D.styledComponentId = g, D.target = i ? a.target : e, Object.defineProperty(D, "defaultProps", {
    get: function () {
      return this._foldedDefaultProps;
    },
    set: function (e) {
      this._foldedDefaultProps = i ? function (e) {
        for (var t = [], n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
        for (var r = 0, o = t; r < o.length; r++) le(e, o[r], !0);
        return e;
      }({}, a.defaultProps, e) : e;
    }
  }), "production" !== process.env.NODE_ENV && (P(y, g), D.warnTooManyClasses = function (e, t) {
    var n = {},
      r = !1;
    return function (o) {
      if (!r && (n[o] = !0, Object.keys(n).length >= 200)) {
        var s = t ? ' with the id of "'.concat(t, '"') : "";
        console.warn("Over ".concat(200, " classes were generated for component ").concat(e).concat(s, ".\n") + "Consider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"), r = !0, n = {};
      }
    };
  }(y, g)), ue(D, function () {
    return ".".concat(D.styledComponentId);
  }), c && re(D, e, {
    attrs: !0,
    componentStyle: !0,
    displayName: !0,
    foldedComponentIds: !0,
    shouldForwardProp: !0,
    styledComponentId: !0,
    target: !0
  }), D;
}
function at(e, t) {
  for (var n = [e[0]], r = 0, o = t.length; r < o; r += 1) n.push(t[r], e[r + 1]);
  return n;
}
var ct = function (e) {
  return Object.assign(e, {
    isCss: !0
  });
};
function lt(t) {
  for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
  if (oe(t) || ce(t)) return ct(Xe(at(_, __spreadArray([t], n, !0))));
  var o = t;
  return 0 === n.length && 1 === o.length && "string" == typeof o[0] ? Xe(o) : ct(Xe(at(o, n)));
}
function ut(n, r, o) {
  if (void 0 === o && (o = C), !r) throw he(1, r);
  var s = function (t) {
    for (var s = [], i = 1; i < arguments.length; i++) s[i - 1] = arguments[i];
    return n(r, o, lt.apply(void 0, __spreadArray([t], s, !1)));
  };
  return s.attrs = function (e) {
    return ut(n, r, __assign(__assign({}, o), {
      attrs: Array.prototype.concat(o.attrs, e).filter(Boolean)
    }));
  }, s.withConfig = function (e) {
    return ut(n, r, __assign(__assign({}, o), e));
  }, s;
}
var pt = function (e) {
    return ut(it, e);
  },
  dt = pt;
A.forEach(function (e) {
  dt[e] = pt(e);
});
"production" !== process.env.NODE_ENV && "undefined" != typeof navigator && "ReactNative" === navigator.product && console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native");
var wt = "__sc-".concat(f, "__");
"production" !== process.env.NODE_ENV && "test" !== process.env.NODE_ENV && "undefined" != typeof window && (window[wt] || (window[wt] = 0), 1 === window[wt] && console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."), window[wt] += 1);

var lib = {};

var slider = {};

var innerSlider = {};

var initialState = {};

(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = void 0;
	var initialState = {
	  animating: false,
	  autoplaying: null,
	  currentDirection: 0,
	  currentLeft: null,
	  currentSlide: 0,
	  direction: 1,
	  dragging: false,
	  edgeDragged: false,
	  initialized: false,
	  lazyLoadedList: [],
	  listHeight: null,
	  listWidth: null,
	  scrolling: false,
	  slideCount: null,
	  slideHeight: null,
	  slideWidth: null,
	  swipeLeft: null,
	  swiped: false,
	  // used by swipeEvent. differentites between touch and swipe.
	  swiping: false,
	  touchObject: {
	    startX: 0,
	    startY: 0,
	    curX: 0,
	    curY: 0
	  },
	  trackStyle: {},
	  trackWidth: 0,
	  targetSlide: 0
	};
	var _default = initialState;
	exports["default"] = _default; 
} (initialState));

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
  nativeMin = Math.min;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now$1 = function () {
  return root.Date.now();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
    lastThis,
    maxWait,
    result,
    timerId,
    lastCallTime,
    lastInvokeTime = 0,
    leading = false,
    maxing = false,
    trailing = true;
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject$3(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time) {
    var args = lastArgs,
      thisArg = lastThis;
    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
      timeSinceLastInvoke = time - lastInvokeTime,
      result = wait - timeSinceLastCall;
    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }
  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
      timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time = now$1();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }
  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }
  function flush() {
    return timerId === undefined ? result : trailingEdge(now$1());
  }
  function debounced() {
    var time = now$1(),
      isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$3(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject$3(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject$3(other) ? other + '' : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var lodash_debounce = debounce;

var classnames = {exports: {}};

/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/

(function (module) {
	/* global define */

	(function () {

	  var hasOwn = {}.hasOwnProperty;
	  function classNames() {
	    var classes = '';
	    for (var i = 0; i < arguments.length; i++) {
	      var arg = arguments[i];
	      if (arg) {
	        classes = appendClass(classes, parseValue(arg));
	      }
	    }
	    return classes;
	  }
	  function parseValue(arg) {
	    if (typeof arg === 'string' || typeof arg === 'number') {
	      return arg;
	    }
	    if (typeof arg !== 'object') {
	      return '';
	    }
	    if (Array.isArray(arg)) {
	      return classNames.apply(null, arg);
	    }
	    if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
	      return arg.toString();
	    }
	    var classes = '';
	    for (var key in arg) {
	      if (hasOwn.call(arg, key) && arg[key]) {
	        classes = appendClass(classes, key);
	      }
	    }
	    return classes;
	  }
	  function appendClass(value, newClass) {
	    if (!newClass) {
	      return value;
	    }
	    if (value) {
	      return value + ' ' + newClass;
	    }
	    return value + newClass;
	  }
	  if (module.exports) {
	    classNames.default = classNames;
	    module.exports = classNames;
	  } else {
	    window.classNames = classNames;
	  }
	})(); 
} (classnames));

var classnamesExports = classnames.exports;

var innerSliderUtils = {};

Object.defineProperty(innerSliderUtils, "__esModule", {
  value: true
});
innerSliderUtils.checkSpecKeys = innerSliderUtils.checkNavigable = innerSliderUtils.changeSlide = innerSliderUtils.canUseDOM = innerSliderUtils.canGoNext = void 0;
innerSliderUtils.clamp = clamp$1;
innerSliderUtils.swipeStart = innerSliderUtils.swipeMove = innerSliderUtils.swipeEnd = innerSliderUtils.slidesOnRight = innerSliderUtils.slidesOnLeft = innerSliderUtils.slideHandler = innerSliderUtils.siblingDirection = innerSliderUtils.safePreventDefault = innerSliderUtils.lazyStartIndex = innerSliderUtils.lazySlidesOnRight = innerSliderUtils.lazySlidesOnLeft = innerSliderUtils.lazyEndIndex = innerSliderUtils.keyHandler = innerSliderUtils.initializedState = innerSliderUtils.getWidth = innerSliderUtils.getTrackLeft = innerSliderUtils.getTrackCSS = innerSliderUtils.getTrackAnimateCSS = innerSliderUtils.getTotalSlides = innerSliderUtils.getSwipeDirection = innerSliderUtils.getSlideCount = innerSliderUtils.getRequiredLazySlides = innerSliderUtils.getPreClones = innerSliderUtils.getPostClones = innerSliderUtils.getOnDemandLazySlides = innerSliderUtils.getNavigableIndexes = innerSliderUtils.getHeight = innerSliderUtils.extractObject = void 0;
var _react$4 = _interopRequireDefault$6(React);
function _interopRequireDefault$6(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function ownKeys$6(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) {
      _defineProperty$7(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$7(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function clamp$1(number, lowerBound, upperBound) {
  return Math.max(lowerBound, Math.min(number, upperBound));
}
var safePreventDefault = function safePreventDefault(event) {
  var passiveEvents = ["onTouchStart", "onTouchMove", "onWheel"];
  if (!passiveEvents.includes(event._reactName)) {
    event.preventDefault();
  }
};
innerSliderUtils.safePreventDefault = safePreventDefault;
var getOnDemandLazySlides = function getOnDemandLazySlides(spec) {
  var onDemandSlides = [];
  var startIndex = lazyStartIndex(spec);
  var endIndex = lazyEndIndex(spec);
  for (var slideIndex = startIndex; slideIndex < endIndex; slideIndex++) {
    if (spec.lazyLoadedList.indexOf(slideIndex) < 0) {
      onDemandSlides.push(slideIndex);
    }
  }
  return onDemandSlides;
}; // return list of slides that need to be present

innerSliderUtils.getOnDemandLazySlides = getOnDemandLazySlides;
var getRequiredLazySlides = function getRequiredLazySlides(spec) {
  var requiredSlides = [];
  var startIndex = lazyStartIndex(spec);
  var endIndex = lazyEndIndex(spec);
  for (var slideIndex = startIndex; slideIndex < endIndex; slideIndex++) {
    requiredSlides.push(slideIndex);
  }
  return requiredSlides;
}; // startIndex that needs to be present

innerSliderUtils.getRequiredLazySlides = getRequiredLazySlides;
var lazyStartIndex = function lazyStartIndex(spec) {
  return spec.currentSlide - lazySlidesOnLeft(spec);
};
innerSliderUtils.lazyStartIndex = lazyStartIndex;
var lazyEndIndex = function lazyEndIndex(spec) {
  return spec.currentSlide + lazySlidesOnRight(spec);
};
innerSliderUtils.lazyEndIndex = lazyEndIndex;
var lazySlidesOnLeft = function lazySlidesOnLeft(spec) {
  return spec.centerMode ? Math.floor(spec.slidesToShow / 2) + (parseInt(spec.centerPadding) > 0 ? 1 : 0) : 0;
};
innerSliderUtils.lazySlidesOnLeft = lazySlidesOnLeft;
var lazySlidesOnRight = function lazySlidesOnRight(spec) {
  return spec.centerMode ? Math.floor((spec.slidesToShow - 1) / 2) + 1 + (parseInt(spec.centerPadding) > 0 ? 1 : 0) : spec.slidesToShow;
}; // get width of an element

innerSliderUtils.lazySlidesOnRight = lazySlidesOnRight;
var getWidth = function getWidth(elem) {
  return elem && elem.offsetWidth || 0;
};
innerSliderUtils.getWidth = getWidth;
var getHeight = function getHeight(elem) {
  return elem && elem.offsetHeight || 0;
};
innerSliderUtils.getHeight = getHeight;
var getSwipeDirection = function getSwipeDirection(touchObject) {
  var verticalSwiping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var xDist, yDist, r, swipeAngle;
  xDist = touchObject.startX - touchObject.curX;
  yDist = touchObject.startY - touchObject.curY;
  r = Math.atan2(yDist, xDist);
  swipeAngle = Math.round(r * 180 / Math.PI);
  if (swipeAngle < 0) {
    swipeAngle = 360 - Math.abs(swipeAngle);
  }
  if (swipeAngle <= 45 && swipeAngle >= 0 || swipeAngle <= 360 && swipeAngle >= 315) {
    return "left";
  }
  if (swipeAngle >= 135 && swipeAngle <= 225) {
    return "right";
  }
  if (verticalSwiping === true) {
    if (swipeAngle >= 35 && swipeAngle <= 135) {
      return "up";
    } else {
      return "down";
    }
  }
  return "vertical";
}; // whether or not we can go next

innerSliderUtils.getSwipeDirection = getSwipeDirection;
var canGoNext = function canGoNext(spec) {
  var canGo = true;
  if (!spec.infinite) {
    if (spec.centerMode && spec.currentSlide >= spec.slideCount - 1) {
      canGo = false;
    } else if (spec.slideCount <= spec.slidesToShow || spec.currentSlide >= spec.slideCount - spec.slidesToShow) {
      canGo = false;
    }
  }
  return canGo;
}; // given an object and a list of keys, return new object with given keys

innerSliderUtils.canGoNext = canGoNext;
var extractObject = function extractObject(spec, keys) {
  var newObject = {};
  keys.forEach(function (key) {
    return newObject[key] = spec[key];
  });
  return newObject;
}; // get initialized state

innerSliderUtils.extractObject = extractObject;
var initializedState = function initializedState(spec) {
  // spec also contains listRef, trackRef
  var slideCount = _react$4["default"].Children.count(spec.children);
  var listNode = spec.listRef;
  var listWidth = Math.ceil(getWidth(listNode));
  var trackNode = spec.trackRef && spec.trackRef.node;
  var trackWidth = Math.ceil(getWidth(trackNode));
  var slideWidth;
  if (!spec.vertical) {
    var centerPaddingAdj = spec.centerMode && parseInt(spec.centerPadding) * 2;
    if (typeof spec.centerPadding === "string" && spec.centerPadding.slice(-1) === "%") {
      centerPaddingAdj *= listWidth / 100;
    }
    slideWidth = Math.ceil((listWidth - centerPaddingAdj) / spec.slidesToShow);
  } else {
    slideWidth = listWidth;
  }
  var slideHeight = listNode && getHeight(listNode.querySelector('[data-index="0"]'));
  var listHeight = slideHeight * spec.slidesToShow;
  var currentSlide = spec.currentSlide === undefined ? spec.initialSlide : spec.currentSlide;
  if (spec.rtl && spec.currentSlide === undefined) {
    currentSlide = slideCount - 1 - spec.initialSlide;
  }
  var lazyLoadedList = spec.lazyLoadedList || [];
  var slidesToLoad = getOnDemandLazySlides(_objectSpread$4(_objectSpread$4({}, spec), {}, {
    currentSlide: currentSlide,
    lazyLoadedList: lazyLoadedList
  }));
  lazyLoadedList = lazyLoadedList.concat(slidesToLoad);
  var state = {
    slideCount: slideCount,
    slideWidth: slideWidth,
    listWidth: listWidth,
    trackWidth: trackWidth,
    currentSlide: currentSlide,
    slideHeight: slideHeight,
    listHeight: listHeight,
    lazyLoadedList: lazyLoadedList
  };
  if (spec.autoplaying === null && spec.autoplay) {
    state["autoplaying"] = "playing";
  }
  return state;
};
innerSliderUtils.initializedState = initializedState;
var slideHandler = function slideHandler(spec) {
  var waitForAnimate = spec.waitForAnimate,
    animating = spec.animating,
    fade = spec.fade,
    infinite = spec.infinite,
    index = spec.index,
    slideCount = spec.slideCount,
    lazyLoad = spec.lazyLoad,
    currentSlide = spec.currentSlide,
    centerMode = spec.centerMode,
    slidesToScroll = spec.slidesToScroll,
    slidesToShow = spec.slidesToShow,
    useCSS = spec.useCSS;
  var lazyLoadedList = spec.lazyLoadedList;
  if (waitForAnimate && animating) return {};
  var animationSlide = index,
    finalSlide,
    animationLeft,
    finalLeft;
  var state = {},
    nextState = {};
  var targetSlide = infinite ? index : clamp$1(index, 0, slideCount - 1);
  if (fade) {
    if (!infinite && (index < 0 || index >= slideCount)) return {};
    if (index < 0) {
      animationSlide = index + slideCount;
    } else if (index >= slideCount) {
      animationSlide = index - slideCount;
    }
    if (lazyLoad && lazyLoadedList.indexOf(animationSlide) < 0) {
      lazyLoadedList = lazyLoadedList.concat(animationSlide);
    }
    state = {
      animating: true,
      currentSlide: animationSlide,
      lazyLoadedList: lazyLoadedList,
      targetSlide: animationSlide
    };
    nextState = {
      animating: false,
      targetSlide: animationSlide
    };
  } else {
    finalSlide = animationSlide;
    if (animationSlide < 0) {
      finalSlide = animationSlide + slideCount;
      if (!infinite) finalSlide = 0;else if (slideCount % slidesToScroll !== 0) finalSlide = slideCount - slideCount % slidesToScroll;
    } else if (!canGoNext(spec) && animationSlide > currentSlide) {
      animationSlide = finalSlide = currentSlide;
    } else if (centerMode && animationSlide >= slideCount) {
      animationSlide = infinite ? slideCount : slideCount - 1;
      finalSlide = infinite ? 0 : slideCount - 1;
    } else if (animationSlide >= slideCount) {
      finalSlide = animationSlide - slideCount;
      if (!infinite) finalSlide = slideCount - slidesToShow;else if (slideCount % slidesToScroll !== 0) finalSlide = 0;
    }
    if (!infinite && animationSlide + slidesToShow >= slideCount) {
      finalSlide = slideCount - slidesToShow;
    }
    animationLeft = getTrackLeft(_objectSpread$4(_objectSpread$4({}, spec), {}, {
      slideIndex: animationSlide
    }));
    finalLeft = getTrackLeft(_objectSpread$4(_objectSpread$4({}, spec), {}, {
      slideIndex: finalSlide
    }));
    if (!infinite) {
      if (animationLeft === finalLeft) animationSlide = finalSlide;
      animationLeft = finalLeft;
    }
    if (lazyLoad) {
      lazyLoadedList = lazyLoadedList.concat(getOnDemandLazySlides(_objectSpread$4(_objectSpread$4({}, spec), {}, {
        currentSlide: animationSlide
      })));
    }
    if (!useCSS) {
      state = {
        currentSlide: finalSlide,
        trackStyle: getTrackCSS(_objectSpread$4(_objectSpread$4({}, spec), {}, {
          left: finalLeft
        })),
        lazyLoadedList: lazyLoadedList,
        targetSlide: targetSlide
      };
    } else {
      state = {
        animating: true,
        currentSlide: finalSlide,
        trackStyle: getTrackAnimateCSS(_objectSpread$4(_objectSpread$4({}, spec), {}, {
          left: animationLeft
        })),
        lazyLoadedList: lazyLoadedList,
        targetSlide: targetSlide
      };
      nextState = {
        animating: false,
        currentSlide: finalSlide,
        trackStyle: getTrackCSS(_objectSpread$4(_objectSpread$4({}, spec), {}, {
          left: finalLeft
        })),
        swipeLeft: null,
        targetSlide: targetSlide
      };
    }
  }
  return {
    state: state,
    nextState: nextState
  };
};
innerSliderUtils.slideHandler = slideHandler;
var changeSlide = function changeSlide(spec, options) {
  var indexOffset, previousInt, slideOffset, unevenOffset, targetSlide;
  var slidesToScroll = spec.slidesToScroll,
    slidesToShow = spec.slidesToShow,
    slideCount = spec.slideCount,
    currentSlide = spec.currentSlide,
    previousTargetSlide = spec.targetSlide,
    lazyLoad = spec.lazyLoad,
    infinite = spec.infinite;
  unevenOffset = slideCount % slidesToScroll !== 0;
  indexOffset = unevenOffset ? 0 : (slideCount - currentSlide) % slidesToScroll;
  if (options.message === "previous") {
    slideOffset = indexOffset === 0 ? slidesToScroll : slidesToShow - indexOffset;
    targetSlide = currentSlide - slideOffset;
    if (lazyLoad && !infinite) {
      previousInt = currentSlide - slideOffset;
      targetSlide = previousInt === -1 ? slideCount - 1 : previousInt;
    }
    if (!infinite) {
      targetSlide = previousTargetSlide - slidesToScroll;
    }
  } else if (options.message === "next") {
    slideOffset = indexOffset === 0 ? slidesToScroll : indexOffset;
    targetSlide = currentSlide + slideOffset;
    if (lazyLoad && !infinite) {
      targetSlide = (currentSlide + slidesToScroll) % slideCount + indexOffset;
    }
    if (!infinite) {
      targetSlide = previousTargetSlide + slidesToScroll;
    }
  } else if (options.message === "dots") {
    // Click on dots
    targetSlide = options.index * options.slidesToScroll;
  } else if (options.message === "children") {
    // Click on the slides
    targetSlide = options.index;
    if (infinite) {
      var direction = siblingDirection(_objectSpread$4(_objectSpread$4({}, spec), {}, {
        targetSlide: targetSlide
      }));
      if (targetSlide > options.currentSlide && direction === "left") {
        targetSlide = targetSlide - slideCount;
      } else if (targetSlide < options.currentSlide && direction === "right") {
        targetSlide = targetSlide + slideCount;
      }
    }
  } else if (options.message === "index") {
    targetSlide = Number(options.index);
  }
  return targetSlide;
};
innerSliderUtils.changeSlide = changeSlide;
var keyHandler = function keyHandler(e, accessibility, rtl) {
  if (e.target.tagName.match("TEXTAREA|INPUT|SELECT") || !accessibility) return "";
  if (e.keyCode === 37) return rtl ? "next" : "previous";
  if (e.keyCode === 39) return rtl ? "previous" : "next";
  return "";
};
innerSliderUtils.keyHandler = keyHandler;
var swipeStart = function swipeStart(e, swipe, draggable) {
  e.target.tagName === "IMG" && safePreventDefault(e);
  if (!swipe || !draggable && e.type.indexOf("mouse") !== -1) return "";
  return {
    dragging: true,
    touchObject: {
      startX: e.touches ? e.touches[0].pageX : e.clientX,
      startY: e.touches ? e.touches[0].pageY : e.clientY,
      curX: e.touches ? e.touches[0].pageX : e.clientX,
      curY: e.touches ? e.touches[0].pageY : e.clientY
    }
  };
};
innerSliderUtils.swipeStart = swipeStart;
var swipeMove = function swipeMove(e, spec) {
  // spec also contains, trackRef and slideIndex
  var scrolling = spec.scrolling,
    animating = spec.animating,
    vertical = spec.vertical,
    swipeToSlide = spec.swipeToSlide,
    verticalSwiping = spec.verticalSwiping,
    rtl = spec.rtl,
    currentSlide = spec.currentSlide,
    edgeFriction = spec.edgeFriction,
    edgeDragged = spec.edgeDragged,
    onEdge = spec.onEdge,
    swiped = spec.swiped,
    swiping = spec.swiping,
    slideCount = spec.slideCount,
    slidesToScroll = spec.slidesToScroll,
    infinite = spec.infinite,
    touchObject = spec.touchObject,
    swipeEvent = spec.swipeEvent,
    listHeight = spec.listHeight,
    listWidth = spec.listWidth;
  if (scrolling) return;
  if (animating) return safePreventDefault(e);
  if (vertical && swipeToSlide && verticalSwiping) safePreventDefault(e);
  var swipeLeft,
    state = {};
  var curLeft = getTrackLeft(spec);
  touchObject.curX = e.touches ? e.touches[0].pageX : e.clientX;
  touchObject.curY = e.touches ? e.touches[0].pageY : e.clientY;
  touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2)));
  var verticalSwipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curY - touchObject.startY, 2)));
  if (!verticalSwiping && !swiping && verticalSwipeLength > 10) {
    return {
      scrolling: true
    };
  }
  if (verticalSwiping) touchObject.swipeLength = verticalSwipeLength;
  var positionOffset = (!rtl ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1);
  if (verticalSwiping) positionOffset = touchObject.curY > touchObject.startY ? 1 : -1;
  var dotCount = Math.ceil(slideCount / slidesToScroll);
  var swipeDirection = getSwipeDirection(spec.touchObject, verticalSwiping);
  var touchSwipeLength = touchObject.swipeLength;
  if (!infinite) {
    if (currentSlide === 0 && (swipeDirection === "right" || swipeDirection === "down") || currentSlide + 1 >= dotCount && (swipeDirection === "left" || swipeDirection === "up") || !canGoNext(spec) && (swipeDirection === "left" || swipeDirection === "up")) {
      touchSwipeLength = touchObject.swipeLength * edgeFriction;
      if (edgeDragged === false && onEdge) {
        onEdge(swipeDirection);
        state["edgeDragged"] = true;
      }
    }
  }
  if (!swiped && swipeEvent) {
    swipeEvent(swipeDirection);
    state["swiped"] = true;
  }
  if (!vertical) {
    if (!rtl) {
      swipeLeft = curLeft + touchSwipeLength * positionOffset;
    } else {
      swipeLeft = curLeft - touchSwipeLength * positionOffset;
    }
  } else {
    swipeLeft = curLeft + touchSwipeLength * (listHeight / listWidth) * positionOffset;
  }
  if (verticalSwiping) {
    swipeLeft = curLeft + touchSwipeLength * positionOffset;
  }
  state = _objectSpread$4(_objectSpread$4({}, state), {}, {
    touchObject: touchObject,
    swipeLeft: swipeLeft,
    trackStyle: getTrackCSS(_objectSpread$4(_objectSpread$4({}, spec), {}, {
      left: swipeLeft
    }))
  });
  if (Math.abs(touchObject.curX - touchObject.startX) < Math.abs(touchObject.curY - touchObject.startY) * 0.8) {
    return state;
  }
  if (touchObject.swipeLength > 10) {
    state["swiping"] = true;
    safePreventDefault(e);
  }
  return state;
};
innerSliderUtils.swipeMove = swipeMove;
var swipeEnd = function swipeEnd(e, spec) {
  var dragging = spec.dragging,
    swipe = spec.swipe,
    touchObject = spec.touchObject,
    listWidth = spec.listWidth,
    touchThreshold = spec.touchThreshold,
    verticalSwiping = spec.verticalSwiping,
    listHeight = spec.listHeight,
    swipeToSlide = spec.swipeToSlide,
    scrolling = spec.scrolling,
    onSwipe = spec.onSwipe,
    targetSlide = spec.targetSlide,
    currentSlide = spec.currentSlide,
    infinite = spec.infinite;
  if (!dragging) {
    if (swipe) safePreventDefault(e);
    return {};
  }
  var minSwipe = verticalSwiping ? listHeight / touchThreshold : listWidth / touchThreshold;
  var swipeDirection = getSwipeDirection(touchObject, verticalSwiping); // reset the state of touch related state variables.

  var state = {
    dragging: false,
    edgeDragged: false,
    scrolling: false,
    swiping: false,
    swiped: false,
    swipeLeft: null,
    touchObject: {}
  };
  if (scrolling) {
    return state;
  }
  if (!touchObject.swipeLength) {
    return state;
  }
  if (touchObject.swipeLength > minSwipe) {
    safePreventDefault(e);
    if (onSwipe) {
      onSwipe(swipeDirection);
    }
    var slideCount, newSlide;
    var activeSlide = infinite ? currentSlide : targetSlide;
    switch (swipeDirection) {
      case "left":
      case "up":
        newSlide = activeSlide + getSlideCount(spec);
        slideCount = swipeToSlide ? checkNavigable(spec, newSlide) : newSlide;
        state["currentDirection"] = 0;
        break;
      case "right":
      case "down":
        newSlide = activeSlide - getSlideCount(spec);
        slideCount = swipeToSlide ? checkNavigable(spec, newSlide) : newSlide;
        state["currentDirection"] = 1;
        break;
      default:
        slideCount = activeSlide;
    }
    state["triggerSlideHandler"] = slideCount;
  } else {
    // Adjust the track back to it's original position.
    var currentLeft = getTrackLeft(spec);
    state["trackStyle"] = getTrackAnimateCSS(_objectSpread$4(_objectSpread$4({}, spec), {}, {
      left: currentLeft
    }));
  }
  return state;
};
innerSliderUtils.swipeEnd = swipeEnd;
var getNavigableIndexes = function getNavigableIndexes(spec) {
  var max = spec.infinite ? spec.slideCount * 2 : spec.slideCount;
  var breakpoint = spec.infinite ? spec.slidesToShow * -1 : 0;
  var counter = spec.infinite ? spec.slidesToShow * -1 : 0;
  var indexes = [];
  while (breakpoint < max) {
    indexes.push(breakpoint);
    breakpoint = counter + spec.slidesToScroll;
    counter += Math.min(spec.slidesToScroll, spec.slidesToShow);
  }
  return indexes;
};
innerSliderUtils.getNavigableIndexes = getNavigableIndexes;
var checkNavigable = function checkNavigable(spec, index) {
  var navigables = getNavigableIndexes(spec);
  var prevNavigable = 0;
  if (index > navigables[navigables.length - 1]) {
    index = navigables[navigables.length - 1];
  } else {
    for (var n in navigables) {
      if (index < navigables[n]) {
        index = prevNavigable;
        break;
      }
      prevNavigable = navigables[n];
    }
  }
  return index;
};
innerSliderUtils.checkNavigable = checkNavigable;
var getSlideCount = function getSlideCount(spec) {
  var centerOffset = spec.centerMode ? spec.slideWidth * Math.floor(spec.slidesToShow / 2) : 0;
  if (spec.swipeToSlide) {
    var swipedSlide;
    var slickList = spec.listRef;
    var slides = slickList.querySelectorAll && slickList.querySelectorAll(".slick-slide") || [];
    Array.from(slides).every(function (slide) {
      if (!spec.vertical) {
        if (slide.offsetLeft - centerOffset + getWidth(slide) / 2 > spec.swipeLeft * -1) {
          swipedSlide = slide;
          return false;
        }
      } else {
        if (slide.offsetTop + getHeight(slide) / 2 > spec.swipeLeft * -1) {
          swipedSlide = slide;
          return false;
        }
      }
      return true;
    });
    if (!swipedSlide) {
      return 0;
    }
    var currentIndex = spec.rtl === true ? spec.slideCount - spec.currentSlide : spec.currentSlide;
    var slidesTraversed = Math.abs(swipedSlide.dataset.index - currentIndex) || 1;
    return slidesTraversed;
  } else {
    return spec.slidesToScroll;
  }
};
innerSliderUtils.getSlideCount = getSlideCount;
var checkSpecKeys = function checkSpecKeys(spec, keysArray) {
  return keysArray.reduce(function (value, key) {
    return value && spec.hasOwnProperty(key);
  }, true) ? null : console.error("Keys Missing:", spec);
};
innerSliderUtils.checkSpecKeys = checkSpecKeys;
var getTrackCSS = function getTrackCSS(spec) {
  checkSpecKeys(spec, ["left", "variableWidth", "slideCount", "slidesToShow", "slideWidth"]);
  var trackWidth, trackHeight;
  var trackChildren = spec.slideCount + 2 * spec.slidesToShow;
  if (!spec.vertical) {
    trackWidth = getTotalSlides(spec) * spec.slideWidth;
  } else {
    trackHeight = trackChildren * spec.slideHeight;
  }
  var style = {
    opacity: 1,
    transition: "",
    WebkitTransition: ""
  };
  if (spec.useTransform) {
    var WebkitTransform = !spec.vertical ? "translate3d(" + spec.left + "px, 0px, 0px)" : "translate3d(0px, " + spec.left + "px, 0px)";
    var transform = !spec.vertical ? "translate3d(" + spec.left + "px, 0px, 0px)" : "translate3d(0px, " + spec.left + "px, 0px)";
    var msTransform = !spec.vertical ? "translateX(" + spec.left + "px)" : "translateY(" + spec.left + "px)";
    style = _objectSpread$4(_objectSpread$4({}, style), {}, {
      WebkitTransform: WebkitTransform,
      transform: transform,
      msTransform: msTransform
    });
  } else {
    if (spec.vertical) {
      style["top"] = spec.left;
    } else {
      style["left"] = spec.left;
    }
  }
  if (spec.fade) style = {
    opacity: 1
  };
  if (trackWidth) style.width = trackWidth;
  if (trackHeight) style.height = trackHeight; // Fallback for IE8

  if (window && !window.addEventListener && window.attachEvent) {
    if (!spec.vertical) {
      style.marginLeft = spec.left + "px";
    } else {
      style.marginTop = spec.left + "px";
    }
  }
  return style;
};
innerSliderUtils.getTrackCSS = getTrackCSS;
var getTrackAnimateCSS = function getTrackAnimateCSS(spec) {
  checkSpecKeys(spec, ["left", "variableWidth", "slideCount", "slidesToShow", "slideWidth", "speed", "cssEase"]);
  var style = getTrackCSS(spec); // useCSS is true by default so it can be undefined

  if (spec.useTransform) {
    style.WebkitTransition = "-webkit-transform " + spec.speed + "ms " + spec.cssEase;
    style.transition = "transform " + spec.speed + "ms " + spec.cssEase;
  } else {
    if (spec.vertical) {
      style.transition = "top " + spec.speed + "ms " + spec.cssEase;
    } else {
      style.transition = "left " + spec.speed + "ms " + spec.cssEase;
    }
  }
  return style;
};
innerSliderUtils.getTrackAnimateCSS = getTrackAnimateCSS;
var getTrackLeft = function getTrackLeft(spec) {
  if (spec.unslick) {
    return 0;
  }
  checkSpecKeys(spec, ["slideIndex", "trackRef", "infinite", "centerMode", "slideCount", "slidesToShow", "slidesToScroll", "slideWidth", "listWidth", "variableWidth", "slideHeight"]);
  var slideIndex = spec.slideIndex,
    trackRef = spec.trackRef,
    infinite = spec.infinite,
    centerMode = spec.centerMode,
    slideCount = spec.slideCount,
    slidesToShow = spec.slidesToShow,
    slidesToScroll = spec.slidesToScroll,
    slideWidth = spec.slideWidth,
    listWidth = spec.listWidth,
    variableWidth = spec.variableWidth,
    slideHeight = spec.slideHeight,
    fade = spec.fade,
    vertical = spec.vertical;
  var slideOffset = 0;
  var targetLeft;
  var targetSlide;
  var verticalOffset = 0;
  if (fade || spec.slideCount === 1) {
    return 0;
  }
  var slidesToOffset = 0;
  if (infinite) {
    slidesToOffset = -getPreClones(spec); // bring active slide to the beginning of visual area
    // if next scroll doesn't have enough children, just reach till the end of original slides instead of shifting slidesToScroll children

    if (slideCount % slidesToScroll !== 0 && slideIndex + slidesToScroll > slideCount) {
      slidesToOffset = -(slideIndex > slideCount ? slidesToShow - (slideIndex - slideCount) : slideCount % slidesToScroll);
    } // shift current slide to center of the frame

    if (centerMode) {
      slidesToOffset += parseInt(slidesToShow / 2);
    }
  } else {
    if (slideCount % slidesToScroll !== 0 && slideIndex + slidesToScroll > slideCount) {
      slidesToOffset = slidesToShow - slideCount % slidesToScroll;
    }
    if (centerMode) {
      slidesToOffset = parseInt(slidesToShow / 2);
    }
  }
  slideOffset = slidesToOffset * slideWidth;
  verticalOffset = slidesToOffset * slideHeight;
  if (!vertical) {
    targetLeft = slideIndex * slideWidth * -1 + slideOffset;
  } else {
    targetLeft = slideIndex * slideHeight * -1 + verticalOffset;
  }
  if (variableWidth === true) {
    var targetSlideIndex;
    var trackElem = trackRef && trackRef.node;
    targetSlideIndex = slideIndex + getPreClones(spec);
    targetSlide = trackElem && trackElem.childNodes[targetSlideIndex];
    targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;
    if (centerMode === true) {
      targetSlideIndex = infinite ? slideIndex + getPreClones(spec) : slideIndex;
      targetSlide = trackElem && trackElem.children[targetSlideIndex];
      targetLeft = 0;
      for (var slide = 0; slide < targetSlideIndex; slide++) {
        targetLeft -= trackElem && trackElem.children[slide] && trackElem.children[slide].offsetWidth;
      }
      targetLeft -= parseInt(spec.centerPadding);
      targetLeft += targetSlide && (listWidth - targetSlide.offsetWidth) / 2;
    }
  }
  return targetLeft;
};
innerSliderUtils.getTrackLeft = getTrackLeft;
var getPreClones = function getPreClones(spec) {
  if (spec.unslick || !spec.infinite) {
    return 0;
  }
  if (spec.variableWidth) {
    return spec.slideCount;
  }
  return spec.slidesToShow + (spec.centerMode ? 1 : 0);
};
innerSliderUtils.getPreClones = getPreClones;
var getPostClones = function getPostClones(spec) {
  if (spec.unslick || !spec.infinite) {
    return 0;
  }
  return spec.slideCount;
};
innerSliderUtils.getPostClones = getPostClones;
var getTotalSlides = function getTotalSlides(spec) {
  return spec.slideCount === 1 ? 1 : getPreClones(spec) + spec.slideCount + getPostClones(spec);
};
innerSliderUtils.getTotalSlides = getTotalSlides;
var siblingDirection = function siblingDirection(spec) {
  if (spec.targetSlide > spec.currentSlide) {
    if (spec.targetSlide > spec.currentSlide + slidesOnRight(spec)) {
      return "left";
    }
    return "right";
  } else {
    if (spec.targetSlide < spec.currentSlide - slidesOnLeft(spec)) {
      return "right";
    }
    return "left";
  }
};
innerSliderUtils.siblingDirection = siblingDirection;
var slidesOnRight = function slidesOnRight(_ref) {
  var slidesToShow = _ref.slidesToShow,
    centerMode = _ref.centerMode,
    rtl = _ref.rtl,
    centerPadding = _ref.centerPadding;

  // returns no of slides on the right of active slide
  if (centerMode) {
    var right = (slidesToShow - 1) / 2 + 1;
    if (parseInt(centerPadding) > 0) right += 1;
    if (rtl && slidesToShow % 2 === 0) right += 1;
    return right;
  }
  if (rtl) {
    return 0;
  }
  return slidesToShow - 1;
};
innerSliderUtils.slidesOnRight = slidesOnRight;
var slidesOnLeft = function slidesOnLeft(_ref2) {
  var slidesToShow = _ref2.slidesToShow,
    centerMode = _ref2.centerMode,
    rtl = _ref2.rtl,
    centerPadding = _ref2.centerPadding;

  // returns no of slides on the left of active slide
  if (centerMode) {
    var left = (slidesToShow - 1) / 2 + 1;
    if (parseInt(centerPadding) > 0) left += 1;
    if (!rtl && slidesToShow % 2 === 0) left += 1;
    return left;
  }
  if (rtl) {
    return slidesToShow - 1;
  }
  return 0;
};
innerSliderUtils.slidesOnLeft = slidesOnLeft;
var canUseDOM = function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
};
innerSliderUtils.canUseDOM = canUseDOM;

var track = {};

function _typeof$3(obj) {
  "@babel/helpers - typeof";

  return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof$3(obj);
}
Object.defineProperty(track, "__esModule", {
  value: true
});
track.Track = void 0;
var _react$3 = _interopRequireDefault$5(React);
var _classnames$3 = _interopRequireDefault$5(classnamesExports);
var _innerSliderUtils$3 = innerSliderUtils;
function _interopRequireDefault$5(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function _extends$3() {
  _extends$3 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$3.apply(this, arguments);
}
function _classCallCheck$4(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$4(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$4(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$4(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$4(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inherits$3(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf$3(subClass, superClass);
}
function _setPrototypeOf$3(o, p) {
  _setPrototypeOf$3 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf$3(o, p);
}
function _createSuper$3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$3(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$3(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$3(this, result);
  };
}
function _possibleConstructorReturn$3(self, call) {
  if (call && (_typeof$3(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$3(self);
}
function _assertThisInitialized$3(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$3() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$3(o) {
  _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$3(o);
}
function ownKeys$5(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) {
      _defineProperty$6(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$6(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// given specifications/props for a slide, fetch all the classes that need to be applied to the slide
var getSlideClasses = function getSlideClasses(spec) {
  var slickActive, slickCenter, slickCloned;
  var centerOffset, index;
  if (spec.rtl) {
    index = spec.slideCount - 1 - spec.index;
  } else {
    index = spec.index;
  }
  slickCloned = index < 0 || index >= spec.slideCount;
  if (spec.centerMode) {
    centerOffset = Math.floor(spec.slidesToShow / 2);
    slickCenter = (index - spec.currentSlide) % spec.slideCount === 0;
    if (index > spec.currentSlide - centerOffset - 1 && index <= spec.currentSlide + centerOffset) {
      slickActive = true;
    }
  } else {
    slickActive = spec.currentSlide <= index && index < spec.currentSlide + spec.slidesToShow;
  }
  var focusedSlide;
  if (spec.targetSlide < 0) {
    focusedSlide = spec.targetSlide + spec.slideCount;
  } else if (spec.targetSlide >= spec.slideCount) {
    focusedSlide = spec.targetSlide - spec.slideCount;
  } else {
    focusedSlide = spec.targetSlide;
  }
  var slickCurrent = index === focusedSlide;
  return {
    "slick-slide": true,
    "slick-active": slickActive,
    "slick-center": slickCenter,
    "slick-cloned": slickCloned,
    "slick-current": slickCurrent // dubious in case of RTL
  };
};
var getSlideStyle = function getSlideStyle(spec) {
  var style = {};
  if (spec.variableWidth === undefined || spec.variableWidth === false) {
    style.width = spec.slideWidth;
  }
  if (spec.fade) {
    style.position = "relative";
    if (spec.vertical) {
      style.top = -spec.index * parseInt(spec.slideHeight);
    } else {
      style.left = -spec.index * parseInt(spec.slideWidth);
    }
    style.opacity = spec.currentSlide === spec.index ? 1 : 0;
    if (spec.useCSS) {
      style.transition = "opacity " + spec.speed + "ms " + spec.cssEase + ", " + "visibility " + spec.speed + "ms " + spec.cssEase;
    }
  }
  return style;
};
var getKey$1 = function getKey(child, fallbackKey) {
  return child.key || fallbackKey;
};
var renderSlides = function renderSlides(spec) {
  var key;
  var slides = [];
  var preCloneSlides = [];
  var postCloneSlides = [];
  var childrenCount = _react$3["default"].Children.count(spec.children);
  var startIndex = (0, _innerSliderUtils$3.lazyStartIndex)(spec);
  var endIndex = (0, _innerSliderUtils$3.lazyEndIndex)(spec);
  _react$3["default"].Children.forEach(spec.children, function (elem, index) {
    var child;
    var childOnClickOptions = {
      message: "children",
      index: index,
      slidesToScroll: spec.slidesToScroll,
      currentSlide: spec.currentSlide
    }; // in case of lazyLoad, whether or not we want to fetch the slide

    if (!spec.lazyLoad || spec.lazyLoad && spec.lazyLoadedList.indexOf(index) >= 0) {
      child = elem;
    } else {
      child = /*#__PURE__*/_react$3["default"].createElement("div", null);
    }
    var childStyle = getSlideStyle(_objectSpread$3(_objectSpread$3({}, spec), {}, {
      index: index
    }));
    var slideClass = child.props.className || "";
    var slideClasses = getSlideClasses(_objectSpread$3(_objectSpread$3({}, spec), {}, {
      index: index
    })); // push a cloned element of the desired slide

    slides.push(/*#__PURE__*/_react$3["default"].cloneElement(child, {
      key: "original" + getKey$1(child, index),
      "data-index": index,
      className: (0, _classnames$3["default"])(slideClasses, slideClass),
      tabIndex: "-1",
      "aria-hidden": !slideClasses["slick-active"],
      style: _objectSpread$3(_objectSpread$3({
        outline: "none"
      }, child.props.style || {}), childStyle),
      onClick: function onClick(e) {
        child.props && child.props.onClick && child.props.onClick(e);
        if (spec.focusOnSelect) {
          spec.focusOnSelect(childOnClickOptions);
        }
      }
    })); // if slide needs to be precloned or postcloned

    if (spec.infinite && spec.fade === false) {
      var preCloneNo = childrenCount - index;
      if (preCloneNo <= (0, _innerSliderUtils$3.getPreClones)(spec) && childrenCount !== spec.slidesToShow) {
        key = -preCloneNo;
        if (key >= startIndex) {
          child = elem;
        }
        slideClasses = getSlideClasses(_objectSpread$3(_objectSpread$3({}, spec), {}, {
          index: key
        }));
        preCloneSlides.push(/*#__PURE__*/_react$3["default"].cloneElement(child, {
          key: "precloned" + getKey$1(child, key),
          "data-index": key,
          tabIndex: "-1",
          className: (0, _classnames$3["default"])(slideClasses, slideClass),
          "aria-hidden": !slideClasses["slick-active"],
          style: _objectSpread$3(_objectSpread$3({}, child.props.style || {}), childStyle),
          onClick: function onClick(e) {
            child.props && child.props.onClick && child.props.onClick(e);
            if (spec.focusOnSelect) {
              spec.focusOnSelect(childOnClickOptions);
            }
          }
        }));
      }
      if (childrenCount !== spec.slidesToShow) {
        key = childrenCount + index;
        if (key < endIndex) {
          child = elem;
        }
        slideClasses = getSlideClasses(_objectSpread$3(_objectSpread$3({}, spec), {}, {
          index: key
        }));
        postCloneSlides.push(/*#__PURE__*/_react$3["default"].cloneElement(child, {
          key: "postcloned" + getKey$1(child, key),
          "data-index": key,
          tabIndex: "-1",
          className: (0, _classnames$3["default"])(slideClasses, slideClass),
          "aria-hidden": !slideClasses["slick-active"],
          style: _objectSpread$3(_objectSpread$3({}, child.props.style || {}), childStyle),
          onClick: function onClick(e) {
            child.props && child.props.onClick && child.props.onClick(e);
            if (spec.focusOnSelect) {
              spec.focusOnSelect(childOnClickOptions);
            }
          }
        }));
      }
    }
  });
  if (spec.rtl) {
    return preCloneSlides.concat(slides, postCloneSlides).reverse();
  } else {
    return preCloneSlides.concat(slides, postCloneSlides);
  }
};
var Track = /*#__PURE__*/function (_React$PureComponent) {
  _inherits$3(Track, _React$PureComponent);
  var _super = _createSuper$3(Track);
  function Track() {
    var _this;
    _classCallCheck$4(this, Track);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$6(_assertThisInitialized$3(_this), "node", null);
    _defineProperty$6(_assertThisInitialized$3(_this), "handleRef", function (ref) {
      _this.node = ref;
    });
    return _this;
  }
  _createClass$4(Track, [{
    key: "render",
    value: function render() {
      var slides = renderSlides(this.props);
      var _this$props = this.props,
        onMouseEnter = _this$props.onMouseEnter,
        onMouseOver = _this$props.onMouseOver,
        onMouseLeave = _this$props.onMouseLeave;
      var mouseEvents = {
        onMouseEnter: onMouseEnter,
        onMouseOver: onMouseOver,
        onMouseLeave: onMouseLeave
      };
      return /*#__PURE__*/_react$3["default"].createElement("div", _extends$3({
        ref: this.handleRef,
        className: "slick-track",
        style: this.props.trackStyle
      }, mouseEvents), slides);
    }
  }]);
  return Track;
}(_react$3["default"].PureComponent);
track.Track = Track;

var dots = {};

function _typeof$2(obj) {
  "@babel/helpers - typeof";

  return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof$2(obj);
}
Object.defineProperty(dots, "__esModule", {
  value: true
});
dots.Dots = void 0;
var _react$2 = _interopRequireDefault$4(React);
var _classnames$2 = _interopRequireDefault$4(classnamesExports);
var _innerSliderUtils$2 = innerSliderUtils;
function _interopRequireDefault$4(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function ownKeys$4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) {
      _defineProperty$5(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$5(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classCallCheck$3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$3(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$3(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$3(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$3(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inherits$2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf$2(subClass, superClass);
}
function _setPrototypeOf$2(o, p) {
  _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf$2(o, p);
}
function _createSuper$2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$2(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$2(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$2(this, result);
  };
}
function _possibleConstructorReturn$2(self, call) {
  if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$2(self);
}
function _assertThisInitialized$2(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$2() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$2(o) {
  _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$2(o);
}
var getDotCount = function getDotCount(spec) {
  var dots;
  if (spec.infinite) {
    dots = Math.ceil(spec.slideCount / spec.slidesToScroll);
  } else {
    dots = Math.ceil((spec.slideCount - spec.slidesToShow) / spec.slidesToScroll) + 1;
  }
  return dots;
};
var Dots = /*#__PURE__*/function (_React$PureComponent) {
  _inherits$2(Dots, _React$PureComponent);
  var _super = _createSuper$2(Dots);
  function Dots() {
    _classCallCheck$3(this, Dots);
    return _super.apply(this, arguments);
  }
  _createClass$3(Dots, [{
    key: "clickHandler",
    value: function clickHandler(options, e) {
      // In Autoplay the focus stays on clicked button even after transition
      // to next slide. That only goes away by click somewhere outside
      e.preventDefault();
      this.props.clickHandler(options);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        onMouseEnter = _this$props.onMouseEnter,
        onMouseOver = _this$props.onMouseOver,
        onMouseLeave = _this$props.onMouseLeave,
        infinite = _this$props.infinite,
        slidesToScroll = _this$props.slidesToScroll,
        slidesToShow = _this$props.slidesToShow,
        slideCount = _this$props.slideCount,
        currentSlide = _this$props.currentSlide;
      var dotCount = getDotCount({
        slideCount: slideCount,
        slidesToScroll: slidesToScroll,
        slidesToShow: slidesToShow,
        infinite: infinite
      });
      var mouseEvents = {
        onMouseEnter: onMouseEnter,
        onMouseOver: onMouseOver,
        onMouseLeave: onMouseLeave
      };
      var dots = [];
      for (var i = 0; i < dotCount; i++) {
        var _rightBound = (i + 1) * slidesToScroll - 1;
        var rightBound = infinite ? _rightBound : (0, _innerSliderUtils$2.clamp)(_rightBound, 0, slideCount - 1);
        var _leftBound = rightBound - (slidesToScroll - 1);
        var leftBound = infinite ? _leftBound : (0, _innerSliderUtils$2.clamp)(_leftBound, 0, slideCount - 1);
        var className = (0, _classnames$2["default"])({
          "slick-active": infinite ? currentSlide >= leftBound && currentSlide <= rightBound : currentSlide === leftBound
        });
        var dotOptions = {
          message: "dots",
          index: i,
          slidesToScroll: slidesToScroll,
          currentSlide: currentSlide
        };
        var onClick = this.clickHandler.bind(this, dotOptions);
        dots = dots.concat(/*#__PURE__*/_react$2["default"].createElement("li", {
          key: i,
          className: className
        }, /*#__PURE__*/_react$2["default"].cloneElement(this.props.customPaging(i), {
          onClick: onClick
        })));
      }
      return /*#__PURE__*/_react$2["default"].cloneElement(this.props.appendDots(dots), _objectSpread$2({
        className: this.props.dotsClass
      }, mouseEvents));
    }
  }]);
  return Dots;
}(_react$2["default"].PureComponent);
dots.Dots = Dots;

var arrows = {};

function _typeof$1(obj) {
  "@babel/helpers - typeof";

  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof$1(obj);
}
Object.defineProperty(arrows, "__esModule", {
  value: true
});
arrows.PrevArrow = arrows.NextArrow = void 0;
var _react$1 = _interopRequireDefault$3(React);
var _classnames$1 = _interopRequireDefault$3(classnamesExports);
var _innerSliderUtils$1 = innerSliderUtils;
function _interopRequireDefault$3(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function _extends$2() {
  _extends$2 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$2.apply(this, arguments);
}
function ownKeys$3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) {
      _defineProperty$4(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classCallCheck$2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$2(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$2(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$2(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inherits$1(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf$1(subClass, superClass);
}
function _setPrototypeOf$1(o, p) {
  _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf$1(o, p);
}
function _createSuper$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$1(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$1(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$1(this, result);
  };
}
function _possibleConstructorReturn$1(self, call) {
  if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$1(self);
}
function _assertThisInitialized$1(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$1(o) {
  _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$1(o);
}
var PrevArrow = /*#__PURE__*/function (_React$PureComponent) {
  _inherits$1(PrevArrow, _React$PureComponent);
  var _super = _createSuper$1(PrevArrow);
  function PrevArrow() {
    _classCallCheck$2(this, PrevArrow);
    return _super.apply(this, arguments);
  }
  _createClass$2(PrevArrow, [{
    key: "clickHandler",
    value: function clickHandler(options, e) {
      if (e) {
        e.preventDefault();
      }
      this.props.clickHandler(options, e);
    }
  }, {
    key: "render",
    value: function render() {
      var prevClasses = {
        "slick-arrow": true,
        "slick-prev": true
      };
      var prevHandler = this.clickHandler.bind(this, {
        message: "previous"
      });
      if (!this.props.infinite && (this.props.currentSlide === 0 || this.props.slideCount <= this.props.slidesToShow)) {
        prevClasses["slick-disabled"] = true;
        prevHandler = null;
      }
      var prevArrowProps = {
        key: "0",
        "data-role": "none",
        className: (0, _classnames$1["default"])(prevClasses),
        style: {
          display: "block"
        },
        onClick: prevHandler
      };
      var customProps = {
        currentSlide: this.props.currentSlide,
        slideCount: this.props.slideCount
      };
      var prevArrow;
      if (this.props.prevArrow) {
        prevArrow = /*#__PURE__*/_react$1["default"].cloneElement(this.props.prevArrow, _objectSpread$1(_objectSpread$1({}, prevArrowProps), customProps));
      } else {
        prevArrow = /*#__PURE__*/_react$1["default"].createElement("button", _extends$2({
          key: "0",
          type: "button"
        }, prevArrowProps), " ", "Previous");
      }
      return prevArrow;
    }
  }]);
  return PrevArrow;
}(_react$1["default"].PureComponent);
arrows.PrevArrow = PrevArrow;
var NextArrow = /*#__PURE__*/function (_React$PureComponent2) {
  _inherits$1(NextArrow, _React$PureComponent2);
  var _super2 = _createSuper$1(NextArrow);
  function NextArrow() {
    _classCallCheck$2(this, NextArrow);
    return _super2.apply(this, arguments);
  }
  _createClass$2(NextArrow, [{
    key: "clickHandler",
    value: function clickHandler(options, e) {
      if (e) {
        e.preventDefault();
      }
      this.props.clickHandler(options, e);
    }
  }, {
    key: "render",
    value: function render() {
      var nextClasses = {
        "slick-arrow": true,
        "slick-next": true
      };
      var nextHandler = this.clickHandler.bind(this, {
        message: "next"
      });
      if (!(0, _innerSliderUtils$1.canGoNext)(this.props)) {
        nextClasses["slick-disabled"] = true;
        nextHandler = null;
      }
      var nextArrowProps = {
        key: "1",
        "data-role": "none",
        className: (0, _classnames$1["default"])(nextClasses),
        style: {
          display: "block"
        },
        onClick: nextHandler
      };
      var customProps = {
        currentSlide: this.props.currentSlide,
        slideCount: this.props.slideCount
      };
      var nextArrow;
      if (this.props.nextArrow) {
        nextArrow = /*#__PURE__*/_react$1["default"].cloneElement(this.props.nextArrow, _objectSpread$1(_objectSpread$1({}, nextArrowProps), customProps));
      } else {
        nextArrow = /*#__PURE__*/_react$1["default"].createElement("button", _extends$2({
          key: "1",
          type: "button"
        }, nextArrowProps), " ", "Next");
      }
      return nextArrow;
    }
  }]);
  return NextArrow;
}(_react$1["default"].PureComponent);
arrows.NextArrow = NextArrow;

/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */
/* eslint-disable require-jsdoc, valid-jsdoc */
var MapShim = function () {
  if (typeof Map !== 'undefined') {
    return Map;
  }
  /**
   * Returns index in provided array that matches the specified key.
   *
   * @param {Array<Array>} arr
   * @param {*} key
   * @returns {number}
   */
  function getIndex(arr, key) {
    var result = -1;
    arr.some(function (entry, index) {
      if (entry[0] === key) {
        result = index;
        return true;
      }
      return false;
    });
    return result;
  }
  return /** @class */function () {
    function class_1() {
      this.__entries__ = [];
    }
    Object.defineProperty(class_1.prototype, "size", {
      /**
       * @returns {boolean}
       */
      get: function () {
        return this.__entries__.length;
      },
      enumerable: true,
      configurable: true
    });
    /**
     * @param {*} key
     * @returns {*}
     */
    class_1.prototype.get = function (key) {
      var index = getIndex(this.__entries__, key);
      var entry = this.__entries__[index];
      return entry && entry[1];
    };
    /**
     * @param {*} key
     * @param {*} value
     * @returns {void}
     */
    class_1.prototype.set = function (key, value) {
      var index = getIndex(this.__entries__, key);
      if (~index) {
        this.__entries__[index][1] = value;
      } else {
        this.__entries__.push([key, value]);
      }
    };
    /**
     * @param {*} key
     * @returns {void}
     */
    class_1.prototype.delete = function (key) {
      var entries = this.__entries__;
      var index = getIndex(entries, key);
      if (~index) {
        entries.splice(index, 1);
      }
    };
    /**
     * @param {*} key
     * @returns {void}
     */
    class_1.prototype.has = function (key) {
      return !!~getIndex(this.__entries__, key);
    };
    /**
     * @returns {void}
     */
    class_1.prototype.clear = function () {
      this.__entries__.splice(0);
    };
    /**
     * @param {Function} callback
     * @param {*} [ctx=null]
     * @returns {void}
     */
    class_1.prototype.forEach = function (callback, ctx) {
      if (ctx === void 0) {
        ctx = null;
      }
      for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
        var entry = _a[_i];
        callback.call(ctx, entry[1], entry[0]);
      }
    };
    return class_1;
  }();
}();

/**
 * Detects whether window and document objects are available in current environment.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

// Returns global object of a current environment.
var global$1 = function () {
  if (typeof global !== 'undefined' && global.Math === Math) {
    return global;
  }
  if (typeof self !== 'undefined' && self.Math === Math) {
    return self;
  }
  if (typeof window !== 'undefined' && window.Math === Math) {
    return window;
  }
  // eslint-disable-next-line no-new-func
  return Function('return this')();
}();

/**
 * A shim for the requestAnimationFrame which falls back to the setTimeout if
 * first one is not supported.
 *
 * @returns {number} Requests' identifier.
 */
var requestAnimationFrame$1 = function () {
  if (typeof requestAnimationFrame === 'function') {
    // It's required to use a bounded function because IE sometimes throws
    // an "Invalid calling object" error if rAF is invoked without the global
    // object on the left hand side.
    return requestAnimationFrame.bind(global$1);
  }
  return function (callback) {
    return setTimeout(function () {
      return callback(Date.now());
    }, 1000 / 60);
  };
}();

// Defines minimum timeout before adding a trailing call.
var trailingTimeout = 2;
/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */
function throttle(callback, delay) {
  var leadingCall = false,
    trailingCall = false,
    lastCallTime = 0;
  /**
   * Invokes the original callback function and schedules new invocation if
   * the "proxy" was called during current request.
   *
   * @returns {void}
   */
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy();
    }
  }
  /**
   * Callback invoked after the specified delay. It will further postpone
   * invocation of the original function delegating it to the
   * requestAnimationFrame.
   *
   * @returns {void}
   */
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  /**
   * Schedules invocation of the original function.
   *
   * @returns {void}
   */
  function proxy() {
    var timeStamp = Date.now();
    if (leadingCall) {
      // Reject immediately following calls.
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      // Schedule new call to be in invoked when the pending one is resolved.
      // This is important for "transitions" which never actually start
      // immediately so there is a chance that we might miss one if change
      // happens amids the pending invocation.
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }
    lastCallTime = timeStamp;
  }
  return proxy;
}

// Minimum delay before invoking the update of observers.
var REFRESH_DELAY = 20;
// A list of substrings of CSS properties used to find transition events that
// might affect dimensions of observed elements.
var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
// Check if MutationObserver is available.
var mutationObserverSupported = typeof MutationObserver !== 'undefined';
/**
 * Singleton controller class which handles updates of ResizeObserver instances.
 */
var ResizeObserverController = /** @class */function () {
  /**
   * Creates a new instance of ResizeObserverController.
   *
   * @private
   */
  function ResizeObserverController() {
    /**
     * Indicates whether DOM listeners have been added.
     *
     * @private {boolean}
     */
    this.connected_ = false;
    /**
     * Tells that controller has subscribed for Mutation Events.
     *
     * @private {boolean}
     */
    this.mutationEventsAdded_ = false;
    /**
     * Keeps reference to the instance of MutationObserver.
     *
     * @private {MutationObserver}
     */
    this.mutationsObserver_ = null;
    /**
     * A list of connected observers.
     *
     * @private {Array<ResizeObserverSPI>}
     */
    this.observers_ = [];
    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
  }
  /**
   * Adds observer to observers list.
   *
   * @param {ResizeObserverSPI} observer - Observer to be added.
   * @returns {void}
   */
  ResizeObserverController.prototype.addObserver = function (observer) {
    if (!~this.observers_.indexOf(observer)) {
      this.observers_.push(observer);
    }
    // Add listeners if they haven't been added yet.
    if (!this.connected_) {
      this.connect_();
    }
  };
  /**
   * Removes observer from observers list.
   *
   * @param {ResizeObserverSPI} observer - Observer to be removed.
   * @returns {void}
   */
  ResizeObserverController.prototype.removeObserver = function (observer) {
    var observers = this.observers_;
    var index = observers.indexOf(observer);
    // Remove observer if it's present in registry.
    if (~index) {
      observers.splice(index, 1);
    }
    // Remove listeners if controller has no connected observers.
    if (!observers.length && this.connected_) {
      this.disconnect_();
    }
  };
  /**
   * Invokes the update of observers. It will continue running updates insofar
   * it detects changes.
   *
   * @returns {void}
   */
  ResizeObserverController.prototype.refresh = function () {
    var changesDetected = this.updateObservers_();
    // Continue running updates if changes have been detected as there might
    // be future ones caused by CSS transitions.
    if (changesDetected) {
      this.refresh();
    }
  };
  /**
   * Updates every observer from observers list and notifies them of queued
   * entries.
   *
   * @private
   * @returns {boolean} Returns "true" if any observer has detected changes in
   *      dimensions of it's elements.
   */
  ResizeObserverController.prototype.updateObservers_ = function () {
    // Collect observers that have active observations.
    var activeObservers = this.observers_.filter(function (observer) {
      return observer.gatherActive(), observer.hasActive();
    });
    // Deliver notifications in a separate cycle in order to avoid any
    // collisions between observers, e.g. when multiple instances of
    // ResizeObserver are tracking the same element and the callback of one
    // of them changes content dimensions of the observed target. Sometimes
    // this may result in notifications being blocked for the rest of observers.
    activeObservers.forEach(function (observer) {
      return observer.broadcastActive();
    });
    return activeObservers.length > 0;
  };
  /**
   * Initializes DOM listeners.
   *
   * @private
   * @returns {void}
   */
  ResizeObserverController.prototype.connect_ = function () {
    // Do nothing if running in a non-browser environment or if listeners
    // have been already added.
    if (!isBrowser || this.connected_) {
      return;
    }
    // Subscription to the "Transitionend" event is used as a workaround for
    // delayed transitions. This way it's possible to capture at least the
    // final state of an element.
    document.addEventListener('transitionend', this.onTransitionEnd_);
    window.addEventListener('resize', this.refresh);
    if (mutationObserverSupported) {
      this.mutationsObserver_ = new MutationObserver(this.refresh);
      this.mutationsObserver_.observe(document, {
        attributes: true,
        childList: true,
        characterData: true,
        subtree: true
      });
    } else {
      document.addEventListener('DOMSubtreeModified', this.refresh);
      this.mutationEventsAdded_ = true;
    }
    this.connected_ = true;
  };
  /**
   * Removes DOM listeners.
   *
   * @private
   * @returns {void}
   */
  ResizeObserverController.prototype.disconnect_ = function () {
    // Do nothing if running in a non-browser environment or if listeners
    // have been already removed.
    if (!isBrowser || !this.connected_) {
      return;
    }
    document.removeEventListener('transitionend', this.onTransitionEnd_);
    window.removeEventListener('resize', this.refresh);
    if (this.mutationsObserver_) {
      this.mutationsObserver_.disconnect();
    }
    if (this.mutationEventsAdded_) {
      document.removeEventListener('DOMSubtreeModified', this.refresh);
    }
    this.mutationsObserver_ = null;
    this.mutationEventsAdded_ = false;
    this.connected_ = false;
  };
  /**
   * "Transitionend" event handler.
   *
   * @private
   * @param {TransitionEvent} event
   * @returns {void}
   */
  ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
    var _b = _a.propertyName,
      propertyName = _b === void 0 ? '' : _b;
    // Detect whether transition may affect dimensions of an element.
    var isReflowProperty = transitionKeys.some(function (key) {
      return !!~propertyName.indexOf(key);
    });
    if (isReflowProperty) {
      this.refresh();
    }
  };
  /**
   * Returns instance of the ResizeObserverController.
   *
   * @returns {ResizeObserverController}
   */
  ResizeObserverController.getInstance = function () {
    if (!this.instance_) {
      this.instance_ = new ResizeObserverController();
    }
    return this.instance_;
  };
  /**
   * Holds reference to the controller's instance.
   *
   * @private {ResizeObserverController}
   */
  ResizeObserverController.instance_ = null;
  return ResizeObserverController;
}();

/**
 * Defines non-writable/enumerable properties of the provided target object.
 *
 * @param {Object} target - Object for which to define properties.
 * @param {Object} props - Properties to be defined.
 * @returns {Object} Target object.
 */
var defineConfigurable = function (target, props) {
  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
    var key = _a[_i];
    Object.defineProperty(target, key, {
      value: props[key],
      enumerable: false,
      writable: false,
      configurable: true
    });
  }
  return target;
};

/**
 * Returns the global object associated with provided element.
 *
 * @param {Object} target
 * @returns {Object}
 */
var getWindowOf = function (target) {
  // Assume that the element is an instance of Node, which means that it
  // has the "ownerDocument" property from which we can retrieve a
  // corresponding global object.
  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
  // Return the local global object if it's not possible extract one from
  // provided element.
  return ownerGlobal || global$1;
};

// Placeholder of an empty content rectangle.
var emptyRect = createRectInit(0, 0, 0, 0);
/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */
function toFloat(value) {
  return parseFloat(value) || 0;
}
/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */
function getBordersSize(styles) {
  var positions = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    positions[_i - 1] = arguments[_i];
  }
  return positions.reduce(function (size, position) {
    var value = styles['border-' + position + '-width'];
    return size + toFloat(value);
  }, 0);
}
/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */
function getPaddings(styles) {
  var positions = ['top', 'right', 'bottom', 'left'];
  var paddings = {};
  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
    var position = positions_1[_i];
    var value = styles['padding-' + position];
    paddings[position] = toFloat(value);
  }
  return paddings;
}
/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */
function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */
function getHTMLElementContentRect(target) {
  // Client width & height properties can't be
  // used exclusively as they provide rounded values.
  var clientWidth = target.clientWidth,
    clientHeight = target.clientHeight;
  // By this condition we can catch all non-replaced inline, hidden and
  // detached elements. Though elements with width & height properties less
  // than 0.5 will be discarded as well.
  //
  // Without it we would need to implement separate methods for each of
  // those cases and it's not possible to perform a precise and performance
  // effective test for hidden elements. E.g. even jQuery's ':visible' filter
  // gives wrong results for elements with width & height less than 0.5.
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  // Computed styles of width & height are being used because they are the
  // only dimensions available to JS that contain non-rounded values. It could
  // be possible to utilize the getBoundingClientRect if only it's data wasn't
  // affected by CSS transformations let alone paddings, borders and scroll bars.
  var width = toFloat(styles.width),
    height = toFloat(styles.height);
  // Width & height include paddings and borders when the 'border-box' box
  // model is applied (except for IE).
  if (styles.boxSizing === 'border-box') {
    // Following conditions are required to handle Internet Explorer which
    // doesn't include paddings and borders to computed CSS dimensions.
    //
    // We can say that if CSS dimensions + paddings are equal to the "client"
    // properties then it's either IE, and thus we don't need to subtract
    // anything, or an element merely doesn't have paddings/borders styles.
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles, 'left', 'right') + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
    }
  }
  // Following steps can't be applied to the document's root element as its
  // client[Width/Height] properties represent viewport area of the window.
  // Besides, it's as well not necessary as the <html> itself neither has
  // rendered scroll bars nor it can be clipped.
  if (!isDocumentElement(target)) {
    // In some browsers (only in Firefox, actually) CSS width & height
    // include scroll bars size which can be removed at this step as scroll
    // bars are the only difference between rounded dimensions + paddings
    // and "client" properties, though that is not always true in Chrome.
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    // Chrome has a rather weird rounding of "client" properties.
    // E.g. for an element with content width of 314.2px it sometimes gives
    // the client width of 315px and for the width of 314.7px it may give
    // 314px. And it doesn't happen all the time. So just ignore this delta
    // as a non-relevant.
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
var isSVGGraphicsElement = function () {
  // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
  // interface.
  if (typeof SVGGraphicsElement !== 'undefined') {
    return function (target) {
      return target instanceof getWindowOf(target).SVGGraphicsElement;
    };
  }
  // If it's so, then check that element is at least an instance of the
  // SVGElement and that it has the "getBBox" method.
  // eslint-disable-next-line no-extra-parens
  return function (target) {
    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';
  };
}();
/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */
function getContentRect(target) {
  if (!isBrowser) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }
  return getHTMLElementContentRect(target);
}
/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */
function createReadOnlyRect(_a) {
  var x = _a.x,
    y = _a.y,
    width = _a.width,
    height = _a.height;
  // If DOMRectReadOnly is available use it as a prototype for the rectangle.
  var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  // Rectangle's properties are not writable and non-enumerable.
  defineConfigurable(rect, {
    x: x,
    y: y,
    width: width,
    height: height,
    top: y,
    right: x + width,
    bottom: height + y,
    left: x
  });
  return rect;
}
/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */
function createRectInit(x, y, width, height) {
  return {
    x: x,
    y: y,
    width: width,
    height: height
  };
}

/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */
var ResizeObservation = /** @class */function () {
  /**
   * Creates an instance of ResizeObservation.
   *
   * @param {Element} target - Element to be observed.
   */
  function ResizeObservation(target) {
    /**
     * Broadcasted width of content rectangle.
     *
     * @type {number}
     */
    this.broadcastWidth = 0;
    /**
     * Broadcasted height of content rectangle.
     *
     * @type {number}
     */
    this.broadcastHeight = 0;
    /**
     * Reference to the last observed content rectangle.
     *
     * @private {DOMRectInit}
     */
    this.contentRect_ = createRectInit(0, 0, 0, 0);
    this.target = target;
  }
  /**
   * Updates content rectangle and tells whether it's width or height properties
   * have changed since the last broadcast.
   *
   * @returns {boolean}
   */
  ResizeObservation.prototype.isActive = function () {
    var rect = getContentRect(this.target);
    this.contentRect_ = rect;
    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
  };
  /**
   * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
   * from the corresponding properties of the last observed content rectangle.
   *
   * @returns {DOMRectInit} Last observed content rectangle.
   */
  ResizeObservation.prototype.broadcastRect = function () {
    var rect = this.contentRect_;
    this.broadcastWidth = rect.width;
    this.broadcastHeight = rect.height;
    return rect;
  };
  return ResizeObservation;
}();
var ResizeObserverEntry = /** @class */function () {
  /**
   * Creates an instance of ResizeObserverEntry.
   *
   * @param {Element} target - Element that is being observed.
   * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
   */
  function ResizeObserverEntry(target, rectInit) {
    var contentRect = createReadOnlyRect(rectInit);
    // According to the specification following properties are not writable
    // and are also not enumerable in the native implementation.
    //
    // Property accessors are not being used as they'd require to define a
    // private WeakMap storage which may cause memory leaks in browsers that
    // don't support this type of collections.
    defineConfigurable(this, {
      target: target,
      contentRect: contentRect
    });
  }
  return ResizeObserverEntry;
}();
var ResizeObserverSPI = /** @class */function () {
  /**
   * Creates a new instance of ResizeObserver.
   *
   * @param {ResizeObserverCallback} callback - Callback function that is invoked
   *      when one of the observed elements changes it's content dimensions.
   * @param {ResizeObserverController} controller - Controller instance which
   *      is responsible for the updates of observer.
   * @param {ResizeObserver} callbackCtx - Reference to the public
   *      ResizeObserver instance which will be passed to callback function.
   */
  function ResizeObserverSPI(callback, controller, callbackCtx) {
    /**
     * Collection of resize observations that have detected changes in dimensions
     * of elements.
     *
     * @private {Array<ResizeObservation>}
     */
    this.activeObservations_ = [];
    /**
     * Registry of the ResizeObservation instances.
     *
     * @private {Map<Element, ResizeObservation>}
     */
    this.observations_ = new MapShim();
    if (typeof callback !== 'function') {
      throw new TypeError('The callback provided as parameter 1 is not a function.');
    }
    this.callback_ = callback;
    this.controller_ = controller;
    this.callbackCtx_ = callbackCtx;
  }
  /**
   * Starts observing provided element.
   *
   * @param {Element} target - Element to be observed.
   * @returns {void}
   */
  ResizeObserverSPI.prototype.observe = function (target) {
    if (!arguments.length) {
      throw new TypeError('1 argument required, but only 0 present.');
    }
    // Do nothing if current environment doesn't have the Element interface.
    if (typeof Element === 'undefined' || !(Element instanceof Object)) {
      return;
    }
    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    // Do nothing if element is already being observed.
    if (observations.has(target)) {
      return;
    }
    observations.set(target, new ResizeObservation(target));
    this.controller_.addObserver(this);
    // Force the update of observations.
    this.controller_.refresh();
  };
  /**
   * Stops observing provided element.
   *
   * @param {Element} target - Element to stop observing.
   * @returns {void}
   */
  ResizeObserverSPI.prototype.unobserve = function (target) {
    if (!arguments.length) {
      throw new TypeError('1 argument required, but only 0 present.');
    }
    // Do nothing if current environment doesn't have the Element interface.
    if (typeof Element === 'undefined' || !(Element instanceof Object)) {
      return;
    }
    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    // Do nothing if element is not being observed.
    if (!observations.has(target)) {
      return;
    }
    observations.delete(target);
    if (!observations.size) {
      this.controller_.removeObserver(this);
    }
  };
  /**
   * Stops observing all elements.
   *
   * @returns {void}
   */
  ResizeObserverSPI.prototype.disconnect = function () {
    this.clearActive();
    this.observations_.clear();
    this.controller_.removeObserver(this);
  };
  /**
   * Collects observation instances the associated element of which has changed
   * it's content rectangle.
   *
   * @returns {void}
   */
  ResizeObserverSPI.prototype.gatherActive = function () {
    var _this = this;
    this.clearActive();
    this.observations_.forEach(function (observation) {
      if (observation.isActive()) {
        _this.activeObservations_.push(observation);
      }
    });
  };
  /**
   * Invokes initial callback function with a list of ResizeObserverEntry
   * instances collected from active resize observations.
   *
   * @returns {void}
   */
  ResizeObserverSPI.prototype.broadcastActive = function () {
    // Do nothing if observer doesn't have active observations.
    if (!this.hasActive()) {
      return;
    }
    var ctx = this.callbackCtx_;
    // Create ResizeObserverEntry instance for every active observation.
    var entries = this.activeObservations_.map(function (observation) {
      return new ResizeObserverEntry(observation.target, observation.broadcastRect());
    });
    this.callback_.call(ctx, entries, ctx);
    this.clearActive();
  };
  /**
   * Clears the collection of active observations.
   *
   * @returns {void}
   */
  ResizeObserverSPI.prototype.clearActive = function () {
    this.activeObservations_.splice(0);
  };
  /**
   * Tells whether observer has active observations.
   *
   * @returns {boolean}
   */
  ResizeObserverSPI.prototype.hasActive = function () {
    return this.activeObservations_.length > 0;
  };
  return ResizeObserverSPI;
}();

// Registry of internal observers. If WeakMap is not available use current shim
// for the Map collection as it has all required methods and because WeakMap
// can't be fully polyfilled anyway.
var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
/**
 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
 * exposing only those methods and properties that are defined in the spec.
 */
var ResizeObserver = /** @class */function () {
  /**
   * Creates a new instance of ResizeObserver.
   *
   * @param {ResizeObserverCallback} callback - Callback that is invoked when
   *      dimensions of the observed elements change.
   */
  function ResizeObserver(callback) {
    if (!(this instanceof ResizeObserver)) {
      throw new TypeError('Cannot call a class as a function.');
    }
    if (!arguments.length) {
      throw new TypeError('1 argument required, but only 0 present.');
    }
    var controller = ResizeObserverController.getInstance();
    var observer = new ResizeObserverSPI(callback, controller, this);
    observers.set(this, observer);
  }
  return ResizeObserver;
}();
// Expose public methods of ResizeObserver.
['observe', 'unobserve', 'disconnect'].forEach(function (method) {
  ResizeObserver.prototype[method] = function () {
    var _a;
    return (_a = observers.get(this))[method].apply(_a, arguments);
  };
});
var index = function () {
  // Export existing implementation if available.
  if (typeof global$1.ResizeObserver !== 'undefined') {
    return global$1.ResizeObserver;
  }
  return ResizeObserver;
}();

var ResizeObserver_es = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: index
});

var require$$8 = /*@__PURE__*/getAugmentedNamespace(ResizeObserver_es);

Object.defineProperty(innerSlider, "__esModule", {
  value: true
});
innerSlider.InnerSlider = void 0;
var _react = _interopRequireDefault$2(React);
var _initialState = _interopRequireDefault$2(initialState);
var _lodash = _interopRequireDefault$2(lodash_debounce);
var _classnames = _interopRequireDefault$2(classnamesExports);
var _innerSliderUtils = innerSliderUtils;
var _track = track;
var _dots = dots;
var _arrows = arrows;
var _resizeObserverPolyfill = _interopRequireDefault$2(require$$8);
function _interopRequireDefault$2(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
function _extends$1() {
  _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function ownKeys$2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$1(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _defineProperty$3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var InnerSlider = /*#__PURE__*/function (_React$Component) {
  _inherits(InnerSlider, _React$Component);
  var _super = _createSuper(InnerSlider);
  function InnerSlider(props) {
    var _this;
    _classCallCheck$1(this, InnerSlider);
    _this = _super.call(this, props);
    _defineProperty$3(_assertThisInitialized(_this), "listRefHandler", function (ref) {
      return _this.list = ref;
    });
    _defineProperty$3(_assertThisInitialized(_this), "trackRefHandler", function (ref) {
      return _this.track = ref;
    });
    _defineProperty$3(_assertThisInitialized(_this), "adaptHeight", function () {
      if (_this.props.adaptiveHeight && _this.list) {
        var elem = _this.list.querySelector("[data-index=\"".concat(_this.state.currentSlide, "\"]"));
        _this.list.style.height = (0, _innerSliderUtils.getHeight)(elem) + "px";
      }
    });
    _defineProperty$3(_assertThisInitialized(_this), "componentDidMount", function () {
      _this.props.onInit && _this.props.onInit();
      if (_this.props.lazyLoad) {
        var slidesToLoad = (0, _innerSliderUtils.getOnDemandLazySlides)(_objectSpread(_objectSpread({}, _this.props), _this.state));
        if (slidesToLoad.length > 0) {
          _this.setState(function (prevState) {
            return {
              lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)
            };
          });
          if (_this.props.onLazyLoad) {
            _this.props.onLazyLoad(slidesToLoad);
          }
        }
      }
      var spec = _objectSpread({
        listRef: _this.list,
        trackRef: _this.track
      }, _this.props);
      _this.updateState(spec, true, function () {
        _this.adaptHeight();
        _this.props.autoplay && _this.autoPlay("update");
      });
      if (_this.props.lazyLoad === "progressive") {
        _this.lazyLoadTimer = setInterval(_this.progressiveLazyLoad, 1000);
      }
      _this.ro = new _resizeObserverPolyfill["default"](function () {
        if (_this.state.animating) {
          _this.onWindowResized(false); // don't set trackStyle hence don't break animation

          _this.callbackTimers.push(setTimeout(function () {
            return _this.onWindowResized();
          }, _this.props.speed));
        } else {
          _this.onWindowResized();
        }
      });
      _this.ro.observe(_this.list);
      document.querySelectorAll && Array.prototype.forEach.call(document.querySelectorAll(".slick-slide"), function (slide) {
        slide.onfocus = _this.props.pauseOnFocus ? _this.onSlideFocus : null;
        slide.onblur = _this.props.pauseOnFocus ? _this.onSlideBlur : null;
      });
      if (window.addEventListener) {
        window.addEventListener("resize", _this.onWindowResized);
      } else {
        window.attachEvent("onresize", _this.onWindowResized);
      }
    });
    _defineProperty$3(_assertThisInitialized(_this), "componentWillUnmount", function () {
      if (_this.animationEndCallback) {
        clearTimeout(_this.animationEndCallback);
      }
      if (_this.lazyLoadTimer) {
        clearInterval(_this.lazyLoadTimer);
      }
      if (_this.callbackTimers.length) {
        _this.callbackTimers.forEach(function (timer) {
          return clearTimeout(timer);
        });
        _this.callbackTimers = [];
      }
      if (window.addEventListener) {
        window.removeEventListener("resize", _this.onWindowResized);
      } else {
        window.detachEvent("onresize", _this.onWindowResized);
      }
      if (_this.autoplayTimer) {
        clearInterval(_this.autoplayTimer);
      }
      _this.ro.disconnect();
    });
    _defineProperty$3(_assertThisInitialized(_this), "componentDidUpdate", function (prevProps) {
      _this.checkImagesLoad();
      _this.props.onReInit && _this.props.onReInit();
      if (_this.props.lazyLoad) {
        var slidesToLoad = (0, _innerSliderUtils.getOnDemandLazySlides)(_objectSpread(_objectSpread({}, _this.props), _this.state));
        if (slidesToLoad.length > 0) {
          _this.setState(function (prevState) {
            return {
              lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)
            };
          });
          if (_this.props.onLazyLoad) {
            _this.props.onLazyLoad(slidesToLoad);
          }
        }
      } // if (this.props.onLazyLoad) {
      //   this.props.onLazyLoad([leftMostSlide])
      // }

      _this.adaptHeight();
      var spec = _objectSpread(_objectSpread({
        listRef: _this.list,
        trackRef: _this.track
      }, _this.props), _this.state);
      var setTrackStyle = _this.didPropsChange(prevProps);
      setTrackStyle && _this.updateState(spec, setTrackStyle, function () {
        if (_this.state.currentSlide >= _react["default"].Children.count(_this.props.children)) {
          _this.changeSlide({
            message: "index",
            index: _react["default"].Children.count(_this.props.children) - _this.props.slidesToShow,
            currentSlide: _this.state.currentSlide
          });
        }
        if (_this.props.autoplay) {
          _this.autoPlay("update");
        } else {
          _this.pause("paused");
        }
      });
    });
    _defineProperty$3(_assertThisInitialized(_this), "onWindowResized", function (setTrackStyle) {
      if (_this.debouncedResize) _this.debouncedResize.cancel();
      _this.debouncedResize = (0, _lodash["default"])(function () {
        return _this.resizeWindow(setTrackStyle);
      }, 50);
      _this.debouncedResize();
    });
    _defineProperty$3(_assertThisInitialized(_this), "resizeWindow", function () {
      var setTrackStyle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var isTrackMounted = Boolean(_this.track && _this.track.node); // prevent warning: setting state on unmounted component (server side rendering)

      if (!isTrackMounted) return;
      var spec = _objectSpread(_objectSpread({
        listRef: _this.list,
        trackRef: _this.track
      }, _this.props), _this.state);
      _this.updateState(spec, setTrackStyle, function () {
        if (_this.props.autoplay) _this.autoPlay("update");else _this.pause("paused");
      }); // animating state should be cleared while resizing, otherwise autoplay stops working

      _this.setState({
        animating: false
      });
      clearTimeout(_this.animationEndCallback);
      delete _this.animationEndCallback;
    });
    _defineProperty$3(_assertThisInitialized(_this), "updateState", function (spec, setTrackStyle, callback) {
      var updatedState = (0, _innerSliderUtils.initializedState)(spec);
      spec = _objectSpread(_objectSpread(_objectSpread({}, spec), updatedState), {}, {
        slideIndex: updatedState.currentSlide
      });
      var targetLeft = (0, _innerSliderUtils.getTrackLeft)(spec);
      spec = _objectSpread(_objectSpread({}, spec), {}, {
        left: targetLeft
      });
      var trackStyle = (0, _innerSliderUtils.getTrackCSS)(spec);
      if (setTrackStyle || _react["default"].Children.count(_this.props.children) !== _react["default"].Children.count(spec.children)) {
        updatedState["trackStyle"] = trackStyle;
      }
      _this.setState(updatedState, callback);
    });
    _defineProperty$3(_assertThisInitialized(_this), "ssrInit", function () {
      if (_this.props.variableWidth) {
        var _trackWidth = 0,
          _trackLeft = 0;
        var childrenWidths = [];
        var preClones = (0, _innerSliderUtils.getPreClones)(_objectSpread(_objectSpread(_objectSpread({}, _this.props), _this.state), {}, {
          slideCount: _this.props.children.length
        }));
        var postClones = (0, _innerSliderUtils.getPostClones)(_objectSpread(_objectSpread(_objectSpread({}, _this.props), _this.state), {}, {
          slideCount: _this.props.children.length
        }));
        _this.props.children.forEach(function (child) {
          childrenWidths.push(child.props.style.width);
          _trackWidth += child.props.style.width;
        });
        for (var i = 0; i < preClones; i++) {
          _trackLeft += childrenWidths[childrenWidths.length - 1 - i];
          _trackWidth += childrenWidths[childrenWidths.length - 1 - i];
        }
        for (var _i = 0; _i < postClones; _i++) {
          _trackWidth += childrenWidths[_i];
        }
        for (var _i2 = 0; _i2 < _this.state.currentSlide; _i2++) {
          _trackLeft += childrenWidths[_i2];
        }
        var _trackStyle = {
          width: _trackWidth + "px",
          left: -_trackLeft + "px"
        };
        if (_this.props.centerMode) {
          var currentWidth = "".concat(childrenWidths[_this.state.currentSlide], "px");
          _trackStyle.left = "calc(".concat(_trackStyle.left, " + (100% - ").concat(currentWidth, ") / 2 ) ");
        }
        return {
          trackStyle: _trackStyle
        };
      }
      var childrenCount = _react["default"].Children.count(_this.props.children);
      var spec = _objectSpread(_objectSpread(_objectSpread({}, _this.props), _this.state), {}, {
        slideCount: childrenCount
      });
      var slideCount = (0, _innerSliderUtils.getPreClones)(spec) + (0, _innerSliderUtils.getPostClones)(spec) + childrenCount;
      var trackWidth = 100 / _this.props.slidesToShow * slideCount;
      var slideWidth = 100 / slideCount;
      var trackLeft = -slideWidth * ((0, _innerSliderUtils.getPreClones)(spec) + _this.state.currentSlide) * trackWidth / 100;
      if (_this.props.centerMode) {
        trackLeft += (100 - slideWidth * trackWidth / 100) / 2;
      }
      var trackStyle = {
        width: trackWidth + "%",
        left: trackLeft + "%"
      };
      return {
        slideWidth: slideWidth + "%",
        trackStyle: trackStyle
      };
    });
    _defineProperty$3(_assertThisInitialized(_this), "checkImagesLoad", function () {
      var images = _this.list && _this.list.querySelectorAll && _this.list.querySelectorAll(".slick-slide img") || [];
      var imagesCount = images.length,
        loadedCount = 0;
      Array.prototype.forEach.call(images, function (image) {
        var handler = function handler() {
          return ++loadedCount && loadedCount >= imagesCount && _this.onWindowResized();
        };
        if (!image.onclick) {
          image.onclick = function () {
            return image.parentNode.focus();
          };
        } else {
          var prevClickHandler = image.onclick;
          image.onclick = function () {
            prevClickHandler();
            image.parentNode.focus();
          };
        }
        if (!image.onload) {
          if (_this.props.lazyLoad) {
            image.onload = function () {
              _this.adaptHeight();
              _this.callbackTimers.push(setTimeout(_this.onWindowResized, _this.props.speed));
            };
          } else {
            image.onload = handler;
            image.onerror = function () {
              handler();
              _this.props.onLazyLoadError && _this.props.onLazyLoadError();
            };
          }
        }
      });
    });
    _defineProperty$3(_assertThisInitialized(_this), "progressiveLazyLoad", function () {
      var slidesToLoad = [];
      var spec = _objectSpread(_objectSpread({}, _this.props), _this.state);
      for (var index = _this.state.currentSlide; index < _this.state.slideCount + (0, _innerSliderUtils.getPostClones)(spec); index++) {
        if (_this.state.lazyLoadedList.indexOf(index) < 0) {
          slidesToLoad.push(index);
          break;
        }
      }
      for (var _index = _this.state.currentSlide - 1; _index >= -(0, _innerSliderUtils.getPreClones)(spec); _index--) {
        if (_this.state.lazyLoadedList.indexOf(_index) < 0) {
          slidesToLoad.push(_index);
          break;
        }
      }
      if (slidesToLoad.length > 0) {
        _this.setState(function (state) {
          return {
            lazyLoadedList: state.lazyLoadedList.concat(slidesToLoad)
          };
        });
        if (_this.props.onLazyLoad) {
          _this.props.onLazyLoad(slidesToLoad);
        }
      } else {
        if (_this.lazyLoadTimer) {
          clearInterval(_this.lazyLoadTimer);
          delete _this.lazyLoadTimer;
        }
      }
    });
    _defineProperty$3(_assertThisInitialized(_this), "slideHandler", function (index) {
      var dontAnimate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var _this$props = _this.props,
        asNavFor = _this$props.asNavFor,
        beforeChange = _this$props.beforeChange,
        onLazyLoad = _this$props.onLazyLoad,
        speed = _this$props.speed,
        afterChange = _this$props.afterChange; // capture currentslide before state is updated

      var currentSlide = _this.state.currentSlide;
      var _slideHandler = (0, _innerSliderUtils.slideHandler)(_objectSpread(_objectSpread(_objectSpread({
          index: index
        }, _this.props), _this.state), {}, {
          trackRef: _this.track,
          useCSS: _this.props.useCSS && !dontAnimate
        })),
        state = _slideHandler.state,
        nextState = _slideHandler.nextState;
      if (!state) return;
      beforeChange && beforeChange(currentSlide, state.currentSlide);
      var slidesToLoad = state.lazyLoadedList.filter(function (value) {
        return _this.state.lazyLoadedList.indexOf(value) < 0;
      });
      onLazyLoad && slidesToLoad.length > 0 && onLazyLoad(slidesToLoad);
      if (!_this.props.waitForAnimate && _this.animationEndCallback) {
        clearTimeout(_this.animationEndCallback);
        afterChange && afterChange(currentSlide);
        delete _this.animationEndCallback;
      }
      _this.setState(state, function () {
        // asNavForIndex check is to avoid recursive calls of slideHandler in waitForAnimate=false mode
        if (asNavFor && _this.asNavForIndex !== index) {
          _this.asNavForIndex = index;
          asNavFor.innerSlider.slideHandler(index);
        }
        if (!nextState) return;
        _this.animationEndCallback = setTimeout(function () {
          var animating = nextState.animating,
            firstBatch = _objectWithoutProperties(nextState, ["animating"]);
          _this.setState(firstBatch, function () {
            _this.callbackTimers.push(setTimeout(function () {
              return _this.setState({
                animating: animating
              });
            }, 10));
            afterChange && afterChange(state.currentSlide);
            delete _this.animationEndCallback;
          });
        }, speed);
      });
    });
    _defineProperty$3(_assertThisInitialized(_this), "changeSlide", function (options) {
      var dontAnimate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var spec = _objectSpread(_objectSpread({}, _this.props), _this.state);
      var targetSlide = (0, _innerSliderUtils.changeSlide)(spec, options);
      if (targetSlide !== 0 && !targetSlide) return;
      if (dontAnimate === true) {
        _this.slideHandler(targetSlide, dontAnimate);
      } else {
        _this.slideHandler(targetSlide);
      }
      _this.props.autoplay && _this.autoPlay("update");
      if (_this.props.focusOnSelect) {
        var nodes = _this.list.querySelectorAll(".slick-current");
        nodes[0] && nodes[0].focus();
      }
    });
    _defineProperty$3(_assertThisInitialized(_this), "clickHandler", function (e) {
      if (_this.clickable === false) {
        e.stopPropagation();
        e.preventDefault();
      }
      _this.clickable = true;
    });
    _defineProperty$3(_assertThisInitialized(_this), "keyHandler", function (e) {
      var dir = (0, _innerSliderUtils.keyHandler)(e, _this.props.accessibility, _this.props.rtl);
      dir !== "" && _this.changeSlide({
        message: dir
      });
    });
    _defineProperty$3(_assertThisInitialized(_this), "selectHandler", function (options) {
      _this.changeSlide(options);
    });
    _defineProperty$3(_assertThisInitialized(_this), "disableBodyScroll", function () {
      var preventDefault = function preventDefault(e) {
        e = e || window.event;
        if (e.preventDefault) e.preventDefault();
        e.returnValue = false;
      };
      window.ontouchmove = preventDefault;
    });
    _defineProperty$3(_assertThisInitialized(_this), "enableBodyScroll", function () {
      window.ontouchmove = null;
    });
    _defineProperty$3(_assertThisInitialized(_this), "swipeStart", function (e) {
      if (_this.props.verticalSwiping) {
        _this.disableBodyScroll();
      }
      var state = (0, _innerSliderUtils.swipeStart)(e, _this.props.swipe, _this.props.draggable);
      state !== "" && _this.setState(state);
    });
    _defineProperty$3(_assertThisInitialized(_this), "swipeMove", function (e) {
      var state = (0, _innerSliderUtils.swipeMove)(e, _objectSpread(_objectSpread(_objectSpread({}, _this.props), _this.state), {}, {
        trackRef: _this.track,
        listRef: _this.list,
        slideIndex: _this.state.currentSlide
      }));
      if (!state) return;
      if (state["swiping"]) {
        _this.clickable = false;
      }
      _this.setState(state);
    });
    _defineProperty$3(_assertThisInitialized(_this), "swipeEnd", function (e) {
      var state = (0, _innerSliderUtils.swipeEnd)(e, _objectSpread(_objectSpread(_objectSpread({}, _this.props), _this.state), {}, {
        trackRef: _this.track,
        listRef: _this.list,
        slideIndex: _this.state.currentSlide
      }));
      if (!state) return;
      var triggerSlideHandler = state["triggerSlideHandler"];
      delete state["triggerSlideHandler"];
      _this.setState(state);
      if (triggerSlideHandler === undefined) return;
      _this.slideHandler(triggerSlideHandler);
      if (_this.props.verticalSwiping) {
        _this.enableBodyScroll();
      }
    });
    _defineProperty$3(_assertThisInitialized(_this), "touchEnd", function (e) {
      _this.swipeEnd(e);
      _this.clickable = true;
    });
    _defineProperty$3(_assertThisInitialized(_this), "slickPrev", function () {
      // this and fellow methods are wrapped in setTimeout
      // to make sure initialize setState has happened before
      // any of such methods are called
      _this.callbackTimers.push(setTimeout(function () {
        return _this.changeSlide({
          message: "previous"
        });
      }, 0));
    });
    _defineProperty$3(_assertThisInitialized(_this), "slickNext", function () {
      _this.callbackTimers.push(setTimeout(function () {
        return _this.changeSlide({
          message: "next"
        });
      }, 0));
    });
    _defineProperty$3(_assertThisInitialized(_this), "slickGoTo", function (slide) {
      var dontAnimate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      slide = Number(slide);
      if (isNaN(slide)) return "";
      _this.callbackTimers.push(setTimeout(function () {
        return _this.changeSlide({
          message: "index",
          index: slide,
          currentSlide: _this.state.currentSlide
        }, dontAnimate);
      }, 0));
    });
    _defineProperty$3(_assertThisInitialized(_this), "play", function () {
      var nextIndex;
      if (_this.props.rtl) {
        nextIndex = _this.state.currentSlide - _this.props.slidesToScroll;
      } else {
        if ((0, _innerSliderUtils.canGoNext)(_objectSpread(_objectSpread({}, _this.props), _this.state))) {
          nextIndex = _this.state.currentSlide + _this.props.slidesToScroll;
        } else {
          return false;
        }
      }
      _this.slideHandler(nextIndex);
    });
    _defineProperty$3(_assertThisInitialized(_this), "autoPlay", function (playType) {
      if (_this.autoplayTimer) {
        clearInterval(_this.autoplayTimer);
      }
      var autoplaying = _this.state.autoplaying;
      if (playType === "update") {
        if (autoplaying === "hovered" || autoplaying === "focused" || autoplaying === "paused") {
          return;
        }
      } else if (playType === "leave") {
        if (autoplaying === "paused" || autoplaying === "focused") {
          return;
        }
      } else if (playType === "blur") {
        if (autoplaying === "paused" || autoplaying === "hovered") {
          return;
        }
      }
      _this.autoplayTimer = setInterval(_this.play, _this.props.autoplaySpeed + 50);
      _this.setState({
        autoplaying: "playing"
      });
    });
    _defineProperty$3(_assertThisInitialized(_this), "pause", function (pauseType) {
      if (_this.autoplayTimer) {
        clearInterval(_this.autoplayTimer);
        _this.autoplayTimer = null;
      }
      var autoplaying = _this.state.autoplaying;
      if (pauseType === "paused") {
        _this.setState({
          autoplaying: "paused"
        });
      } else if (pauseType === "focused") {
        if (autoplaying === "hovered" || autoplaying === "playing") {
          _this.setState({
            autoplaying: "focused"
          });
        }
      } else {
        // pauseType  is 'hovered'
        if (autoplaying === "playing") {
          _this.setState({
            autoplaying: "hovered"
          });
        }
      }
    });
    _defineProperty$3(_assertThisInitialized(_this), "onDotsOver", function () {
      return _this.props.autoplay && _this.pause("hovered");
    });
    _defineProperty$3(_assertThisInitialized(_this), "onDotsLeave", function () {
      return _this.props.autoplay && _this.state.autoplaying === "hovered" && _this.autoPlay("leave");
    });
    _defineProperty$3(_assertThisInitialized(_this), "onTrackOver", function () {
      return _this.props.autoplay && _this.pause("hovered");
    });
    _defineProperty$3(_assertThisInitialized(_this), "onTrackLeave", function () {
      return _this.props.autoplay && _this.state.autoplaying === "hovered" && _this.autoPlay("leave");
    });
    _defineProperty$3(_assertThisInitialized(_this), "onSlideFocus", function () {
      return _this.props.autoplay && _this.pause("focused");
    });
    _defineProperty$3(_assertThisInitialized(_this), "onSlideBlur", function () {
      return _this.props.autoplay && _this.state.autoplaying === "focused" && _this.autoPlay("blur");
    });
    _defineProperty$3(_assertThisInitialized(_this), "render", function () {
      var className = (0, _classnames["default"])("slick-slider", _this.props.className, {
        "slick-vertical": _this.props.vertical,
        "slick-initialized": true
      });
      var spec = _objectSpread(_objectSpread({}, _this.props), _this.state);
      var trackProps = (0, _innerSliderUtils.extractObject)(spec, ["fade", "cssEase", "speed", "infinite", "centerMode", "focusOnSelect", "currentSlide", "lazyLoad", "lazyLoadedList", "rtl", "slideWidth", "slideHeight", "listHeight", "vertical", "slidesToShow", "slidesToScroll", "slideCount", "trackStyle", "variableWidth", "unslick", "centerPadding", "targetSlide", "useCSS"]);
      var pauseOnHover = _this.props.pauseOnHover;
      trackProps = _objectSpread(_objectSpread({}, trackProps), {}, {
        onMouseEnter: pauseOnHover ? _this.onTrackOver : null,
        onMouseLeave: pauseOnHover ? _this.onTrackLeave : null,
        onMouseOver: pauseOnHover ? _this.onTrackOver : null,
        focusOnSelect: _this.props.focusOnSelect && _this.clickable ? _this.selectHandler : null
      });
      var dots;
      if (_this.props.dots === true && _this.state.slideCount >= _this.props.slidesToShow) {
        var dotProps = (0, _innerSliderUtils.extractObject)(spec, ["dotsClass", "slideCount", "slidesToShow", "currentSlide", "slidesToScroll", "clickHandler", "children", "customPaging", "infinite", "appendDots"]);
        var pauseOnDotsHover = _this.props.pauseOnDotsHover;
        dotProps = _objectSpread(_objectSpread({}, dotProps), {}, {
          clickHandler: _this.changeSlide,
          onMouseEnter: pauseOnDotsHover ? _this.onDotsLeave : null,
          onMouseOver: pauseOnDotsHover ? _this.onDotsOver : null,
          onMouseLeave: pauseOnDotsHover ? _this.onDotsLeave : null
        });
        dots = /*#__PURE__*/_react["default"].createElement(_dots.Dots, dotProps);
      }
      var prevArrow, nextArrow;
      var arrowProps = (0, _innerSliderUtils.extractObject)(spec, ["infinite", "centerMode", "currentSlide", "slideCount", "slidesToShow", "prevArrow", "nextArrow"]);
      arrowProps.clickHandler = _this.changeSlide;
      if (_this.props.arrows) {
        prevArrow = /*#__PURE__*/_react["default"].createElement(_arrows.PrevArrow, arrowProps);
        nextArrow = /*#__PURE__*/_react["default"].createElement(_arrows.NextArrow, arrowProps);
      }
      var verticalHeightStyle = null;
      if (_this.props.vertical) {
        verticalHeightStyle = {
          height: _this.state.listHeight
        };
      }
      var centerPaddingStyle = null;
      if (_this.props.vertical === false) {
        if (_this.props.centerMode === true) {
          centerPaddingStyle = {
            padding: "0px " + _this.props.centerPadding
          };
        }
      } else {
        if (_this.props.centerMode === true) {
          centerPaddingStyle = {
            padding: _this.props.centerPadding + " 0px"
          };
        }
      }
      var listStyle = _objectSpread(_objectSpread({}, verticalHeightStyle), centerPaddingStyle);
      var touchMove = _this.props.touchMove;
      var listProps = {
        className: "slick-list",
        style: listStyle,
        onClick: _this.clickHandler,
        onMouseDown: touchMove ? _this.swipeStart : null,
        onMouseMove: _this.state.dragging && touchMove ? _this.swipeMove : null,
        onMouseUp: touchMove ? _this.swipeEnd : null,
        onMouseLeave: _this.state.dragging && touchMove ? _this.swipeEnd : null,
        onTouchStart: touchMove ? _this.swipeStart : null,
        onTouchMove: _this.state.dragging && touchMove ? _this.swipeMove : null,
        onTouchEnd: touchMove ? _this.touchEnd : null,
        onTouchCancel: _this.state.dragging && touchMove ? _this.swipeEnd : null,
        onKeyDown: _this.props.accessibility ? _this.keyHandler : null
      };
      var innerSliderProps = {
        className: className,
        dir: "ltr",
        style: _this.props.style
      };
      if (_this.props.unslick) {
        listProps = {
          className: "slick-list"
        };
        innerSliderProps = {
          className: className
        };
      }
      return /*#__PURE__*/_react["default"].createElement("div", innerSliderProps, !_this.props.unslick ? prevArrow : "", /*#__PURE__*/_react["default"].createElement("div", _extends$1({
        ref: _this.listRefHandler
      }, listProps), /*#__PURE__*/_react["default"].createElement(_track.Track, _extends$1({
        ref: _this.trackRefHandler
      }, trackProps), _this.props.children)), !_this.props.unslick ? nextArrow : "", !_this.props.unslick ? dots : "");
    });
    _this.list = null;
    _this.track = null;
    _this.state = _objectSpread(_objectSpread({}, _initialState["default"]), {}, {
      currentSlide: _this.props.initialSlide,
      slideCount: _react["default"].Children.count(_this.props.children)
    });
    _this.callbackTimers = [];
    _this.clickable = true;
    _this.debouncedResize = null;
    var ssrState = _this.ssrInit();
    _this.state = _objectSpread(_objectSpread({}, _this.state), ssrState);
    return _this;
  }
  _createClass$1(InnerSlider, [{
    key: "didPropsChange",
    value: function didPropsChange(prevProps) {
      var setTrackStyle = false;
      for (var _i3 = 0, _Object$keys = Object.keys(this.props); _i3 < _Object$keys.length; _i3++) {
        var key = _Object$keys[_i3];
        if (!prevProps.hasOwnProperty(key)) {
          setTrackStyle = true;
          break;
        }
        if (_typeof(prevProps[key]) === "object" || typeof prevProps[key] === "function") {
          continue;
        }
        if (prevProps[key] !== this.props[key]) {
          setTrackStyle = true;
          break;
        }
      }
      return setTrackStyle || _react["default"].Children.count(this.props.children) !== _react["default"].Children.count(prevProps.children);
    }
  }]);
  return InnerSlider;
}(_react["default"].Component);
innerSlider.InnerSlider = InnerSlider;

var camel2hyphen$1 = function (str) {
  return str.replace(/[A-Z]/g, function (match) {
    return '-' + match.toLowerCase();
  }).toLowerCase();
};
var camel2hyphen_1 = camel2hyphen$1;

var camel2hyphen = camel2hyphen_1;
var isDimension = function (feature) {
  var re = /[height|width]$/;
  return re.test(feature);
};
var obj2mq = function (obj) {
  var mq = '';
  var features = Object.keys(obj);
  features.forEach(function (feature, index) {
    var value = obj[feature];
    feature = camel2hyphen(feature);
    // Add px to dimension features
    if (isDimension(feature) && typeof value === 'number') {
      value = value + 'px';
    }
    if (value === true) {
      mq += feature;
    } else if (value === false) {
      mq += 'not ' + feature;
    } else {
      mq += '(' + feature + ': ' + value + ')';
    }
    if (index < features.length - 1) {
      mq += ' and ';
    }
  });
  return mq;
};
var json2mq = function (query) {
  var mq = '';
  if (typeof query === 'string') {
    return query;
  }
  // Handling array of media queries
  if (query instanceof Array) {
    query.forEach(function (q, index) {
      mq += obj2mq(q);
      if (index < query.length - 1) {
        mq += ', ';
      }
    });
    return mq;
  }
  // Handling single media query
  return obj2mq(query);
};
var json2mq_1 = json2mq;

var defaultProps = {};

(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = void 0;
	var _react = _interopRequireDefault(React);
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}
	var defaultProps = {
	  accessibility: true,
	  adaptiveHeight: false,
	  afterChange: null,
	  appendDots: function appendDots(dots) {
	    return /*#__PURE__*/_react["default"].createElement("ul", {
	      style: {
	        display: "block"
	      }
	    }, dots);
	  },
	  arrows: true,
	  autoplay: false,
	  autoplaySpeed: 3000,
	  beforeChange: null,
	  centerMode: false,
	  centerPadding: "50px",
	  className: "",
	  cssEase: "ease",
	  customPaging: function customPaging(i) {
	    return /*#__PURE__*/_react["default"].createElement("button", null, i + 1);
	  },
	  dots: false,
	  dotsClass: "slick-dots",
	  draggable: true,
	  easing: "linear",
	  edgeFriction: 0.35,
	  fade: false,
	  focusOnSelect: false,
	  infinite: true,
	  initialSlide: 0,
	  lazyLoad: null,
	  nextArrow: null,
	  onEdge: null,
	  onInit: null,
	  onLazyLoadError: null,
	  onReInit: null,
	  pauseOnDotsHover: false,
	  pauseOnFocus: false,
	  pauseOnHover: true,
	  prevArrow: null,
	  responsive: null,
	  rows: 1,
	  rtl: false,
	  slide: "div",
	  slidesPerRow: 1,
	  slidesToScroll: 1,
	  slidesToShow: 1,
	  speed: 500,
	  swipe: true,
	  swipeEvent: null,
	  swipeToSlide: false,
	  touchMove: true,
	  touchThreshold: 5,
	  useCSS: true,
	  useTransform: true,
	  variableWidth: false,
	  vertical: false,
	  waitForAnimate: true
	};
	var _default = defaultProps;
	exports["default"] = _default; 
} (defaultProps));

/**
 * Delegate to handle a media query being matched and unmatched.
 *
 * @param {object} options
 * @param {function} options.match callback for when the media query is matched
 * @param {function} [options.unmatch] callback for when the media query is unmatched
 * @param {function} [options.setup] one-time callback triggered the first time a query is matched
 * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?
 * @constructor
 */

var QueryHandler_1;
var hasRequiredQueryHandler;

function requireQueryHandler () {
	if (hasRequiredQueryHandler) return QueryHandler_1;
	hasRequiredQueryHandler = 1;
	function QueryHandler(options) {
	  this.options = options;
	  !options.deferSetup && this.setup();
	}
	QueryHandler.prototype = {
	  constructor: QueryHandler,
	  /**
	   * coordinates setup of the handler
	   *
	   * @function
	   */
	  setup: function () {
	    if (this.options.setup) {
	      this.options.setup();
	    }
	    this.initialised = true;
	  },
	  /**
	   * coordinates setup and triggering of the handler
	   *
	   * @function
	   */
	  on: function () {
	    !this.initialised && this.setup();
	    this.options.match && this.options.match();
	  },
	  /**
	   * coordinates the unmatch event for the handler
	   *
	   * @function
	   */
	  off: function () {
	    this.options.unmatch && this.options.unmatch();
	  },
	  /**
	   * called when a handler is to be destroyed.
	   * delegates to the destroy or unmatch callbacks, depending on availability.
	   *
	   * @function
	   */
	  destroy: function () {
	    this.options.destroy ? this.options.destroy() : this.off();
	  },
	  /**
	   * determines equality by reference.
	   * if object is supplied compare options, if function, compare match callback
	   *
	   * @function
	   * @param {object || function} [target] the target for comparison
	   */
	  equals: function (target) {
	    return this.options === target || this.options.match === target;
	  }
	};
	QueryHandler_1 = QueryHandler;
	return QueryHandler_1;
}

/**
 * Helper function for iterating over a collection
 *
 * @param collection
 * @param fn
 */

var Util;
var hasRequiredUtil;

function requireUtil () {
	if (hasRequiredUtil) return Util;
	hasRequiredUtil = 1;
	function each(collection, fn) {
	  var i = 0,
	    length = collection.length,
	    cont;
	  for (i; i < length; i++) {
	    cont = fn(collection[i], i);
	    if (cont === false) {
	      break; //allow early exit
	    }
	  }
	}

	/**
	 * Helper function for determining whether target object is an array
	 *
	 * @param target the object under test
	 * @return {Boolean} true if array, false otherwise
	 */
	function isArray(target) {
	  return Object.prototype.toString.apply(target) === '[object Array]';
	}

	/**
	 * Helper function for determining whether target object is a function
	 *
	 * @param target the object under test
	 * @return {Boolean} true if function, false otherwise
	 */
	function isFunction(target) {
	  return typeof target === 'function';
	}
	Util = {
	  isFunction: isFunction,
	  isArray: isArray,
	  each: each
	};
	return Util;
}

var MediaQuery_1;
var hasRequiredMediaQuery;

function requireMediaQuery () {
	if (hasRequiredMediaQuery) return MediaQuery_1;
	hasRequiredMediaQuery = 1;
	var QueryHandler = requireQueryHandler();
	var each = requireUtil().each;

	/**
	 * Represents a single media query, manages it's state and registered handlers for this query
	 *
	 * @constructor
	 * @param {string} query the media query string
	 * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design
	 */
	function MediaQuery(query, isUnconditional) {
	  this.query = query;
	  this.isUnconditional = isUnconditional;
	  this.handlers = [];
	  this.mql = window.matchMedia(query);
	  var self = this;
	  this.listener = function (mql) {
	    // Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly
	    self.mql = mql.currentTarget || mql;
	    self.assess();
	  };
	  this.mql.addListener(this.listener);
	}
	MediaQuery.prototype = {
	  constuctor: MediaQuery,
	  /**
	   * add a handler for this query, triggering if already active
	   *
	   * @param {object} handler
	   * @param {function} handler.match callback for when query is activated
	   * @param {function} [handler.unmatch] callback for when query is deactivated
	   * @param {function} [handler.setup] callback for immediate execution when a query handler is registered
	   * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?
	   */
	  addHandler: function (handler) {
	    var qh = new QueryHandler(handler);
	    this.handlers.push(qh);
	    this.matches() && qh.on();
	  },
	  /**
	   * removes the given handler from the collection, and calls it's destroy methods
	   *
	   * @param {object || function} handler the handler to remove
	   */
	  removeHandler: function (handler) {
	    var handlers = this.handlers;
	    each(handlers, function (h, i) {
	      if (h.equals(handler)) {
	        h.destroy();
	        return !handlers.splice(i, 1); //remove from array and exit each early
	      }
	    });
	  },
	  /**
	   * Determine whether the media query should be considered a match
	   *
	   * @return {Boolean} true if media query can be considered a match, false otherwise
	   */
	  matches: function () {
	    return this.mql.matches || this.isUnconditional;
	  },
	  /**
	   * Clears all handlers and unbinds events
	   */
	  clear: function () {
	    each(this.handlers, function (handler) {
	      handler.destroy();
	    });
	    this.mql.removeListener(this.listener);
	    this.handlers.length = 0; //clear array
	  },
	  /*
	      * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match
	      */
	  assess: function () {
	    var action = this.matches() ? 'on' : 'off';
	    each(this.handlers, function (handler) {
	      handler[action]();
	    });
	  }
	};
	MediaQuery_1 = MediaQuery;
	return MediaQuery_1;
}

var MediaQueryDispatch_1;
var hasRequiredMediaQueryDispatch;

function requireMediaQueryDispatch () {
	if (hasRequiredMediaQueryDispatch) return MediaQueryDispatch_1;
	hasRequiredMediaQueryDispatch = 1;
	var MediaQuery = requireMediaQuery();
	var Util = requireUtil();
	var each = Util.each;
	var isFunction = Util.isFunction;
	var isArray = Util.isArray;

	/**
	 * Allows for registration of query handlers.
	 * Manages the query handler's state and is responsible for wiring up browser events
	 *
	 * @constructor
	 */
	function MediaQueryDispatch() {
	  if (!window.matchMedia) {
	    throw new Error('matchMedia not present, legacy browsers require a polyfill');
	  }
	  this.queries = {};
	  this.browserIsIncapable = !window.matchMedia('only all').matches;
	}
	MediaQueryDispatch.prototype = {
	  constructor: MediaQueryDispatch,
	  /**
	   * Registers a handler for the given media query
	   *
	   * @param {string} q the media query
	   * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers
	   * @param {function} options.match fired when query matched
	   * @param {function} [options.unmatch] fired when a query is no longer matched
	   * @param {function} [options.setup] fired when handler first triggered
	   * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched
	   * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers
	   */
	  register: function (q, options, shouldDegrade) {
	    var queries = this.queries,
	      isUnconditional = shouldDegrade && this.browserIsIncapable;
	    if (!queries[q]) {
	      queries[q] = new MediaQuery(q, isUnconditional);
	    }

	    //normalise to object in an array
	    if (isFunction(options)) {
	      options = {
	        match: options
	      };
	    }
	    if (!isArray(options)) {
	      options = [options];
	    }
	    each(options, function (handler) {
	      if (isFunction(handler)) {
	        handler = {
	          match: handler
	        };
	      }
	      queries[q].addHandler(handler);
	    });
	    return this;
	  },
	  /**
	   * unregisters a query and all it's handlers, or a specific handler for a query
	   *
	   * @param {string} q the media query to target
	   * @param {object || function} [handler] specific handler to unregister
	   */
	  unregister: function (q, handler) {
	    var query = this.queries[q];
	    if (query) {
	      if (handler) {
	        query.removeHandler(handler);
	      } else {
	        query.clear();
	        delete this.queries[q];
	      }
	    }
	    return this;
	  }
	};
	MediaQueryDispatch_1 = MediaQueryDispatch;
	return MediaQueryDispatch_1;
}

var src;
var hasRequiredSrc;

function requireSrc () {
	if (hasRequiredSrc) return src;
	hasRequiredSrc = 1;
	var MediaQueryDispatch = requireMediaQueryDispatch();
	src = new MediaQueryDispatch();
	return src;
}

(function (exports) {

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof(obj);
	}
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = void 0;
	var _react = _interopRequireDefault(React);
	var _innerSlider = innerSlider;
	var _json2mq = _interopRequireDefault(json2mq_1);
	var _defaultProps = _interopRequireDefault(defaultProps);
	var _innerSliderUtils = innerSliderUtils;
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}
	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }
	    return target;
	  };
	  return _extends.apply(this, arguments);
	}
	function ownKeys(object, enumerableOnly) {
	  var keys = Object.keys(object);
	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    enumerableOnly && (symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }
	  return keys;
	}
	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
	      _defineProperty(target, key, source[key]);
	    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
	      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	    });
	  }
	  return target;
	}
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}
	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }
	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  Object.defineProperty(subClass, "prototype", {
	    writable: false
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}
	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };
	  return _setPrototypeOf(o, p);
	}
	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();
	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf(Derived),
	      result;
	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf(this).constructor;
	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }
	    return _possibleConstructorReturn(this, result);
	  };
	}
	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
	    return call;
	  } else if (call !== void 0) {
	    throw new TypeError("Derived constructors may only return object or undefined");
	  }
	  return _assertThisInitialized(self);
	}
	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	  return self;
	}
	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;
	  try {
	    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}
	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}
	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}
	var enquire = (0, _innerSliderUtils.canUseDOM)() && requireSrc();
	var Slider = /*#__PURE__*/function (_React$Component) {
	  _inherits(Slider, _React$Component);
	  var _super = _createSuper(Slider);
	  function Slider(props) {
	    var _this;
	    _classCallCheck(this, Slider);
	    _this = _super.call(this, props);
	    _defineProperty(_assertThisInitialized(_this), "innerSliderRefHandler", function (ref) {
	      return _this.innerSlider = ref;
	    });
	    _defineProperty(_assertThisInitialized(_this), "slickPrev", function () {
	      return _this.innerSlider.slickPrev();
	    });
	    _defineProperty(_assertThisInitialized(_this), "slickNext", function () {
	      return _this.innerSlider.slickNext();
	    });
	    _defineProperty(_assertThisInitialized(_this), "slickGoTo", function (slide) {
	      var dontAnimate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	      return _this.innerSlider.slickGoTo(slide, dontAnimate);
	    });
	    _defineProperty(_assertThisInitialized(_this), "slickPause", function () {
	      return _this.innerSlider.pause("paused");
	    });
	    _defineProperty(_assertThisInitialized(_this), "slickPlay", function () {
	      return _this.innerSlider.autoPlay("play");
	    });
	    _this.state = {
	      breakpoint: null
	    };
	    _this._responsiveMediaHandlers = [];
	    return _this;
	  }
	  _createClass(Slider, [{
	    key: "media",
	    value: function media(query, handler) {
	      // javascript handler for  css media query
	      enquire.register(query, handler);
	      this._responsiveMediaHandlers.push({
	        query: query,
	        handler: handler
	      });
	    } // handles responsive breakpoints
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var _this2 = this;

	      // performance monitoring
	      //if (process.env.NODE_ENV !== 'production') {
	      //const { whyDidYouUpdate } = require('why-did-you-update')
	      //whyDidYouUpdate(React)
	      //}
	      if (this.props.responsive) {
	        var breakpoints = this.props.responsive.map(function (breakpt) {
	          return breakpt.breakpoint;
	        }); // sort them in increasing order of their numerical value

	        breakpoints.sort(function (x, y) {
	          return x - y;
	        });
	        breakpoints.forEach(function (breakpoint, index) {
	          // media query for each breakpoint
	          var bQuery;
	          if (index === 0) {
	            bQuery = (0, _json2mq["default"])({
	              minWidth: 0,
	              maxWidth: breakpoint
	            });
	          } else {
	            bQuery = (0, _json2mq["default"])({
	              minWidth: breakpoints[index - 1] + 1,
	              maxWidth: breakpoint
	            });
	          } // when not using server side rendering

	          (0, _innerSliderUtils.canUseDOM)() && _this2.media(bQuery, function () {
	            _this2.setState({
	              breakpoint: breakpoint
	            });
	          });
	        }); // Register media query for full screen. Need to support resize from small to large
	        // convert javascript object to media query string

	        var query = (0, _json2mq["default"])({
	          minWidth: breakpoints.slice(-1)[0]
	        });
	        (0, _innerSliderUtils.canUseDOM)() && this.media(query, function () {
	          _this2.setState({
	            breakpoint: null
	          });
	        });
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this._responsiveMediaHandlers.forEach(function (obj) {
	        enquire.unregister(obj.query, obj.handler);
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this3 = this;
	      var settings;
	      var newProps;
	      if (this.state.breakpoint) {
	        newProps = this.props.responsive.filter(function (resp) {
	          return resp.breakpoint === _this3.state.breakpoint;
	        });
	        settings = newProps[0].settings === "unslick" ? "unslick" : _objectSpread(_objectSpread(_objectSpread({}, _defaultProps["default"]), this.props), newProps[0].settings);
	      } else {
	        settings = _objectSpread(_objectSpread({}, _defaultProps["default"]), this.props);
	      } // force scrolling by one if centerMode is on

	      if (settings.centerMode) {
	        if (settings.slidesToScroll > 1 && process.env.NODE_ENV !== "production") {
	          console.warn("slidesToScroll should be equal to 1 in centerMode, you are using ".concat(settings.slidesToScroll));
	        }
	        settings.slidesToScroll = 1;
	      } // force showing one slide and scrolling by one if the fade mode is on

	      if (settings.fade) {
	        if (settings.slidesToShow > 1 && process.env.NODE_ENV !== "production") {
	          console.warn("slidesToShow should be equal to 1 when fade is true, you're using ".concat(settings.slidesToShow));
	        }
	        if (settings.slidesToScroll > 1 && process.env.NODE_ENV !== "production") {
	          console.warn("slidesToScroll should be equal to 1 when fade is true, you're using ".concat(settings.slidesToScroll));
	        }
	        settings.slidesToShow = 1;
	        settings.slidesToScroll = 1;
	      } // makes sure that children is an array, even when there is only 1 child

	      var children = _react["default"].Children.toArray(this.props.children); // Children may contain false or null, so we should filter them
	      // children may also contain string filled with spaces (in certain cases where we use jsx strings)

	      children = children.filter(function (child) {
	        if (typeof child === "string") {
	          return !!child.trim();
	        }
	        return !!child;
	      }); // rows and slidesPerRow logic is handled here

	      if (settings.variableWidth && (settings.rows > 1 || settings.slidesPerRow > 1)) {
	        console.warn("variableWidth is not supported in case of rows > 1 or slidesPerRow > 1");
	        settings.variableWidth = false;
	      }
	      var newChildren = [];
	      var currentWidth = null;
	      for (var i = 0; i < children.length; i += settings.rows * settings.slidesPerRow) {
	        var newSlide = [];
	        for (var j = i; j < i + settings.rows * settings.slidesPerRow; j += settings.slidesPerRow) {
	          var row = [];
	          for (var k = j; k < j + settings.slidesPerRow; k += 1) {
	            if (settings.variableWidth && children[k].props.style) {
	              currentWidth = children[k].props.style.width;
	            }
	            if (k >= children.length) break;
	            row.push(/*#__PURE__*/_react["default"].cloneElement(children[k], {
	              key: 100 * i + 10 * j + k,
	              tabIndex: -1,
	              style: {
	                width: "".concat(100 / settings.slidesPerRow, "%"),
	                display: "inline-block"
	              }
	            }));
	          }
	          newSlide.push(/*#__PURE__*/_react["default"].createElement("div", {
	            key: 10 * i + j
	          }, row));
	        }
	        if (settings.variableWidth) {
	          newChildren.push(/*#__PURE__*/_react["default"].createElement("div", {
	            key: i,
	            style: {
	              width: currentWidth
	            }
	          }, newSlide));
	        } else {
	          newChildren.push(/*#__PURE__*/_react["default"].createElement("div", {
	            key: i
	          }, newSlide));
	        }
	      }
	      if (settings === "unslick") {
	        var className = "regular slider " + (this.props.className || "");
	        return /*#__PURE__*/_react["default"].createElement("div", {
	          className: className
	        }, children);
	      } else if (newChildren.length <= settings.slidesToShow) {
	        settings.unslick = true;
	      }
	      return /*#__PURE__*/_react["default"].createElement(_innerSlider.InnerSlider, _extends({
	        style: this.props.style,
	        ref: this.innerSliderRefHandler
	      }, settings), newChildren);
	    }
	  }]);
	  return Slider;
	}(_react["default"].Component);
	exports["default"] = Slider; 
} (slider));

(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = void 0;
	var _slider = _interopRequireDefault(slider);
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}
	var _default = _slider["default"];
	exports["default"] = _default; 
} (lib));

var Slider = /*@__PURE__*/getDefaultExportFromCjs$1(lib);

var ArrowBackIos = {};

var createSvgIcon = {};

var require$$0 = /*@__PURE__*/getAugmentedNamespace(utils);

var hasRequiredCreateSvgIcon;

function requireCreateSvgIcon () {
	if (hasRequiredCreateSvgIcon) return createSvgIcon;
	hasRequiredCreateSvgIcon = 1;
	(function (exports) {
		'use client';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _utils.createSvgIcon;
		  }
		});
		var _utils = require$$0; 
	} (createSvgIcon));
	return createSvgIcon;
}

var _interopRequireDefault$1 = interopRequireDefaultExports;
Object.defineProperty(ArrowBackIos, "__esModule", {
  value: true
});
var default_1$1 = ArrowBackIos.default = void 0;
var _createSvgIcon$1 = _interopRequireDefault$1(requireCreateSvgIcon());
var _jsxRuntime$1 = require$$2$1;
default_1$1 = ArrowBackIos.default = (0, _createSvgIcon$1.default)(/*#__PURE__*/(0, _jsxRuntime$1.jsx)("path", {
  d: "M11.67 3.87 9.9 2.1 0 12l9.9 9.9 1.77-1.77L3.54 12z"
}), 'ArrowBackIos');

var ArrowForwardIos = {};

var _interopRequireDefault = interopRequireDefaultExports;
Object.defineProperty(ArrowForwardIos, "__esModule", {
  value: true
});
var default_1 = ArrowForwardIos.default = void 0;
var _createSvgIcon = _interopRequireDefault(requireCreateSvgIcon());
var _jsxRuntime = require$$2$1;
default_1 = ArrowForwardIos.default = (0, _createSvgIcon.default)(/*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
  d: "M6.23 20.23 8 22l10-10L8 2 6.23 3.77 14.46 12z"
}), 'ArrowForwardIos');

var css_248z$1 = ".vjs-svg-icon {\n  display: inline-block;\n  background-repeat: no-repeat;\n  background-position: center;\n  fill: currentColor;\n  height: 1.8em;\n  width: 1.8em;\n}\n.vjs-svg-icon:before {\n  content: none !important;\n}\n\n.vjs-svg-icon:hover,\n.vjs-control:focus .vjs-svg-icon {\n  filter: drop-shadow(0 0 0.25em #fff);\n}\n\n.vjs-modal-dialog .vjs-modal-dialog-content, .video-js .vjs-modal-dialog, .vjs-button > .vjs-icon-placeholder:before, .video-js .vjs-big-play-button .vjs-icon-placeholder:before {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.vjs-button > .vjs-icon-placeholder:before, .video-js .vjs-big-play-button .vjs-icon-placeholder:before {\n  text-align: center;\n}\n\n@font-face {\n  font-family: VideoJS;\n  src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAABTsAAsAAAAAIpAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAADsAAABUIIslek9TLzIAAAFEAAAAPgAAAFZRiV32Y21hcAAAAYQAAAEJAAAD5p42+VxnbHlmAAACkAAADtIAABckI4l972hlYWQAABFkAAAAKwAAADYsvIjpaGhlYQAAEZAAAAAdAAAAJA+RCL1obXR4AAARsAAAABcAAAC8Q2YAAGxvY2EAABHIAAAAYAAAAGB7CIGGbWF4cAAAEigAAAAfAAAAIAFAAI9uYW1lAAASSAAAASUAAAIK1cf1oHBvc3QAABNwAAABfAAAAnXdFqh1eJxjYGRgYOBiMGCwY2BycfMJYeDLSSzJY5BiYGGAAJA8MpsxJzM9kYEDxgPKsYBpDiBmg4gCACY7BUgAeJxjYGR7yDiBgZWBgaWQ5RkDA8MvCM0cwxDOeI6BgYmBlZkBKwhIc01hcPjI+FGPHcRdyA4RZgQRADaGCyYAAHic7dPXbcMwAEXRK1vuvffem749XAbKV3bjBA6fXsaIgMMLEWoQJaAEFKNnlELyQ4K27zib5PNF6vl8yld+TKr5kH0+cUw0xv00Hwvx2DResUyFKrV4XoMmLdp06NKjz4AhI8ZMmDJjzoIlK9Zs2LJjz4EjJ85cuHLjziPe/0UWL17mf2tqKLz/9jK9f8tXpGCoRdPKhtS0RqFkWvVQNtSKoVYNtWaoddPXEBqG2jQ9XWgZattQO4baNdSeofYNdWCoQ0MdGerYUCeGOjXUmaHODXVhqEtDXRnq2lA3hro11J2h7g31YKhHQz0Z6tlQL4Z6NdSbod4N9WGoT9MfHF6GmhnZLxyDcRMAAAB4nJ1YC1hU17U+a5/HMA4iA3NmVBDmoQwP5TFnHlFeA4gYiUFRQINoSCBAyK3G2yi+0aipYtFcHYo2xsb4NiY3+VrNxSaX5uvt495ozNdoYoxmem2/L8HGpLc+InB279pnhlGr5mvL4eyz99nrrL32eu1/DQcc/okdYgdHOA6MQKp4r9gx0EcMHMezOalVasW5BM7NcXoSb9fFgE6KtSSBxWz1FYDPG+vMBGcKb9cebu2VS5s2aaTkCvRSf6C7Y+Ppibm5E09v7IDs2/3uZQtbD0zIyppwoHXh/93ukmyYgdePNRp65p5v+3v/9otQl2O7wP34cT88p8Md2YxpYLQZoRcy6FlSBRnwnGAe6BPMSCZo+7NJVqS0cE4uHendzhSnbPH6TDqL1+Nme5LZXkCHnGyoH0kne30WH+gswhm3q+pt/mTas9NLS64GnjmSlTPw0wVQT/ewRaBgxtydy3cuUB9/6SW+vb5yRvr+t0eOfPKJZ/9t3+4tL7xj32Xd3thCxi+ge6ifdsAN+l5+wi5HQ/cCoeull1AszS7CUfEcJzK7sKWJAdJhCd0sPM4+EY7QDm5ov08hXRQXE5bf6PV5Q5+IjW7X7Nku92Ask4l2hCRRD6TPqISiCJeQna3SCFwrhrNzXHzo4yFevBwxpzxk8WCIIfkvVEKVy32SbT8n68gzgaslpaiO2zIGIyuSb7RNf9HSuN26y/7OC1tgEmpiyA6aD4qcgTOiLThwGG0eB694FI8NHLLN6OBlRVaMxNAFS4JdXUG6mW8PwpKuYLCLXKGbu8iwYNdgO06Sn3Th+/vyZAxs8Ro30DjHe9gy8Fywi24OMm7Qyzh3MTZVOMYhLBnoC+J79lpTUyQmorjhnMwlcQ5uPEYGpDjsOkkH49BjQLQBqs3jFtFdJNlksYmoQFDArLh8Xh+Qd6Ghcsb6FUuehDi+U/lqD71K/qiegeV1imcwjl7ExwiSrf4BZyCujV6cVcFo6VX+G9IcPyFjJnUufbU/jzrL1X99as36reXl8K32nFaOr+E8jWJEcJ55DpMVfSMe95/AJaOsGBH2GJCNpiRQbK4C8BjdmQA22QY2j03Em13i2YHqtNLU1NI04Yj2HJgA6fQc6VPNpA/D+Ryks554NnVy2mB72uRUfPLsqR4N0LOBQKArwJYO+5W2fgZX8oC1HR6HjNaQTVIG2FPwnTcXXGZZfNB7TE6pTKZUwaw91XWLAoFFGcnB5PHjsckgBjbWutrL+0h5Y1xw3DRGDumsnXb3MJwXrJIN5U7m0rgJ3yG5w4he5ckFG4pmNEkOm0/xOO4r4yL87wqtQM+hiJIVp+6iG2wPBKD35ElGkDx+UfC2v1mFG1o+M3AjNFty8biKMXwzyxnZLds8wYD2BxmCPHAldPOeLsy/0BugftYhVYFAhO8SqQ0j3oK7dHJZnI/jxmUS4onlxskSF8thmvNZjIrRZwEPxr0lBuLRuz3oy/FOHCsxwOPYh2M+e9u3J5pgPYz9gp6G7C9m0A11F9ddqKMfV+4sbq45/YspOysXvT+3pdFdYNg2fHbW8Dz301MqDVuGrz0Fuh0YMW8mddrpqzST7rV9BcvqPoNvadRndWp0p8HvbiqrFj5yFQ/vNFSXDpxpLEFWp+DcrF3FT1afWshFcmCfeAMjEvO65i0Y6XijQfSRPWx3TV/Df7Km3E1l+kLt56s/rwVzuRusNMhudznkwdLaS+QNdeal2jDPP4l9qHc98vTYZOSkxzD+njBWVWjFPKgipx6DkWvXQiW8OYcewVHE5yukinDMcfGgc0opDltYKDxIGBedkzc6jSfE7tlvESCDFUw0Hx0opS+U0lHCxNottbNWSxX9zZVvEhKWUSyBpaXwBc2a98M6UqPeXAs/GDon8Ax7hsthO8cM5HU7Ad0UvRR9lHmtyQKZ4MAe814X5h9MSUkQmhf96eVJ6p90OjIiqSIjvykvr2l5U55O/fPQKD+jIomYpNyGJQ25uQ2kIikRfAmuBHCPsWqkSDEqgZ5KDI2sifS/R43MbZg0idFHbCPNxXxZws1ACVE6hAhOdJwRkJLFBLPZpRGYJ50pko6XzMkgmSx40ljik6AQcKhFnLcQE6rF7PXFe1Ocoj0T3AXgSgJTDIhHRfHlYZKuSzc6uievOJGXY+i5GJkkTp7UM3y0LqATDbtFcbdBxO7o4T25JYlEjoH0uynUh8rapkxp62QN70svSF+hT4gGPlovlmcm/ComLi7mV4kTykV9NFWjE/QrwgQ4uIcAP0rQF4VZYRP2o3PhHHzfPMJj9Ir+uzKUlrH49ntT18AVvj1sc3YGjUT/Mt2Dxawa8ArcA7bCQIpvfwAYu22vEG/No/5RvPdA7g+AelLrPwzy+LtkLPhnpIxH14m4EYq8eeMHbPEPNm6G7Nv9B4jcFPZ8bJj0SEjP3MPgQdKTqqEoy2v6G32P/Y6dxOv04AxnoAeq+GILvUavtYCBXm+BaIhuodcfrN5B/V2EYMCPh+SxavjGyPwV0x4CJgUPGT0mQaODGBACIJZGsMXwAD0LGXx7l3CdAcKMIKI+f5CepWeD0BvyU/GcdBxPF8SwejC6LGZmAURFdsSWKR5HyHld2kbdIZO1Ixx+bnnzU7n5+blPNV9jnUDWhP2tC68tbN3PVIldsQPxSAcSpjOav7Q05uXn5zW2LLvDXn9B6syscPy9iDLEMmSrJz6nYuWMipukjM0AH8JkGS+XFyMRkzSCH7KD/hwm172SAyZYumHlefr5AddrtA0O0TnwaVZxcRY9Bfukn9Gf05N1r9DV9MoBsJ1f+ZrqUvtPHizJAntWybv7hmqLt6QLuK6ZS9Fqi1jO5rDoWPZXXII5Tgajg53cIXCjDCGIcYrRIY2n6+mXOa/W0bdhau3ryiEYe2FV/5oeaIYK/5w5frCyll6/cYO8DiNhw6t1MBWmznt91QX62UF1N7l0eHBZTRGpKaqpKVIPF9UcIzmReud9TSY75+K899GHbBu6wjoR7RKKZVYiYxSPf5/2wJT5e3NAhmUbVn5KLx1Ujg0+BGvpAIh0DezInTkzF37KVocxrKU3r1+XLtAe2lO3l66kfQfB/unKY+q8N375Ru8bc4pJXfEcESU95q+p8ZNZRTWH1d9FzvUdYXk5rLkcdkEisoKKVHQW/b3GEx6tPaYcoJfOr9wAbSBnv1IHpep0OExr4LPMkpJM+j7sly7UHkOzXjoAZljHCGiyegtNlwljM0v+c19ET9Pvst09a2Mtgcf5/ZSzYO5h1156+eyydfAsxGa9XAuF6vzjh6CssLq6ECysperXX0sX5h5ZdpZe3guxsGIPEtHk/aqXX1hVqP5HYVVVISkrrNqvXorIc+5Ou91Hnr/LcD2afi6eX7UBloOcs7cOpqgGaNfs1g7bNbs9z6wASaylN69d0/TFTIz6Ws8+oGV3mE2612wRTHKcVUbhjKadebloMc+dyXgMVtVK6BwMB/+mVW09igdRBWaRtNQX59d/VD//xdQ0TCiYNj1KT9sq6Wdu5WTbqk3qDXyDaLa1fv621LS01G3z61sD6lH8lAxDLicV921s6Bf92JOYvzNYCL1khbqBXEFUzC521N5NyzNaQIWhjyFyDoBIVrAjmv2UEaLlI+c6zw1jmVIPLLLZZUTj6GxGHW+mq1tgHXR2D85p4Q934+jLbtjVLcyCdS10NVzpHqxp4Q/hK7WopY/NRGx9HGsPGdFjOjcpjBnGYMVqY/4eqT5khWEHWUup2A/pTw7pdWgsWft7ETUERL96nRg0HNFPmCYba6pylECaExX89A9WLUOVB4oKLu/o1oqSYHCgLzBUlAz8hNFDRpeSU1XT+LRmDUgPaKbYdHDn9suF/tu13nHJij0N97LfS0QmqONuyONk7zvUI6Qa0pF9f2+oABL92AT6e0U//z9YqAiWtJLU1JK0gS+1aacwamiNqK067u9ZQ8f1d4qLodMzz3uL89Z68V/Hnr++hXWUuHgw8dfi972PeTyPefu3aNNucemQ74qFuIaJnVkOu4Q+yjuwmmC1FqZpl1i4uzoPxjkpPf3Xv545tl26Rr+dOvUd+omqJzch9dOeU7f10Y64nMcKK137DccIZq2WdXtdZjbEoLSzHwiMtrjYLDxpHQW8gjMX6XFYAE2zSWVD04EGYSs9MbO6sEo20BMEAB4mpvSypsKjZ4Stgzb+c3A9/MQT2+vrBy+qvyFxLUtLlSRF/Ri2wjfZ2dus2Q8lXx4608/jnqK5OOap6NY2PSjYYnECCjiEeLJll/pbmqfeIK+ps3+MxrlEhqmTPipVP7kqlF4VhpEb6r+Q7YOJg38kJ9SHBf3NBl6+9YchfbUjb5ahLSzUM3kPHmwFAsZ5rpai0S7E5xWzZ1j+fW7zsUWP2g5NXTw52ySCTrgG0+lbw60l2Y/CB185CoA8NK+tbRKxfjy6pm5hzQRRR+cMqv1Jbiw6STivtEvt3DRcy0QEh92JlUGo2PG4tSKHl00YD6xc8CK+YPYyy3io2lN8BcSjKRzrIV6ypOAobqxViJPaT9M9Hy5szY33mp7OX/Zu89L/7Ww5vqY2Y8b0pKgoiUhG5cPDPzq8qTV/WkzUOIvXVVA96kmjcBrr3HrYC/Wn+fYP6Z7T1rqy3zknbvqma/FvVk96fNXGkuaXrdHW5JGSxZT/2I/O73v+yNWafMdzc5NdxYurHs6h86e01sLKLz9EBrg+x36rxAaED7hRnAMx7Vzu+9wabh3zG8XLQjx0ablUJzmxdErxYT3kzQSd0SSafVqF5PXgpp0OyYJ1EyNHpGUZmvK575ySzd85JSqF7IBzSAbMM04+MbE58xF3/njXOGecSaermlw2y9PsSQdytLJVr8t+wg+rR8cZYoeNxVIzNdk3Bngi8U5LAlgTFoQnzJCa5EsCgYhCaGL+qPj7TdhG31p9tej3R04N//PXxNwJvyUqwaJqRPJY98TJ5TPndmflRAkAhBfe46sfKW5wizSge08Xb7Ca/GUVs55trngkKkrUS2WPzKttaaqq+idmahugkY+W6fN0I6i3gPt/x88U4wAAeJxjYGRgYADiGU9YXsXz23xl4GZnAIFH7fO+IdMc/WBxDgYmEAUASbMKwAB4nGNgZGBgZwABjj4Ghv//OfoZGBlQgT4ARicDZAAAAHicY2BgYGAfxJijD8Fmu4EqBwCSpgKpAAAAAAAADgBoAH4AzADgAQIBQgFsAZgB7gIuAooC0AL8A2IDjAOoA+AEMASwBNoFCAVaBcAGCAYuBnAGrAb2B04HigfSCCoIcAiGCJwIyAkkCVYJiAmsCfIKIApWCsQLknicY2BkYGDQZ2hmYGcAASYg5gJCBob/YD4DABqrAdAAeJxdkE1qg0AYhl8Tk9AIoVDaVSmzahcF87PMARLIMoFAl0ZHY1BHdBJIT9AT9AQ9RQ9Qeqy+yteNMzDzfM+88w0K4BY/cNAMB6N2bUaPPBLukybCLvleeAAPj8JD+hfhMV7hC3u4wxs7OO4NzQSZcI/8Ltwnfwi75E/hAR7wJTyk/xYeY49fYQ/PztM+jbTZ7LY6OWdBJdX/pqs6NYWa+zMxa13oKrA6Uoerqi/JwtpYxZXJ1coUVmeZUWVlTjq0/tHacjmdxuL90OR8O0UEDYMNdtiSEpz5XQGqzlm30kzUdAYFFOb8R7NOZk0q2lwAyz1i7oAr1xoXvrOgtYhZx8wY5KRV269JZ5yGpmzPTjQhvY9je6vEElPOuJP3mWKnP5M3V+YAAAB4nG2ReVPbMBDF/ULi2EkDBFqO3gdHLxUzDB9IkdexBllydRD49ihO3Ckz7B/a31utZnafkkGyiXnyclxhgB0MMUKKMTLkmGCKV5hhF3vYxxwHOMRrvMERjnGCU7zFO7zHB3zEJ3zGF3zFN5zhHBe4xHf8wE/8wm8w/MEVimTYKv44XR9MSCsUjVoeHE3vjQoNsSZ4mmxZmVWPjSz7jlou6/0qKOWEJdKMtCe793/hQfqxa6XWZHMXFl56RS4TvPXSaDeoy0zUUZB109KstDK8lHo5q6Qi1hcOnqkImubPS6aqRq7mlnaEWabub4iYblba3SRmgldS0+FWdhNtt04F14JUaqkl7tcpOpJtErvNt3Bd9HRT5JWxK25Ldjvp6br4hzfFiIdSmlzTg2fSUzNrLd1LE1ynxq4OVaVoKLjzJ60UPtj1RKzHzsbjly6inVnFBS2MucviPncU7Rr7lfTxRepDs1A2j3ZHRc7PuzFYSfE3ZOd4kjwBy227hA==) format(\"woff\");\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-play, .video-js .vjs-play-control .vjs-icon-placeholder, .video-js .vjs-big-play-button .vjs-icon-placeholder:before {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-play:before, .video-js .vjs-play-control .vjs-icon-placeholder:before, .video-js .vjs-big-play-button .vjs-icon-placeholder:before {\n  content: \"\\f101\";\n}\n\n.vjs-icon-play-circle {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-play-circle:before {\n  content: \"\\f102\";\n}\n\n.vjs-icon-pause, .video-js .vjs-play-control.vjs-playing .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-pause:before, .video-js .vjs-play-control.vjs-playing .vjs-icon-placeholder:before {\n  content: \"\\f103\";\n}\n\n.vjs-icon-volume-mute, .video-js .vjs-mute-control.vjs-vol-0 .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-volume-mute:before, .video-js .vjs-mute-control.vjs-vol-0 .vjs-icon-placeholder:before {\n  content: \"\\f104\";\n}\n\n.vjs-icon-volume-low, .video-js .vjs-mute-control.vjs-vol-1 .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-volume-low:before, .video-js .vjs-mute-control.vjs-vol-1 .vjs-icon-placeholder:before {\n  content: \"\\f105\";\n}\n\n.vjs-icon-volume-mid, .video-js .vjs-mute-control.vjs-vol-2 .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-volume-mid:before, .video-js .vjs-mute-control.vjs-vol-2 .vjs-icon-placeholder:before {\n  content: \"\\f106\";\n}\n\n.vjs-icon-volume-high, .video-js .vjs-mute-control .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-volume-high:before, .video-js .vjs-mute-control .vjs-icon-placeholder:before {\n  content: \"\\f107\";\n}\n\n.vjs-icon-fullscreen-enter, .video-js .vjs-fullscreen-control .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-fullscreen-enter:before, .video-js .vjs-fullscreen-control .vjs-icon-placeholder:before {\n  content: \"\\f108\";\n}\n\n.vjs-icon-fullscreen-exit, .video-js.vjs-fullscreen .vjs-fullscreen-control .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-fullscreen-exit:before, .video-js.vjs-fullscreen .vjs-fullscreen-control .vjs-icon-placeholder:before {\n  content: \"\\f109\";\n}\n\n.vjs-icon-spinner {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-spinner:before {\n  content: \"\\f10a\";\n}\n\n.vjs-icon-subtitles, .video-js .vjs-subs-caps-button .vjs-icon-placeholder,\n.video-js.video-js:lang(en-GB) .vjs-subs-caps-button .vjs-icon-placeholder,\n.video-js.video-js:lang(en-IE) .vjs-subs-caps-button .vjs-icon-placeholder,\n.video-js.video-js:lang(en-AU) .vjs-subs-caps-button .vjs-icon-placeholder,\n.video-js.video-js:lang(en-NZ) .vjs-subs-caps-button .vjs-icon-placeholder, .video-js .vjs-subtitles-button .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-subtitles:before, .video-js .vjs-subs-caps-button .vjs-icon-placeholder:before,\n.video-js.video-js:lang(en-GB) .vjs-subs-caps-button .vjs-icon-placeholder:before,\n.video-js.video-js:lang(en-IE) .vjs-subs-caps-button .vjs-icon-placeholder:before,\n.video-js.video-js:lang(en-AU) .vjs-subs-caps-button .vjs-icon-placeholder:before,\n.video-js.video-js:lang(en-NZ) .vjs-subs-caps-button .vjs-icon-placeholder:before, .video-js .vjs-subtitles-button .vjs-icon-placeholder:before {\n  content: \"\\f10b\";\n}\n\n.vjs-icon-captions, .video-js:lang(en) .vjs-subs-caps-button .vjs-icon-placeholder,\n.video-js:lang(fr-CA) .vjs-subs-caps-button .vjs-icon-placeholder, .video-js .vjs-captions-button .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-captions:before, .video-js:lang(en) .vjs-subs-caps-button .vjs-icon-placeholder:before,\n.video-js:lang(fr-CA) .vjs-subs-caps-button .vjs-icon-placeholder:before, .video-js .vjs-captions-button .vjs-icon-placeholder:before {\n  content: \"\\f10c\";\n}\n\n.vjs-icon-hd {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-hd:before {\n  content: \"\\f10d\";\n}\n\n.vjs-icon-chapters, .video-js .vjs-chapters-button .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-chapters:before, .video-js .vjs-chapters-button .vjs-icon-placeholder:before {\n  content: \"\\f10e\";\n}\n\n.vjs-icon-downloading {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-downloading:before {\n  content: \"\\f10f\";\n}\n\n.vjs-icon-file-download {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-file-download:before {\n  content: \"\\f110\";\n}\n\n.vjs-icon-file-download-done {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-file-download-done:before {\n  content: \"\\f111\";\n}\n\n.vjs-icon-file-download-off {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-file-download-off:before {\n  content: \"\\f112\";\n}\n\n.vjs-icon-share {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-share:before {\n  content: \"\\f113\";\n}\n\n.vjs-icon-cog {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-cog:before {\n  content: \"\\f114\";\n}\n\n.vjs-icon-square {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-square:before {\n  content: \"\\f115\";\n}\n\n.vjs-icon-circle, .vjs-seek-to-live-control .vjs-icon-placeholder, .video-js .vjs-volume-level, .video-js .vjs-play-progress {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-circle:before, .vjs-seek-to-live-control .vjs-icon-placeholder:before, .video-js .vjs-volume-level:before, .video-js .vjs-play-progress:before {\n  content: \"\\f116\";\n}\n\n.vjs-icon-circle-outline {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-circle-outline:before {\n  content: \"\\f117\";\n}\n\n.vjs-icon-circle-inner-circle {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-circle-inner-circle:before {\n  content: \"\\f118\";\n}\n\n.vjs-icon-cancel, .video-js .vjs-control.vjs-close-button .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-cancel:before, .video-js .vjs-control.vjs-close-button .vjs-icon-placeholder:before {\n  content: \"\\f119\";\n}\n\n.vjs-icon-repeat {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-repeat:before {\n  content: \"\\f11a\";\n}\n\n.vjs-icon-replay, .video-js .vjs-play-control.vjs-ended .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-replay:before, .video-js .vjs-play-control.vjs-ended .vjs-icon-placeholder:before {\n  content: \"\\f11b\";\n}\n\n.vjs-icon-replay-5, .video-js .vjs-skip-backward-5 .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-replay-5:before, .video-js .vjs-skip-backward-5 .vjs-icon-placeholder:before {\n  content: \"\\f11c\";\n}\n\n.vjs-icon-replay-10, .video-js .vjs-skip-backward-10 .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-replay-10:before, .video-js .vjs-skip-backward-10 .vjs-icon-placeholder:before {\n  content: \"\\f11d\";\n}\n\n.vjs-icon-replay-30, .video-js .vjs-skip-backward-30 .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-replay-30:before, .video-js .vjs-skip-backward-30 .vjs-icon-placeholder:before {\n  content: \"\\f11e\";\n}\n\n.vjs-icon-forward-5, .video-js .vjs-skip-forward-5 .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-forward-5:before, .video-js .vjs-skip-forward-5 .vjs-icon-placeholder:before {\n  content: \"\\f11f\";\n}\n\n.vjs-icon-forward-10, .video-js .vjs-skip-forward-10 .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-forward-10:before, .video-js .vjs-skip-forward-10 .vjs-icon-placeholder:before {\n  content: \"\\f120\";\n}\n\n.vjs-icon-forward-30, .video-js .vjs-skip-forward-30 .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-forward-30:before, .video-js .vjs-skip-forward-30 .vjs-icon-placeholder:before {\n  content: \"\\f121\";\n}\n\n.vjs-icon-audio, .video-js .vjs-audio-button .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-audio:before, .video-js .vjs-audio-button .vjs-icon-placeholder:before {\n  content: \"\\f122\";\n}\n\n.vjs-icon-next-item {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-next-item:before {\n  content: \"\\f123\";\n}\n\n.vjs-icon-previous-item {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-previous-item:before {\n  content: \"\\f124\";\n}\n\n.vjs-icon-shuffle {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-shuffle:before {\n  content: \"\\f125\";\n}\n\n.vjs-icon-cast {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-cast:before {\n  content: \"\\f126\";\n}\n\n.vjs-icon-picture-in-picture-enter, .video-js .vjs-picture-in-picture-control .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-picture-in-picture-enter:before, .video-js .vjs-picture-in-picture-control .vjs-icon-placeholder:before {\n  content: \"\\f127\";\n}\n\n.vjs-icon-picture-in-picture-exit, .video-js.vjs-picture-in-picture .vjs-picture-in-picture-control .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-picture-in-picture-exit:before, .video-js.vjs-picture-in-picture .vjs-picture-in-picture-control .vjs-icon-placeholder:before {\n  content: \"\\f128\";\n}\n\n.vjs-icon-facebook {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-facebook:before {\n  content: \"\\f129\";\n}\n\n.vjs-icon-linkedin {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-linkedin:before {\n  content: \"\\f12a\";\n}\n\n.vjs-icon-twitter {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-twitter:before {\n  content: \"\\f12b\";\n}\n\n.vjs-icon-tumblr {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-tumblr:before {\n  content: \"\\f12c\";\n}\n\n.vjs-icon-pinterest {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-pinterest:before {\n  content: \"\\f12d\";\n}\n\n.vjs-icon-audio-description, .video-js .vjs-descriptions-button .vjs-icon-placeholder {\n  font-family: VideoJS;\n  font-weight: normal;\n  font-style: normal;\n}\n.vjs-icon-audio-description:before, .video-js .vjs-descriptions-button .vjs-icon-placeholder:before {\n  content: \"\\f12e\";\n}\n\n.video-js {\n  display: inline-block;\n  vertical-align: top;\n  box-sizing: border-box;\n  color: #fff;\n  background-color: #000;\n  position: relative;\n  padding: 0;\n  font-size: 10px;\n  line-height: 1;\n  font-weight: normal;\n  font-style: normal;\n  font-family: Arial, Helvetica, sans-serif;\n  word-break: initial;\n}\n.video-js:-moz-full-screen {\n  position: absolute;\n}\n.video-js:-webkit-full-screen {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.video-js[tabindex=\"-1\"] {\n  outline: none;\n}\n\n.video-js *,\n.video-js *:before,\n.video-js *:after {\n  box-sizing: inherit;\n}\n\n.video-js ul {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n  list-style-position: outside;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.video-js.vjs-fluid,\n.video-js.vjs-16-9,\n.video-js.vjs-4-3,\n.video-js.vjs-9-16,\n.video-js.vjs-1-1 {\n  width: 100%;\n  max-width: 100%;\n}\n\n.video-js.vjs-fluid:not(.vjs-audio-only-mode),\n.video-js.vjs-16-9:not(.vjs-audio-only-mode),\n.video-js.vjs-4-3:not(.vjs-audio-only-mode),\n.video-js.vjs-9-16:not(.vjs-audio-only-mode),\n.video-js.vjs-1-1:not(.vjs-audio-only-mode) {\n  height: 0;\n}\n\n.video-js.vjs-16-9:not(.vjs-audio-only-mode) {\n  padding-top: 56.25%;\n}\n\n.video-js.vjs-4-3:not(.vjs-audio-only-mode) {\n  padding-top: 75%;\n}\n\n.video-js.vjs-9-16:not(.vjs-audio-only-mode) {\n  padding-top: 177.7777777778%;\n}\n\n.video-js.vjs-1-1:not(.vjs-audio-only-mode) {\n  padding-top: 100%;\n}\n\n.video-js.vjs-fill:not(.vjs-audio-only-mode) {\n  width: 100%;\n  height: 100%;\n}\n\n.video-js .vjs-tech {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.video-js.vjs-audio-only-mode .vjs-tech {\n  display: none;\n}\n\nbody.vjs-full-window,\nbody.vjs-pip-window {\n  padding: 0;\n  margin: 0;\n  height: 100%;\n}\n\n.vjs-full-window .video-js.vjs-fullscreen,\nbody.vjs-pip-window .video-js {\n  position: fixed;\n  overflow: hidden;\n  z-index: 1000;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n}\n\n.video-js.vjs-fullscreen:not(.vjs-ios-native-fs),\nbody.vjs-pip-window .video-js {\n  width: 100% !important;\n  height: 100% !important;\n  padding-top: 0 !important;\n  display: block;\n}\n\n.video-js.vjs-fullscreen.vjs-user-inactive {\n  cursor: none;\n}\n\n.vjs-pip-container .vjs-pip-text {\n  position: absolute;\n  bottom: 10%;\n  font-size: 2em;\n  background-color: rgba(0, 0, 0, 0.7);\n  padding: 0.5em;\n  text-align: center;\n  width: 100%;\n}\n\n.vjs-layout-tiny.vjs-pip-container .vjs-pip-text,\n.vjs-layout-x-small.vjs-pip-container .vjs-pip-text,\n.vjs-layout-small.vjs-pip-container .vjs-pip-text {\n  bottom: 0;\n  font-size: 1.4em;\n}\n\n.vjs-hidden {\n  display: none !important;\n}\n\n.vjs-disabled {\n  opacity: 0.5;\n  cursor: default;\n}\n\n.video-js .vjs-offscreen {\n  height: 1px;\n  left: -9999px;\n  position: absolute;\n  top: 0;\n  width: 1px;\n}\n\n.vjs-lock-showing {\n  display: block !important;\n  opacity: 1 !important;\n  visibility: visible !important;\n}\n\n.vjs-no-js {\n  padding: 20px;\n  color: #fff;\n  background-color: #000;\n  font-size: 18px;\n  font-family: Arial, Helvetica, sans-serif;\n  text-align: center;\n  width: 300px;\n  height: 150px;\n  margin: 0px auto;\n}\n\n.vjs-no-js a,\n.vjs-no-js a:visited {\n  color: #66A8CC;\n}\n\n.video-js .vjs-big-play-button {\n  font-size: 3em;\n  line-height: 1.5em;\n  height: 1.63332em;\n  width: 3em;\n  display: block;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  padding: 0;\n  margin-top: -0.81666em;\n  margin-left: -1.5em;\n  cursor: pointer;\n  opacity: 1;\n  border: 0.06666em solid #fff;\n  background-color: #2B333F;\n  background-color: rgba(43, 51, 63, 0.7);\n  border-radius: 0.3em;\n  transition: all 0.4s;\n}\n.vjs-big-play-button .vjs-svg-icon {\n  width: 1em;\n  height: 1em;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  line-height: 1;\n  transform: translate(-50%, -50%);\n}\n\n.video-js:hover .vjs-big-play-button,\n.video-js .vjs-big-play-button:focus {\n  border-color: #fff;\n  background-color: #73859f;\n  background-color: rgba(115, 133, 159, 0.5);\n  transition: all 0s;\n}\n\n.vjs-controls-disabled .vjs-big-play-button,\n.vjs-has-started .vjs-big-play-button,\n.vjs-using-native-controls .vjs-big-play-button,\n.vjs-error .vjs-big-play-button {\n  display: none;\n}\n\n.vjs-has-started.vjs-paused.vjs-show-big-play-button-on-pause:not(.vjs-seeking, .vjs-scrubbing, .vjs-error) .vjs-big-play-button {\n  display: block;\n}\n\n.video-js button {\n  background: none;\n  border: none;\n  color: inherit;\n  display: inline-block;\n  font-size: inherit;\n  line-height: inherit;\n  text-transform: none;\n  text-decoration: none;\n  transition: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n       appearance: none;\n}\n\n.video-js.vjs-spatial-navigation-enabled .vjs-button:focus {\n  outline: 0.0625em solid white;\n  box-shadow: none;\n}\n\n.vjs-control .vjs-button {\n  width: 100%;\n  height: 100%;\n}\n\n.video-js .vjs-control.vjs-close-button {\n  cursor: pointer;\n  height: 3em;\n  position: absolute;\n  right: 0;\n  top: 0.5em;\n  z-index: 2;\n}\n.video-js .vjs-modal-dialog {\n  background: rgba(0, 0, 0, 0.8);\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0.8), rgba(255, 255, 255, 0));\n  overflow: auto;\n}\n\n.video-js .vjs-modal-dialog > * {\n  box-sizing: border-box;\n}\n\n.vjs-modal-dialog .vjs-modal-dialog-content {\n  font-size: 1.2em;\n  line-height: 1.5;\n  padding: 20px 24px;\n  z-index: 1;\n}\n\n.vjs-menu-button {\n  cursor: pointer;\n}\n\n.vjs-menu-button.vjs-disabled {\n  cursor: default;\n}\n\n.vjs-workinghover .vjs-menu-button.vjs-disabled:hover .vjs-menu {\n  display: none;\n}\n\n.vjs-menu .vjs-menu-content {\n  display: block;\n  padding: 0;\n  margin: 0;\n  font-family: Arial, Helvetica, sans-serif;\n  overflow: auto;\n}\n\n.vjs-menu .vjs-menu-content > * {\n  box-sizing: border-box;\n}\n\n.vjs-scrubbing .vjs-control.vjs-menu-button:hover .vjs-menu {\n  display: none;\n}\n\n.vjs-menu li {\n  display: flex;\n  justify-content: center;\n  list-style: none;\n  margin: 0;\n  padding: 0.2em 0;\n  line-height: 1.4em;\n  font-size: 1.2em;\n  text-align: center;\n  text-transform: lowercase;\n}\n\n.vjs-menu li.vjs-menu-item:focus,\n.vjs-menu li.vjs-menu-item:hover,\n.js-focus-visible .vjs-menu li.vjs-menu-item:hover {\n  background-color: #73859f;\n  background-color: rgba(115, 133, 159, 0.5);\n}\n\n.vjs-menu li.vjs-selected,\n.vjs-menu li.vjs-selected:focus,\n.vjs-menu li.vjs-selected:hover,\n.js-focus-visible .vjs-menu li.vjs-selected:hover {\n  background-color: #fff;\n  color: #2B333F;\n}\n.vjs-menu li.vjs-selected .vjs-svg-icon,\n.vjs-menu li.vjs-selected:focus .vjs-svg-icon,\n.vjs-menu li.vjs-selected:hover .vjs-svg-icon,\n.js-focus-visible .vjs-menu li.vjs-selected:hover .vjs-svg-icon {\n  fill: #000000;\n}\n\n.video-js .vjs-menu *:not(.vjs-selected):focus:not(:focus-visible),\n.js-focus-visible .vjs-menu *:not(.vjs-selected):focus:not(.focus-visible) {\n  background: none;\n}\n\n.vjs-menu li.vjs-menu-title {\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 1em;\n  line-height: 2em;\n  padding: 0;\n  margin: 0 0 0.3em 0;\n  font-weight: bold;\n  cursor: default;\n}\n\n.vjs-menu-button-popup .vjs-menu {\n  display: none;\n  position: absolute;\n  bottom: 0;\n  width: 10em;\n  left: -3em;\n  height: 0em;\n  margin-bottom: 1.5em;\n  border-top-color: rgba(43, 51, 63, 0.7);\n}\n\n.vjs-pip-window .vjs-menu-button-popup .vjs-menu {\n  left: unset;\n  right: 1em;\n}\n\n.vjs-menu-button-popup .vjs-menu .vjs-menu-content {\n  background-color: #2B333F;\n  background-color: rgba(43, 51, 63, 0.7);\n  position: absolute;\n  width: 100%;\n  bottom: 1.5em;\n  max-height: 15em;\n}\n\n.vjs-layout-tiny .vjs-menu-button-popup .vjs-menu .vjs-menu-content,\n.vjs-layout-x-small .vjs-menu-button-popup .vjs-menu .vjs-menu-content {\n  max-height: 5em;\n}\n\n.vjs-layout-small .vjs-menu-button-popup .vjs-menu .vjs-menu-content {\n  max-height: 10em;\n}\n\n.vjs-layout-medium .vjs-menu-button-popup .vjs-menu .vjs-menu-content {\n  max-height: 14em;\n}\n\n.vjs-layout-large .vjs-menu-button-popup .vjs-menu .vjs-menu-content,\n.vjs-layout-x-large .vjs-menu-button-popup .vjs-menu .vjs-menu-content,\n.vjs-layout-huge .vjs-menu-button-popup .vjs-menu .vjs-menu-content {\n  max-height: 25em;\n}\n\n.vjs-workinghover .vjs-menu-button-popup.vjs-hover .vjs-menu,\n.vjs-menu-button-popup .vjs-menu.vjs-lock-showing {\n  display: block;\n}\n\n.video-js .vjs-menu-button-inline {\n  transition: all 0.4s;\n  overflow: hidden;\n}\n\n.video-js .vjs-menu-button-inline:before {\n  width: 2.222222222em;\n}\n\n.video-js .vjs-menu-button-inline:hover,\n.video-js .vjs-menu-button-inline:focus,\n.video-js .vjs-menu-button-inline.vjs-slider-active {\n  width: 12em;\n}\n\n.vjs-menu-button-inline .vjs-menu {\n  opacity: 0;\n  height: 100%;\n  width: auto;\n  position: absolute;\n  left: 4em;\n  top: 0;\n  padding: 0;\n  margin: 0;\n  transition: all 0.4s;\n}\n\n.vjs-menu-button-inline:hover .vjs-menu,\n.vjs-menu-button-inline:focus .vjs-menu,\n.vjs-menu-button-inline.vjs-slider-active .vjs-menu {\n  display: block;\n  opacity: 1;\n}\n\n.vjs-menu-button-inline .vjs-menu-content {\n  width: auto;\n  height: 100%;\n  margin: 0;\n  overflow: hidden;\n}\n\n.video-js .vjs-control-bar {\n  display: none;\n  width: 100%;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 3em;\n  background-color: #2B333F;\n  background-color: rgba(43, 51, 63, 0.7);\n}\n\n.video-js.vjs-spatial-navigation-enabled .vjs-control-bar {\n  gap: 1px;\n}\n\n.video-js:not(.vjs-controls-disabled, .vjs-using-native-controls, .vjs-error) .vjs-control-bar.vjs-lock-showing {\n  display: flex !important;\n}\n\n.vjs-has-started .vjs-control-bar,\n.vjs-audio-only-mode .vjs-control-bar {\n  display: flex;\n  visibility: visible;\n  opacity: 1;\n  transition: visibility 0.1s, opacity 0.1s;\n}\n\n.vjs-has-started.vjs-user-inactive.vjs-playing .vjs-control-bar {\n  visibility: visible;\n  opacity: 0;\n  pointer-events: none;\n  transition: visibility 1s, opacity 1s;\n}\n\n.vjs-controls-disabled .vjs-control-bar,\n.vjs-using-native-controls .vjs-control-bar,\n.vjs-error .vjs-control-bar {\n  display: none !important;\n}\n\n.vjs-audio.vjs-has-started.vjs-user-inactive.vjs-playing .vjs-control-bar,\n.vjs-audio-only-mode.vjs-has-started.vjs-user-inactive.vjs-playing .vjs-control-bar {\n  opacity: 1;\n  visibility: visible;\n  pointer-events: auto;\n}\n\n.video-js .vjs-control {\n  position: relative;\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  height: 100%;\n  width: 4em;\n  flex: none;\n}\n\n.video-js .vjs-control.vjs-visible-text {\n  width: auto;\n  padding-left: 1em;\n  padding-right: 1em;\n}\n\n.vjs-button > .vjs-icon-placeholder:before {\n  font-size: 1.8em;\n  line-height: 1.67;\n}\n\n.vjs-button > .vjs-icon-placeholder {\n  display: block;\n}\n\n.vjs-button > .vjs-svg-icon {\n  display: inline-block;\n}\n\n.video-js .vjs-control:focus:before,\n.video-js .vjs-control:hover:before,\n.video-js .vjs-control:focus {\n  text-shadow: 0em 0em 1em white;\n}\n\n.video-js *:not(.vjs-visible-text) > .vjs-control-text {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.video-js .vjs-custom-control-spacer {\n  display: none;\n}\n\n.video-js .vjs-progress-control {\n  cursor: pointer;\n  flex: auto;\n  display: flex;\n  align-items: center;\n  min-width: 4em;\n  touch-action: none;\n}\n\n.video-js .vjs-progress-control.disabled {\n  cursor: default;\n}\n\n.vjs-live .vjs-progress-control {\n  display: none;\n}\n\n.vjs-liveui .vjs-progress-control {\n  display: flex;\n  align-items: center;\n}\n\n.video-js .vjs-progress-holder {\n  flex: auto;\n  transition: all 0.2s;\n  height: 0.3em;\n}\n\n.video-js .vjs-progress-control .vjs-progress-holder {\n  margin: 0 10px;\n}\n\n.video-js .vjs-progress-control:hover .vjs-progress-holder,\n.video-js.vjs-scrubbing.vjs-touch-enabled .vjs-progress-control .vjs-progress-holder {\n  font-size: 1.6666666667em;\n}\n\n.video-js .vjs-progress-control:hover .vjs-progress-holder.disabled {\n  font-size: 1em;\n}\n\n.video-js .vjs-progress-holder .vjs-play-progress,\n.video-js .vjs-progress-holder .vjs-load-progress,\n.video-js .vjs-progress-holder .vjs-load-progress div {\n  position: absolute;\n  display: block;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  width: 0;\n}\n\n.video-js .vjs-play-progress {\n  background-color: #fff;\n}\n.video-js .vjs-play-progress:before {\n  font-size: 0.9em;\n  position: absolute;\n  right: -0.5em;\n  line-height: 0.35em;\n  z-index: 1;\n}\n\n.vjs-svg-icons-enabled .vjs-play-progress:before {\n  content: none !important;\n}\n\n.vjs-play-progress .vjs-svg-icon {\n  position: absolute;\n  top: -0.35em;\n  right: -0.4em;\n  width: 0.9em;\n  height: 0.9em;\n  pointer-events: none;\n  line-height: 0.15em;\n  z-index: 1;\n}\n\n.video-js .vjs-load-progress {\n  background: rgba(115, 133, 159, 0.5);\n}\n\n.video-js .vjs-load-progress div {\n  background: rgba(115, 133, 159, 0.75);\n}\n\n.video-js .vjs-time-tooltip {\n  background-color: #fff;\n  background-color: rgba(255, 255, 255, 0.8);\n  border-radius: 0.3em;\n  color: #000;\n  float: right;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1em;\n  padding: 6px 8px 8px 8px;\n  pointer-events: none;\n  position: absolute;\n  top: -3.4em;\n  visibility: hidden;\n  z-index: 1;\n}\n\n.video-js .vjs-progress-holder:focus .vjs-time-tooltip {\n  display: none;\n}\n\n.video-js .vjs-progress-control:hover .vjs-time-tooltip,\n.video-js .vjs-progress-control:hover .vjs-progress-holder:focus .vjs-time-tooltip,\n.video-js.vjs-scrubbing.vjs-touch-enabled .vjs-progress-control .vjs-time-tooltip {\n  display: block;\n  font-size: 0.6em;\n  visibility: visible;\n}\n\n.video-js .vjs-progress-control.disabled:hover .vjs-time-tooltip {\n  font-size: 1em;\n}\n\n.video-js .vjs-progress-control .vjs-mouse-display {\n  display: none;\n  position: absolute;\n  width: 1px;\n  height: 100%;\n  background-color: #000;\n  z-index: 1;\n}\n\n.video-js .vjs-progress-control:hover .vjs-mouse-display {\n  display: block;\n}\n\n.video-js.vjs-scrubbing.vjs-touch-enabled .vjs-progress-control .vjs-mouse-display {\n  display: block;\n}\n\n.video-js.vjs-user-inactive .vjs-progress-control .vjs-mouse-display {\n  visibility: hidden;\n  opacity: 0;\n  transition: visibility 1s, opacity 1s;\n}\n\n.vjs-mouse-display .vjs-time-tooltip {\n  color: #fff;\n  background-color: #000;\n  background-color: rgba(0, 0, 0, 0.8);\n}\n\n.video-js .vjs-slider {\n  position: relative;\n  cursor: pointer;\n  padding: 0;\n  margin: 0 0.45em 0 0.45em;\n  /* iOS Safari */\n  -webkit-touch-callout: none;\n  /* Safari, and Chrome 53 */\n  -webkit-user-select: none;\n  /* Non-prefixed version, currently supported by Chrome and Opera */\n  -moz-user-select: none;\n       user-select: none;\n  background-color: #73859f;\n  background-color: rgba(115, 133, 159, 0.5);\n}\n\n.video-js .vjs-slider.disabled {\n  cursor: default;\n}\n\n.video-js .vjs-slider:focus {\n  text-shadow: 0em 0em 1em white;\n  box-shadow: 0 0 1em #fff;\n}\n\n.video-js.vjs-spatial-navigation-enabled .vjs-slider:focus {\n  outline: 0.0625em solid white;\n}\n\n.video-js .vjs-mute-control {\n  cursor: pointer;\n  flex: none;\n}\n.video-js .vjs-volume-control {\n  cursor: pointer;\n  margin-right: 1em;\n  display: flex;\n}\n\n.video-js .vjs-volume-control.vjs-volume-horizontal {\n  width: 5em;\n}\n\n.video-js .vjs-volume-panel .vjs-volume-control {\n  visibility: visible;\n  opacity: 0;\n  width: 1px;\n  height: 1px;\n  margin-left: -1px;\n}\n\n.video-js .vjs-volume-panel {\n  transition: width 1s;\n}\n.video-js .vjs-volume-panel.vjs-hover .vjs-volume-control, .video-js .vjs-volume-panel:active .vjs-volume-control, .video-js .vjs-volume-panel:focus .vjs-volume-control, .video-js .vjs-volume-panel .vjs-volume-control:active, .video-js .vjs-volume-panel.vjs-hover .vjs-mute-control ~ .vjs-volume-control, .video-js .vjs-volume-panel .vjs-volume-control.vjs-slider-active {\n  visibility: visible;\n  opacity: 1;\n  position: relative;\n  transition: visibility 0.1s, opacity 0.1s, height 0.1s, width 0.1s, left 0s, top 0s;\n}\n.video-js .vjs-volume-panel.vjs-hover .vjs-volume-control.vjs-volume-horizontal, .video-js .vjs-volume-panel:active .vjs-volume-control.vjs-volume-horizontal, .video-js .vjs-volume-panel:focus .vjs-volume-control.vjs-volume-horizontal, .video-js .vjs-volume-panel .vjs-volume-control:active.vjs-volume-horizontal, .video-js .vjs-volume-panel.vjs-hover .vjs-mute-control ~ .vjs-volume-control.vjs-volume-horizontal, .video-js .vjs-volume-panel .vjs-volume-control.vjs-slider-active.vjs-volume-horizontal {\n  width: 5em;\n  height: 3em;\n  margin-right: 0;\n}\n.video-js .vjs-volume-panel.vjs-hover .vjs-volume-control.vjs-volume-vertical, .video-js .vjs-volume-panel:active .vjs-volume-control.vjs-volume-vertical, .video-js .vjs-volume-panel:focus .vjs-volume-control.vjs-volume-vertical, .video-js .vjs-volume-panel .vjs-volume-control:active.vjs-volume-vertical, .video-js .vjs-volume-panel.vjs-hover .vjs-mute-control ~ .vjs-volume-control.vjs-volume-vertical, .video-js .vjs-volume-panel .vjs-volume-control.vjs-slider-active.vjs-volume-vertical {\n  left: -3.5em;\n  transition: left 0s;\n}\n.video-js .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-hover, .video-js .vjs-volume-panel.vjs-volume-panel-horizontal:active, .video-js .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-slider-active {\n  width: 10em;\n  transition: width 0.1s;\n}\n.video-js .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-mute-toggle-only {\n  width: 4em;\n}\n\n.video-js .vjs-volume-panel .vjs-volume-control.vjs-volume-vertical {\n  height: 8em;\n  width: 3em;\n  left: -3000em;\n  transition: visibility 1s, opacity 1s, height 1s 1s, width 1s 1s, left 1s 1s, top 1s 1s;\n}\n\n.video-js .vjs-volume-panel .vjs-volume-control.vjs-volume-horizontal {\n  transition: visibility 1s, opacity 1s, height 1s 1s, width 1s, left 1s 1s, top 1s 1s;\n}\n\n.video-js .vjs-volume-panel {\n  display: flex;\n}\n\n.video-js .vjs-volume-bar {\n  margin: 1.35em 0.45em;\n}\n\n.vjs-volume-bar.vjs-slider-horizontal {\n  width: 5em;\n  height: 0.3em;\n}\n\n.vjs-volume-bar.vjs-slider-vertical {\n  width: 0.3em;\n  height: 5em;\n  margin: 1.35em auto;\n}\n\n.video-js .vjs-volume-level {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  background-color: #fff;\n}\n.video-js .vjs-volume-level:before {\n  position: absolute;\n  font-size: 0.9em;\n  z-index: 1;\n}\n\n.vjs-slider-vertical .vjs-volume-level {\n  width: 0.3em;\n}\n.vjs-slider-vertical .vjs-volume-level:before {\n  top: -0.5em;\n  left: -0.3em;\n  z-index: 1;\n}\n\n.vjs-svg-icons-enabled .vjs-volume-level:before {\n  content: none;\n}\n\n.vjs-volume-level .vjs-svg-icon {\n  position: absolute;\n  width: 0.9em;\n  height: 0.9em;\n  pointer-events: none;\n  z-index: 1;\n}\n\n.vjs-slider-horizontal .vjs-volume-level {\n  height: 0.3em;\n}\n.vjs-slider-horizontal .vjs-volume-level:before {\n  line-height: 0.35em;\n  right: -0.5em;\n}\n\n.vjs-slider-horizontal .vjs-volume-level .vjs-svg-icon {\n  right: -0.3em;\n  transform: translateY(-50%);\n}\n\n.vjs-slider-vertical .vjs-volume-level .vjs-svg-icon {\n  top: -0.55em;\n  transform: translateX(-50%);\n}\n\n.video-js .vjs-volume-panel.vjs-volume-panel-vertical {\n  width: 4em;\n}\n\n.vjs-volume-bar.vjs-slider-vertical .vjs-volume-level {\n  height: 100%;\n}\n\n.vjs-volume-bar.vjs-slider-horizontal .vjs-volume-level {\n  width: 100%;\n}\n\n.video-js .vjs-volume-vertical {\n  width: 3em;\n  height: 8em;\n  bottom: 8em;\n  background-color: #2B333F;\n  background-color: rgba(43, 51, 63, 0.7);\n}\n\n.video-js .vjs-volume-horizontal .vjs-menu {\n  left: -2em;\n}\n\n.video-js .vjs-volume-tooltip {\n  background-color: #fff;\n  background-color: rgba(255, 255, 255, 0.8);\n  border-radius: 0.3em;\n  color: #000;\n  float: right;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1em;\n  padding: 6px 8px 8px 8px;\n  pointer-events: none;\n  position: absolute;\n  top: -3.4em;\n  visibility: hidden;\n  z-index: 1;\n}\n\n.video-js .vjs-volume-control:hover .vjs-volume-tooltip,\n.video-js .vjs-volume-control:hover .vjs-progress-holder:focus .vjs-volume-tooltip {\n  display: block;\n  font-size: 1em;\n  visibility: visible;\n}\n\n.video-js .vjs-volume-vertical:hover .vjs-volume-tooltip,\n.video-js .vjs-volume-vertical:hover .vjs-progress-holder:focus .vjs-volume-tooltip {\n  left: 1em;\n  top: -12px;\n}\n\n.video-js .vjs-volume-control.disabled:hover .vjs-volume-tooltip {\n  font-size: 1em;\n}\n\n.video-js .vjs-volume-control .vjs-mouse-display {\n  display: none;\n  position: absolute;\n  width: 100%;\n  height: 1px;\n  background-color: #000;\n  z-index: 1;\n}\n\n.video-js .vjs-volume-horizontal .vjs-mouse-display {\n  width: 1px;\n  height: 100%;\n}\n\n.video-js .vjs-volume-control:hover .vjs-mouse-display {\n  display: block;\n}\n\n.video-js.vjs-user-inactive .vjs-volume-control .vjs-mouse-display {\n  visibility: hidden;\n  opacity: 0;\n  transition: visibility 1s, opacity 1s;\n}\n\n.vjs-mouse-display .vjs-volume-tooltip {\n  color: #fff;\n  background-color: #000;\n  background-color: rgba(0, 0, 0, 0.8);\n}\n\n.vjs-poster {\n  display: inline-block;\n  vertical-align: middle;\n  cursor: pointer;\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  height: 100%;\n}\n\n.vjs-has-started .vjs-poster,\n.vjs-using-native-controls .vjs-poster {\n  display: none;\n}\n\n.vjs-audio.vjs-has-started .vjs-poster,\n.vjs-has-started.vjs-audio-poster-mode .vjs-poster,\n.vjs-pip-container.vjs-has-started .vjs-poster {\n  display: block;\n}\n\n.vjs-poster img {\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n}\n\n.video-js .vjs-live-control {\n  display: flex;\n  align-items: flex-start;\n  flex: auto;\n  font-size: 1em;\n  line-height: 3em;\n}\n\n.video-js:not(.vjs-live) .vjs-live-control,\n.video-js.vjs-liveui .vjs-live-control {\n  display: none;\n}\n\n.video-js .vjs-seek-to-live-control {\n  align-items: center;\n  cursor: pointer;\n  flex: none;\n  display: inline-flex;\n  height: 100%;\n  padding-left: 0.5em;\n  padding-right: 0.5em;\n  font-size: 1em;\n  line-height: 3em;\n  width: auto;\n  min-width: 4em;\n}\n\n.video-js.vjs-live:not(.vjs-liveui) .vjs-seek-to-live-control,\n.video-js:not(.vjs-live) .vjs-seek-to-live-control {\n  display: none;\n}\n\n.vjs-seek-to-live-control.vjs-control.vjs-at-live-edge {\n  cursor: auto;\n}\n\n.vjs-seek-to-live-control .vjs-icon-placeholder {\n  margin-right: 0.5em;\n  color: #888;\n}\n\n.vjs-svg-icons-enabled .vjs-seek-to-live-control {\n  line-height: 0;\n}\n\n.vjs-seek-to-live-control .vjs-svg-icon {\n  width: 1em;\n  height: 1em;\n  pointer-events: none;\n  fill: #888888;\n}\n\n.vjs-seek-to-live-control.vjs-control.vjs-at-live-edge .vjs-icon-placeholder {\n  color: red;\n}\n\n.vjs-seek-to-live-control.vjs-control.vjs-at-live-edge .vjs-svg-icon {\n  fill: red;\n}\n\n.video-js .vjs-time-control {\n  flex: none;\n  font-size: 1em;\n  line-height: 3em;\n  min-width: 2em;\n  width: auto;\n  padding-left: 1em;\n  padding-right: 1em;\n}\n\n.vjs-live .vjs-time-control,\n.vjs-live .vjs-time-divider,\n.video-js .vjs-current-time,\n.video-js .vjs-duration {\n  display: none;\n}\n\n.vjs-time-divider {\n  display: none;\n  line-height: 3em;\n}\n\n.vjs-normalise-time-controls:not(.vjs-live) .vjs-time-control {\n  display: flex;\n}\n\n.video-js .vjs-play-control {\n  cursor: pointer;\n}\n\n.video-js .vjs-play-control .vjs-icon-placeholder {\n  flex: none;\n}\n\n.vjs-text-track-display {\n  position: absolute;\n  bottom: 3em;\n  left: 0;\n  right: 0;\n  top: 0;\n  pointer-events: none;\n}\n\n.vjs-error .vjs-text-track-display {\n  display: none;\n}\n\n.video-js.vjs-controls-disabled .vjs-text-track-display,\n.video-js.vjs-user-inactive.vjs-playing .vjs-text-track-display {\n  bottom: 1em;\n}\n\n.video-js .vjs-text-track {\n  font-size: 1.4em;\n  text-align: center;\n  margin-bottom: 0.1em;\n}\n\n.vjs-subtitles {\n  color: #fff;\n}\n\n.vjs-captions {\n  color: #fc6;\n}\n\n.vjs-tt-cue {\n  display: block;\n}\n\nvideo::-webkit-media-text-track-display {\n  transform: translateY(-3em);\n}\n\n.video-js.vjs-controls-disabled video::-webkit-media-text-track-display,\n.video-js.vjs-user-inactive.vjs-playing video::-webkit-media-text-track-display {\n  transform: translateY(-1.5em);\n}\n\n.video-js.vjs-force-center-align-cues .vjs-text-track-cue {\n  text-align: center !important;\n  width: 80% !important;\n}\n\n@supports not (inset: 10px) {\n  .video-js .vjs-text-track-display > div {\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n}\n.video-js .vjs-picture-in-picture-control {\n  cursor: pointer;\n  flex: none;\n}\n.video-js.vjs-audio-only-mode .vjs-picture-in-picture-control,\n.vjs-pip-window .vjs-picture-in-picture-control {\n  display: none;\n}\n\n.video-js .vjs-fullscreen-control {\n  cursor: pointer;\n  flex: none;\n}\n.video-js.vjs-audio-only-mode .vjs-fullscreen-control,\n.vjs-pip-window .vjs-fullscreen-control {\n  display: none;\n}\n\n.vjs-playback-rate > .vjs-menu-button,\n.vjs-playback-rate .vjs-playback-rate-value {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.vjs-playback-rate .vjs-playback-rate-value {\n  pointer-events: none;\n  font-size: 1.5em;\n  line-height: 2;\n  text-align: center;\n}\n\n.vjs-playback-rate .vjs-menu {\n  width: 4em;\n  left: 0em;\n}\n\n.vjs-error .vjs-error-display .vjs-modal-dialog-content {\n  font-size: 1.4em;\n  text-align: center;\n}\n\n.vjs-loading-spinner {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  opacity: 0.85;\n  text-align: left;\n  border: 0.6em solid rgba(43, 51, 63, 0.7);\n  box-sizing: border-box;\n  background-clip: padding-box;\n  width: 5em;\n  height: 5em;\n  border-radius: 50%;\n  visibility: hidden;\n}\n\n.vjs-seeking .vjs-loading-spinner,\n.vjs-waiting .vjs-loading-spinner {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  animation: vjs-spinner-show 0s linear 0.3s forwards;\n}\n\n.vjs-error .vjs-loading-spinner {\n  display: none;\n}\n\n.vjs-loading-spinner:before,\n.vjs-loading-spinner:after {\n  content: \"\";\n  position: absolute;\n  box-sizing: inherit;\n  width: inherit;\n  height: inherit;\n  border-radius: inherit;\n  opacity: 1;\n  border: inherit;\n  border-color: transparent;\n  border-top-color: white;\n}\n\n.vjs-seeking .vjs-loading-spinner:before,\n.vjs-seeking .vjs-loading-spinner:after,\n.vjs-waiting .vjs-loading-spinner:before,\n.vjs-waiting .vjs-loading-spinner:after {\n  animation: vjs-spinner-spin 1.1s cubic-bezier(0.6, 0.2, 0, 0.8) infinite, vjs-spinner-fade 1.1s linear infinite;\n}\n\n.vjs-seeking .vjs-loading-spinner:before,\n.vjs-waiting .vjs-loading-spinner:before {\n  border-top-color: rgb(255, 255, 255);\n}\n\n.vjs-seeking .vjs-loading-spinner:after,\n.vjs-waiting .vjs-loading-spinner:after {\n  border-top-color: rgb(255, 255, 255);\n  animation-delay: 0.44s;\n}\n\n@keyframes vjs-spinner-show {\n  to {\n    visibility: visible;\n  }\n}\n@keyframes vjs-spinner-spin {\n  100% {\n    transform: rotate(360deg);\n  }\n}\n@keyframes vjs-spinner-fade {\n  0% {\n    border-top-color: #73859f;\n  }\n  20% {\n    border-top-color: #73859f;\n  }\n  35% {\n    border-top-color: white;\n  }\n  60% {\n    border-top-color: #73859f;\n  }\n  100% {\n    border-top-color: #73859f;\n  }\n}\n.video-js.vjs-audio-only-mode .vjs-captions-button {\n  display: none;\n}\n\n.vjs-chapters-button .vjs-menu ul {\n  width: 24em;\n}\n\n.video-js.vjs-audio-only-mode .vjs-descriptions-button {\n  display: none;\n}\n\n.vjs-subs-caps-button + .vjs-menu .vjs-captions-menu-item .vjs-svg-icon {\n  width: 1.5em;\n  height: 1.5em;\n}\n\n.video-js .vjs-subs-caps-button + .vjs-menu .vjs-captions-menu-item .vjs-menu-item-text .vjs-icon-placeholder {\n  vertical-align: middle;\n  display: inline-block;\n  margin-bottom: -0.1em;\n}\n\n.video-js .vjs-subs-caps-button + .vjs-menu .vjs-captions-menu-item .vjs-menu-item-text .vjs-icon-placeholder:before {\n  font-family: VideoJS;\n  content: \"\\f10c\";\n  font-size: 1.5em;\n  line-height: inherit;\n}\n\n.video-js.vjs-audio-only-mode .vjs-subs-caps-button {\n  display: none;\n}\n\n.video-js .vjs-audio-button + .vjs-menu .vjs-descriptions-menu-item .vjs-menu-item-text .vjs-icon-placeholder,\n.video-js .vjs-audio-button + .vjs-menu .vjs-main-desc-menu-item .vjs-menu-item-text .vjs-icon-placeholder {\n  vertical-align: middle;\n  display: inline-block;\n  margin-bottom: -0.1em;\n}\n\n.video-js .vjs-audio-button + .vjs-menu .vjs-descriptions-menu-item .vjs-menu-item-text .vjs-icon-placeholder:before,\n.video-js .vjs-audio-button + .vjs-menu .vjs-main-desc-menu-item .vjs-menu-item-text .vjs-icon-placeholder:before {\n  font-family: VideoJS;\n  content: \" \\f12e\";\n  font-size: 1.5em;\n  line-height: inherit;\n}\n\n.video-js.vjs-layout-small .vjs-current-time,\n.video-js.vjs-layout-small .vjs-time-divider,\n.video-js.vjs-layout-small .vjs-duration,\n.video-js.vjs-layout-small .vjs-remaining-time,\n.video-js.vjs-layout-small .vjs-playback-rate,\n.video-js.vjs-layout-small .vjs-volume-control, .video-js.vjs-layout-x-small .vjs-current-time,\n.video-js.vjs-layout-x-small .vjs-time-divider,\n.video-js.vjs-layout-x-small .vjs-duration,\n.video-js.vjs-layout-x-small .vjs-remaining-time,\n.video-js.vjs-layout-x-small .vjs-playback-rate,\n.video-js.vjs-layout-x-small .vjs-volume-control, .video-js.vjs-layout-tiny .vjs-current-time,\n.video-js.vjs-layout-tiny .vjs-time-divider,\n.video-js.vjs-layout-tiny .vjs-duration,\n.video-js.vjs-layout-tiny .vjs-remaining-time,\n.video-js.vjs-layout-tiny .vjs-playback-rate,\n.video-js.vjs-layout-tiny .vjs-volume-control {\n  display: none;\n}\n.video-js.vjs-layout-small .vjs-volume-panel.vjs-volume-panel-horizontal:hover, .video-js.vjs-layout-small .vjs-volume-panel.vjs-volume-panel-horizontal:active, .video-js.vjs-layout-small .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-slider-active, .video-js.vjs-layout-small .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-hover, .video-js.vjs-layout-x-small .vjs-volume-panel.vjs-volume-panel-horizontal:hover, .video-js.vjs-layout-x-small .vjs-volume-panel.vjs-volume-panel-horizontal:active, .video-js.vjs-layout-x-small .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-slider-active, .video-js.vjs-layout-x-small .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-hover, .video-js.vjs-layout-tiny .vjs-volume-panel.vjs-volume-panel-horizontal:hover, .video-js.vjs-layout-tiny .vjs-volume-panel.vjs-volume-panel-horizontal:active, .video-js.vjs-layout-tiny .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-slider-active, .video-js.vjs-layout-tiny .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-hover {\n  width: auto;\n  width: initial;\n}\n.video-js.vjs-layout-x-small .vjs-progress-control, .video-js.vjs-layout-tiny .vjs-progress-control {\n  display: none;\n}\n.video-js.vjs-layout-x-small .vjs-custom-control-spacer {\n  flex: auto;\n  display: block;\n}\n\n.vjs-modal-dialog.vjs-text-track-settings {\n  background-color: #2B333F;\n  background-color: rgba(43, 51, 63, 0.75);\n  color: #fff;\n  height: 70%;\n}\n.vjs-spatial-navigation-enabled .vjs-modal-dialog.vjs-text-track-settings {\n  height: 80%;\n}\n\n.vjs-error .vjs-text-track-settings {\n  display: none;\n}\n\n.vjs-text-track-settings .vjs-modal-dialog-content {\n  display: table;\n}\n\n.vjs-text-track-settings .vjs-track-settings-colors,\n.vjs-text-track-settings .vjs-track-settings-font,\n.vjs-text-track-settings .vjs-track-settings-controls {\n  display: table-cell;\n}\n\n.vjs-text-track-settings .vjs-track-settings-controls {\n  text-align: right;\n  vertical-align: bottom;\n}\n\n@supports (display: grid) {\n  .vjs-text-track-settings .vjs-modal-dialog-content {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr;\n    padding: 20px 24px 0px 24px;\n  }\n  .vjs-track-settings-controls .vjs-default-button {\n    margin-bottom: 20px;\n  }\n  .vjs-text-track-settings .vjs-track-settings-controls {\n    grid-column: 1/-1;\n  }\n  .vjs-layout-small .vjs-text-track-settings .vjs-modal-dialog-content,\n  .vjs-layout-x-small .vjs-text-track-settings .vjs-modal-dialog-content,\n  .vjs-layout-tiny .vjs-text-track-settings .vjs-modal-dialog-content {\n    grid-template-columns: 1fr;\n  }\n}\n.vjs-text-track-settings select {\n  font-size: inherit;\n}\n\n.vjs-track-setting > select {\n  margin-right: 1em;\n  margin-bottom: 0.5em;\n}\n\n.vjs-text-track-settings fieldset {\n  margin: 10px;\n  border: none;\n}\n\n.vjs-text-track-settings fieldset span {\n  display: inline-block;\n  padding: 0 0.6em 0.8em;\n}\n\n.vjs-text-track-settings fieldset span > select {\n  max-width: 7.3em;\n}\n\n.vjs-text-track-settings legend {\n  color: #fff;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.vjs-text-track-settings .vjs-label {\n  margin: 0 0.5em 0.5em 0;\n}\n\n.vjs-track-settings-controls button:focus,\n.vjs-track-settings-controls button:active {\n  outline-style: solid;\n  outline-width: medium;\n  background-image: linear-gradient(0deg, #fff 88%, #73859f 100%);\n}\n\n.vjs-track-settings-controls button:hover {\n  color: rgba(43, 51, 63, 0.75);\n}\n\n.vjs-track-settings-controls button {\n  background-color: #fff;\n  background-image: linear-gradient(-180deg, #fff 88%, #73859f 100%);\n  color: #2B333F;\n  cursor: pointer;\n  border-radius: 2px;\n}\n\n.vjs-track-settings-controls .vjs-default-button {\n  margin-right: 1em;\n}\n\n.vjs-title-bar {\n  background: rgba(0, 0, 0, 0.9);\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0.9) 0%, rgba(0, 0, 0, 0.7) 60%, rgba(0, 0, 0, 0) 100%);\n  font-size: 1.2em;\n  line-height: 1.5;\n  transition: opacity 0.1s;\n  padding: 0.666em 1.333em 4em;\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n\n.vjs-error .vjs-title-bar {\n  display: none;\n}\n\n.vjs-title-bar-title,\n.vjs-title-bar-description {\n  margin: 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.vjs-title-bar-title {\n  font-weight: bold;\n  margin-bottom: 0.333em;\n}\n\n.vjs-playing.vjs-user-inactive .vjs-title-bar {\n  opacity: 0;\n  transition: opacity 1s;\n}\n\n.video-js .vjs-skip-forward-5 {\n  cursor: pointer;\n}\n.video-js .vjs-skip-forward-10 {\n  cursor: pointer;\n}\n.video-js .vjs-skip-forward-30 {\n  cursor: pointer;\n}\n.video-js .vjs-skip-backward-5 {\n  cursor: pointer;\n}\n.video-js .vjs-skip-backward-10 {\n  cursor: pointer;\n}\n.video-js .vjs-skip-backward-30 {\n  cursor: pointer;\n}\n.video-js .vjs-transient-button {\n  position: absolute;\n  height: 3em;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(50, 50, 50, 0.5);\n  cursor: pointer;\n  opacity: 1;\n  transition: opacity 1s;\n}\n\n.video-js:not(.vjs-has-started) .vjs-transient-button {\n  display: none;\n}\n\n.video-js.not-hover .vjs-transient-button:not(.force-display),\n.video-js.vjs-user-inactive .vjs-transient-button:not(.force-display) {\n  opacity: 0;\n}\n\n.video-js .vjs-transient-button span {\n  padding: 0 0.5em;\n}\n\n.video-js .vjs-transient-button.vjs-left {\n  left: 1em;\n}\n\n.video-js .vjs-transient-button.vjs-right {\n  right: 1em;\n}\n\n.video-js .vjs-transient-button.vjs-top {\n  top: 1em;\n}\n\n.video-js .vjs-transient-button.vjs-near-top {\n  top: 4em;\n}\n\n.video-js .vjs-transient-button.vjs-bottom {\n  bottom: 4em;\n}\n\n.video-js .vjs-transient-button:hover {\n  background-color: rgba(50, 50, 50, 0.9);\n}\n\n@media print {\n  .video-js > *:not(.vjs-tech):not(.vjs-poster) {\n    visibility: hidden;\n  }\n}\n.vjs-resize-manager {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: none;\n  z-index: -1000;\n}\n\n.js-focus-visible .video-js *:focus:not(.focus-visible) {\n  outline: none;\n}\n\n.video-js *:focus:not(:focus-visible) {\n  outline: none;\n}\n";
styleInject(css_248z$1);

function _defineProperty$1(e, t, i) {
  return (t = _toPropertyKey$1(t)) in e ? Object.defineProperty(e, t, {
    value: i,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[t] = i, e;
}
function _toPrimitive$1(e, t) {
  if ("object" != typeof e || null === e) return e;
  var i = e[Symbol.toPrimitive];
  if (void 0 !== i) {
    var s = i.call(e, t || "default");
    if ("object" != typeof s) return s;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === t ? String : Number)(e);
}
function _toPropertyKey$1(e) {
  var t = _toPrimitive$1(e, "string");
  return "symbol" == typeof t ? t : String(t);
}
function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(e, t) {
  for (var i = 0; i < t.length; i++) {
    var s = t[i];
    s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(e, s.key, s);
  }
}
function _createClass(e, t, i) {
  return t && _defineProperties(e.prototype, t), i && _defineProperties(e, i), e;
}
function _defineProperty$2(e, t, i) {
  return t in e ? Object.defineProperty(e, t, {
    value: i,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[t] = i, e;
}
function ownKeys$1(e, t) {
  var i = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(e);
    t && (s = s.filter(function (t) {
      return Object.getOwnPropertyDescriptor(e, t).enumerable;
    })), i.push.apply(i, s);
  }
  return i;
}
function _objectSpread2$1(e) {
  for (var t = 1; t < arguments.length; t++) {
    var i = null != arguments[t] ? arguments[t] : {};
    t % 2 ? ownKeys$1(Object(i), !0).forEach(function (t) {
      _defineProperty$2(e, t, i[t]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(i)) : ownKeys$1(Object(i)).forEach(function (t) {
      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(i, t));
    });
  }
  return e;
}
var defaults$1 = {
  addCSS: !0,
  thumbWidth: 15,
  watch: !0
};
function matches$1(e, t) {
  return function () {
    return Array.from(document.querySelectorAll(t)).includes(this);
  }.call(e, t);
}
function trigger(e, t) {
  if (e && t) {
    var i = new Event(t, {
      bubbles: !0
    });
    e.dispatchEvent(i);
  }
}
var getConstructor$1 = function (e) {
    return null != e ? e.constructor : null;
  },
  instanceOf$1 = function (e, t) {
    return !!(e && t && e instanceof t);
  },
  isNullOrUndefined$1 = function (e) {
    return null == e;
  },
  isObject$1 = function (e) {
    return getConstructor$1(e) === Object;
  },
  isNumber$1 = function (e) {
    return getConstructor$1(e) === Number && !Number.isNaN(e);
  },
  isString$1 = function (e) {
    return getConstructor$1(e) === String;
  },
  isBoolean$1 = function (e) {
    return getConstructor$1(e) === Boolean;
  },
  isFunction$1 = function (e) {
    return getConstructor$1(e) === Function;
  },
  isArray$1 = function (e) {
    return Array.isArray(e);
  },
  isNodeList$1 = function (e) {
    return instanceOf$1(e, NodeList);
  },
  isElement$1 = function (e) {
    return instanceOf$1(e, Element);
  },
  isEvent$1 = function (e) {
    return instanceOf$1(e, Event);
  },
  isEmpty$1 = function (e) {
    return isNullOrUndefined$1(e) || (isString$1(e) || isArray$1(e) || isNodeList$1(e)) && !e.length || isObject$1(e) && !Object.keys(e).length;
  },
  is$1 = {
    nullOrUndefined: isNullOrUndefined$1,
    object: isObject$1,
    number: isNumber$1,
    string: isString$1,
    boolean: isBoolean$1,
    function: isFunction$1,
    array: isArray$1,
    nodeList: isNodeList$1,
    element: isElement$1,
    event: isEvent$1,
    empty: isEmpty$1
  };
function getDecimalPlaces(e) {
  var t = "".concat(e).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  return t ? Math.max(0, (t[1] ? t[1].length : 0) - (t[2] ? +t[2] : 0)) : 0;
}
function round(e, t) {
  if (1 > t) {
    var i = getDecimalPlaces(t);
    return parseFloat(e.toFixed(i));
  }
  return Math.round(e / t) * t;
}
var RangeTouch = function () {
  function e(t, i) {
    _classCallCheck(this, e), is$1.element(t) ? this.element = t : is$1.string(t) && (this.element = document.querySelector(t)), is$1.element(this.element) && is$1.empty(this.element.rangeTouch) && (this.config = _objectSpread2$1({}, defaults$1, {}, i), this.init());
  }
  return _createClass(e, [{
    key: "init",
    value: function () {
      e.enabled && (this.config.addCSS && (this.element.style.userSelect = "none", this.element.style.webKitUserSelect = "none", this.element.style.touchAction = "manipulation"), this.listeners(!0), this.element.rangeTouch = this);
    }
  }, {
    key: "destroy",
    value: function () {
      e.enabled && (this.config.addCSS && (this.element.style.userSelect = "", this.element.style.webKitUserSelect = "", this.element.style.touchAction = ""), this.listeners(!1), this.element.rangeTouch = null);
    }
  }, {
    key: "listeners",
    value: function (e) {
      var t = this,
        i = e ? "addEventListener" : "removeEventListener";
      ["touchstart", "touchmove", "touchend"].forEach(function (e) {
        t.element[i](e, function (e) {
          return t.set(e);
        }, !1);
      });
    }
  }, {
    key: "get",
    value: function (t) {
      if (!e.enabled || !is$1.event(t)) return null;
      var i,
        s = t.target,
        n = t.changedTouches[0],
        r = parseFloat(s.getAttribute("min")) || 0,
        a = parseFloat(s.getAttribute("max")) || 100,
        o = parseFloat(s.getAttribute("step")) || 1,
        l = s.getBoundingClientRect(),
        c = 100 / l.width * (this.config.thumbWidth / 2) / 100;
      return 0 > (i = 100 / l.width * (n.clientX - l.left)) ? i = 0 : 100 < i && (i = 100), 50 > i ? i -= (100 - 2 * i) * c : 50 < i && (i += 2 * (i - 50) * c), r + round(i / 100 * (a - r), o);
    }
  }, {
    key: "set",
    value: function (t) {
      e.enabled && is$1.event(t) && !t.target.disabled && (t.preventDefault(), t.target.value = this.get(t), trigger(t.target, "touchend" === t.type ? "change" : "input"));
    }
  }], [{
    key: "setup",
    value: function (t) {
      var i = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},
        s = null;
      if (is$1.empty(t) || is$1.string(t) ? s = Array.from(document.querySelectorAll(is$1.string(t) ? t : 'input[type="range"]')) : is$1.element(t) ? s = [t] : is$1.nodeList(t) ? s = Array.from(t) : is$1.array(t) && (s = t.filter(is$1.element)), is$1.empty(s)) return null;
      var n = _objectSpread2$1({}, defaults$1, {}, i);
      if (is$1.string(t) && n.watch) {
        var r = new MutationObserver(function (i) {
          Array.from(i).forEach(function (i) {
            Array.from(i.addedNodes).forEach(function (i) {
              is$1.element(i) && matches$1(i, t) && new e(i, n);
            });
          });
        });
        r.observe(document.body, {
          childList: !0,
          subtree: !0
        });
      }
      return s.map(function (t) {
        return new e(t, i);
      });
    }
  }, {
    key: "enabled",
    get: function () {
      return "ontouchstart" in document.documentElement;
    }
  }]), e;
}();
const getConstructor = e => null != e ? e.constructor : null,
  instanceOf = (e, t) => Boolean(e && t && e instanceof t),
  isNullOrUndefined = e => null == e,
  isObject$2 = e => getConstructor(e) === Object,
  isNumber = e => getConstructor(e) === Number && !Number.isNaN(e),
  isString = e => getConstructor(e) === String,
  isBoolean = e => getConstructor(e) === Boolean,
  isFunction = e => "function" == typeof e,
  isArray = e => Array.isArray(e),
  isWeakMap = e => instanceOf(e, WeakMap),
  isNodeList = e => instanceOf(e, NodeList),
  isTextNode = e => getConstructor(e) === Text,
  isEvent = e => instanceOf(e, Event),
  isKeyboardEvent = e => instanceOf(e, KeyboardEvent),
  isCue = e => instanceOf(e, window.TextTrackCue) || instanceOf(e, window.VTTCue),
  isTrack = e => instanceOf(e, TextTrack) || !isNullOrUndefined(e) && isString(e.kind),
  isPromise$1 = e => instanceOf(e, Promise) && isFunction(e.then),
  isElement = e => null !== e && "object" == typeof e && 1 === e.nodeType && "object" == typeof e.style && "object" == typeof e.ownerDocument,
  isEmpty$2 = e => isNullOrUndefined(e) || (isString(e) || isArray(e) || isNodeList(e)) && !e.length || isObject$2(e) && !Object.keys(e).length,
  isUrl = e => {
    if (instanceOf(e, window.URL)) return !0;
    if (!isString(e)) return !1;
    let t = e;
    e.startsWith("http://") && e.startsWith("https://") || (t = `http://${e}`);
    try {
      return !isEmpty$2(new URL(t).hostname);
    } catch (e) {
      return !1;
    }
  };
var is = {
  nullOrUndefined: isNullOrUndefined,
  object: isObject$2,
  number: isNumber,
  string: isString,
  boolean: isBoolean,
  function: isFunction,
  array: isArray,
  weakMap: isWeakMap,
  nodeList: isNodeList,
  element: isElement,
  textNode: isTextNode,
  event: isEvent,
  keyboardEvent: isKeyboardEvent,
  cue: isCue,
  track: isTrack,
  promise: isPromise$1,
  url: isUrl,
  empty: isEmpty$2
};
const transitionEndEvent = (() => {
  const e = document.createElement("span"),
    t = {
      WebkitTransition: "webkitTransitionEnd",
      MozTransition: "transitionend",
      OTransition: "oTransitionEnd otransitionend",
      transition: "transitionend"
    },
    i = Object.keys(t).find(t => void 0 !== e.style[t]);
  return !!is.string(i) && t[i];
})();
function repaint(e, t) {
  setTimeout(() => {
    try {
      e.hidden = !0, e.offsetHeight, e.hidden = !1;
    } catch (e) {}
  }, t);
}
const isIE$1 = Boolean(window.document.documentMode),
  isEdge = /Edge/g.test(navigator.userAgent),
  isWebKit = "WebkitAppearance" in document.documentElement.style && !/Edge/g.test(navigator.userAgent),
  isIPhone = /iPhone|iPod/gi.test(navigator.userAgent) && navigator.maxTouchPoints > 1,
  isIPadOS = "MacIntel" === navigator.platform && navigator.maxTouchPoints > 1,
  isIos = /iPad|iPhone|iPod/gi.test(navigator.userAgent) && navigator.maxTouchPoints > 1;
var browser$1 = {
  isIE: isIE$1,
  isEdge: isEdge,
  isWebKit: isWebKit,
  isIPhone: isIPhone,
  isIPadOS: isIPadOS,
  isIos: isIos
};
function cloneDeep(e) {
  return JSON.parse(JSON.stringify(e));
}
function getDeep(e, t) {
  return t.split(".").reduce((e, t) => e && e[t], e);
}
function extend(e = {}, ...t) {
  if (!t.length) return e;
  const i = t.shift();
  return is.object(i) ? (Object.keys(i).forEach(t => {
    is.object(i[t]) ? (Object.keys(e).includes(t) || Object.assign(e, {
      [t]: {}
    }), extend(e[t], i[t])) : Object.assign(e, {
      [t]: i[t]
    });
  }), extend(e, ...t)) : e;
}
function wrap$1(e, t) {
  const i = e.length ? e : [e];
  Array.from(i).reverse().forEach((e, i) => {
    const s = i > 0 ? t.cloneNode(!0) : t,
      n = e.parentNode,
      r = e.nextSibling;
    s.appendChild(e), r ? n.insertBefore(s, r) : n.appendChild(s);
  });
}
function setAttributes(e, t) {
  is.element(e) && !is.empty(t) && Object.entries(t).filter(([, e]) => !is.nullOrUndefined(e)).forEach(([t, i]) => e.setAttribute(t, i));
}
function createElement(e, t, i) {
  const s = document.createElement(e);
  return is.object(t) && setAttributes(s, t), is.string(i) && (s.innerText = i), s;
}
function insertAfter(e, t) {
  is.element(e) && is.element(t) && t.parentNode.insertBefore(e, t.nextSibling);
}
function insertElement(e, t, i, s) {
  is.element(t) && t.appendChild(createElement(e, i, s));
}
function removeElement(e) {
  is.nodeList(e) || is.array(e) ? Array.from(e).forEach(removeElement) : is.element(e) && is.element(e.parentNode) && e.parentNode.removeChild(e);
}
function emptyElement(e) {
  if (!is.element(e)) return;
  let {
    length: t
  } = e.childNodes;
  for (; t > 0;) e.removeChild(e.lastChild), t -= 1;
}
function replaceElement(e, t) {
  return is.element(t) && is.element(t.parentNode) && is.element(e) ? (t.parentNode.replaceChild(e, t), e) : null;
}
function getAttributesFromSelector(e, t) {
  if (!is.string(e) || is.empty(e)) return {};
  const i = {},
    s = extend({}, t);
  return e.split(",").forEach(e => {
    const t = e.trim(),
      n = t.replace(".", ""),
      r = t.replace(/[[\]]/g, "").split("="),
      [a] = r,
      o = r.length > 1 ? r[1].replace(/["']/g, "") : "";
    switch (t.charAt(0)) {
      case ".":
        is.string(s.class) ? i.class = `${s.class} ${n}` : i.class = n;
        break;
      case "#":
        i.id = t.replace("#", "");
        break;
      case "[":
        i[a] = o;
    }
  }), extend(s, i);
}
function toggleHidden(e, t) {
  if (!is.element(e)) return;
  let i = t;
  is.boolean(i) || (i = !e.hidden), e.hidden = i;
}
function toggleClass(e, t, i) {
  if (is.nodeList(e)) return Array.from(e).map(e => toggleClass(e, t, i));
  if (is.element(e)) {
    let s = "toggle";
    return void 0 !== i && (s = i ? "add" : "remove"), e.classList[s](t), e.classList.contains(t);
  }
  return !1;
}
function hasClass(e, t) {
  return is.element(e) && e.classList.contains(t);
}
function matches(e, t) {
  const {
    prototype: i
  } = Element;
  return (i.matches || i.webkitMatchesSelector || i.mozMatchesSelector || i.msMatchesSelector || function () {
    return Array.from(document.querySelectorAll(t)).includes(this);
  }).call(e, t);
}
function closest$1(e, t) {
  const {
    prototype: i
  } = Element;
  return (i.closest || function () {
    let e = this;
    do {
      if (matches.matches(e, t)) return e;
      e = e.parentElement || e.parentNode;
    } while (null !== e && 1 === e.nodeType);
    return null;
  }).call(e, t);
}
function getElements(e) {
  return this.elements.container.querySelectorAll(e);
}
function getElement(e) {
  return this.elements.container.querySelector(e);
}
function setFocus(e = null, t = !1) {
  is.element(e) && e.focus({
    preventScroll: !0,
    focusVisible: t
  });
}
const defaultCodecs = {
    "audio/ogg": "vorbis",
    "audio/wav": "1",
    "video/webm": "vp8, vorbis",
    "video/mp4": "avc1.42E01E, mp4a.40.2",
    "video/ogg": "theora"
  },
  support = {
    audio: "canPlayType" in document.createElement("audio"),
    video: "canPlayType" in document.createElement("video"),
    check(e, t) {
      const i = support[e] || "html5" !== t;
      return {
        api: i,
        ui: i && support.rangeInput
      };
    },
    pip: !(browser$1.isIPhone || !is.function(createElement("video").webkitSetPresentationMode) && (!document.pictureInPictureEnabled || createElement("video").disablePictureInPicture)),
    airplay: is.function(window.WebKitPlaybackTargetAvailabilityEvent),
    playsinline: "playsInline" in document.createElement("video"),
    mime(e) {
      if (is.empty(e)) return !1;
      const [t] = e.split("/");
      let i = e;
      if (!this.isHTML5 || t !== this.type) return !1;
      Object.keys(defaultCodecs).includes(i) && (i += `; codecs="${defaultCodecs[e]}"`);
      try {
        return Boolean(i && this.media.canPlayType(i).replace(/no/, ""));
      } catch (e) {
        return !1;
      }
    },
    textTracks: "textTracks" in document.createElement("video"),
    rangeInput: (() => {
      const e = document.createElement("input");
      return e.type = "range", "range" === e.type;
    })(),
    touch: "ontouchstart" in document.documentElement,
    transitions: !1 !== transitionEndEvent,
    reducedMotion: "matchMedia" in window && window.matchMedia("(prefers-reduced-motion)").matches
  },
  supportsPassiveListeners = (() => {
    let e = !1;
    try {
      const t = Object.defineProperty({}, "passive", {
        get: () => (e = !0, null)
      });
      window.addEventListener("test", null, t), window.removeEventListener("test", null, t);
    } catch (e) {}
    return e;
  })();
function toggleListener(e, t, i, s = !1, n = !0, r = !1) {
  if (!e || !("addEventListener" in e) || is.empty(t) || !is.function(i)) return;
  const a = t.split(" ");
  let o = r;
  supportsPassiveListeners && (o = {
    passive: n,
    capture: r
  }), a.forEach(t => {
    this && this.eventListeners && s && this.eventListeners.push({
      element: e,
      type: t,
      callback: i,
      options: o
    }), e[s ? "addEventListener" : "removeEventListener"](t, i, o);
  });
}
function on(e, t = "", i, s = !0, n = !1) {
  toggleListener.call(this, e, t, i, !0, s, n);
}
function off(e, t = "", i, s = !0, n = !1) {
  toggleListener.call(this, e, t, i, !1, s, n);
}
function once(e, t = "", i, s = !0, n = !1) {
  const r = (...a) => {
    off(e, t, r, s, n), i.apply(this, a);
  };
  toggleListener.call(this, e, t, r, !0, s, n);
}
function triggerEvent(e, t = "", i = !1, s = {}) {
  if (!is.element(e) || is.empty(t)) return;
  const n = new CustomEvent(t, {
    bubbles: i,
    detail: {
      ...s,
      plyr: this
    }
  });
  e.dispatchEvent(n);
}
function unbindListeners() {
  this && this.eventListeners && (this.eventListeners.forEach(e => {
    const {
      element: t,
      type: i,
      callback: s,
      options: n
    } = e;
    t.removeEventListener(i, s, n);
  }), this.eventListeners = []);
}
function ready() {
  return new Promise(e => this.ready ? setTimeout(e, 0) : on.call(this, this.elements.container, "ready", e)).then(() => {});
}
function silencePromise(e) {
  is.promise(e) && e.then(null, () => {});
}
function dedupe(e) {
  return is.array(e) ? e.filter((t, i) => e.indexOf(t) === i) : e;
}
function closest(e, t) {
  return is.array(e) && e.length ? e.reduce((e, i) => Math.abs(i - t) < Math.abs(e - t) ? i : e) : null;
}
function supportsCSS(e) {
  return !(!window || !window.CSS) && window.CSS.supports(e);
}
const standardRatios = [[1, 1], [4, 3], [3, 4], [5, 4], [4, 5], [3, 2], [2, 3], [16, 10], [10, 16], [16, 9], [9, 16], [21, 9], [9, 21], [32, 9], [9, 32]].reduce((e, [t, i]) => ({
  ...e,
  [t / i]: [t, i]
}), {});
function validateAspectRatio(e) {
  if (!(is.array(e) || is.string(e) && e.includes(":"))) return !1;
  return (is.array(e) ? e : e.split(":")).map(Number).every(is.number);
}
function reduceAspectRatio(e) {
  if (!is.array(e) || !e.every(is.number)) return null;
  const [t, i] = e,
    s = (e, t) => 0 === t ? e : s(t, e % t),
    n = s(t, i);
  return [t / n, i / n];
}
function getAspectRatio(e) {
  const t = e => validateAspectRatio(e) ? e.split(":").map(Number) : null;
  let i = t(e);
  if (null === i && (i = t(this.config.ratio)), null === i && !is.empty(this.embed) && is.array(this.embed.ratio) && ({
    ratio: i
  } = this.embed), null === i && this.isHTML5) {
    const {
      videoWidth: e,
      videoHeight: t
    } = this.media;
    i = [e, t];
  }
  return reduceAspectRatio(i);
}
function setAspectRatio(e) {
  if (!this.isVideo) return {};
  const {
      wrapper: t
    } = this.elements,
    i = getAspectRatio.call(this, e);
  if (!is.array(i)) return {};
  const [s, n] = reduceAspectRatio(i),
    r = 100 / s * n;
  if (supportsCSS(`aspect-ratio: ${s}/${n}`) ? t.style.aspectRatio = `${s}/${n}` : t.style.paddingBottom = `${r}%`, this.isVimeo && !this.config.vimeo.premium && this.supported.ui) {
    const e = 100 / this.media.offsetWidth * parseInt(window.getComputedStyle(this.media).paddingBottom, 10),
      i = (e - r) / (e / 50);
    this.fullscreen.active ? t.style.paddingBottom = null : this.media.style.transform = `translateY(-${i}%)`;
  } else this.isHTML5 && t.classList.add(this.config.classNames.videoFixedRatio);
  return {
    padding: r,
    ratio: i
  };
}
function roundAspectRatio(e, t, i = .05) {
  const s = e / t,
    n = closest(Object.keys(standardRatios), s);
  return Math.abs(n - s) <= i ? standardRatios[n] : [e, t];
}
function getViewportSize() {
  return [Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0), Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0)];
}
const html5 = {
  getSources() {
    if (!this.isHTML5) return [];
    return Array.from(this.media.querySelectorAll("source")).filter(e => {
      const t = e.getAttribute("type");
      return !!is.empty(t) || support.mime.call(this, t);
    });
  },
  getQualityOptions() {
    return this.config.quality.forced ? this.config.quality.options : html5.getSources.call(this).map(e => Number(e.getAttribute("size"))).filter(Boolean);
  },
  setup() {
    if (!this.isHTML5) return;
    const e = this;
    e.options.speed = e.config.speed.options, is.empty(this.config.ratio) || setAspectRatio.call(e), Object.defineProperty(e.media, "quality", {
      get() {
        const t = html5.getSources.call(e).find(t => t.getAttribute("src") === e.source);
        return t && Number(t.getAttribute("size"));
      },
      set(t) {
        if (e.quality !== t) {
          if (e.config.quality.forced && is.function(e.config.quality.onChange)) e.config.quality.onChange(t);else {
            const i = html5.getSources.call(e).find(e => Number(e.getAttribute("size")) === t);
            if (!i) return;
            const {
              currentTime: s,
              paused: n,
              preload: r,
              readyState: a,
              playbackRate: o
            } = e.media;
            e.media.src = i.getAttribute("src"), ("none" !== r || a) && (e.once("loadedmetadata", () => {
              e.speed = o, e.currentTime = s, n || silencePromise(e.play());
            }), e.media.load());
          }
          triggerEvent.call(e, e.media, "qualitychange", !1, {
            quality: t
          });
        }
      }
    });
  },
  cancelRequests() {
    this.isHTML5 && (removeElement(html5.getSources.call(this)), this.media.setAttribute("src", this.config.blankVideo), this.media.load(), this.debug.log("Cancelled network requests"));
  }
};
function generateId(e) {
  return `${e}-${Math.floor(1e4 * Math.random())}`;
}
function format$1(e, ...t) {
  return is.empty(e) ? e : e.toString().replace(/{(\d+)}/g, (e, i) => t[i].toString());
}
function getPercentage(e, t) {
  return 0 === e || 0 === t || Number.isNaN(e) || Number.isNaN(t) ? 0 : (e / t * 100).toFixed(2);
}
const replaceAll = (e = "", t = "", i = "") => e.replace(new RegExp(t.toString().replace(/([.*+?^=!:${}()|[\]/\\])/g, "\\$1"), "g"), i.toString()),
  toTitleCase = (e = "") => e.toString().replace(/\w\S*/g, e => e.charAt(0).toUpperCase() + e.slice(1).toLowerCase());
function toPascalCase(e = "") {
  let t = e.toString();
  return t = replaceAll(t, "-", " "), t = replaceAll(t, "_", " "), t = toTitleCase(t), replaceAll(t, " ", "");
}
function toCamelCase(e = "") {
  let t = e.toString();
  return t = toPascalCase(t), t.charAt(0).toLowerCase() + t.slice(1);
}
function stripHTML(e) {
  const t = document.createDocumentFragment(),
    i = document.createElement("div");
  return t.appendChild(i), i.innerHTML = e, t.firstChild.innerText;
}
function getHTML(e) {
  const t = document.createElement("div");
  return t.appendChild(e), t.innerHTML;
}
const resources = {
    pip: "PIP",
    airplay: "AirPlay",
    html5: "HTML5",
    vimeo: "Vimeo",
    youtube: "YouTube"
  },
  i18n = {
    get(e = "", t = {}) {
      if (is.empty(e) || is.empty(t)) return "";
      let i = getDeep(t.i18n, e);
      if (is.empty(i)) return Object.keys(resources).includes(e) ? resources[e] : "";
      const s = {
        "{seektime}": t.seekTime,
        "{title}": t.title
      };
      return Object.entries(s).forEach(([e, t]) => {
        i = replaceAll(i, e, t);
      }), i;
    }
  };
class Storage {
  constructor(e) {
    _defineProperty$1(this, "get", e => {
      if (!Storage.supported || !this.enabled) return null;
      const t = window.localStorage.getItem(this.key);
      if (is.empty(t)) return null;
      const i = JSON.parse(t);
      return is.string(e) && e.length ? i[e] : i;
    }), _defineProperty$1(this, "set", e => {
      if (!Storage.supported || !this.enabled) return;
      if (!is.object(e)) return;
      let t = this.get();
      is.empty(t) && (t = {}), extend(t, e);
      try {
        window.localStorage.setItem(this.key, JSON.stringify(t));
      } catch (e) {}
    }), this.enabled = e.config.storage.enabled, this.key = e.config.storage.key;
  }
  static get supported() {
    try {
      if (!("localStorage" in window)) return !1;
      const e = "___test";
      return window.localStorage.setItem(e, e), window.localStorage.removeItem(e), !0;
    } catch (e) {
      return !1;
    }
  }
}
function fetch$1(e, t = "text") {
  return new Promise((i, s) => {
    try {
      const s = new XMLHttpRequest();
      if (!("withCredentials" in s)) return;
      s.addEventListener("load", () => {
        if ("text" === t) try {
          i(JSON.parse(s.responseText));
        } catch (e) {
          i(s.responseText);
        } else i(s.response);
      }), s.addEventListener("error", () => {
        throw new Error(s.status);
      }), s.open("GET", e, !0), s.responseType = t, s.send();
    } catch (e) {
      s(e);
    }
  });
}
function loadSprite(e, t) {
  if (!is.string(e)) return;
  const i = "cache",
    s = is.string(t);
  let n = !1;
  const r = () => null !== document.getElementById(t),
    a = (e, t) => {
      e.innerHTML = t, s && r() || document.body.insertAdjacentElement("afterbegin", e);
    };
  if (!s || !r()) {
    const r = Storage.supported,
      o = document.createElement("div");
    if (o.setAttribute("hidden", ""), s && o.setAttribute("id", t), r) {
      const e = window.localStorage.getItem(`${i}-${t}`);
      if (n = null !== e, n) {
        const t = JSON.parse(e);
        a(o, t.content);
      }
    }
    fetch$1(e).then(e => {
      if (!is.empty(e)) {
        if (r) try {
          window.localStorage.setItem(`${i}-${t}`, JSON.stringify({
            content: e
          }));
        } catch (e) {}
        a(o, e);
      }
    }).catch(() => {});
  }
}
const getHours = e => Math.trunc(e / 60 / 60 % 60, 10),
  getMinutes = e => Math.trunc(e / 60 % 60, 10),
  getSeconds = e => Math.trunc(e % 60, 10);
function formatTime(e = 0, t = !1, i = !1) {
  if (!is.number(e)) return formatTime(void 0, t, i);
  const s = e => `0${e}`.slice(-2);
  let n = getHours(e);
  const r = getMinutes(e),
    a = getSeconds(e);
  return n = t || n > 0 ? `${n}:` : "", `${i && e > 0 ? "-" : ""}${n}${s(r)}:${s(a)}`;
}
const controls = {
  getIconUrl() {
    const e = new URL(this.config.iconUrl, window.location),
      t = window.location.host ? window.location.host : window.top.location.host,
      i = e.host !== t || browser$1.isIE && !window.svg4everybody;
    return {
      url: this.config.iconUrl,
      cors: i
    };
  },
  findElements() {
    try {
      return this.elements.controls = getElement.call(this, this.config.selectors.controls.wrapper), this.elements.buttons = {
        play: getElements.call(this, this.config.selectors.buttons.play),
        pause: getElement.call(this, this.config.selectors.buttons.pause),
        restart: getElement.call(this, this.config.selectors.buttons.restart),
        rewind: getElement.call(this, this.config.selectors.buttons.rewind),
        fastForward: getElement.call(this, this.config.selectors.buttons.fastForward),
        mute: getElement.call(this, this.config.selectors.buttons.mute),
        pip: getElement.call(this, this.config.selectors.buttons.pip),
        airplay: getElement.call(this, this.config.selectors.buttons.airplay),
        settings: getElement.call(this, this.config.selectors.buttons.settings),
        captions: getElement.call(this, this.config.selectors.buttons.captions),
        fullscreen: getElement.call(this, this.config.selectors.buttons.fullscreen)
      }, this.elements.progress = getElement.call(this, this.config.selectors.progress), this.elements.inputs = {
        seek: getElement.call(this, this.config.selectors.inputs.seek),
        volume: getElement.call(this, this.config.selectors.inputs.volume)
      }, this.elements.display = {
        buffer: getElement.call(this, this.config.selectors.display.buffer),
        currentTime: getElement.call(this, this.config.selectors.display.currentTime),
        duration: getElement.call(this, this.config.selectors.display.duration)
      }, is.element(this.elements.progress) && (this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`)), !0;
    } catch (e) {
      return this.debug.warn("It looks like there is a problem with your custom controls HTML", e), this.toggleNativeControls(!0), !1;
    }
  },
  createIcon(e, t) {
    const i = "http://www.w3.org/2000/svg",
      s = controls.getIconUrl.call(this),
      n = `${s.cors ? "" : s.url}#${this.config.iconPrefix}`,
      r = document.createElementNS(i, "svg");
    setAttributes(r, extend(t, {
      "aria-hidden": "true",
      focusable: "false"
    }));
    const a = document.createElementNS(i, "use"),
      o = `${n}-${e}`;
    return "href" in a && a.setAttributeNS("http://www.w3.org/1999/xlink", "href", o), a.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", o), r.appendChild(a), r;
  },
  createLabel(e, t = {}) {
    const i = i18n.get(e, this.config);
    return createElement("span", {
      ...t,
      class: [t.class, this.config.classNames.hidden].filter(Boolean).join(" ")
    }, i);
  },
  createBadge(e) {
    if (is.empty(e)) return null;
    const t = createElement("span", {
      class: this.config.classNames.menu.value
    });
    return t.appendChild(createElement("span", {
      class: this.config.classNames.menu.badge
    }, e)), t;
  },
  createButton(e, t) {
    const i = extend({}, t);
    let s = toCamelCase(e);
    const n = {
      element: "button",
      toggle: !1,
      label: null,
      icon: null,
      labelPressed: null,
      iconPressed: null
    };
    switch (["element", "icon", "label"].forEach(e => {
      Object.keys(i).includes(e) && (n[e] = i[e], delete i[e]);
    }), "button" !== n.element || Object.keys(i).includes("type") || (i.type = "button"), Object.keys(i).includes("class") ? i.class.split(" ").some(e => e === this.config.classNames.control) || extend(i, {
      class: `${i.class} ${this.config.classNames.control}`
    }) : i.class = this.config.classNames.control, e) {
      case "play":
        n.toggle = !0, n.label = "play", n.labelPressed = "pause", n.icon = "play", n.iconPressed = "pause";
        break;
      case "mute":
        n.toggle = !0, n.label = "mute", n.labelPressed = "unmute", n.icon = "volume", n.iconPressed = "muted";
        break;
      case "captions":
        n.toggle = !0, n.label = "enableCaptions", n.labelPressed = "disableCaptions", n.icon = "captions-off", n.iconPressed = "captions-on";
        break;
      case "fullscreen":
        n.toggle = !0, n.label = "enterFullscreen", n.labelPressed = "exitFullscreen", n.icon = "enter-fullscreen", n.iconPressed = "exit-fullscreen";
        break;
      case "play-large":
        i.class += ` ${this.config.classNames.control}--overlaid`, s = "play", n.label = "play", n.icon = "play";
        break;
      default:
        is.empty(n.label) && (n.label = s), is.empty(n.icon) && (n.icon = e);
    }
    const r = createElement(n.element);
    return n.toggle ? (r.appendChild(controls.createIcon.call(this, n.iconPressed, {
      class: "icon--pressed"
    })), r.appendChild(controls.createIcon.call(this, n.icon, {
      class: "icon--not-pressed"
    })), r.appendChild(controls.createLabel.call(this, n.labelPressed, {
      class: "label--pressed"
    })), r.appendChild(controls.createLabel.call(this, n.label, {
      class: "label--not-pressed"
    }))) : (r.appendChild(controls.createIcon.call(this, n.icon)), r.appendChild(controls.createLabel.call(this, n.label))), extend(i, getAttributesFromSelector(this.config.selectors.buttons[s], i)), setAttributes(r, i), "play" === s ? (is.array(this.elements.buttons[s]) || (this.elements.buttons[s] = []), this.elements.buttons[s].push(r)) : this.elements.buttons[s] = r, r;
  },
  createRange(e, t) {
    const i = createElement("input", extend(getAttributesFromSelector(this.config.selectors.inputs[e]), {
      type: "range",
      min: 0,
      max: 100,
      step: .01,
      value: 0,
      autocomplete: "off",
      role: "slider",
      "aria-label": i18n.get(e, this.config),
      "aria-valuemin": 0,
      "aria-valuemax": 100,
      "aria-valuenow": 0
    }, t));
    return this.elements.inputs[e] = i, controls.updateRangeFill.call(this, i), RangeTouch.setup(i), i;
  },
  createProgress(e, t) {
    const i = createElement("progress", extend(getAttributesFromSelector(this.config.selectors.display[e]), {
      min: 0,
      max: 100,
      value: 0,
      role: "progressbar",
      "aria-hidden": !0
    }, t));
    if ("volume" !== e) {
      i.appendChild(createElement("span", null, "0"));
      const t = {
          played: "played",
          buffer: "buffered"
        }[e],
        s = t ? i18n.get(t, this.config) : "";
      i.innerText = `% ${s.toLowerCase()}`;
    }
    return this.elements.display[e] = i, i;
  },
  createTime(e, t) {
    const i = getAttributesFromSelector(this.config.selectors.display[e], t),
      s = createElement("div", extend(i, {
        class: `${i.class ? i.class : ""} ${this.config.classNames.display.time} `.trim(),
        "aria-label": i18n.get(e, this.config),
        role: "timer"
      }), "00:00");
    return this.elements.display[e] = s, s;
  },
  bindMenuItemShortcuts(e, t) {
    on.call(this, e, "keydown keyup", i => {
      if (![" ", "ArrowUp", "ArrowDown", "ArrowRight"].includes(i.key)) return;
      if (i.preventDefault(), i.stopPropagation(), "keydown" === i.type) return;
      const s = matches(e, '[role="menuitemradio"]');
      if (!s && [" ", "ArrowRight"].includes(i.key)) controls.showMenuPanel.call(this, t, !0);else {
        let t;
        " " !== i.key && ("ArrowDown" === i.key || s && "ArrowRight" === i.key ? (t = e.nextElementSibling, is.element(t) || (t = e.parentNode.firstElementChild)) : (t = e.previousElementSibling, is.element(t) || (t = e.parentNode.lastElementChild)), setFocus.call(this, t, !0));
      }
    }, !1), on.call(this, e, "keyup", e => {
      "Return" === e.key && controls.focusFirstMenuItem.call(this, null, !0);
    });
  },
  createMenuItem({
    value: e,
    list: t,
    type: i,
    title: s,
    badge: n = null,
    checked: r = !1
  }) {
    const a = getAttributesFromSelector(this.config.selectors.inputs[i]),
      o = createElement("button", extend(a, {
        type: "button",
        role: "menuitemradio",
        class: `${this.config.classNames.control} ${a.class ? a.class : ""}`.trim(),
        "aria-checked": r,
        value: e
      })),
      l = createElement("span");
    l.innerHTML = s, is.element(n) && l.appendChild(n), o.appendChild(l), Object.defineProperty(o, "checked", {
      enumerable: !0,
      get: () => "true" === o.getAttribute("aria-checked"),
      set(e) {
        e && Array.from(o.parentNode.children).filter(e => matches(e, '[role="menuitemradio"]')).forEach(e => e.setAttribute("aria-checked", "false")), o.setAttribute("aria-checked", e ? "true" : "false");
      }
    }), this.listeners.bind(o, "click keyup", t => {
      if (!is.keyboardEvent(t) || " " === t.key) {
        switch (t.preventDefault(), t.stopPropagation(), o.checked = !0, i) {
          case "language":
            this.currentTrack = Number(e);
            break;
          case "quality":
            this.quality = e;
            break;
          case "speed":
            this.speed = parseFloat(e);
        }
        controls.showMenuPanel.call(this, "home", is.keyboardEvent(t));
      }
    }, i, !1), controls.bindMenuItemShortcuts.call(this, o, i), t.appendChild(o);
  },
  formatTime(e = 0, t = !1) {
    if (!is.number(e)) return e;
    return formatTime(e, getHours(this.duration) > 0, t);
  },
  updateTimeDisplay(e = null, t = 0, i = !1) {
    is.element(e) && is.number(t) && (e.innerText = controls.formatTime(t, i));
  },
  updateVolume() {
    this.supported.ui && (is.element(this.elements.inputs.volume) && controls.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume), is.element(this.elements.buttons.mute) && (this.elements.buttons.mute.pressed = this.muted || 0 === this.volume));
  },
  setRange(e, t = 0) {
    is.element(e) && (e.value = t, controls.updateRangeFill.call(this, e));
  },
  updateProgress(e) {
    if (!this.supported.ui || !is.event(e)) return;
    let t = 0;
    const i = (e, t) => {
      const i = is.number(t) ? t : 0,
        s = is.element(e) ? e : this.elements.display.buffer;
      if (is.element(s)) {
        s.value = i;
        const e = s.getElementsByTagName("span")[0];
        is.element(e) && (e.childNodes[0].nodeValue = i);
      }
    };
    if (e) switch (e.type) {
      case "timeupdate":
      case "seeking":
      case "seeked":
        t = getPercentage(this.currentTime, this.duration), "timeupdate" === e.type && controls.setRange.call(this, this.elements.inputs.seek, t);
        break;
      case "playing":
      case "progress":
        i(this.elements.display.buffer, 100 * this.buffered);
    }
  },
  updateRangeFill(e) {
    const t = is.event(e) ? e.target : e;
    if (is.element(t) && "range" === t.getAttribute("type")) {
      if (matches(t, this.config.selectors.inputs.seek)) {
        t.setAttribute("aria-valuenow", this.currentTime);
        const e = controls.formatTime(this.currentTime),
          i = controls.formatTime(this.duration),
          s = i18n.get("seekLabel", this.config);
        t.setAttribute("aria-valuetext", s.replace("{currentTime}", e).replace("{duration}", i));
      } else if (matches(t, this.config.selectors.inputs.volume)) {
        const e = 100 * t.value;
        t.setAttribute("aria-valuenow", e), t.setAttribute("aria-valuetext", `${e.toFixed(1)}%`);
      } else t.setAttribute("aria-valuenow", t.value);
      (browser$1.isWebKit || browser$1.isIPadOS) && t.style.setProperty("--value", t.value / t.max * 100 + "%");
    }
  },
  updateSeekTooltip(e) {
    var t, i;
    if (!this.config.tooltips.seek || !is.element(this.elements.inputs.seek) || !is.element(this.elements.display.seekTooltip) || 0 === this.duration) return;
    const s = this.elements.display.seekTooltip,
      n = `${this.config.classNames.tooltip}--visible`,
      r = e => toggleClass(s, n, e);
    if (this.touch) return void r(!1);
    let a = 0;
    const o = this.elements.progress.getBoundingClientRect();
    if (is.event(e)) a = 100 / o.width * (e.pageX - o.left);else {
      if (!hasClass(s, n)) return;
      a = parseFloat(s.style.left, 10);
    }
    a < 0 ? a = 0 : a > 100 && (a = 100);
    const l = this.duration / 100 * a;
    s.innerText = controls.formatTime(l);
    const c = null === (t = this.config.markers) || void 0 === t || null === (i = t.points) || void 0 === i ? void 0 : i.find(({
      time: e
    }) => e === Math.round(l));
    c && s.insertAdjacentHTML("afterbegin", `${c.label}<br>`), s.style.left = `${a}%`, is.event(e) && ["mouseenter", "mouseleave"].includes(e.type) && r("mouseenter" === e.type);
  },
  timeUpdate(e) {
    const t = !is.element(this.elements.display.duration) && this.config.invertTime;
    controls.updateTimeDisplay.call(this, this.elements.display.currentTime, t ? this.duration - this.currentTime : this.currentTime, t), e && "timeupdate" === e.type && this.media.seeking || controls.updateProgress.call(this, e);
  },
  durationUpdate() {
    if (!this.supported.ui || !this.config.invertTime && this.currentTime) return;
    if (this.duration >= 2 ** 32) return toggleHidden(this.elements.display.currentTime, !0), void toggleHidden(this.elements.progress, !0);
    is.element(this.elements.inputs.seek) && this.elements.inputs.seek.setAttribute("aria-valuemax", this.duration);
    const e = is.element(this.elements.display.duration);
    !e && this.config.displayDuration && this.paused && controls.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration), e && controls.updateTimeDisplay.call(this, this.elements.display.duration, this.duration), this.config.markers.enabled && controls.setMarkers.call(this), controls.updateSeekTooltip.call(this);
  },
  toggleMenuButton(e, t) {
    toggleHidden(this.elements.settings.buttons[e], !t);
  },
  updateSetting(e, t, i) {
    const s = this.elements.settings.panels[e];
    let n = null,
      r = t;
    if ("captions" === e) n = this.currentTrack;else {
      if (n = is.empty(i) ? this[e] : i, is.empty(n) && (n = this.config[e].default), !is.empty(this.options[e]) && !this.options[e].includes(n)) return void this.debug.warn(`Unsupported value of '${n}' for ${e}`);
      if (!this.config[e].options.includes(n)) return void this.debug.warn(`Disabled value of '${n}' for ${e}`);
    }
    if (is.element(r) || (r = s && s.querySelector('[role="menu"]')), !is.element(r)) return;
    this.elements.settings.buttons[e].querySelector(`.${this.config.classNames.menu.value}`).innerHTML = controls.getLabel.call(this, e, n);
    const a = r && r.querySelector(`[value="${n}"]`);
    is.element(a) && (a.checked = !0);
  },
  getLabel(e, t) {
    switch (e) {
      case "speed":
        return 1 === t ? i18n.get("normal", this.config) : `${t}&times;`;
      case "quality":
        if (is.number(t)) {
          const e = i18n.get(`qualityLabel.${t}`, this.config);
          return e.length ? e : `${t}p`;
        }
        return toTitleCase(t);
      case "captions":
        return captions.getLabel.call(this);
      default:
        return null;
    }
  },
  setQualityMenu(e) {
    if (!is.element(this.elements.settings.panels.quality)) return;
    const t = "quality",
      i = this.elements.settings.panels.quality.querySelector('[role="menu"]');
    is.array(e) && (this.options.quality = dedupe(e).filter(e => this.config.quality.options.includes(e)));
    const s = !is.empty(this.options.quality) && this.options.quality.length > 1;
    if (controls.toggleMenuButton.call(this, t, s), emptyElement(i), controls.checkMenu.call(this), !s) return;
    const n = e => {
      const t = i18n.get(`qualityBadge.${e}`, this.config);
      return t.length ? controls.createBadge.call(this, t) : null;
    };
    this.options.quality.sort((e, t) => {
      const i = this.config.quality.options;
      return i.indexOf(e) > i.indexOf(t) ? 1 : -1;
    }).forEach(e => {
      controls.createMenuItem.call(this, {
        value: e,
        list: i,
        type: t,
        title: controls.getLabel.call(this, "quality", e),
        badge: n(e)
      });
    }), controls.updateSetting.call(this, t, i);
  },
  setCaptionsMenu() {
    if (!is.element(this.elements.settings.panels.captions)) return;
    const e = "captions",
      t = this.elements.settings.panels.captions.querySelector('[role="menu"]'),
      i = captions.getTracks.call(this),
      s = Boolean(i.length);
    if (controls.toggleMenuButton.call(this, e, s), emptyElement(t), controls.checkMenu.call(this), !s) return;
    const n = i.map((e, i) => ({
      value: i,
      checked: this.captions.toggled && this.currentTrack === i,
      title: captions.getLabel.call(this, e),
      badge: e.language && controls.createBadge.call(this, e.language.toUpperCase()),
      list: t,
      type: "language"
    }));
    n.unshift({
      value: -1,
      checked: !this.captions.toggled,
      title: i18n.get("disabled", this.config),
      list: t,
      type: "language"
    }), n.forEach(controls.createMenuItem.bind(this)), controls.updateSetting.call(this, e, t);
  },
  setSpeedMenu() {
    if (!is.element(this.elements.settings.panels.speed)) return;
    const e = "speed",
      t = this.elements.settings.panels.speed.querySelector('[role="menu"]');
    this.options.speed = this.options.speed.filter(e => e >= this.minimumSpeed && e <= this.maximumSpeed);
    const i = !is.empty(this.options.speed) && this.options.speed.length > 1;
    controls.toggleMenuButton.call(this, e, i), emptyElement(t), controls.checkMenu.call(this), i && (this.options.speed.forEach(i => {
      controls.createMenuItem.call(this, {
        value: i,
        list: t,
        type: e,
        title: controls.getLabel.call(this, "speed", i)
      });
    }), controls.updateSetting.call(this, e, t));
  },
  checkMenu() {
    const {
        buttons: e
      } = this.elements.settings,
      t = !is.empty(e) && Object.values(e).some(e => !e.hidden);
    toggleHidden(this.elements.settings.menu, !t);
  },
  focusFirstMenuItem(e, t = !1) {
    if (this.elements.settings.popup.hidden) return;
    let i = e;
    is.element(i) || (i = Object.values(this.elements.settings.panels).find(e => !e.hidden));
    const s = i.querySelector('[role^="menuitem"]');
    setFocus.call(this, s, t);
  },
  toggleMenu(e) {
    const {
        popup: t
      } = this.elements.settings,
      i = this.elements.buttons.settings;
    if (!is.element(t) || !is.element(i)) return;
    const {
      hidden: s
    } = t;
    let n = s;
    if (is.boolean(e)) n = e;else if (is.keyboardEvent(e) && "Escape" === e.key) n = !1;else if (is.event(e)) {
      const s = is.function(e.composedPath) ? e.composedPath()[0] : e.target,
        r = t.contains(s);
      if (r || !r && e.target !== i && n) return;
    }
    i.setAttribute("aria-expanded", n), toggleHidden(t, !n), toggleClass(this.elements.container, this.config.classNames.menu.open, n), n && is.keyboardEvent(e) ? controls.focusFirstMenuItem.call(this, null, !0) : n || s || setFocus.call(this, i, is.keyboardEvent(e));
  },
  getMenuSize(e) {
    const t = e.cloneNode(!0);
    t.style.position = "absolute", t.style.opacity = 0, t.removeAttribute("hidden"), e.parentNode.appendChild(t);
    const i = t.scrollWidth,
      s = t.scrollHeight;
    return removeElement(t), {
      width: i,
      height: s
    };
  },
  showMenuPanel(e = "", t = !1) {
    const i = this.elements.container.querySelector(`#plyr-settings-${this.id}-${e}`);
    if (!is.element(i)) return;
    const s = i.parentNode,
      n = Array.from(s.children).find(e => !e.hidden);
    if (support.transitions && !support.reducedMotion) {
      s.style.width = `${n.scrollWidth}px`, s.style.height = `${n.scrollHeight}px`;
      const e = controls.getMenuSize.call(this, i),
        t = e => {
          e.target === s && ["width", "height"].includes(e.propertyName) && (s.style.width = "", s.style.height = "", off.call(this, s, transitionEndEvent, t));
        };
      on.call(this, s, transitionEndEvent, t), s.style.width = `${e.width}px`, s.style.height = `${e.height}px`;
    }
    toggleHidden(n, !0), toggleHidden(i, !1), controls.focusFirstMenuItem.call(this, i, t);
  },
  setDownloadUrl() {
    const e = this.elements.buttons.download;
    is.element(e) && e.setAttribute("href", this.download);
  },
  create(e) {
    const {
      bindMenuItemShortcuts: t,
      createButton: i,
      createProgress: s,
      createRange: n,
      createTime: r,
      setQualityMenu: a,
      setSpeedMenu: o,
      showMenuPanel: l
    } = controls;
    this.elements.controls = null, is.array(this.config.controls) && this.config.controls.includes("play-large") && this.elements.container.appendChild(i.call(this, "play-large"));
    const c = createElement("div", getAttributesFromSelector(this.config.selectors.controls.wrapper));
    this.elements.controls = c;
    const u = {
      class: "plyr__controls__item"
    };
    return dedupe(is.array(this.config.controls) ? this.config.controls : []).forEach(a => {
      if ("restart" === a && c.appendChild(i.call(this, "restart", u)), "rewind" === a && c.appendChild(i.call(this, "rewind", u)), "play" === a && c.appendChild(i.call(this, "play", u)), "fast-forward" === a && c.appendChild(i.call(this, "fast-forward", u)), "progress" === a) {
        const t = createElement("div", {
            class: `${u.class} plyr__progress__container`
          }),
          i = createElement("div", getAttributesFromSelector(this.config.selectors.progress));
        if (i.appendChild(n.call(this, "seek", {
          id: `plyr-seek-${e.id}`
        })), i.appendChild(s.call(this, "buffer")), this.config.tooltips.seek) {
          const e = createElement("span", {
            class: this.config.classNames.tooltip
          }, "00:00");
          i.appendChild(e), this.elements.display.seekTooltip = e;
        }
        this.elements.progress = i, t.appendChild(this.elements.progress), c.appendChild(t);
      }
      if ("current-time" === a && c.appendChild(r.call(this, "currentTime", u)), "duration" === a && c.appendChild(r.call(this, "duration", u)), "mute" === a || "volume" === a) {
        let {
          volume: t
        } = this.elements;
        if (is.element(t) && c.contains(t) || (t = createElement("div", extend({}, u, {
          class: `${u.class} plyr__volume`.trim()
        })), this.elements.volume = t, c.appendChild(t)), "mute" === a && t.appendChild(i.call(this, "mute")), "volume" === a && !browser$1.isIos && !browser$1.isIPadOS) {
          const i = {
            max: 1,
            step: .05,
            value: this.config.volume
          };
          t.appendChild(n.call(this, "volume", extend(i, {
            id: `plyr-volume-${e.id}`
          })));
        }
      }
      if ("captions" === a && c.appendChild(i.call(this, "captions", u)), "settings" === a && !is.empty(this.config.settings)) {
        const s = createElement("div", extend({}, u, {
          class: `${u.class} plyr__menu`.trim(),
          hidden: ""
        }));
        s.appendChild(i.call(this, "settings", {
          "aria-haspopup": !0,
          "aria-controls": `plyr-settings-${e.id}`,
          "aria-expanded": !1
        }));
        const n = createElement("div", {
            class: "plyr__menu__container",
            id: `plyr-settings-${e.id}`,
            hidden: ""
          }),
          r = createElement("div"),
          a = createElement("div", {
            id: `plyr-settings-${e.id}-home`
          }),
          o = createElement("div", {
            role: "menu"
          });
        a.appendChild(o), r.appendChild(a), this.elements.settings.panels.home = a, this.config.settings.forEach(i => {
          const s = createElement("button", extend(getAttributesFromSelector(this.config.selectors.buttons.settings), {
            type: "button",
            class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,
            role: "menuitem",
            "aria-haspopup": !0,
            hidden: ""
          }));
          t.call(this, s, i), on.call(this, s, "click", () => {
            l.call(this, i, !1);
          });
          const n = createElement("span", null, i18n.get(i, this.config)),
            a = createElement("span", {
              class: this.config.classNames.menu.value
            });
          a.innerHTML = e[i], n.appendChild(a), s.appendChild(n), o.appendChild(s);
          const c = createElement("div", {
              id: `plyr-settings-${e.id}-${i}`,
              hidden: ""
            }),
            u = createElement("button", {
              type: "button",
              class: `${this.config.classNames.control} ${this.config.classNames.control}--back`
            });
          u.appendChild(createElement("span", {
            "aria-hidden": !0
          }, i18n.get(i, this.config))), u.appendChild(createElement("span", {
            class: this.config.classNames.hidden
          }, i18n.get("menuBack", this.config))), on.call(this, c, "keydown", e => {
            "ArrowLeft" === e.key && (e.preventDefault(), e.stopPropagation(), l.call(this, "home", !0));
          }, !1), on.call(this, u, "click", () => {
            l.call(this, "home", !1);
          }), c.appendChild(u), c.appendChild(createElement("div", {
            role: "menu"
          })), r.appendChild(c), this.elements.settings.buttons[i] = s, this.elements.settings.panels[i] = c;
        }), n.appendChild(r), s.appendChild(n), c.appendChild(s), this.elements.settings.popup = n, this.elements.settings.menu = s;
      }
      if ("pip" === a && support.pip && c.appendChild(i.call(this, "pip", u)), "airplay" === a && support.airplay && c.appendChild(i.call(this, "airplay", u)), "download" === a) {
        const e = extend({}, u, {
          element: "a",
          href: this.download,
          target: "_blank"
        });
        this.isHTML5 && (e.download = "");
        const {
          download: t
        } = this.config.urls;
        !is.url(t) && this.isEmbed && extend(e, {
          icon: `logo-${this.provider}`,
          label: this.provider
        }), c.appendChild(i.call(this, "download", e));
      }
      "fullscreen" === a && c.appendChild(i.call(this, "fullscreen", u));
    }), this.isHTML5 && a.call(this, html5.getQualityOptions.call(this)), o.call(this), c;
  },
  inject() {
    if (this.config.loadSprite) {
      const e = controls.getIconUrl.call(this);
      e.cors && loadSprite(e.url, "sprite-plyr");
    }
    this.id = Math.floor(1e4 * Math.random());
    let e = null;
    this.elements.controls = null;
    const t = {
      id: this.id,
      seektime: this.config.seekTime,
      title: this.config.title
    };
    let i = !0;
    is.function(this.config.controls) && (this.config.controls = this.config.controls.call(this, t)), this.config.controls || (this.config.controls = []), is.element(this.config.controls) || is.string(this.config.controls) ? e = this.config.controls : (e = controls.create.call(this, {
      id: this.id,
      seektime: this.config.seekTime,
      speed: this.speed,
      quality: this.quality,
      captions: captions.getLabel.call(this)
    }), i = !1);
    let s;
    i && is.string(this.config.controls) && (e = (e => {
      let i = e;
      return Object.entries(t).forEach(([e, t]) => {
        i = replaceAll(i, `{${e}}`, t);
      }), i;
    })(e)), is.string(this.config.selectors.controls.container) && (s = document.querySelector(this.config.selectors.controls.container)), is.element(s) || (s = this.elements.container);
    if (s[is.element(e) ? "insertAdjacentElement" : "insertAdjacentHTML"]("afterbegin", e), is.element(this.elements.controls) || controls.findElements.call(this), !is.empty(this.elements.buttons)) {
      const e = e => {
        const t = this.config.classNames.controlPressed;
        e.setAttribute("aria-pressed", "false"), Object.defineProperty(e, "pressed", {
          configurable: !0,
          enumerable: !0,
          get: () => hasClass(e, t),
          set(i = !1) {
            toggleClass(e, t, i), e.setAttribute("aria-pressed", i ? "true" : "false");
          }
        });
      };
      Object.values(this.elements.buttons).filter(Boolean).forEach(t => {
        is.array(t) || is.nodeList(t) ? Array.from(t).filter(Boolean).forEach(e) : e(t);
      });
    }
    if (browser$1.isEdge && repaint(s), this.config.tooltips.controls) {
      const {
          classNames: e,
          selectors: t
        } = this.config,
        i = `${t.controls.wrapper} ${t.labels} .${e.hidden}`,
        s = getElements.call(this, i);
      Array.from(s).forEach(e => {
        toggleClass(e, this.config.classNames.hidden, !1), toggleClass(e, this.config.classNames.tooltip, !0);
      });
    }
  },
  setMediaMetadata() {
    try {
      "mediaSession" in navigator && (navigator.mediaSession.metadata = new window.MediaMetadata({
        title: this.config.mediaMetadata.title,
        artist: this.config.mediaMetadata.artist,
        album: this.config.mediaMetadata.album,
        artwork: this.config.mediaMetadata.artwork
      }));
    } catch (e) {}
  },
  setMarkers() {
    var e, t;
    if (!this.duration || this.elements.markers) return;
    const i = null === (e = this.config.markers) || void 0 === e || null === (t = e.points) || void 0 === t ? void 0 : t.filter(({
      time: e
    }) => e > 0 && e < this.duration);
    if (null == i || !i.length) return;
    const s = document.createDocumentFragment(),
      n = document.createDocumentFragment();
    let r = null;
    const a = `${this.config.classNames.tooltip}--visible`,
      o = e => toggleClass(r, a, e);
    i.forEach(e => {
      const t = createElement("span", {
          class: this.config.classNames.marker
        }, ""),
        i = e.time / this.duration * 100 + "%";
      r && (t.addEventListener("mouseenter", () => {
        e.label || (r.style.left = i, r.innerHTML = e.label, o(!0));
      }), t.addEventListener("mouseleave", () => {
        o(!1);
      })), t.addEventListener("click", () => {
        this.currentTime = e.time;
      }), t.style.left = i, n.appendChild(t);
    }), s.appendChild(n), this.config.tooltips.seek || (r = createElement("span", {
      class: this.config.classNames.tooltip
    }, ""), s.appendChild(r)), this.elements.markers = {
      points: n,
      tip: r
    }, this.elements.progress.appendChild(s);
  }
};
function parseUrl(e, t = !0) {
  let i = e;
  if (t) {
    const e = document.createElement("a");
    e.href = i, i = e.href;
  }
  try {
    return new URL(i);
  } catch (e) {
    return null;
  }
}
function buildUrlParams(e) {
  const t = new URLSearchParams();
  return is.object(e) && Object.entries(e).forEach(([e, i]) => {
    t.set(e, i);
  }), t;
}
const captions = {
    setup() {
      if (!this.supported.ui) return;
      if (!this.isVideo || this.isYouTube || this.isHTML5 && !support.textTracks) return void (is.array(this.config.controls) && this.config.controls.includes("settings") && this.config.settings.includes("captions") && controls.setCaptionsMenu.call(this));
      if (is.element(this.elements.captions) || (this.elements.captions = createElement("div", getAttributesFromSelector(this.config.selectors.captions)), this.elements.captions.setAttribute("dir", "auto"), insertAfter(this.elements.captions, this.elements.wrapper)), browser$1.isIE && window.URL) {
        const e = this.media.querySelectorAll("track");
        Array.from(e).forEach(e => {
          const t = e.getAttribute("src"),
            i = parseUrl(t);
          null !== i && i.hostname !== window.location.href.hostname && ["http:", "https:"].includes(i.protocol) && fetch$1(t, "blob").then(t => {
            e.setAttribute("src", window.URL.createObjectURL(t));
          }).catch(() => {
            removeElement(e);
          });
        });
      }
      const e = dedupe((navigator.languages || [navigator.language || navigator.userLanguage || "en"]).map(e => e.split("-")[0]));
      let t = (this.storage.get("language") || this.config.captions.language || "auto").toLowerCase();
      "auto" === t && ([t] = e);
      let i = this.storage.get("captions");
      if (is.boolean(i) || ({
        active: i
      } = this.config.captions), Object.assign(this.captions, {
        toggled: !1,
        active: i,
        language: t,
        languages: e
      }), this.isHTML5) {
        const e = this.config.captions.update ? "addtrack removetrack" : "removetrack";
        on.call(this, this.media.textTracks, e, captions.update.bind(this));
      }
      setTimeout(captions.update.bind(this), 0);
    },
    update() {
      const e = captions.getTracks.call(this, !0),
        {
          active: t,
          language: i,
          meta: s,
          currentTrackNode: n
        } = this.captions,
        r = Boolean(e.find(e => e.language === i));
      this.isHTML5 && this.isVideo && e.filter(e => !s.get(e)).forEach(e => {
        this.debug.log("Track added", e), s.set(e, {
          default: "showing" === e.mode
        }), "showing" === e.mode && (e.mode = "hidden"), on.call(this, e, "cuechange", () => captions.updateCues.call(this));
      }), (r && this.language !== i || !e.includes(n)) && (captions.setLanguage.call(this, i), captions.toggle.call(this, t && r)), this.elements && toggleClass(this.elements.container, this.config.classNames.captions.enabled, !is.empty(e)), is.array(this.config.controls) && this.config.controls.includes("settings") && this.config.settings.includes("captions") && controls.setCaptionsMenu.call(this);
    },
    toggle(e, t = !0) {
      if (!this.supported.ui) return;
      const {
          toggled: i
        } = this.captions,
        s = this.config.classNames.captions.active,
        n = is.nullOrUndefined(e) ? !i : e;
      if (n !== i) {
        if (t || (this.captions.active = n, this.storage.set({
          captions: n
        })), !this.language && n && !t) {
          const e = captions.getTracks.call(this),
            t = captions.findTrack.call(this, [this.captions.language, ...this.captions.languages], !0);
          return this.captions.language = t.language, void captions.set.call(this, e.indexOf(t));
        }
        this.elements.buttons.captions && (this.elements.buttons.captions.pressed = n), toggleClass(this.elements.container, s, n), this.captions.toggled = n, controls.updateSetting.call(this, "captions"), triggerEvent.call(this, this.media, n ? "captionsenabled" : "captionsdisabled");
      }
      setTimeout(() => {
        n && this.captions.toggled && (this.captions.currentTrackNode.mode = "hidden");
      });
    },
    set(e, t = !0) {
      const i = captions.getTracks.call(this);
      if (-1 !== e) {
        if (is.number(e)) {
          if (e in i) {
            if (this.captions.currentTrack !== e) {
              this.captions.currentTrack = e;
              const s = i[e],
                {
                  language: n
                } = s || {};
              this.captions.currentTrackNode = s, controls.updateSetting.call(this, "captions"), t || (this.captions.language = n, this.storage.set({
                language: n
              })), this.isVimeo && this.embed.enableTextTrack(n), triggerEvent.call(this, this.media, "languagechange");
            }
            captions.toggle.call(this, !0, t), this.isHTML5 && this.isVideo && captions.updateCues.call(this);
          } else this.debug.warn("Track not found", e);
        } else this.debug.warn("Invalid caption argument", e);
      } else captions.toggle.call(this, !1, t);
    },
    setLanguage(e, t = !0) {
      if (!is.string(e)) return void this.debug.warn("Invalid language argument", e);
      const i = e.toLowerCase();
      this.captions.language = i;
      const s = captions.getTracks.call(this),
        n = captions.findTrack.call(this, [i]);
      captions.set.call(this, s.indexOf(n), t);
    },
    getTracks(e = !1) {
      return Array.from((this.media || {}).textTracks || []).filter(t => !this.isHTML5 || e || this.captions.meta.has(t)).filter(e => ["captions", "subtitles"].includes(e.kind));
    },
    findTrack(e, t = !1) {
      const i = captions.getTracks.call(this),
        s = e => Number((this.captions.meta.get(e) || {}).default),
        n = Array.from(i).sort((e, t) => s(t) - s(e));
      let r;
      return e.every(e => (r = n.find(t => t.language === e), !r)), r || (t ? n[0] : void 0);
    },
    getCurrentTrack() {
      return captions.getTracks.call(this)[this.currentTrack];
    },
    getLabel(e) {
      let t = e;
      return !is.track(t) && support.textTracks && this.captions.toggled && (t = captions.getCurrentTrack.call(this)), is.track(t) ? is.empty(t.label) ? is.empty(t.language) ? i18n.get("enabled", this.config) : e.language.toUpperCase() : t.label : i18n.get("disabled", this.config);
    },
    updateCues(e) {
      if (!this.supported.ui) return;
      if (!is.element(this.elements.captions)) return void this.debug.warn("No captions element to render to");
      if (!is.nullOrUndefined(e) && !Array.isArray(e)) return void this.debug.warn("updateCues: Invalid input", e);
      let t = e;
      if (!t) {
        const e = captions.getCurrentTrack.call(this);
        t = Array.from((e || {}).activeCues || []).map(e => e.getCueAsHTML()).map(getHTML);
      }
      const i = t.map(e => e.trim()).join("\n");
      if (i !== this.elements.captions.innerHTML) {
        emptyElement(this.elements.captions);
        const e = createElement("span", getAttributesFromSelector(this.config.selectors.caption));
        e.innerHTML = i, this.elements.captions.appendChild(e), triggerEvent.call(this, this.media, "cuechange");
      }
    }
  },
  defaults$2 = {
    enabled: !0,
    title: "",
    debug: !1,
    autoplay: !1,
    autopause: !0,
    playsinline: !0,
    seekTime: 10,
    volume: 1,
    muted: !1,
    duration: null,
    displayDuration: !0,
    invertTime: !0,
    toggleInvert: !0,
    ratio: null,
    clickToPlay: !0,
    hideControls: !0,
    resetOnEnd: !1,
    disableContextMenu: !0,
    loadSprite: !0,
    iconPrefix: "plyr",
    iconUrl: "https://cdn.plyr.io/3.7.8/plyr.svg",
    blankVideo: "https://cdn.plyr.io/static/blank.mp4",
    quality: {
      default: 576,
      options: [4320, 2880, 2160, 1440, 1080, 720, 576, 480, 360, 240],
      forced: !1,
      onChange: null
    },
    loop: {
      active: !1
    },
    speed: {
      selected: 1,
      options: [.5, .75, 1, 1.25, 1.5, 1.75, 2, 4]
    },
    keyboard: {
      focused: !0,
      global: !1
    },
    tooltips: {
      controls: !1,
      seek: !0
    },
    captions: {
      active: !1,
      language: "auto",
      update: !1
    },
    fullscreen: {
      enabled: !0,
      fallback: !0,
      iosNative: !1
    },
    storage: {
      enabled: !0,
      key: "plyr"
    },
    controls: ["play-large", "play", "progress", "current-time", "mute", "volume", "captions", "settings", "pip", "airplay", "fullscreen"],
    settings: ["captions", "quality", "speed"],
    i18n: {
      restart: "Restart",
      rewind: "Rewind {seektime}s",
      play: "Play",
      pause: "Pause",
      fastForward: "Forward {seektime}s",
      seek: "Seek",
      seekLabel: "{currentTime} of {duration}",
      played: "Played",
      buffered: "Buffered",
      currentTime: "Current time",
      duration: "Duration",
      volume: "Volume",
      mute: "Mute",
      unmute: "Unmute",
      enableCaptions: "Enable captions",
      disableCaptions: "Disable captions",
      download: "Download",
      enterFullscreen: "Enter fullscreen",
      exitFullscreen: "Exit fullscreen",
      frameTitle: "Player for {title}",
      captions: "Captions",
      settings: "Settings",
      pip: "PIP",
      menuBack: "Go back to previous menu",
      speed: "Speed",
      normal: "Normal",
      quality: "Quality",
      loop: "Loop",
      start: "Start",
      end: "End",
      all: "All",
      reset: "Reset",
      disabled: "Disabled",
      enabled: "Enabled",
      advertisement: "Ad",
      qualityBadge: {
        2160: "4K",
        1440: "HD",
        1080: "HD",
        720: "HD",
        576: "SD",
        480: "SD"
      }
    },
    urls: {
      download: null,
      vimeo: {
        sdk: "https://player.vimeo.com/api/player.js",
        iframe: "https://player.vimeo.com/video/{0}?{1}",
        api: "https://vimeo.com/api/oembed.json?url={0}"
      },
      youtube: {
        sdk: "https://www.youtube.com/iframe_api",
        api: "https://noembed.com/embed?url=https://www.youtube.com/watch?v={0}"
      },
      googleIMA: {
        sdk: "https://imasdk.googleapis.com/js/sdkloader/ima3.js"
      }
    },
    listeners: {
      seek: null,
      play: null,
      pause: null,
      restart: null,
      rewind: null,
      fastForward: null,
      mute: null,
      volume: null,
      captions: null,
      download: null,
      fullscreen: null,
      pip: null,
      airplay: null,
      speed: null,
      quality: null,
      loop: null,
      language: null
    },
    events: ["ended", "progress", "stalled", "playing", "waiting", "canplay", "canplaythrough", "loadstart", "loadeddata", "loadedmetadata", "timeupdate", "volumechange", "play", "pause", "error", "seeking", "seeked", "emptied", "ratechange", "cuechange", "download", "enterfullscreen", "exitfullscreen", "captionsenabled", "captionsdisabled", "languagechange", "controlshidden", "controlsshown", "ready", "statechange", "qualitychange", "adsloaded", "adscontentpause", "adscontentresume", "adstarted", "adsmidpoint", "adscomplete", "adsallcomplete", "adsimpression", "adsclick"],
    selectors: {
      editable: "input, textarea, select, [contenteditable]",
      container: ".plyr",
      controls: {
        container: null,
        wrapper: ".plyr__controls"
      },
      labels: "[data-plyr]",
      buttons: {
        play: '[data-plyr="play"]',
        pause: '[data-plyr="pause"]',
        restart: '[data-plyr="restart"]',
        rewind: '[data-plyr="rewind"]',
        fastForward: '[data-plyr="fast-forward"]',
        mute: '[data-plyr="mute"]',
        captions: '[data-plyr="captions"]',
        download: '[data-plyr="download"]',
        fullscreen: '[data-plyr="fullscreen"]',
        pip: '[data-plyr="pip"]',
        airplay: '[data-plyr="airplay"]',
        settings: '[data-plyr="settings"]',
        loop: '[data-plyr="loop"]'
      },
      inputs: {
        seek: '[data-plyr="seek"]',
        volume: '[data-plyr="volume"]',
        speed: '[data-plyr="speed"]',
        language: '[data-plyr="language"]',
        quality: '[data-plyr="quality"]'
      },
      display: {
        currentTime: ".plyr__time--current",
        duration: ".plyr__time--duration",
        buffer: ".plyr__progress__buffer",
        loop: ".plyr__progress__loop",
        volume: ".plyr__volume--display"
      },
      progress: ".plyr__progress",
      captions: ".plyr__captions",
      caption: ".plyr__caption"
    },
    classNames: {
      type: "plyr--{0}",
      provider: "plyr--{0}",
      video: "plyr__video-wrapper",
      embed: "plyr__video-embed",
      videoFixedRatio: "plyr__video-wrapper--fixed-ratio",
      embedContainer: "plyr__video-embed__container",
      poster: "plyr__poster",
      posterEnabled: "plyr__poster-enabled",
      ads: "plyr__ads",
      control: "plyr__control",
      controlPressed: "plyr__control--pressed",
      playing: "plyr--playing",
      paused: "plyr--paused",
      stopped: "plyr--stopped",
      loading: "plyr--loading",
      hover: "plyr--hover",
      tooltip: "plyr__tooltip",
      cues: "plyr__cues",
      marker: "plyr__progress__marker",
      hidden: "plyr__sr-only",
      hideControls: "plyr--hide-controls",
      isTouch: "plyr--is-touch",
      uiSupported: "plyr--full-ui",
      noTransition: "plyr--no-transition",
      display: {
        time: "plyr__time"
      },
      menu: {
        value: "plyr__menu__value",
        badge: "plyr__badge",
        open: "plyr--menu-open"
      },
      captions: {
        enabled: "plyr--captions-enabled",
        active: "plyr--captions-active"
      },
      fullscreen: {
        enabled: "plyr--fullscreen-enabled",
        fallback: "plyr--fullscreen-fallback"
      },
      pip: {
        supported: "plyr--pip-supported",
        active: "plyr--pip-active"
      },
      airplay: {
        supported: "plyr--airplay-supported",
        active: "plyr--airplay-active"
      },
      previewThumbnails: {
        thumbContainer: "plyr__preview-thumb",
        thumbContainerShown: "plyr__preview-thumb--is-shown",
        imageContainer: "plyr__preview-thumb__image-container",
        timeContainer: "plyr__preview-thumb__time-container",
        scrubbingContainer: "plyr__preview-scrubbing",
        scrubbingContainerShown: "plyr__preview-scrubbing--is-shown"
      }
    },
    attributes: {
      embed: {
        provider: "data-plyr-provider",
        id: "data-plyr-embed-id",
        hash: "data-plyr-embed-hash"
      }
    },
    ads: {
      enabled: !1,
      publisherId: "",
      tagUrl: ""
    },
    previewThumbnails: {
      enabled: !1,
      src: ""
    },
    vimeo: {
      byline: !1,
      portrait: !1,
      title: !1,
      speed: !0,
      transparent: !1,
      customControls: !0,
      referrerPolicy: null,
      premium: !1
    },
    youtube: {
      rel: 0,
      showinfo: 0,
      iv_load_policy: 3,
      modestbranding: 1,
      customControls: !0,
      noCookie: !1
    },
    mediaMetadata: {
      title: "",
      artist: "",
      album: "",
      artwork: []
    },
    markers: {
      enabled: !1,
      points: []
    }
  },
  pip = {
    active: "picture-in-picture",
    inactive: "inline"
  },
  providers = {
    html5: "html5",
    youtube: "youtube",
    vimeo: "vimeo"
  },
  types = {
    audio: "audio",
    video: "video"
  };
function getProviderByUrl(e) {
  return /^(https?:\/\/)?(www\.)?(youtube\.com|youtube-nocookie\.com|youtu\.?be)\/.+$/.test(e) ? providers.youtube : /^https?:\/\/player.vimeo.com\/video\/\d{0,9}(?=\b|\/)/.test(e) ? providers.vimeo : null;
}
const noop$2 = () => {};
class Console {
  constructor(e = !1) {
    this.enabled = window.console && e, this.enabled && this.log("Debugging enabled");
  }
  get log() {
    return this.enabled ? Function.prototype.bind.call(console.log, console) : noop$2;
  }
  get warn() {
    return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop$2;
  }
  get error() {
    return this.enabled ? Function.prototype.bind.call(console.error, console) : noop$2;
  }
}
class Fullscreen {
  constructor(e) {
    _defineProperty$1(this, "onChange", () => {
      if (!this.supported) return;
      const e = this.player.elements.buttons.fullscreen;
      is.element(e) && (e.pressed = this.active);
      const t = this.target === this.player.media ? this.target : this.player.elements.container;
      triggerEvent.call(this.player, t, this.active ? "enterfullscreen" : "exitfullscreen", !0);
    }), _defineProperty$1(this, "toggleFallback", (e = !1) => {
      if (e ? this.scrollPosition = {
        x: window.scrollX ?? 0,
        y: window.scrollY ?? 0
      } : window.scrollTo(this.scrollPosition.x, this.scrollPosition.y), document.body.style.overflow = e ? "hidden" : "", toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, e), browser$1.isIos) {
        let t = document.head.querySelector('meta[name="viewport"]');
        const i = "viewport-fit=cover";
        t || (t = document.createElement("meta"), t.setAttribute("name", "viewport"));
        const s = is.string(t.content) && t.content.includes(i);
        e ? (this.cleanupViewport = !s, s || (t.content += `,${i}`)) : this.cleanupViewport && (t.content = t.content.split(",").filter(e => e.trim() !== i).join(","));
      }
      this.onChange();
    }), _defineProperty$1(this, "trapFocus", e => {
      if (browser$1.isIos || browser$1.isIPadOS || !this.active || "Tab" !== e.key) return;
      const t = document.activeElement,
        i = getElements.call(this.player, "a[href], button:not(:disabled), input:not(:disabled), [tabindex]"),
        [s] = i,
        n = i[i.length - 1];
      t !== n || e.shiftKey ? t === s && e.shiftKey && (n.focus(), e.preventDefault()) : (s.focus(), e.preventDefault());
    }), _defineProperty$1(this, "update", () => {
      if (this.supported) {
        let e;
        e = this.forceFallback ? "Fallback (forced)" : Fullscreen.nativeSupported ? "Native" : "Fallback", this.player.debug.log(`${e} fullscreen enabled`);
      } else this.player.debug.log("Fullscreen not supported and fallback disabled");
      toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.supported);
    }), _defineProperty$1(this, "enter", () => {
      this.supported && (browser$1.isIos && this.player.config.fullscreen.iosNative ? this.player.isVimeo ? this.player.embed.requestFullscreen() : this.target.webkitEnterFullscreen() : !Fullscreen.nativeSupported || this.forceFallback ? this.toggleFallback(!0) : this.prefix ? is.empty(this.prefix) || this.target[`${this.prefix}Request${this.property}`]() : this.target.requestFullscreen({
        navigationUI: "hide"
      }));
    }), _defineProperty$1(this, "exit", () => {
      if (this.supported) if (browser$1.isIos && this.player.config.fullscreen.iosNative) this.player.isVimeo ? this.player.embed.exitFullscreen() : this.target.webkitEnterFullscreen(), silencePromise(this.player.play());else if (!Fullscreen.nativeSupported || this.forceFallback) this.toggleFallback(!1);else if (this.prefix) {
        if (!is.empty(this.prefix)) {
          const e = "moz" === this.prefix ? "Cancel" : "Exit";
          document[`${this.prefix}${e}${this.property}`]();
        }
      } else (document.cancelFullScreen || document.exitFullscreen).call(document);
    }), _defineProperty$1(this, "toggle", () => {
      this.active ? this.exit() : this.enter();
    }), this.player = e, this.prefix = Fullscreen.prefix, this.property = Fullscreen.property, this.scrollPosition = {
      x: 0,
      y: 0
    }, this.forceFallback = "force" === e.config.fullscreen.fallback, this.player.elements.fullscreen = e.config.fullscreen.container && closest$1(this.player.elements.container, e.config.fullscreen.container), on.call(this.player, document, "ms" === this.prefix ? "MSFullscreenChange" : `${this.prefix}fullscreenchange`, () => {
      this.onChange();
    }), on.call(this.player, this.player.elements.container, "dblclick", e => {
      is.element(this.player.elements.controls) && this.player.elements.controls.contains(e.target) || this.player.listeners.proxy(e, this.toggle, "fullscreen");
    }), on.call(this, this.player.elements.container, "keydown", e => this.trapFocus(e)), this.update();
  }
  static get nativeSupported() {
    return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);
  }
  get useNative() {
    return Fullscreen.nativeSupported && !this.forceFallback;
  }
  static get prefix() {
    if (is.function(document.exitFullscreen)) return "";
    let e = "";
    return ["webkit", "moz", "ms"].some(t => !(!is.function(document[`${t}ExitFullscreen`]) && !is.function(document[`${t}CancelFullScreen`])) && (e = t, !0)), e;
  }
  static get property() {
    return "moz" === this.prefix ? "FullScreen" : "Fullscreen";
  }
  get supported() {
    return [this.player.config.fullscreen.enabled, this.player.isVideo, Fullscreen.nativeSupported || this.player.config.fullscreen.fallback, !this.player.isYouTube || Fullscreen.nativeSupported || !browser$1.isIos || this.player.config.playsinline && !this.player.config.fullscreen.iosNative].every(Boolean);
  }
  get active() {
    if (!this.supported) return !1;
    if (!Fullscreen.nativeSupported || this.forceFallback) return hasClass(this.target, this.player.config.classNames.fullscreen.fallback);
    const e = this.prefix ? this.target.getRootNode()[`${this.prefix}${this.property}Element`] : this.target.getRootNode().fullscreenElement;
    return e && e.shadowRoot ? e === this.target.getRootNode().host : e === this.target;
  }
  get target() {
    return browser$1.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.fullscreen ?? this.player.elements.container;
  }
}
function loadImage(e, t = 1) {
  return new Promise((i, s) => {
    const n = new Image(),
      r = () => {
        delete n.onload, delete n.onerror, (n.naturalWidth >= t ? i : s)(n);
      };
    Object.assign(n, {
      onload: r,
      onerror: r,
      src: e
    });
  });
}
const ui = {
  addStyleHook() {
    toggleClass(this.elements.container, this.config.selectors.container.replace(".", ""), !0), toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);
  },
  toggleNativeControls(e = !1) {
    e && this.isHTML5 ? this.media.setAttribute("controls", "") : this.media.removeAttribute("controls");
  },
  build() {
    if (this.listeners.media(), !this.supported.ui) return this.debug.warn(`Basic support only for ${this.provider} ${this.type}`), void ui.toggleNativeControls.call(this, !0);
    is.element(this.elements.controls) || (controls.inject.call(this), this.listeners.controls()), ui.toggleNativeControls.call(this), this.isHTML5 && captions.setup.call(this), this.volume = null, this.muted = null, this.loop = null, this.quality = null, this.speed = null, controls.updateVolume.call(this), controls.timeUpdate.call(this), controls.durationUpdate.call(this), ui.checkPlaying.call(this), toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo), toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5), toggleClass(this.elements.container, this.config.classNames.isTouch, this.touch), this.ready = !0, setTimeout(() => {
      triggerEvent.call(this, this.media, "ready");
    }, 0), ui.setTitle.call(this), this.poster && ui.setPoster.call(this, this.poster, !1).catch(() => {}), this.config.duration && controls.durationUpdate.call(this), this.config.mediaMetadata && controls.setMediaMetadata.call(this);
  },
  setTitle() {
    let e = i18n.get("play", this.config);
    if (is.string(this.config.title) && !is.empty(this.config.title) && (e += `, ${this.config.title}`), Array.from(this.elements.buttons.play || []).forEach(t => {
      t.setAttribute("aria-label", e);
    }), this.isEmbed) {
      const e = getElement.call(this, "iframe");
      if (!is.element(e)) return;
      const t = is.empty(this.config.title) ? "video" : this.config.title,
        i = i18n.get("frameTitle", this.config);
      e.setAttribute("title", i.replace("{title}", t));
    }
  },
  togglePoster(e) {
    toggleClass(this.elements.container, this.config.classNames.posterEnabled, e);
  },
  setPoster(e, t = !0) {
    return t && this.poster ? Promise.reject(new Error("Poster already set")) : (this.media.setAttribute("data-poster", e), this.elements.poster.removeAttribute("hidden"), ready.call(this).then(() => loadImage(e)).catch(t => {
      throw e === this.poster && ui.togglePoster.call(this, !1), t;
    }).then(() => {
      if (e !== this.poster) throw new Error("setPoster cancelled by later call to setPoster");
    }).then(() => (Object.assign(this.elements.poster.style, {
      backgroundImage: `url('${e}')`,
      backgroundSize: ""
    }), ui.togglePoster.call(this, !0), e)));
  },
  checkPlaying(e) {
    toggleClass(this.elements.container, this.config.classNames.playing, this.playing), toggleClass(this.elements.container, this.config.classNames.paused, this.paused), toggleClass(this.elements.container, this.config.classNames.stopped, this.stopped), Array.from(this.elements.buttons.play || []).forEach(e => {
      Object.assign(e, {
        pressed: this.playing
      }), e.setAttribute("aria-label", i18n.get(this.playing ? "pause" : "play", this.config));
    }), is.event(e) && "timeupdate" === e.type || ui.toggleControls.call(this);
  },
  checkLoading(e) {
    this.loading = ["stalled", "waiting"].includes(e.type), clearTimeout(this.timers.loading), this.timers.loading = setTimeout(() => {
      toggleClass(this.elements.container, this.config.classNames.loading, this.loading), ui.toggleControls.call(this);
    }, this.loading ? 250 : 0);
  },
  toggleControls(e) {
    const {
      controls: t
    } = this.elements;
    if (t && this.config.hideControls) {
      const i = this.touch && this.lastSeekTime + 2e3 > Date.now();
      this.toggleControls(Boolean(e || this.loading || this.paused || t.pressed || t.hover || i));
    }
  },
  migrateStyles() {
    Object.values({
      ...this.media.style
    }).filter(e => !is.empty(e) && is.string(e) && e.startsWith("--plyr")).forEach(e => {
      this.elements.container.style.setProperty(e, this.media.style.getPropertyValue(e)), this.media.style.removeProperty(e);
    }), is.empty(this.media.style) && this.media.removeAttribute("style");
  }
};
class Listeners {
  constructor(e) {
    _defineProperty$1(this, "firstTouch", () => {
      const {
          player: e
        } = this,
        {
          elements: t
        } = e;
      e.touch = !0, toggleClass(t.container, e.config.classNames.isTouch, !0);
    }), _defineProperty$1(this, "global", (e = !0) => {
      const {
        player: t
      } = this;
      t.config.keyboard.global && toggleListener.call(t, window, "keydown keyup", this.handleKey, e, !1), toggleListener.call(t, document.body, "click", this.toggleMenu, e), once.call(t, document.body, "touchstart", this.firstTouch);
    }), _defineProperty$1(this, "container", () => {
      const {
          player: e
        } = this,
        {
          config: t,
          elements: i,
          timers: s
        } = e;
      !t.keyboard.global && t.keyboard.focused && on.call(e, i.container, "keydown keyup", this.handleKey, !1), on.call(e, i.container, "mousemove mouseleave touchstart touchmove enterfullscreen exitfullscreen", t => {
        const {
          controls: n
        } = i;
        n && "enterfullscreen" === t.type && (n.pressed = !1, n.hover = !1);
        let r = 0;
        ["touchstart", "touchmove", "mousemove"].includes(t.type) && (ui.toggleControls.call(e, !0), r = e.touch ? 3e3 : 2e3), clearTimeout(s.controls), s.controls = setTimeout(() => ui.toggleControls.call(e, !1), r);
      });
      const n = () => {
          if (!e.isVimeo || e.config.vimeo.premium) return;
          const t = i.wrapper,
            {
              active: s
            } = e.fullscreen,
            [n, r] = getAspectRatio.call(e),
            a = supportsCSS(`aspect-ratio: ${n} / ${r}`);
          if (!s) return void (a ? (t.style.width = null, t.style.height = null) : (t.style.maxWidth = null, t.style.margin = null));
          const [o, l] = getViewportSize(),
            c = o / l > n / r;
          a ? (t.style.width = c ? "auto" : "100%", t.style.height = c ? "100%" : "auto") : (t.style.maxWidth = c ? l / r * n + "px" : null, t.style.margin = c ? "0 auto" : null);
        },
        r = () => {
          clearTimeout(s.resized), s.resized = setTimeout(n, 50);
        };
      on.call(e, i.container, "enterfullscreen exitfullscreen", t => {
        const {
          target: s
        } = e.fullscreen;
        if (s !== i.container) return;
        if (!e.isEmbed && is.empty(e.config.ratio)) return;
        n();
        ("enterfullscreen" === t.type ? on : off).call(e, window, "resize", r);
      });
    }), _defineProperty$1(this, "media", () => {
      const {
          player: e
        } = this,
        {
          elements: t
        } = e;
      if (on.call(e, e.media, "timeupdate seeking seeked", t => controls.timeUpdate.call(e, t)), on.call(e, e.media, "durationchange loadeddata loadedmetadata", t => controls.durationUpdate.call(e, t)), on.call(e, e.media, "ended", () => {
        e.isHTML5 && e.isVideo && e.config.resetOnEnd && (e.restart(), e.pause());
      }), on.call(e, e.media, "progress playing seeking seeked", t => controls.updateProgress.call(e, t)), on.call(e, e.media, "volumechange", t => controls.updateVolume.call(e, t)), on.call(e, e.media, "playing play pause ended emptied timeupdate", t => ui.checkPlaying.call(e, t)), on.call(e, e.media, "waiting canplay seeked playing", t => ui.checkLoading.call(e, t)), e.supported.ui && e.config.clickToPlay && !e.isAudio) {
        const i = getElement.call(e, `.${e.config.classNames.video}`);
        if (!is.element(i)) return;
        on.call(e, t.container, "click", s => {
          ([t.container, i].includes(s.target) || i.contains(s.target)) && (e.touch && e.config.hideControls || (e.ended ? (this.proxy(s, e.restart, "restart"), this.proxy(s, () => {
            silencePromise(e.play());
          }, "play")) : this.proxy(s, () => {
            silencePromise(e.togglePlay());
          }, "play")));
        });
      }
      e.supported.ui && e.config.disableContextMenu && on.call(e, t.wrapper, "contextmenu", e => {
        e.preventDefault();
      }, !1), on.call(e, e.media, "volumechange", () => {
        e.storage.set({
          volume: e.volume,
          muted: e.muted
        });
      }), on.call(e, e.media, "ratechange", () => {
        controls.updateSetting.call(e, "speed"), e.storage.set({
          speed: e.speed
        });
      }), on.call(e, e.media, "qualitychange", t => {
        controls.updateSetting.call(e, "quality", null, t.detail.quality);
      }), on.call(e, e.media, "ready qualitychange", () => {
        controls.setDownloadUrl.call(e);
      });
      const i = e.config.events.concat(["keyup", "keydown"]).join(" ");
      on.call(e, e.media, i, i => {
        let {
          detail: s = {}
        } = i;
        "error" === i.type && (s = e.media.error), triggerEvent.call(e, t.container, i.type, !0, s);
      });
    }), _defineProperty$1(this, "proxy", (e, t, i) => {
      const {
          player: s
        } = this,
        n = s.config.listeners[i];
      let r = !0;
      is.function(n) && (r = n.call(s, e)), !1 !== r && is.function(t) && t.call(s, e);
    }), _defineProperty$1(this, "bind", (e, t, i, s, n = !0) => {
      const {
          player: r
        } = this,
        a = r.config.listeners[s],
        o = is.function(a);
      on.call(r, e, t, e => this.proxy(e, i, s), n && !o);
    }), _defineProperty$1(this, "controls", () => {
      const {
          player: e
        } = this,
        {
          elements: t
        } = e,
        i = browser$1.isIE ? "change" : "input";
      if (t.buttons.play && Array.from(t.buttons.play).forEach(t => {
        this.bind(t, "click", () => {
          silencePromise(e.togglePlay());
        }, "play");
      }), this.bind(t.buttons.restart, "click", e.restart, "restart"), this.bind(t.buttons.rewind, "click", () => {
        e.lastSeekTime = Date.now(), e.rewind();
      }, "rewind"), this.bind(t.buttons.fastForward, "click", () => {
        e.lastSeekTime = Date.now(), e.forward();
      }, "fastForward"), this.bind(t.buttons.mute, "click", () => {
        e.muted = !e.muted;
      }, "mute"), this.bind(t.buttons.captions, "click", () => e.toggleCaptions()), this.bind(t.buttons.download, "click", () => {
        triggerEvent.call(e, e.media, "download");
      }, "download"), this.bind(t.buttons.fullscreen, "click", () => {
        e.fullscreen.toggle();
      }, "fullscreen"), this.bind(t.buttons.pip, "click", () => {
        e.pip = "toggle";
      }, "pip"), this.bind(t.buttons.airplay, "click", e.airplay, "airplay"), this.bind(t.buttons.settings, "click", t => {
        t.stopPropagation(), t.preventDefault(), controls.toggleMenu.call(e, t);
      }, null, !1), this.bind(t.buttons.settings, "keyup", t => {
        [" ", "Enter"].includes(t.key) && ("Enter" !== t.key ? (t.preventDefault(), t.stopPropagation(), controls.toggleMenu.call(e, t)) : controls.focusFirstMenuItem.call(e, null, !0));
      }, null, !1), this.bind(t.settings.menu, "keydown", t => {
        "Escape" === t.key && controls.toggleMenu.call(e, t);
      }), this.bind(t.inputs.seek, "mousedown mousemove", e => {
        const i = t.progress.getBoundingClientRect(),
          s = 100 / i.width * (e.pageX - i.left);
        e.currentTarget.setAttribute("seek-value", s);
      }), this.bind(t.inputs.seek, "mousedown mouseup keydown keyup touchstart touchend", t => {
        const i = t.currentTarget,
          s = "play-on-seeked";
        if (is.keyboardEvent(t) && !["ArrowLeft", "ArrowRight"].includes(t.key)) return;
        e.lastSeekTime = Date.now();
        const n = i.hasAttribute(s),
          r = ["mouseup", "touchend", "keyup"].includes(t.type);
        n && r ? (i.removeAttribute(s), silencePromise(e.play())) : !r && e.playing && (i.setAttribute(s, ""), e.pause());
      }), browser$1.isIos) {
        const t = getElements.call(e, 'input[type="range"]');
        Array.from(t).forEach(e => this.bind(e, i, e => repaint(e.target)));
      }
      this.bind(t.inputs.seek, i, t => {
        const i = t.currentTarget;
        let s = i.getAttribute("seek-value");
        is.empty(s) && (s = i.value), i.removeAttribute("seek-value"), e.currentTime = s / i.max * e.duration;
      }, "seek"), this.bind(t.progress, "mouseenter mouseleave mousemove", t => controls.updateSeekTooltip.call(e, t)), this.bind(t.progress, "mousemove touchmove", t => {
        const {
          previewThumbnails: i
        } = e;
        i && i.loaded && i.startMove(t);
      }), this.bind(t.progress, "mouseleave touchend click", () => {
        const {
          previewThumbnails: t
        } = e;
        t && t.loaded && t.endMove(!1, !0);
      }), this.bind(t.progress, "mousedown touchstart", t => {
        const {
          previewThumbnails: i
        } = e;
        i && i.loaded && i.startScrubbing(t);
      }), this.bind(t.progress, "mouseup touchend", t => {
        const {
          previewThumbnails: i
        } = e;
        i && i.loaded && i.endScrubbing(t);
      }), browser$1.isWebKit && Array.from(getElements.call(e, 'input[type="range"]')).forEach(t => {
        this.bind(t, "input", t => controls.updateRangeFill.call(e, t.target));
      }), e.config.toggleInvert && !is.element(t.display.duration) && this.bind(t.display.currentTime, "click", () => {
        0 !== e.currentTime && (e.config.invertTime = !e.config.invertTime, controls.timeUpdate.call(e));
      }), this.bind(t.inputs.volume, i, t => {
        e.volume = t.target.value;
      }, "volume"), this.bind(t.controls, "mouseenter mouseleave", i => {
        t.controls.hover = !e.touch && "mouseenter" === i.type;
      }), t.fullscreen && Array.from(t.fullscreen.children).filter(e => !e.contains(t.container)).forEach(i => {
        this.bind(i, "mouseenter mouseleave", i => {
          t.controls && (t.controls.hover = !e.touch && "mouseenter" === i.type);
        });
      }), this.bind(t.controls, "mousedown mouseup touchstart touchend touchcancel", e => {
        t.controls.pressed = ["mousedown", "touchstart"].includes(e.type);
      }), this.bind(t.controls, "focusin", () => {
        const {
          config: i,
          timers: s
        } = e;
        toggleClass(t.controls, i.classNames.noTransition, !0), ui.toggleControls.call(e, !0), setTimeout(() => {
          toggleClass(t.controls, i.classNames.noTransition, !1);
        }, 0);
        const n = this.touch ? 3e3 : 4e3;
        clearTimeout(s.controls), s.controls = setTimeout(() => ui.toggleControls.call(e, !1), n);
      }), this.bind(t.inputs.volume, "wheel", t => {
        const i = t.webkitDirectionInvertedFromDevice,
          [s, n] = [t.deltaX, -t.deltaY].map(e => i ? -e : e),
          r = Math.sign(Math.abs(s) > Math.abs(n) ? s : n);
        e.increaseVolume(r / 50);
        const {
          volume: a
        } = e.media;
        (1 === r && a < 1 || -1 === r && a > 0) && t.preventDefault();
      }, "volume", !1);
    }), this.player = e, this.lastKey = null, this.focusTimer = null, this.lastKeyDown = null, this.handleKey = this.handleKey.bind(this), this.toggleMenu = this.toggleMenu.bind(this), this.firstTouch = this.firstTouch.bind(this);
  }
  handleKey(e) {
    const {
        player: t
      } = this,
      {
        elements: i
      } = t,
      {
        key: s,
        type: n,
        altKey: r,
        ctrlKey: a,
        metaKey: o,
        shiftKey: l
      } = e,
      c = "keydown" === n,
      u = c && s === this.lastKey;
    if (r || a || o || l) return;
    if (!s) return;
    if (c) {
      const n = document.activeElement;
      if (is.element(n)) {
        const {
            editable: s
          } = t.config.selectors,
          {
            seek: r
          } = i.inputs;
        if (n !== r && matches(n, s)) return;
        if (" " === e.key && matches(n, 'button, [role^="menuitem"]')) return;
      }
      switch ([" ", "ArrowLeft", "ArrowUp", "ArrowRight", "ArrowDown", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "c", "f", "k", "l", "m"].includes(s) && (e.preventDefault(), e.stopPropagation()), s) {
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          u || (d = parseInt(s, 10), t.currentTime = t.duration / 10 * d);
          break;
        case " ":
        case "k":
          u || silencePromise(t.togglePlay());
          break;
        case "ArrowUp":
          t.increaseVolume(.1);
          break;
        case "ArrowDown":
          t.decreaseVolume(.1);
          break;
        case "m":
          u || (t.muted = !t.muted);
          break;
        case "ArrowRight":
          t.forward();
          break;
        case "ArrowLeft":
          t.rewind();
          break;
        case "f":
          t.fullscreen.toggle();
          break;
        case "c":
          u || t.toggleCaptions();
          break;
        case "l":
          t.loop = !t.loop;
      }
      "Escape" === s && !t.fullscreen.usingNative && t.fullscreen.active && t.fullscreen.toggle(), this.lastKey = s;
    } else this.lastKey = null;
    var d;
  }
  toggleMenu(e) {
    controls.toggleMenu.call(this.player, e);
  }
}
function createCommonjsModule(e, t) {
  return e(t = {
    exports: {}
  }, t.exports), t.exports;
}
var loadjs_umd = createCommonjsModule(function (e, t) {
  e.exports = function () {
    var e = function () {},
      t = {},
      i = {},
      s = {};
    function n(e, t) {
      e = e.push ? e : [e];
      var n,
        r,
        a,
        o = [],
        l = e.length,
        c = l;
      for (n = function (e, i) {
        i.length && o.push(e), --c || t(o);
      }; l--;) r = e[l], (a = i[r]) ? n(r, a) : (s[r] = s[r] || []).push(n);
    }
    function r(e, t) {
      if (e) {
        var n = s[e];
        if (i[e] = t, n) for (; n.length;) n[0](e, t), n.splice(0, 1);
      }
    }
    function a(t, i) {
      t.call && (t = {
        success: t
      }), i.length ? (t.error || e)(i) : (t.success || e)(t);
    }
    function o(t, i, s, n) {
      var r,
        a,
        l = document,
        c = s.async,
        u = (s.numRetries || 0) + 1,
        d = s.before || e,
        h = t.replace(/[\?|#].*$/, ""),
        m = t.replace(/^(css|img)!/, "");
      n = n || 0, /(^css!|\.css$)/.test(h) ? ((a = l.createElement("link")).rel = "stylesheet", a.href = m, (r = "hideFocus" in a) && a.relList && (r = 0, a.rel = "preload", a.as = "style")) : /(^img!|\.(png|gif|jpg|svg|webp)$)/.test(h) ? (a = l.createElement("img")).src = m : ((a = l.createElement("script")).src = t, a.async = void 0 === c || c), a.onload = a.onerror = a.onbeforeload = function (e) {
        var l = e.type[0];
        if (r) try {
          a.sheet.cssText.length || (l = "e");
        } catch (e) {
          18 != e.code && (l = "e");
        }
        if ("e" == l) {
          if ((n += 1) < u) return o(t, i, s, n);
        } else if ("preload" == a.rel && "style" == a.as) return a.rel = "stylesheet";
        i(t, l, e.defaultPrevented);
      }, !1 !== d(t, a) && l.head.appendChild(a);
    }
    function l(e, t, i) {
      var s,
        n,
        r = (e = e.push ? e : [e]).length,
        a = r,
        l = [];
      for (s = function (e, i, s) {
        if ("e" == i && l.push(e), "b" == i) {
          if (!s) return;
          l.push(e);
        }
        --r || t(l);
      }, n = 0; n < a; n++) o(e[n], s, i);
    }
    function c(e, i, s) {
      var n, o;
      if (i && i.trim && (n = i), o = (n ? s : i) || {}, n) {
        if (n in t) throw "LoadJS";
        t[n] = !0;
      }
      function c(t, i) {
        l(e, function (e) {
          a(o, e), t && a({
            success: t,
            error: i
          }, e), r(n, e);
        }, o);
      }
      if (o.returnPromise) return new Promise(c);
      c();
    }
    return c.ready = function (e, t) {
      return n(e, function (e) {
        a(t, e);
      }), c;
    }, c.done = function (e) {
      r(e, []);
    }, c.reset = function () {
      t = {}, i = {}, s = {};
    }, c.isDefined = function (e) {
      return e in t;
    }, c;
  }();
});
function loadScript(e) {
  return new Promise((t, i) => {
    loadjs_umd(e, {
      success: t,
      error: i
    });
  });
}
function parseId$1(e) {
  if (is.empty(e)) return null;
  if (is.number(Number(e))) return e;
  return e.match(/^.*(vimeo.com\/|video\/)(\d+).*/) ? RegExp.$2 : e;
}
function parseHash(e) {
  const t = e.match(/^.*(vimeo.com\/|video\/)(\d+)(\?.*&*h=|\/)+([\d,a-f]+)/);
  return t && 5 === t.length ? t[4] : null;
}
function assurePlaybackState$1(e) {
  e && !this.embed.hasPlayed && (this.embed.hasPlayed = !0), this.media.paused === e && (this.media.paused = !e, triggerEvent.call(this, this.media, e ? "play" : "pause"));
}
const vimeo = {
  setup() {
    const e = this;
    toggleClass(e.elements.wrapper, e.config.classNames.embed, !0), e.options.speed = e.config.speed.options, setAspectRatio.call(e), is.object(window.Vimeo) ? vimeo.ready.call(e) : loadScript(e.config.urls.vimeo.sdk).then(() => {
      vimeo.ready.call(e);
    }).catch(t => {
      e.debug.warn("Vimeo SDK (player.js) failed to load", t);
    });
  },
  ready() {
    const e = this,
      t = e.config.vimeo,
      {
        premium: i,
        referrerPolicy: s,
        ...n
      } = t;
    let r = e.media.getAttribute("src"),
      a = "";
    is.empty(r) ? (r = e.media.getAttribute(e.config.attributes.embed.id), a = e.media.getAttribute(e.config.attributes.embed.hash)) : a = parseHash(r);
    const o = a ? {
      h: a
    } : {};
    i && Object.assign(n, {
      controls: !1,
      sidedock: !1
    });
    const l = buildUrlParams({
        loop: e.config.loop.active,
        autoplay: e.autoplay,
        muted: e.muted,
        gesture: "media",
        playsinline: e.config.playsinline,
        ...o,
        ...n
      }),
      c = parseId$1(r),
      u = createElement("iframe"),
      d = format$1(e.config.urls.vimeo.iframe, c, l);
    if (u.setAttribute("src", d), u.setAttribute("allowfullscreen", ""), u.setAttribute("allow", ["autoplay", "fullscreen", "picture-in-picture", "encrypted-media", "accelerometer", "gyroscope"].join("; ")), is.empty(s) || u.setAttribute("referrerPolicy", s), i || !t.customControls) u.setAttribute("data-poster", e.poster), e.media = replaceElement(u, e.media);else {
      const t = createElement("div", {
        class: e.config.classNames.embedContainer,
        "data-poster": e.poster
      });
      t.appendChild(u), e.media = replaceElement(t, e.media);
    }
    t.customControls || fetch$1(format$1(e.config.urls.vimeo.api, d)).then(t => {
      !is.empty(t) && t.thumbnail_url && ui.setPoster.call(e, t.thumbnail_url).catch(() => {});
    }), e.embed = new window.Vimeo.Player(u, {
      autopause: e.config.autopause,
      muted: e.muted
    }), e.media.paused = !0, e.media.currentTime = 0, e.supported.ui && e.embed.disableTextTrack(), e.media.play = () => (assurePlaybackState$1.call(e, !0), e.embed.play()), e.media.pause = () => (assurePlaybackState$1.call(e, !1), e.embed.pause()), e.media.stop = () => {
      e.pause(), e.currentTime = 0;
    };
    let {
      currentTime: h
    } = e.media;
    Object.defineProperty(e.media, "currentTime", {
      get: () => h,
      set(t) {
        const {
            embed: i,
            media: s,
            paused: n,
            volume: r
          } = e,
          a = n && !i.hasPlayed;
        s.seeking = !0, triggerEvent.call(e, s, "seeking"), Promise.resolve(a && i.setVolume(0)).then(() => i.setCurrentTime(t)).then(() => a && i.pause()).then(() => a && i.setVolume(r)).catch(() => {});
      }
    });
    let m = e.config.speed.selected;
    Object.defineProperty(e.media, "playbackRate", {
      get: () => m,
      set(t) {
        e.embed.setPlaybackRate(t).then(() => {
          m = t, triggerEvent.call(e, e.media, "ratechange");
        }).catch(() => {
          e.options.speed = [1];
        });
      }
    });
    let {
      volume: p
    } = e.config;
    Object.defineProperty(e.media, "volume", {
      get: () => p,
      set(t) {
        e.embed.setVolume(t).then(() => {
          p = t, triggerEvent.call(e, e.media, "volumechange");
        });
      }
    });
    let {
      muted: g
    } = e.config;
    Object.defineProperty(e.media, "muted", {
      get: () => g,
      set(t) {
        const i = !!is.boolean(t) && t;
        e.embed.setMuted(!!i || e.config.muted).then(() => {
          g = i, triggerEvent.call(e, e.media, "volumechange");
        });
      }
    });
    let f,
      {
        loop: y
      } = e.config;
    Object.defineProperty(e.media, "loop", {
      get: () => y,
      set(t) {
        const i = is.boolean(t) ? t : e.config.loop.active;
        e.embed.setLoop(i).then(() => {
          y = i;
        });
      }
    }), e.embed.getVideoUrl().then(t => {
      f = t, controls.setDownloadUrl.call(e);
    }).catch(e => {
      this.debug.warn(e);
    }), Object.defineProperty(e.media, "currentSrc", {
      get: () => f
    }), Object.defineProperty(e.media, "ended", {
      get: () => e.currentTime === e.duration
    }), Promise.all([e.embed.getVideoWidth(), e.embed.getVideoHeight()]).then(t => {
      const [i, s] = t;
      e.embed.ratio = roundAspectRatio(i, s), setAspectRatio.call(this);
    }), e.embed.setAutopause(e.config.autopause).then(t => {
      e.config.autopause = t;
    }), e.embed.getVideoTitle().then(t => {
      e.config.title = t, ui.setTitle.call(this);
    }), e.embed.getCurrentTime().then(t => {
      h = t, triggerEvent.call(e, e.media, "timeupdate");
    }), e.embed.getDuration().then(t => {
      e.media.duration = t, triggerEvent.call(e, e.media, "durationchange");
    }), e.embed.getTextTracks().then(t => {
      e.media.textTracks = t, captions.setup.call(e);
    }), e.embed.on("cuechange", ({
      cues: t = []
    }) => {
      const i = t.map(e => stripHTML(e.text));
      captions.updateCues.call(e, i);
    }), e.embed.on("loaded", () => {
      if (e.embed.getPaused().then(t => {
        assurePlaybackState$1.call(e, !t), t || triggerEvent.call(e, e.media, "playing");
      }), is.element(e.embed.element) && e.supported.ui) {
        e.embed.element.setAttribute("tabindex", -1);
      }
    }), e.embed.on("bufferstart", () => {
      triggerEvent.call(e, e.media, "waiting");
    }), e.embed.on("bufferend", () => {
      triggerEvent.call(e, e.media, "playing");
    }), e.embed.on("play", () => {
      assurePlaybackState$1.call(e, !0), triggerEvent.call(e, e.media, "playing");
    }), e.embed.on("pause", () => {
      assurePlaybackState$1.call(e, !1);
    }), e.embed.on("timeupdate", t => {
      e.media.seeking = !1, h = t.seconds, triggerEvent.call(e, e.media, "timeupdate");
    }), e.embed.on("progress", t => {
      e.media.buffered = t.percent, triggerEvent.call(e, e.media, "progress"), 1 === parseInt(t.percent, 10) && triggerEvent.call(e, e.media, "canplaythrough"), e.embed.getDuration().then(t => {
        t !== e.media.duration && (e.media.duration = t, triggerEvent.call(e, e.media, "durationchange"));
      });
    }), e.embed.on("seeked", () => {
      e.media.seeking = !1, triggerEvent.call(e, e.media, "seeked");
    }), e.embed.on("ended", () => {
      e.media.paused = !0, triggerEvent.call(e, e.media, "ended");
    }), e.embed.on("error", t => {
      e.media.error = t, triggerEvent.call(e, e.media, "error");
    }), t.customControls && setTimeout(() => ui.build.call(e), 0);
  }
};
function parseId(e) {
  if (is.empty(e)) return null;
  return e.match(/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/) ? RegExp.$2 : e;
}
function assurePlaybackState(e) {
  e && !this.embed.hasPlayed && (this.embed.hasPlayed = !0), this.media.paused === e && (this.media.paused = !e, triggerEvent.call(this, this.media, e ? "play" : "pause"));
}
function getHost(e) {
  return e.noCookie ? "https://www.youtube-nocookie.com" : "http:" === window.location.protocol ? "http://www.youtube.com" : void 0;
}
const youtube = {
    setup() {
      if (toggleClass(this.elements.wrapper, this.config.classNames.embed, !0), is.object(window.YT) && is.function(window.YT.Player)) youtube.ready.call(this);else {
        const e = window.onYouTubeIframeAPIReady;
        window.onYouTubeIframeAPIReady = () => {
          is.function(e) && e(), youtube.ready.call(this);
        }, loadScript(this.config.urls.youtube.sdk).catch(e => {
          this.debug.warn("YouTube API failed to load", e);
        });
      }
    },
    getTitle(e) {
      fetch$1(format$1(this.config.urls.youtube.api, e)).then(e => {
        if (is.object(e)) {
          const {
            title: t,
            height: i,
            width: s
          } = e;
          this.config.title = t, ui.setTitle.call(this), this.embed.ratio = roundAspectRatio(s, i);
        }
        setAspectRatio.call(this);
      }).catch(() => {
        setAspectRatio.call(this);
      });
    },
    ready() {
      const e = this,
        t = e.config.youtube,
        i = e.media && e.media.getAttribute("id");
      if (!is.empty(i) && i.startsWith("youtube-")) return;
      let s = e.media.getAttribute("src");
      is.empty(s) && (s = e.media.getAttribute(this.config.attributes.embed.id));
      const n = parseId(s),
        r = createElement("div", {
          id: generateId(e.provider),
          "data-poster": t.customControls ? e.poster : void 0
        });
      if (e.media = replaceElement(r, e.media), t.customControls) {
        const t = e => `https://i.ytimg.com/vi/${n}/${e}default.jpg`;
        loadImage(t("maxres"), 121).catch(() => loadImage(t("sd"), 121)).catch(() => loadImage(t("hq"))).then(t => ui.setPoster.call(e, t.src)).then(t => {
          t.includes("maxres") || (e.elements.poster.style.backgroundSize = "cover");
        }).catch(() => {});
      }
      e.embed = new window.YT.Player(e.media, {
        videoId: n,
        host: getHost(t),
        playerVars: extend({}, {
          autoplay: e.config.autoplay ? 1 : 0,
          hl: e.config.hl,
          controls: e.supported.ui && t.customControls ? 0 : 1,
          disablekb: 1,
          playsinline: e.config.playsinline && !e.config.fullscreen.iosNative ? 1 : 0,
          cc_load_policy: e.captions.active ? 1 : 0,
          cc_lang_pref: e.config.captions.language,
          widget_referrer: window ? window.location.href : null
        }, t),
        events: {
          onError(t) {
            if (!e.media.error) {
              const i = t.data,
                s = {
                  2: "The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.",
                  5: "The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.",
                  100: "The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.",
                  101: "The owner of the requested video does not allow it to be played in embedded players.",
                  150: "The owner of the requested video does not allow it to be played in embedded players."
                }[i] || "An unknown error occurred";
              e.media.error = {
                code: i,
                message: s
              }, triggerEvent.call(e, e.media, "error");
            }
          },
          onPlaybackRateChange(t) {
            const i = t.target;
            e.media.playbackRate = i.getPlaybackRate(), triggerEvent.call(e, e.media, "ratechange");
          },
          onReady(i) {
            if (is.function(e.media.play)) return;
            const s = i.target;
            youtube.getTitle.call(e, n), e.media.play = () => {
              assurePlaybackState.call(e, !0), s.playVideo();
            }, e.media.pause = () => {
              assurePlaybackState.call(e, !1), s.pauseVideo();
            }, e.media.stop = () => {
              s.stopVideo();
            }, e.media.duration = s.getDuration(), e.media.paused = !0, e.media.currentTime = 0, Object.defineProperty(e.media, "currentTime", {
              get: () => Number(s.getCurrentTime()),
              set(t) {
                e.paused && !e.embed.hasPlayed && e.embed.mute(), e.media.seeking = !0, triggerEvent.call(e, e.media, "seeking"), s.seekTo(t);
              }
            }), Object.defineProperty(e.media, "playbackRate", {
              get: () => s.getPlaybackRate(),
              set(e) {
                s.setPlaybackRate(e);
              }
            });
            let {
              volume: r
            } = e.config;
            Object.defineProperty(e.media, "volume", {
              get: () => r,
              set(t) {
                r = t, s.setVolume(100 * r), triggerEvent.call(e, e.media, "volumechange");
              }
            });
            let {
              muted: a
            } = e.config;
            Object.defineProperty(e.media, "muted", {
              get: () => a,
              set(t) {
                const i = is.boolean(t) ? t : a;
                a = i, s[i ? "mute" : "unMute"](), s.setVolume(100 * r), triggerEvent.call(e, e.media, "volumechange");
              }
            }), Object.defineProperty(e.media, "currentSrc", {
              get: () => s.getVideoUrl()
            }), Object.defineProperty(e.media, "ended", {
              get: () => e.currentTime === e.duration
            });
            const o = s.getAvailablePlaybackRates();
            e.options.speed = o.filter(t => e.config.speed.options.includes(t)), e.supported.ui && t.customControls && e.media.setAttribute("tabindex", -1), triggerEvent.call(e, e.media, "timeupdate"), triggerEvent.call(e, e.media, "durationchange"), clearInterval(e.timers.buffering), e.timers.buffering = setInterval(() => {
              e.media.buffered = s.getVideoLoadedFraction(), (null === e.media.lastBuffered || e.media.lastBuffered < e.media.buffered) && triggerEvent.call(e, e.media, "progress"), e.media.lastBuffered = e.media.buffered, 1 === e.media.buffered && (clearInterval(e.timers.buffering), triggerEvent.call(e, e.media, "canplaythrough"));
            }, 200), t.customControls && setTimeout(() => ui.build.call(e), 50);
          },
          onStateChange(i) {
            const s = i.target;
            clearInterval(e.timers.playing);
            switch (e.media.seeking && [1, 2].includes(i.data) && (e.media.seeking = !1, triggerEvent.call(e, e.media, "seeked")), i.data) {
              case -1:
                triggerEvent.call(e, e.media, "timeupdate"), e.media.buffered = s.getVideoLoadedFraction(), triggerEvent.call(e, e.media, "progress");
                break;
              case 0:
                assurePlaybackState.call(e, !1), e.media.loop ? (s.stopVideo(), s.playVideo()) : triggerEvent.call(e, e.media, "ended");
                break;
              case 1:
                t.customControls && !e.config.autoplay && e.media.paused && !e.embed.hasPlayed ? e.media.pause() : (assurePlaybackState.call(e, !0), triggerEvent.call(e, e.media, "playing"), e.timers.playing = setInterval(() => {
                  triggerEvent.call(e, e.media, "timeupdate");
                }, 50), e.media.duration !== s.getDuration() && (e.media.duration = s.getDuration(), triggerEvent.call(e, e.media, "durationchange")));
                break;
              case 2:
                e.muted || e.embed.unMute(), assurePlaybackState.call(e, !1);
                break;
              case 3:
                triggerEvent.call(e, e.media, "waiting");
            }
            triggerEvent.call(e, e.elements.container, "statechange", !1, {
              code: i.data
            });
          }
        }
      });
    }
  },
  media = {
    setup() {
      this.media ? (toggleClass(this.elements.container, this.config.classNames.type.replace("{0}", this.type), !0), toggleClass(this.elements.container, this.config.classNames.provider.replace("{0}", this.provider), !0), this.isEmbed && toggleClass(this.elements.container, this.config.classNames.type.replace("{0}", "video"), !0), this.isVideo && (this.elements.wrapper = createElement("div", {
        class: this.config.classNames.video
      }), wrap$1(this.media, this.elements.wrapper), this.elements.poster = createElement("div", {
        class: this.config.classNames.poster
      }), this.elements.wrapper.appendChild(this.elements.poster)), this.isHTML5 ? html5.setup.call(this) : this.isYouTube ? youtube.setup.call(this) : this.isVimeo && vimeo.setup.call(this)) : this.debug.warn("No media element found!");
    }
  };
class Ads {
  constructor(e) {
    _defineProperty$1(this, "load", () => {
      this.enabled && (is.object(window.google) && is.object(window.google.ima) ? this.ready() : loadScript(this.player.config.urls.googleIMA.sdk).then(() => {
        this.ready();
      }).catch(() => {
        this.trigger("error", new Error("Google IMA SDK failed to load"));
      }));
    }), _defineProperty$1(this, "ready", () => {
      var e;
      this.enabled || ((e = this).manager && e.manager.destroy(), e.elements.displayContainer && e.elements.displayContainer.destroy(), e.elements.container.remove()), this.startSafetyTimer(12e3, "ready()"), this.managerPromise.then(() => {
        this.clearSafetyTimer("onAdsManagerLoaded()");
      }), this.listeners(), this.setupIMA();
    }), _defineProperty$1(this, "setupIMA", () => {
      this.elements.container = createElement("div", {
        class: this.player.config.classNames.ads
      }), this.player.elements.container.appendChild(this.elements.container), google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED), google.ima.settings.setLocale(this.player.config.ads.language), google.ima.settings.setDisableCustomPlaybackForIOS10Plus(this.player.config.playsinline), this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container, this.player.media), this.loader = new google.ima.AdsLoader(this.elements.displayContainer), this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, e => this.onAdsManagerLoaded(e), !1), this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, e => this.onAdError(e), !1), this.requestAds();
    }), _defineProperty$1(this, "requestAds", () => {
      const {
        container: e
      } = this.player.elements;
      try {
        const t = new google.ima.AdsRequest();
        t.adTagUrl = this.tagUrl, t.linearAdSlotWidth = e.offsetWidth, t.linearAdSlotHeight = e.offsetHeight, t.nonLinearAdSlotWidth = e.offsetWidth, t.nonLinearAdSlotHeight = e.offsetHeight, t.forceNonLinearFullSlot = !1, t.setAdWillPlayMuted(!this.player.muted), this.loader.requestAds(t);
      } catch (e) {
        this.onAdError(e);
      }
    }), _defineProperty$1(this, "pollCountdown", (e = !1) => {
      if (!e) return clearInterval(this.countdownTimer), void this.elements.container.removeAttribute("data-badge-text");
      this.countdownTimer = setInterval(() => {
        const e = formatTime(Math.max(this.manager.getRemainingTime(), 0)),
          t = `${i18n.get("advertisement", this.player.config)} - ${e}`;
        this.elements.container.setAttribute("data-badge-text", t);
      }, 100);
    }), _defineProperty$1(this, "onAdsManagerLoaded", e => {
      if (!this.enabled) return;
      const t = new google.ima.AdsRenderingSettings();
      t.restoreCustomPlaybackStateOnAdBreakComplete = !0, t.enablePreloading = !0, this.manager = e.getAdsManager(this.player, t), this.cuePoints = this.manager.getCuePoints(), this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, e => this.onAdError(e)), Object.keys(google.ima.AdEvent.Type).forEach(e => {
        this.manager.addEventListener(google.ima.AdEvent.Type[e], e => this.onAdEvent(e));
      }), this.trigger("loaded");
    }), _defineProperty$1(this, "addCuePoints", () => {
      is.empty(this.cuePoints) || this.cuePoints.forEach(e => {
        if (0 !== e && -1 !== e && e < this.player.duration) {
          const t = this.player.elements.progress;
          if (is.element(t)) {
            const i = 100 / this.player.duration * e,
              s = createElement("span", {
                class: this.player.config.classNames.cues
              });
            s.style.left = `${i.toString()}%`, t.appendChild(s);
          }
        }
      });
    }), _defineProperty$1(this, "onAdEvent", e => {
      const {
          container: t
        } = this.player.elements,
        i = e.getAd(),
        s = e.getAdData();
      switch ((e => {
        triggerEvent.call(this.player, this.player.media, `ads${e.replace(/_/g, "").toLowerCase()}`);
      })(e.type), e.type) {
        case google.ima.AdEvent.Type.LOADED:
          this.trigger("loaded"), this.pollCountdown(!0), i.isLinear() || (i.width = t.offsetWidth, i.height = t.offsetHeight);
          break;
        case google.ima.AdEvent.Type.STARTED:
          this.manager.setVolume(this.player.volume);
          break;
        case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:
          this.player.ended ? this.loadAds() : this.loader.contentComplete();
          break;
        case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:
          this.pauseContent();
          break;
        case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:
          this.pollCountdown(), this.resumeContent();
          break;
        case google.ima.AdEvent.Type.LOG:
          s.adError && this.player.debug.warn(`Non-fatal ad error: ${s.adError.getMessage()}`);
      }
    }), _defineProperty$1(this, "onAdError", e => {
      this.cancel(), this.player.debug.warn("Ads error", e);
    }), _defineProperty$1(this, "listeners", () => {
      const {
        container: e
      } = this.player.elements;
      let t;
      this.player.on("canplay", () => {
        this.addCuePoints();
      }), this.player.on("ended", () => {
        this.loader.contentComplete();
      }), this.player.on("timeupdate", () => {
        t = this.player.currentTime;
      }), this.player.on("seeked", () => {
        const e = this.player.currentTime;
        is.empty(this.cuePoints) || this.cuePoints.forEach((i, s) => {
          t < i && i < e && (this.manager.discardAdBreak(), this.cuePoints.splice(s, 1));
        });
      }), window.addEventListener("resize", () => {
        this.manager && this.manager.resize(e.offsetWidth, e.offsetHeight, google.ima.ViewMode.NORMAL);
      });
    }), _defineProperty$1(this, "play", () => {
      const {
        container: e
      } = this.player.elements;
      this.managerPromise || this.resumeContent(), this.managerPromise.then(() => {
        this.manager.setVolume(this.player.volume), this.elements.displayContainer.initialize();
        try {
          this.initialized || (this.manager.init(e.offsetWidth, e.offsetHeight, google.ima.ViewMode.NORMAL), this.manager.start()), this.initialized = !0;
        } catch (e) {
          this.onAdError(e);
        }
      }).catch(() => {});
    }), _defineProperty$1(this, "resumeContent", () => {
      this.elements.container.style.zIndex = "", this.playing = !1, silencePromise(this.player.media.play());
    }), _defineProperty$1(this, "pauseContent", () => {
      this.elements.container.style.zIndex = 3, this.playing = !0, this.player.media.pause();
    }), _defineProperty$1(this, "cancel", () => {
      this.initialized && this.resumeContent(), this.trigger("error"), this.loadAds();
    }), _defineProperty$1(this, "loadAds", () => {
      this.managerPromise.then(() => {
        this.manager && this.manager.destroy(), this.managerPromise = new Promise(e => {
          this.on("loaded", e), this.player.debug.log(this.manager);
        }), this.initialized = !1, this.requestAds();
      }).catch(() => {});
    }), _defineProperty$1(this, "trigger", (e, ...t) => {
      const i = this.events[e];
      is.array(i) && i.forEach(e => {
        is.function(e) && e.apply(this, t);
      });
    }), _defineProperty$1(this, "on", (e, t) => (is.array(this.events[e]) || (this.events[e] = []), this.events[e].push(t), this)), _defineProperty$1(this, "startSafetyTimer", (e, t) => {
      this.player.debug.log(`Safety timer invoked from: ${t}`), this.safetyTimer = setTimeout(() => {
        this.cancel(), this.clearSafetyTimer("startSafetyTimer()");
      }, e);
    }), _defineProperty$1(this, "clearSafetyTimer", e => {
      is.nullOrUndefined(this.safetyTimer) || (this.player.debug.log(`Safety timer cleared from: ${e}`), clearTimeout(this.safetyTimer), this.safetyTimer = null);
    }), this.player = e, this.config = e.config.ads, this.playing = !1, this.initialized = !1, this.elements = {
      container: null,
      displayContainer: null
    }, this.manager = null, this.loader = null, this.cuePoints = null, this.events = {}, this.safetyTimer = null, this.countdownTimer = null, this.managerPromise = new Promise((e, t) => {
      this.on("loaded", e), this.on("error", t);
    }), this.load();
  }
  get enabled() {
    const {
      config: e
    } = this;
    return this.player.isHTML5 && this.player.isVideo && e.enabled && (!is.empty(e.publisherId) || is.url(e.tagUrl));
  }
  get tagUrl() {
    const {
      config: e
    } = this;
    if (is.url(e.tagUrl)) return e.tagUrl;
    return `https://go.aniview.com/api/adserver6/vast/?${buildUrlParams({
      AV_PUBLISHERID: "58c25bb0073ef448b1087ad6",
      AV_CHANNELID: "5a0458dc28a06145e4519d21",
      AV_URL: window.location.hostname,
      cb: Date.now(),
      AV_WIDTH: 640,
      AV_HEIGHT: 480,
      AV_CDIM2: e.publisherId
    })}`;
  }
}
function clamp(e = 0, t = 0, i = 255) {
  return Math.min(Math.max(e, t), i);
}
const parseVtt = e => {
    const t = [];
    return e.split(/\r\n\r\n|\n\n|\r\r/).forEach(e => {
      const i = {};
      e.split(/\r\n|\n|\r/).forEach(e => {
        if (is.number(i.startTime)) {
          if (!is.empty(e.trim()) && is.empty(i.text)) {
            const t = e.trim().split("#xywh=");
            [i.text] = t, t[1] && ([i.x, i.y, i.w, i.h] = t[1].split(","));
          }
        } else {
          const t = e.match(/([0-9]{2})?:?([0-9]{2}):([0-9]{2}).([0-9]{2,3})( ?--> ?)([0-9]{2})?:?([0-9]{2}):([0-9]{2}).([0-9]{2,3})/);
          t && (i.startTime = 60 * Number(t[1] || 0) * 60 + 60 * Number(t[2]) + Number(t[3]) + Number(`0.${t[4]}`), i.endTime = 60 * Number(t[6] || 0) * 60 + 60 * Number(t[7]) + Number(t[8]) + Number(`0.${t[9]}`));
        }
      }), i.text && t.push(i);
    }), t;
  },
  fitRatio = (e, t) => {
    const i = {};
    return e > t.width / t.height ? (i.width = t.width, i.height = 1 / e * t.width) : (i.height = t.height, i.width = e * t.height), i;
  };
class PreviewThumbnails {
  constructor(e) {
    _defineProperty$1(this, "load", () => {
      this.player.elements.display.seekTooltip && (this.player.elements.display.seekTooltip.hidden = this.enabled), this.enabled && this.getThumbnails().then(() => {
        this.enabled && (this.render(), this.determineContainerAutoSizing(), this.listeners(), this.loaded = !0);
      });
    }), _defineProperty$1(this, "getThumbnails", () => new Promise(e => {
      const {
        src: t
      } = this.player.config.previewThumbnails;
      if (is.empty(t)) throw new Error("Missing previewThumbnails.src config attribute");
      const i = () => {
        this.thumbnails.sort((e, t) => e.height - t.height), this.player.debug.log("Preview thumbnails", this.thumbnails), e();
      };
      if (is.function(t)) t(e => {
        this.thumbnails = e, i();
      });else {
        const e = (is.string(t) ? [t] : t).map(e => this.getThumbnail(e));
        Promise.all(e).then(i);
      }
    })), _defineProperty$1(this, "getThumbnail", e => new Promise(t => {
      fetch$1(e).then(i => {
        const s = {
          frames: parseVtt(i),
          height: null,
          urlPrefix: ""
        };
        s.frames[0].text.startsWith("/") || s.frames[0].text.startsWith("http://") || s.frames[0].text.startsWith("https://") || (s.urlPrefix = e.substring(0, e.lastIndexOf("/") + 1));
        const n = new Image();
        n.onload = () => {
          s.height = n.naturalHeight, s.width = n.naturalWidth, this.thumbnails.push(s), t();
        }, n.src = s.urlPrefix + s.frames[0].text;
      });
    })), _defineProperty$1(this, "startMove", e => {
      if (this.loaded && is.event(e) && ["touchmove", "mousemove"].includes(e.type) && this.player.media.duration) {
        if ("touchmove" === e.type) this.seekTime = this.player.media.duration * (this.player.elements.inputs.seek.value / 100);else {
          var t, i;
          const s = this.player.elements.progress.getBoundingClientRect(),
            n = 100 / s.width * (e.pageX - s.left);
          this.seekTime = this.player.media.duration * (n / 100), this.seekTime < 0 && (this.seekTime = 0), this.seekTime > this.player.media.duration - 1 && (this.seekTime = this.player.media.duration - 1), this.mousePosX = e.pageX, this.elements.thumb.time.innerText = formatTime(this.seekTime);
          const r = null === (t = this.player.config.markers) || void 0 === t || null === (i = t.points) || void 0 === i ? void 0 : i.find(({
            time: e
          }) => e === Math.round(this.seekTime));
          r && this.elements.thumb.time.insertAdjacentHTML("afterbegin", `${r.label}<br>`);
        }
        this.showImageAtCurrentTime();
      }
    }), _defineProperty$1(this, "endMove", () => {
      this.toggleThumbContainer(!1, !0);
    }), _defineProperty$1(this, "startScrubbing", e => {
      (is.nullOrUndefined(e.button) || !1 === e.button || 0 === e.button) && (this.mouseDown = !0, this.player.media.duration && (this.toggleScrubbingContainer(!0), this.toggleThumbContainer(!1, !0), this.showImageAtCurrentTime()));
    }), _defineProperty$1(this, "endScrubbing", () => {
      this.mouseDown = !1, Math.ceil(this.lastTime) === Math.ceil(this.player.media.currentTime) ? this.toggleScrubbingContainer(!1) : once.call(this.player, this.player.media, "timeupdate", () => {
        this.mouseDown || this.toggleScrubbingContainer(!1);
      });
    }), _defineProperty$1(this, "listeners", () => {
      this.player.on("play", () => {
        this.toggleThumbContainer(!1, !0);
      }), this.player.on("seeked", () => {
        this.toggleThumbContainer(!1);
      }), this.player.on("timeupdate", () => {
        this.lastTime = this.player.media.currentTime;
      });
    }), _defineProperty$1(this, "render", () => {
      this.elements.thumb.container = createElement("div", {
        class: this.player.config.classNames.previewThumbnails.thumbContainer
      }), this.elements.thumb.imageContainer = createElement("div", {
        class: this.player.config.classNames.previewThumbnails.imageContainer
      }), this.elements.thumb.container.appendChild(this.elements.thumb.imageContainer);
      const e = createElement("div", {
        class: this.player.config.classNames.previewThumbnails.timeContainer
      });
      this.elements.thumb.time = createElement("span", {}, "00:00"), e.appendChild(this.elements.thumb.time), this.elements.thumb.imageContainer.appendChild(e), is.element(this.player.elements.progress) && this.player.elements.progress.appendChild(this.elements.thumb.container), this.elements.scrubbing.container = createElement("div", {
        class: this.player.config.classNames.previewThumbnails.scrubbingContainer
      }), this.player.elements.wrapper.appendChild(this.elements.scrubbing.container);
    }), _defineProperty$1(this, "destroy", () => {
      this.elements.thumb.container && this.elements.thumb.container.remove(), this.elements.scrubbing.container && this.elements.scrubbing.container.remove();
    }), _defineProperty$1(this, "showImageAtCurrentTime", () => {
      this.mouseDown ? this.setScrubbingContainerSize() : this.setThumbContainerSizeAndPos();
      const e = this.thumbnails[0].frames.findIndex(e => this.seekTime >= e.startTime && this.seekTime <= e.endTime),
        t = e >= 0;
      let i = 0;
      this.mouseDown || this.toggleThumbContainer(t), t && (this.thumbnails.forEach((t, s) => {
        this.loadedImages.includes(t.frames[e].text) && (i = s);
      }), e !== this.showingThumb && (this.showingThumb = e, this.loadImage(i)));
    }), _defineProperty$1(this, "loadImage", (e = 0) => {
      const t = this.showingThumb,
        i = this.thumbnails[e],
        {
          urlPrefix: s
        } = i,
        n = i.frames[t],
        r = i.frames[t].text,
        a = s + r;
      if (this.currentImageElement && this.currentImageElement.dataset.filename === r) this.showImage(this.currentImageElement, n, e, t, r, !1), this.currentImageElement.dataset.index = t, this.removeOldImages(this.currentImageElement);else {
        this.loadingImage && this.usingSprites && (this.loadingImage.onload = null);
        const i = new Image();
        i.src = a, i.dataset.index = t, i.dataset.filename = r, this.showingThumbFilename = r, this.player.debug.log(`Loading image: ${a}`), i.onload = () => this.showImage(i, n, e, t, r, !0), this.loadingImage = i, this.removeOldImages(i);
      }
    }), _defineProperty$1(this, "showImage", (e, t, i, s, n, r = !0) => {
      this.player.debug.log(`Showing thumb: ${n}. num: ${s}. qual: ${i}. newimg: ${r}`), this.setImageSizeAndOffset(e, t), r && (this.currentImageContainer.appendChild(e), this.currentImageElement = e, this.loadedImages.includes(n) || this.loadedImages.push(n)), this.preloadNearby(s, !0).then(this.preloadNearby(s, !1)).then(this.getHigherQuality(i, e, t, n));
    }), _defineProperty$1(this, "removeOldImages", e => {
      Array.from(this.currentImageContainer.children).forEach(t => {
        if ("img" !== t.tagName.toLowerCase()) return;
        const i = this.usingSprites ? 500 : 1e3;
        if (t.dataset.index !== e.dataset.index && !t.dataset.deleting) {
          t.dataset.deleting = !0;
          const {
            currentImageContainer: e
          } = this;
          setTimeout(() => {
            e.removeChild(t), this.player.debug.log(`Removing thumb: ${t.dataset.filename}`);
          }, i);
        }
      });
    }), _defineProperty$1(this, "preloadNearby", (e, t = !0) => new Promise(i => {
      setTimeout(() => {
        const s = this.thumbnails[0].frames[e].text;
        if (this.showingThumbFilename === s) {
          let n;
          n = t ? this.thumbnails[0].frames.slice(e) : this.thumbnails[0].frames.slice(0, e).reverse();
          let r = !1;
          n.forEach(e => {
            const t = e.text;
            if (t !== s && !this.loadedImages.includes(t)) {
              r = !0, this.player.debug.log(`Preloading thumb filename: ${t}`);
              const {
                  urlPrefix: e
                } = this.thumbnails[0],
                s = e + t,
                n = new Image();
              n.src = s, n.onload = () => {
                this.player.debug.log(`Preloaded thumb filename: ${t}`), this.loadedImages.includes(t) || this.loadedImages.push(t), i();
              };
            }
          }), r || i();
        }
      }, 300);
    })), _defineProperty$1(this, "getHigherQuality", (e, t, i, s) => {
      if (e < this.thumbnails.length - 1) {
        let n = t.naturalHeight;
        this.usingSprites && (n = i.h), n < this.thumbContainerHeight && setTimeout(() => {
          this.showingThumbFilename === s && (this.player.debug.log(`Showing higher quality thumb for: ${s}`), this.loadImage(e + 1));
        }, 300);
      }
    }), _defineProperty$1(this, "toggleThumbContainer", (e = !1, t = !1) => {
      const i = this.player.config.classNames.previewThumbnails.thumbContainerShown;
      this.elements.thumb.container.classList.toggle(i, e), !e && t && (this.showingThumb = null, this.showingThumbFilename = null);
    }), _defineProperty$1(this, "toggleScrubbingContainer", (e = !1) => {
      const t = this.player.config.classNames.previewThumbnails.scrubbingContainerShown;
      this.elements.scrubbing.container.classList.toggle(t, e), e || (this.showingThumb = null, this.showingThumbFilename = null);
    }), _defineProperty$1(this, "determineContainerAutoSizing", () => {
      (this.elements.thumb.imageContainer.clientHeight > 20 || this.elements.thumb.imageContainer.clientWidth > 20) && (this.sizeSpecifiedInCSS = !0);
    }), _defineProperty$1(this, "setThumbContainerSizeAndPos", () => {
      const {
        imageContainer: e
      } = this.elements.thumb;
      if (this.sizeSpecifiedInCSS) {
        if (e.clientHeight > 20 && e.clientWidth < 20) {
          const t = Math.floor(e.clientHeight * this.thumbAspectRatio);
          e.style.width = `${t}px`;
        } else if (e.clientHeight < 20 && e.clientWidth > 20) {
          const t = Math.floor(e.clientWidth / this.thumbAspectRatio);
          e.style.height = `${t}px`;
        }
      } else {
        const t = Math.floor(this.thumbContainerHeight * this.thumbAspectRatio);
        e.style.height = `${this.thumbContainerHeight}px`, e.style.width = `${t}px`;
      }
      this.setThumbContainerPos();
    }), _defineProperty$1(this, "setThumbContainerPos", () => {
      const e = this.player.elements.progress.getBoundingClientRect(),
        t = this.player.elements.container.getBoundingClientRect(),
        {
          container: i
        } = this.elements.thumb,
        s = t.left - e.left + 10,
        n = t.right - e.left - i.clientWidth - 10,
        r = this.mousePosX - e.left - i.clientWidth / 2,
        a = clamp(r, s, n);
      i.style.left = `${a}px`, i.style.setProperty("--preview-arrow-offset", r - a + "px");
    }), _defineProperty$1(this, "setScrubbingContainerSize", () => {
      const {
        width: e,
        height: t
      } = fitRatio(this.thumbAspectRatio, {
        width: this.player.media.clientWidth,
        height: this.player.media.clientHeight
      });
      this.elements.scrubbing.container.style.width = `${e}px`, this.elements.scrubbing.container.style.height = `${t}px`;
    }), _defineProperty$1(this, "setImageSizeAndOffset", (e, t) => {
      if (!this.usingSprites) return;
      const i = this.thumbContainerHeight / t.h;
      e.style.height = e.naturalHeight * i + "px", e.style.width = e.naturalWidth * i + "px", e.style.left = `-${t.x * i}px`, e.style.top = `-${t.y * i}px`;
    }), this.player = e, this.thumbnails = [], this.loaded = !1, this.lastMouseMoveTime = Date.now(), this.mouseDown = !1, this.loadedImages = [], this.elements = {
      thumb: {},
      scrubbing: {}
    }, this.load();
  }
  get enabled() {
    return this.player.isHTML5 && this.player.isVideo && this.player.config.previewThumbnails.enabled;
  }
  get currentImageContainer() {
    return this.mouseDown ? this.elements.scrubbing.container : this.elements.thumb.imageContainer;
  }
  get usingSprites() {
    return Object.keys(this.thumbnails[0].frames[0]).includes("w");
  }
  get thumbAspectRatio() {
    return this.usingSprites ? this.thumbnails[0].frames[0].w / this.thumbnails[0].frames[0].h : this.thumbnails[0].width / this.thumbnails[0].height;
  }
  get thumbContainerHeight() {
    if (this.mouseDown) {
      const {
        height: e
      } = fitRatio(this.thumbAspectRatio, {
        width: this.player.media.clientWidth,
        height: this.player.media.clientHeight
      });
      return e;
    }
    return this.sizeSpecifiedInCSS ? this.elements.thumb.imageContainer.clientHeight : Math.floor(this.player.media.clientWidth / this.thumbAspectRatio / 4);
  }
  get currentImageElement() {
    return this.mouseDown ? this.currentScrubbingImageElement : this.currentThumbnailImageElement;
  }
  set currentImageElement(e) {
    this.mouseDown ? this.currentScrubbingImageElement = e : this.currentThumbnailImageElement = e;
  }
}
const source = {
  insertElements(e, t) {
    is.string(t) ? insertElement(e, this.media, {
      src: t
    }) : is.array(t) && t.forEach(t => {
      insertElement(e, this.media, t);
    });
  },
  change(e) {
    getDeep(e, "sources.length") ? (html5.cancelRequests.call(this), this.destroy.call(this, () => {
      this.options.quality = [], removeElement(this.media), this.media = null, is.element(this.elements.container) && this.elements.container.removeAttribute("class");
      const {
          sources: t,
          type: i
        } = e,
        [{
          provider: s = providers.html5,
          src: n
        }] = t,
        r = "html5" === s ? i : "div",
        a = "html5" === s ? {} : {
          src: n
        };
      Object.assign(this, {
        provider: s,
        type: i,
        supported: support.check(i, s, this.config.playsinline),
        media: createElement(r, a)
      }), this.elements.container.appendChild(this.media), is.boolean(e.autoplay) && (this.config.autoplay = e.autoplay), this.isHTML5 && (this.config.crossorigin && this.media.setAttribute("crossorigin", ""), this.config.autoplay && this.media.setAttribute("autoplay", ""), is.empty(e.poster) || (this.poster = e.poster), this.config.loop.active && this.media.setAttribute("loop", ""), this.config.muted && this.media.setAttribute("muted", ""), this.config.playsinline && this.media.setAttribute("playsinline", "")), ui.addStyleHook.call(this), this.isHTML5 && source.insertElements.call(this, "source", t), this.config.title = e.title, media.setup.call(this), this.isHTML5 && Object.keys(e).includes("tracks") && source.insertElements.call(this, "track", e.tracks), (this.isHTML5 || this.isEmbed && !this.supported.ui) && ui.build.call(this), this.isHTML5 && this.media.load(), is.empty(e.previewThumbnails) || (Object.assign(this.config.previewThumbnails, e.previewThumbnails), this.previewThumbnails && this.previewThumbnails.loaded && (this.previewThumbnails.destroy(), this.previewThumbnails = null), this.config.previewThumbnails.enabled && (this.previewThumbnails = new PreviewThumbnails(this))), this.fullscreen.update();
    }, !0)) : this.debug.warn("Invalid source format");
  }
};
class Plyr {
  constructor(e, t) {
    if (_defineProperty$1(this, "play", () => is.function(this.media.play) ? (this.ads && this.ads.enabled && this.ads.managerPromise.then(() => this.ads.play()).catch(() => silencePromise(this.media.play())), this.media.play()) : null), _defineProperty$1(this, "pause", () => this.playing && is.function(this.media.pause) ? this.media.pause() : null), _defineProperty$1(this, "togglePlay", e => (is.boolean(e) ? e : !this.playing) ? this.play() : this.pause()), _defineProperty$1(this, "stop", () => {
      this.isHTML5 ? (this.pause(), this.restart()) : is.function(this.media.stop) && this.media.stop();
    }), _defineProperty$1(this, "restart", () => {
      this.currentTime = 0;
    }), _defineProperty$1(this, "rewind", e => {
      this.currentTime -= is.number(e) ? e : this.config.seekTime;
    }), _defineProperty$1(this, "forward", e => {
      this.currentTime += is.number(e) ? e : this.config.seekTime;
    }), _defineProperty$1(this, "increaseVolume", e => {
      const t = this.media.muted ? 0 : this.volume;
      this.volume = t + (is.number(e) ? e : 0);
    }), _defineProperty$1(this, "decreaseVolume", e => {
      this.increaseVolume(-e);
    }), _defineProperty$1(this, "airplay", () => {
      support.airplay && this.media.webkitShowPlaybackTargetPicker();
    }), _defineProperty$1(this, "toggleControls", e => {
      if (this.supported.ui && !this.isAudio) {
        const t = hasClass(this.elements.container, this.config.classNames.hideControls),
          i = void 0 === e ? void 0 : !e,
          s = toggleClass(this.elements.container, this.config.classNames.hideControls, i);
        if (s && is.array(this.config.controls) && this.config.controls.includes("settings") && !is.empty(this.config.settings) && controls.toggleMenu.call(this, !1), s !== t) {
          const e = s ? "controlshidden" : "controlsshown";
          triggerEvent.call(this, this.media, e);
        }
        return !s;
      }
      return !1;
    }), _defineProperty$1(this, "on", (e, t) => {
      on.call(this, this.elements.container, e, t);
    }), _defineProperty$1(this, "once", (e, t) => {
      once.call(this, this.elements.container, e, t);
    }), _defineProperty$1(this, "off", (e, t) => {
      off(this.elements.container, e, t);
    }), _defineProperty$1(this, "destroy", (e, t = !1) => {
      if (!this.ready) return;
      const i = () => {
        document.body.style.overflow = "", this.embed = null, t ? (Object.keys(this.elements).length && (removeElement(this.elements.buttons.play), removeElement(this.elements.captions), removeElement(this.elements.controls), removeElement(this.elements.wrapper), this.elements.buttons.play = null, this.elements.captions = null, this.elements.controls = null, this.elements.wrapper = null), is.function(e) && e()) : (unbindListeners.call(this), html5.cancelRequests.call(this), replaceElement(this.elements.original, this.elements.container), triggerEvent.call(this, this.elements.original, "destroyed", !0), is.function(e) && e.call(this.elements.original), this.ready = !1, setTimeout(() => {
          this.elements = null, this.media = null;
        }, 200));
      };
      this.stop(), clearTimeout(this.timers.loading), clearTimeout(this.timers.controls), clearTimeout(this.timers.resized), this.isHTML5 ? (ui.toggleNativeControls.call(this, !0), i()) : this.isYouTube ? (clearInterval(this.timers.buffering), clearInterval(this.timers.playing), null !== this.embed && is.function(this.embed.destroy) && this.embed.destroy(), i()) : this.isVimeo && (null !== this.embed && this.embed.unload().then(i), setTimeout(i, 200));
    }), _defineProperty$1(this, "supports", e => support.mime.call(this, e)), this.timers = {}, this.ready = !1, this.loading = !1, this.failed = !1, this.touch = support.touch, this.media = e, is.string(this.media) && (this.media = document.querySelectorAll(this.media)), (window.jQuery && this.media instanceof jQuery || is.nodeList(this.media) || is.array(this.media)) && (this.media = this.media[0]), this.config = extend({}, defaults$2, Plyr.defaults, t || {}, (() => {
      try {
        return JSON.parse(this.media.getAttribute("data-plyr-config"));
      } catch (e) {
        return {};
      }
    })()), this.elements = {
      container: null,
      fullscreen: null,
      captions: null,
      buttons: {},
      display: {},
      progress: {},
      inputs: {},
      settings: {
        popup: null,
        menu: null,
        panels: {},
        buttons: {}
      }
    }, this.captions = {
      active: null,
      currentTrack: -1,
      meta: new WeakMap()
    }, this.fullscreen = {
      active: !1
    }, this.options = {
      speed: [],
      quality: []
    }, this.debug = new Console(this.config.debug), this.debug.log("Config", this.config), this.debug.log("Support", support), is.nullOrUndefined(this.media) || !is.element(this.media)) return void this.debug.error("Setup failed: no suitable element passed");
    if (this.media.plyr) return void this.debug.warn("Target already setup");
    if (!this.config.enabled) return void this.debug.error("Setup failed: disabled by config");
    if (!support.check().api) return void this.debug.error("Setup failed: no support");
    const i = this.media.cloneNode(!0);
    i.autoplay = !1, this.elements.original = i;
    const s = this.media.tagName.toLowerCase();
    let n = null,
      r = null;
    switch (s) {
      case "div":
        if (n = this.media.querySelector("iframe"), is.element(n)) {
          if (r = parseUrl(n.getAttribute("src")), this.provider = getProviderByUrl(r.toString()), this.elements.container = this.media, this.media = n, this.elements.container.className = "", r.search.length) {
            const e = ["1", "true"];
            e.includes(r.searchParams.get("autoplay")) && (this.config.autoplay = !0), e.includes(r.searchParams.get("loop")) && (this.config.loop.active = !0), this.isYouTube ? (this.config.playsinline = e.includes(r.searchParams.get("playsinline")), this.config.youtube.hl = r.searchParams.get("hl")) : this.config.playsinline = !0;
          }
        } else this.provider = this.media.getAttribute(this.config.attributes.embed.provider), this.media.removeAttribute(this.config.attributes.embed.provider);
        if (is.empty(this.provider) || !Object.values(providers).includes(this.provider)) return void this.debug.error("Setup failed: Invalid provider");
        this.type = types.video;
        break;
      case "video":
      case "audio":
        this.type = s, this.provider = providers.html5, this.media.hasAttribute("crossorigin") && (this.config.crossorigin = !0), this.media.hasAttribute("autoplay") && (this.config.autoplay = !0), (this.media.hasAttribute("playsinline") || this.media.hasAttribute("webkit-playsinline")) && (this.config.playsinline = !0), this.media.hasAttribute("muted") && (this.config.muted = !0), this.media.hasAttribute("loop") && (this.config.loop.active = !0);
        break;
      default:
        return void this.debug.error("Setup failed: unsupported type");
    }
    this.supported = support.check(this.type, this.provider), this.supported.api ? (this.eventListeners = [], this.listeners = new Listeners(this), this.storage = new Storage(this), this.media.plyr = this, is.element(this.elements.container) || (this.elements.container = createElement("div"), wrap$1(this.media, this.elements.container)), ui.migrateStyles.call(this), ui.addStyleHook.call(this), media.setup.call(this), this.config.debug && on.call(this, this.elements.container, this.config.events.join(" "), e => {
      this.debug.log(`event: ${e.type}`);
    }), this.fullscreen = new Fullscreen(this), (this.isHTML5 || this.isEmbed && !this.supported.ui) && ui.build.call(this), this.listeners.container(), this.listeners.global(), this.config.ads.enabled && (this.ads = new Ads(this)), this.isHTML5 && this.config.autoplay && this.once("canplay", () => silencePromise(this.play())), this.lastSeekTime = 0, this.config.previewThumbnails.enabled && (this.previewThumbnails = new PreviewThumbnails(this))) : this.debug.error("Setup failed: no support");
  }
  get isHTML5() {
    return this.provider === providers.html5;
  }
  get isEmbed() {
    return this.isYouTube || this.isVimeo;
  }
  get isYouTube() {
    return this.provider === providers.youtube;
  }
  get isVimeo() {
    return this.provider === providers.vimeo;
  }
  get isVideo() {
    return this.type === types.video;
  }
  get isAudio() {
    return this.type === types.audio;
  }
  get playing() {
    return Boolean(this.ready && !this.paused && !this.ended);
  }
  get paused() {
    return Boolean(this.media.paused);
  }
  get stopped() {
    return Boolean(this.paused && 0 === this.currentTime);
  }
  get ended() {
    return Boolean(this.media.ended);
  }
  set currentTime(e) {
    if (!this.duration) return;
    const t = is.number(e) && e > 0;
    this.media.currentTime = t ? Math.min(e, this.duration) : 0, this.debug.log(`Seeking to ${this.currentTime} seconds`);
  }
  get currentTime() {
    return Number(this.media.currentTime);
  }
  get buffered() {
    const {
      buffered: e
    } = this.media;
    return is.number(e) ? e : e && e.length && this.duration > 0 ? e.end(0) / this.duration : 0;
  }
  get seeking() {
    return Boolean(this.media.seeking);
  }
  get duration() {
    const e = parseFloat(this.config.duration),
      t = (this.media || {}).duration,
      i = is.number(t) && t !== 1 / 0 ? t : 0;
    return e || i;
  }
  set volume(e) {
    let t = e;
    is.string(t) && (t = Number(t)), is.number(t) || (t = this.storage.get("volume")), is.number(t) || ({
      volume: t
    } = this.config), t > 1 && (t = 1), t < 0 && (t = 0), this.config.volume = t, this.media.volume = t, !is.empty(e) && this.muted && t > 0 && (this.muted = !1);
  }
  get volume() {
    return Number(this.media.volume);
  }
  set muted(e) {
    let t = e;
    is.boolean(t) || (t = this.storage.get("muted")), is.boolean(t) || (t = this.config.muted), this.config.muted = t, this.media.muted = t;
  }
  get muted() {
    return Boolean(this.media.muted);
  }
  get hasAudio() {
    return !this.isHTML5 || !!this.isAudio || Boolean(this.media.mozHasAudio) || Boolean(this.media.webkitAudioDecodedByteCount) || Boolean(this.media.audioTracks && this.media.audioTracks.length);
  }
  set speed(e) {
    let t = null;
    is.number(e) && (t = e), is.number(t) || (t = this.storage.get("speed")), is.number(t) || (t = this.config.speed.selected);
    const {
      minimumSpeed: i,
      maximumSpeed: s
    } = this;
    t = clamp(t, i, s), this.config.speed.selected = t, setTimeout(() => {
      this.media && (this.media.playbackRate = t);
    }, 0);
  }
  get speed() {
    return Number(this.media.playbackRate);
  }
  get minimumSpeed() {
    return this.isYouTube ? Math.min(...this.options.speed) : this.isVimeo ? .5 : .0625;
  }
  get maximumSpeed() {
    return this.isYouTube ? Math.max(...this.options.speed) : this.isVimeo ? 2 : 16;
  }
  set quality(e) {
    const t = this.config.quality,
      i = this.options.quality;
    if (!i.length) return;
    let s = [!is.empty(e) && Number(e), this.storage.get("quality"), t.selected, t.default].find(is.number),
      n = !0;
    if (!i.includes(s)) {
      const e = closest(i, s);
      this.debug.warn(`Unsupported quality option: ${s}, using ${e} instead`), s = e, n = !1;
    }
    t.selected = s, this.media.quality = s, n && this.storage.set({
      quality: s
    });
  }
  get quality() {
    return this.media.quality;
  }
  set loop(e) {
    const t = is.boolean(e) ? e : this.config.loop.active;
    this.config.loop.active = t, this.media.loop = t;
  }
  get loop() {
    return Boolean(this.media.loop);
  }
  set source(e) {
    source.change.call(this, e);
  }
  get source() {
    return this.media.currentSrc;
  }
  get download() {
    const {
      download: e
    } = this.config.urls;
    return is.url(e) ? e : this.source;
  }
  set download(e) {
    is.url(e) && (this.config.urls.download = e, controls.setDownloadUrl.call(this));
  }
  set poster(e) {
    this.isVideo ? ui.setPoster.call(this, e, !1).catch(() => {}) : this.debug.warn("Poster can only be set for video");
  }
  get poster() {
    return this.isVideo ? this.media.getAttribute("poster") || this.media.getAttribute("data-poster") : null;
  }
  get ratio() {
    if (!this.isVideo) return null;
    const e = reduceAspectRatio(getAspectRatio.call(this));
    return is.array(e) ? e.join(":") : e;
  }
  set ratio(e) {
    this.isVideo ? is.string(e) && validateAspectRatio(e) ? (this.config.ratio = reduceAspectRatio(e), setAspectRatio.call(this)) : this.debug.error(`Invalid aspect ratio specified (${e})`) : this.debug.warn("Aspect ratio can only be set for video");
  }
  set autoplay(e) {
    this.config.autoplay = is.boolean(e) ? e : this.config.autoplay;
  }
  get autoplay() {
    return Boolean(this.config.autoplay);
  }
  toggleCaptions(e) {
    captions.toggle.call(this, e, !1);
  }
  set currentTrack(e) {
    captions.set.call(this, e, !1), captions.setup.call(this);
  }
  get currentTrack() {
    const {
      toggled: e,
      currentTrack: t
    } = this.captions;
    return e ? t : -1;
  }
  set language(e) {
    captions.setLanguage.call(this, e, !1);
  }
  get language() {
    return (captions.getCurrentTrack.call(this) || {}).language;
  }
  set pip(e) {
    if (!support.pip) return;
    const t = is.boolean(e) ? e : !this.pip;
    is.function(this.media.webkitSetPresentationMode) && this.media.webkitSetPresentationMode(t ? pip.active : pip.inactive), is.function(this.media.requestPictureInPicture) && (!this.pip && t ? this.media.requestPictureInPicture() : this.pip && !t && document.exitPictureInPicture());
  }
  get pip() {
    return support.pip ? is.empty(this.media.webkitPresentationMode) ? this.media === document.pictureInPictureElement : this.media.webkitPresentationMode === pip.active : null;
  }
  setPreviewThumbnails(e) {
    this.previewThumbnails && this.previewThumbnails.loaded && (this.previewThumbnails.destroy(), this.previewThumbnails = null), Object.assign(this.config.previewThumbnails, e), this.config.previewThumbnails.enabled && (this.previewThumbnails = new PreviewThumbnails(this));
  }
  static supported(e, t) {
    return support.check(e, t);
  }
  static loadSprite(e, t) {
    return loadSprite(e, t);
  }
  static setup(e, t = {}) {
    let i = null;
    return is.string(e) ? i = Array.from(document.querySelectorAll(e)) : is.nodeList(e) ? i = Array.from(e) : is.array(e) && (i = e.filter(is.element)), is.empty(i) ? null : i.map(e => new Plyr(e, t));
  }
}
Plyr.defaults = cloneDeep(defaults$2);

function getDefaultExportFromCjs(x){return x&&x.__esModule&&Object.prototype.hasOwnProperty.call(x,'default')?x['default']:x;}var urlToolkit={exports:{}};(function(module,exports){// see https://tools.ietf.org/html/rfc1808
(function(root){var URL_REGEX=/^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/;var FIRST_SEGMENT_REGEX=/^(?=([^\/?#]*))\1([^]*)$/;var SLASH_DOT_REGEX=/(?:\/|^)\.(?=\/)/g;var SLASH_DOT_DOT_REGEX=/(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g;var URLToolkit={// If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
// E.g
// With opts.alwaysNormalize = false (default, spec compliant)
// http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
// With opts.alwaysNormalize = true (not spec compliant)
// http://a.com/b/cd + /e/f/../g => http://a.com/e/g
buildAbsoluteURL:function(baseURL,relativeURL,opts){opts=opts||{};// remove any remaining space and CRLF
baseURL=baseURL.trim();relativeURL=relativeURL.trim();if(!relativeURL){// 2a) If the embedded URL is entirely empty, it inherits the
// entire base URL (i.e., is set equal to the base URL)
// and we are done.
if(!opts.alwaysNormalize){return baseURL;}var basePartsForNormalise=URLToolkit.parseURL(baseURL);if(!basePartsForNormalise){throw new Error('Error trying to parse base URL.');}basePartsForNormalise.path=URLToolkit.normalizePath(basePartsForNormalise.path);return URLToolkit.buildURLFromParts(basePartsForNormalise);}var relativeParts=URLToolkit.parseURL(relativeURL);if(!relativeParts){throw new Error('Error trying to parse relative URL.');}if(relativeParts.scheme){// 2b) If the embedded URL starts with a scheme name, it is
// interpreted as an absolute URL and we are done.
if(!opts.alwaysNormalize){return relativeURL;}relativeParts.path=URLToolkit.normalizePath(relativeParts.path);return URLToolkit.buildURLFromParts(relativeParts);}var baseParts=URLToolkit.parseURL(baseURL);if(!baseParts){throw new Error('Error trying to parse base URL.');}if(!baseParts.netLoc&&baseParts.path&&baseParts.path[0]!=='/'){// If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc
// This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'
var pathParts=FIRST_SEGMENT_REGEX.exec(baseParts.path);baseParts.netLoc=pathParts[1];baseParts.path=pathParts[2];}if(baseParts.netLoc&&!baseParts.path){baseParts.path='/';}var builtParts={// 2c) Otherwise, the embedded URL inherits the scheme of
// the base URL.
scheme:baseParts.scheme,netLoc:relativeParts.netLoc,path:null,params:relativeParts.params,query:relativeParts.query,fragment:relativeParts.fragment};if(!relativeParts.netLoc){// 3) If the embedded URL's <net_loc> is non-empty, we skip to
// Step 7.  Otherwise, the embedded URL inherits the <net_loc>
// (if any) of the base URL.
builtParts.netLoc=baseParts.netLoc;// 4) If the embedded URL path is preceded by a slash "/", the
// path is not relative and we skip to Step 7.
if(relativeParts.path[0]!=='/'){if(!relativeParts.path){// 5) If the embedded URL path is empty (and not preceded by a
// slash), then the embedded URL inherits the base URL path
builtParts.path=baseParts.path;// 5a) if the embedded URL's <params> is non-empty, we skip to
// step 7; otherwise, it inherits the <params> of the base
// URL (if any) and
if(!relativeParts.params){builtParts.params=baseParts.params;// 5b) if the embedded URL's <query> is non-empty, we skip to
// step 7; otherwise, it inherits the <query> of the base
// URL (if any) and we skip to step 7.
if(!relativeParts.query){builtParts.query=baseParts.query;}}}else {// 6) The last segment of the base URL's path (anything
// following the rightmost slash "/", or the entire path if no
// slash is present) is removed and the embedded URL's path is
// appended in its place.
var baseURLPath=baseParts.path;var newPath=baseURLPath.substring(0,baseURLPath.lastIndexOf('/')+1)+relativeParts.path;builtParts.path=URLToolkit.normalizePath(newPath);}}}if(builtParts.path===null){builtParts.path=opts.alwaysNormalize?URLToolkit.normalizePath(relativeParts.path):relativeParts.path;}return URLToolkit.buildURLFromParts(builtParts);},parseURL:function(url){var parts=URL_REGEX.exec(url);if(!parts){return null;}return {scheme:parts[1]||'',netLoc:parts[2]||'',path:parts[3]||'',params:parts[4]||'',query:parts[5]||'',fragment:parts[6]||''};},normalizePath:function(path){// The following operations are
// then applied, in order, to the new path:
// 6a) All occurrences of "./", where "." is a complete path
// segment, are removed.
// 6b) If the path ends with "." as a complete path segment,
// that "." is removed.
path=path.split('').reverse().join('').replace(SLASH_DOT_REGEX,'');// 6c) All occurrences of "<segment>/../", where <segment> is a
// complete path segment not equal to "..", are removed.
// Removal of these path segments is performed iteratively,
// removing the leftmost matching pattern on each iteration,
// until no matching pattern remains.
// 6d) If the path ends with "<segment>/..", where <segment> is a
// complete path segment not equal to "..", that
// "<segment>/.." is removed.
while(path.length!==(path=path.replace(SLASH_DOT_DOT_REGEX,'')).length){}return path.split('').reverse().join('');},buildURLFromParts:function(parts){return parts.scheme+parts.netLoc+parts.path+parts.params+parts.query+parts.fragment;}};module.exports=URLToolkit;})();})(urlToolkit);var urlToolkitExports=urlToolkit.exports;function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread2(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string"===r?String:Number)(t);}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return "symbol"==typeof i?i:String(i);}function _defineProperty(obj,key,value){key=_toPropertyKey(key);if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else {obj[key]=value;}return obj;}function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}// https://caniuse.com/mdn-javascript_builtins_number_isfinite
const isFiniteNumber=Number.isFinite||function(value){return typeof value==='number'&&isFinite(value);};// https://caniuse.com/mdn-javascript_builtins_number_issafeinteger
const isSafeInteger=Number.isSafeInteger||function(value){return typeof value==='number'&&Math.abs(value)<=MAX_SAFE_INTEGER;};const MAX_SAFE_INTEGER=Number.MAX_SAFE_INTEGER||9007199254740991;let Events=/*#__PURE__*/function(Events){Events["MEDIA_ATTACHING"]="hlsMediaAttaching";Events["MEDIA_ATTACHED"]="hlsMediaAttached";Events["MEDIA_DETACHING"]="hlsMediaDetaching";Events["MEDIA_DETACHED"]="hlsMediaDetached";Events["BUFFER_RESET"]="hlsBufferReset";Events["BUFFER_CODECS"]="hlsBufferCodecs";Events["BUFFER_CREATED"]="hlsBufferCreated";Events["BUFFER_APPENDING"]="hlsBufferAppending";Events["BUFFER_APPENDED"]="hlsBufferAppended";Events["BUFFER_EOS"]="hlsBufferEos";Events["BUFFER_FLUSHING"]="hlsBufferFlushing";Events["BUFFER_FLUSHED"]="hlsBufferFlushed";Events["MANIFEST_LOADING"]="hlsManifestLoading";Events["MANIFEST_LOADED"]="hlsManifestLoaded";Events["MANIFEST_PARSED"]="hlsManifestParsed";Events["LEVEL_SWITCHING"]="hlsLevelSwitching";Events["LEVEL_SWITCHED"]="hlsLevelSwitched";Events["LEVEL_LOADING"]="hlsLevelLoading";Events["LEVEL_LOADED"]="hlsLevelLoaded";Events["LEVEL_UPDATED"]="hlsLevelUpdated";Events["LEVEL_PTS_UPDATED"]="hlsLevelPtsUpdated";Events["LEVELS_UPDATED"]="hlsLevelsUpdated";Events["AUDIO_TRACKS_UPDATED"]="hlsAudioTracksUpdated";Events["AUDIO_TRACK_SWITCHING"]="hlsAudioTrackSwitching";Events["AUDIO_TRACK_SWITCHED"]="hlsAudioTrackSwitched";Events["AUDIO_TRACK_LOADING"]="hlsAudioTrackLoading";Events["AUDIO_TRACK_LOADED"]="hlsAudioTrackLoaded";Events["SUBTITLE_TRACKS_UPDATED"]="hlsSubtitleTracksUpdated";Events["SUBTITLE_TRACKS_CLEARED"]="hlsSubtitleTracksCleared";Events["SUBTITLE_TRACK_SWITCH"]="hlsSubtitleTrackSwitch";Events["SUBTITLE_TRACK_LOADING"]="hlsSubtitleTrackLoading";Events["SUBTITLE_TRACK_LOADED"]="hlsSubtitleTrackLoaded";Events["SUBTITLE_FRAG_PROCESSED"]="hlsSubtitleFragProcessed";Events["CUES_PARSED"]="hlsCuesParsed";Events["NON_NATIVE_TEXT_TRACKS_FOUND"]="hlsNonNativeTextTracksFound";Events["INIT_PTS_FOUND"]="hlsInitPtsFound";Events["FRAG_LOADING"]="hlsFragLoading";Events["FRAG_LOAD_EMERGENCY_ABORTED"]="hlsFragLoadEmergencyAborted";Events["FRAG_LOADED"]="hlsFragLoaded";Events["FRAG_DECRYPTED"]="hlsFragDecrypted";Events["FRAG_PARSING_INIT_SEGMENT"]="hlsFragParsingInitSegment";Events["FRAG_PARSING_USERDATA"]="hlsFragParsingUserdata";Events["FRAG_PARSING_METADATA"]="hlsFragParsingMetadata";Events["FRAG_PARSED"]="hlsFragParsed";Events["FRAG_BUFFERED"]="hlsFragBuffered";Events["FRAG_CHANGED"]="hlsFragChanged";Events["FPS_DROP"]="hlsFpsDrop";Events["FPS_DROP_LEVEL_CAPPING"]="hlsFpsDropLevelCapping";Events["MAX_AUTO_LEVEL_UPDATED"]="hlsMaxAutoLevelUpdated";Events["ERROR"]="hlsError";Events["DESTROYING"]="hlsDestroying";Events["KEY_LOADING"]="hlsKeyLoading";Events["KEY_LOADED"]="hlsKeyLoaded";Events["LIVE_BACK_BUFFER_REACHED"]="hlsLiveBackBufferReached";Events["BACK_BUFFER_REACHED"]="hlsBackBufferReached";Events["STEERING_MANIFEST_LOADED"]="hlsSteeringManifestLoaded";return Events;}({});/**
 * Defines each Event type and payload by Event name. Used in {@link hls.js#HlsEventEmitter} to strongly type the event listener API.
 */let ErrorTypes=/*#__PURE__*/function(ErrorTypes){ErrorTypes["NETWORK_ERROR"]="networkError";ErrorTypes["MEDIA_ERROR"]="mediaError";ErrorTypes["KEY_SYSTEM_ERROR"]="keySystemError";ErrorTypes["MUX_ERROR"]="muxError";ErrorTypes["OTHER_ERROR"]="otherError";return ErrorTypes;}({});let ErrorDetails=/*#__PURE__*/function(ErrorDetails){ErrorDetails["KEY_SYSTEM_NO_KEYS"]="keySystemNoKeys";ErrorDetails["KEY_SYSTEM_NO_ACCESS"]="keySystemNoAccess";ErrorDetails["KEY_SYSTEM_NO_SESSION"]="keySystemNoSession";ErrorDetails["KEY_SYSTEM_NO_CONFIGURED_LICENSE"]="keySystemNoConfiguredLicense";ErrorDetails["KEY_SYSTEM_LICENSE_REQUEST_FAILED"]="keySystemLicenseRequestFailed";ErrorDetails["KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED"]="keySystemServerCertificateRequestFailed";ErrorDetails["KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED"]="keySystemServerCertificateUpdateFailed";ErrorDetails["KEY_SYSTEM_SESSION_UPDATE_FAILED"]="keySystemSessionUpdateFailed";ErrorDetails["KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED"]="keySystemStatusOutputRestricted";ErrorDetails["KEY_SYSTEM_STATUS_INTERNAL_ERROR"]="keySystemStatusInternalError";ErrorDetails["MANIFEST_LOAD_ERROR"]="manifestLoadError";ErrorDetails["MANIFEST_LOAD_TIMEOUT"]="manifestLoadTimeOut";ErrorDetails["MANIFEST_PARSING_ERROR"]="manifestParsingError";ErrorDetails["MANIFEST_INCOMPATIBLE_CODECS_ERROR"]="manifestIncompatibleCodecsError";ErrorDetails["LEVEL_EMPTY_ERROR"]="levelEmptyError";ErrorDetails["LEVEL_LOAD_ERROR"]="levelLoadError";ErrorDetails["LEVEL_LOAD_TIMEOUT"]="levelLoadTimeOut";ErrorDetails["LEVEL_PARSING_ERROR"]="levelParsingError";ErrorDetails["LEVEL_SWITCH_ERROR"]="levelSwitchError";ErrorDetails["AUDIO_TRACK_LOAD_ERROR"]="audioTrackLoadError";ErrorDetails["AUDIO_TRACK_LOAD_TIMEOUT"]="audioTrackLoadTimeOut";ErrorDetails["SUBTITLE_LOAD_ERROR"]="subtitleTrackLoadError";ErrorDetails["SUBTITLE_TRACK_LOAD_TIMEOUT"]="subtitleTrackLoadTimeOut";ErrorDetails["FRAG_LOAD_ERROR"]="fragLoadError";ErrorDetails["FRAG_LOAD_TIMEOUT"]="fragLoadTimeOut";ErrorDetails["FRAG_DECRYPT_ERROR"]="fragDecryptError";ErrorDetails["FRAG_PARSING_ERROR"]="fragParsingError";ErrorDetails["FRAG_GAP"]="fragGap";ErrorDetails["REMUX_ALLOC_ERROR"]="remuxAllocError";ErrorDetails["KEY_LOAD_ERROR"]="keyLoadError";ErrorDetails["KEY_LOAD_TIMEOUT"]="keyLoadTimeOut";ErrorDetails["BUFFER_ADD_CODEC_ERROR"]="bufferAddCodecError";ErrorDetails["BUFFER_INCOMPATIBLE_CODECS_ERROR"]="bufferIncompatibleCodecsError";ErrorDetails["BUFFER_APPEND_ERROR"]="bufferAppendError";ErrorDetails["BUFFER_APPENDING_ERROR"]="bufferAppendingError";ErrorDetails["BUFFER_STALLED_ERROR"]="bufferStalledError";ErrorDetails["BUFFER_FULL_ERROR"]="bufferFullError";ErrorDetails["BUFFER_SEEK_OVER_HOLE"]="bufferSeekOverHole";ErrorDetails["BUFFER_NUDGE_ON_STALL"]="bufferNudgeOnStall";ErrorDetails["INTERNAL_EXCEPTION"]="internalException";ErrorDetails["INTERNAL_ABORTED"]="aborted";ErrorDetails["UNKNOWN"]="unknown";return ErrorDetails;}({});const noop$1=function noop(){};const fakeLogger={trace:noop$1,debug:noop$1,log:noop$1,warn:noop$1,info:noop$1,error:noop$1};let exportedLogger=fakeLogger;// let lastCallTime;
// function formatMsgWithTimeInfo(type, msg) {
//   const now = Date.now();
//   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';
//   lastCallTime = now;
//   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';
//   return msg;
// }
function consolePrintFn(type){const func=self.console[type];if(func){return func.bind(self.console,`[${type}] >`);}return noop$1;}function exportLoggerFunctions(debugConfig,...functions){functions.forEach(function(type){exportedLogger[type]=debugConfig[type]?debugConfig[type].bind(debugConfig):consolePrintFn(type);});}function enableLogs(debugConfig,id){// check that console is available
if(typeof console==='object'&&debugConfig===true||typeof debugConfig==='object'){exportLoggerFunctions(debugConfig,// Remove out from list here to hard-disable a log-level
// 'trace',
'debug','log','info','warn','error');// Some browsers don't allow to use bind on console object anyway
// fallback to default if needed
try{exportedLogger.log(`Debug logs enabled for "${id}" in hls.js version ${"1.5.20"}`);}catch(e){exportedLogger=fakeLogger;}}else {exportedLogger=fakeLogger;}}const logger$2=exportedLogger;const DECIMAL_RESOLUTION_REGEX=/^(\d+)x(\d+)$/;const ATTR_LIST_REGEX=/(.+?)=(".*?"|.*?)(?:,|$)/g;// adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js
class AttrList{constructor(attrs){if(typeof attrs==='string'){attrs=AttrList.parseAttrList(attrs);}_extends(this,attrs);}get clientAttrs(){return Object.keys(this).filter(attr=>attr.substring(0,2)==='X-');}decimalInteger(attrName){const intValue=parseInt(this[attrName],10);if(intValue>Number.MAX_SAFE_INTEGER){return Infinity;}return intValue;}hexadecimalInteger(attrName){if(this[attrName]){let stringValue=(this[attrName]||'0x').slice(2);stringValue=(stringValue.length&1?'0':'')+stringValue;const value=new Uint8Array(stringValue.length/2);for(let i=0;i<stringValue.length/2;i++){value[i]=parseInt(stringValue.slice(i*2,i*2+2),16);}return value;}else {return null;}}hexadecimalIntegerAsNumber(attrName){const intValue=parseInt(this[attrName],16);if(intValue>Number.MAX_SAFE_INTEGER){return Infinity;}return intValue;}decimalFloatingPoint(attrName){return parseFloat(this[attrName]);}optionalFloat(attrName,defaultValue){const value=this[attrName];return value?parseFloat(value):defaultValue;}enumeratedString(attrName){return this[attrName];}bool(attrName){return this[attrName]==='YES';}decimalResolution(attrName){const res=DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);if(res===null){return undefined;}return {width:parseInt(res[1],10),height:parseInt(res[2],10)};}static parseAttrList(input){let match;const attrs={};const quote='"';ATTR_LIST_REGEX.lastIndex=0;while((match=ATTR_LIST_REGEX.exec(input))!==null){let value=match[2];if(value.indexOf(quote)===0&&value.lastIndexOf(quote)===value.length-1){value=value.slice(1,-1);}const name=match[1].trim();attrs[name]=value;}return attrs;}}// Avoid exporting const enum so that these values can be inlined
function isDateRangeCueAttribute(attrName){return attrName!=="ID"&&attrName!=="CLASS"&&attrName!=="START-DATE"&&attrName!=="DURATION"&&attrName!=="END-DATE"&&attrName!=="END-ON-NEXT";}function isSCTE35Attribute(attrName){return attrName==="SCTE35-OUT"||attrName==="SCTE35-IN";}class DateRange{constructor(dateRangeAttr,dateRangeWithSameId){this.attr=void 0;this._startDate=void 0;this._endDate=void 0;this._badValueForSameId=void 0;if(dateRangeWithSameId){const previousAttr=dateRangeWithSameId.attr;for(const key in previousAttr){if(Object.prototype.hasOwnProperty.call(dateRangeAttr,key)&&dateRangeAttr[key]!==previousAttr[key]){logger$2.warn(`DATERANGE tag attribute: "${key}" does not match for tags with ID: "${dateRangeAttr.ID}"`);this._badValueForSameId=key;break;}}// Merge DateRange tags with the same ID
dateRangeAttr=_extends(new AttrList({}),previousAttr,dateRangeAttr);}this.attr=dateRangeAttr;this._startDate=new Date(dateRangeAttr["START-DATE"]);if("END-DATE"in this.attr){const endDate=new Date(this.attr["END-DATE"]);if(isFiniteNumber(endDate.getTime())){this._endDate=endDate;}}}get id(){return this.attr.ID;}get class(){return this.attr.CLASS;}get startDate(){return this._startDate;}get endDate(){if(this._endDate){return this._endDate;}const duration=this.duration;if(duration!==null){return new Date(this._startDate.getTime()+duration*1000);}return null;}get duration(){if("DURATION"in this.attr){const duration=this.attr.decimalFloatingPoint("DURATION");if(isFiniteNumber(duration)){return duration;}}else if(this._endDate){return (this._endDate.getTime()-this._startDate.getTime())/1000;}return null;}get plannedDuration(){if("PLANNED-DURATION"in this.attr){return this.attr.decimalFloatingPoint("PLANNED-DURATION");}return null;}get endOnNext(){return this.attr.bool("END-ON-NEXT");}get isValid(){return !!this.id&&!this._badValueForSameId&&isFiniteNumber(this.startDate.getTime())&&(this.duration===null||this.duration>=0)&&(!this.endOnNext||!!this.class);}}class LoadStats{constructor(){this.aborted=false;this.loaded=0;this.retry=0;this.total=0;this.chunkCount=0;this.bwEstimate=0;this.loading={start:0,first:0,end:0};this.parsing={start:0,end:0};this.buffering={start:0,first:0,end:0};}}var ElementaryStreamTypes={AUDIO:"audio",VIDEO:"video",AUDIOVIDEO:"audiovideo"};class BaseSegment{constructor(baseurl){this._byteRange=null;this._url=null;// baseurl is the URL to the playlist
this.baseurl=void 0;// relurl is the portion of the URL that comes from inside the playlist.
this.relurl=void 0;// Holds the types of data this fragment supports
this.elementaryStreams={[ElementaryStreamTypes.AUDIO]:null,[ElementaryStreamTypes.VIDEO]:null,[ElementaryStreamTypes.AUDIOVIDEO]:null};this.baseurl=baseurl;}// setByteRange converts a EXT-X-BYTERANGE attribute into a two element array
setByteRange(value,previous){const params=value.split('@',2);let start;if(params.length===1){start=(previous==null?void 0:previous.byteRangeEndOffset)||0;}else {start=parseInt(params[1]);}this._byteRange=[start,parseInt(params[0])+start];}get byteRange(){if(!this._byteRange){return [];}return this._byteRange;}get byteRangeStartOffset(){return this.byteRange[0];}get byteRangeEndOffset(){return this.byteRange[1];}get url(){if(!this._url&&this.baseurl&&this.relurl){this._url=urlToolkitExports.buildAbsoluteURL(this.baseurl,this.relurl,{alwaysNormalize:true});}return this._url||'';}set url(value){this._url=value;}}/**
 * Object representing parsed data from an HLS Segment. Found in {@link hls.js#LevelDetails.fragments}.
 */class Fragment extends BaseSegment{constructor(type,baseurl){super(baseurl);this._decryptdata=null;this.rawProgramDateTime=null;this.programDateTime=null;this.tagList=[];// EXTINF has to be present for a m3u8 to be considered valid
this.duration=0;// sn notates the sequence number for a segment, and if set to a string can be 'initSegment'
this.sn=0;// levelkeys are the EXT-X-KEY tags that apply to this segment for decryption
// core difference from the private field _decryptdata is the lack of the initialized IV
// _decryptdata will set the IV for this segment based on the segment number in the fragment
this.levelkeys=void 0;// A string representing the fragment type
this.type=void 0;// A reference to the loader. Set while the fragment is loading, and removed afterwards. Used to abort fragment loading
this.loader=null;// A reference to the key loader. Set while the key is loading, and removed afterwards. Used to abort key loading
this.keyLoader=null;// The level/track index to which the fragment belongs
this.level=-1;// The continuity counter of the fragment
this.cc=0;// The starting Presentation Time Stamp (PTS) of the fragment. Set after transmux complete.
this.startPTS=void 0;// The ending Presentation Time Stamp (PTS) of the fragment. Set after transmux complete.
this.endPTS=void 0;// The starting Decode Time Stamp (DTS) of the fragment. Set after transmux complete.
this.startDTS=void 0;// The ending Decode Time Stamp (DTS) of the fragment. Set after transmux complete.
this.endDTS=void 0;// The start time of the fragment, as listed in the manifest. Updated after transmux complete.
this.start=0;// Set by `updateFragPTSDTS` in level-helper
this.deltaPTS=void 0;// The maximum starting Presentation Time Stamp (audio/video PTS) of the fragment. Set after transmux complete.
this.maxStartPTS=void 0;// The minimum ending Presentation Time Stamp (audio/video PTS) of the fragment. Set after transmux complete.
this.minEndPTS=void 0;// Load/parse timing information
this.stats=new LoadStats();// Init Segment bytes (unset for media segments)
this.data=void 0;// A flag indicating whether the segment was downloaded in order to test bitrate, and was not buffered
this.bitrateTest=false;// #EXTINF  segment title
this.title=null;// The Media Initialization Section for this segment
this.initSegment=null;// Fragment is the last fragment in the media playlist
this.endList=void 0;// Fragment is marked by an EXT-X-GAP tag indicating that it does not contain media data and should not be loaded
this.gap=void 0;// Deprecated
this.urlId=0;this.type=type;}get decryptdata(){const{levelkeys}=this;if(!levelkeys&&!this._decryptdata){return null;}if(!this._decryptdata&&this.levelkeys&&!this.levelkeys.NONE){const key=this.levelkeys.identity;if(key){this._decryptdata=key.getDecryptData(this.sn);}else {const keyFormats=Object.keys(this.levelkeys);if(keyFormats.length===1){return this._decryptdata=this.levelkeys[keyFormats[0]].getDecryptData(this.sn);}}}return this._decryptdata;}get end(){return this.start+this.duration;}get endProgramDateTime(){if(this.programDateTime===null){return null;}if(!isFiniteNumber(this.programDateTime)){return null;}const duration=!isFiniteNumber(this.duration)?0:this.duration;return this.programDateTime+duration*1000;}get encrypted(){var _this$_decryptdata;// At the m3u8-parser level we need to add support for manifest signalled keyformats
// when we want the fragment to start reporting that it is encrypted.
// Currently, keyFormat will only be set for identity keys
if((_this$_decryptdata=this._decryptdata)!=null&&_this$_decryptdata.encrypted){return true;}else if(this.levelkeys){const keyFormats=Object.keys(this.levelkeys);const len=keyFormats.length;if(len>1||len===1&&this.levelkeys[keyFormats[0]].encrypted){return true;}}return false;}setKeyFormat(keyFormat){if(this.levelkeys){const key=this.levelkeys[keyFormat];if(key&&!this._decryptdata){this._decryptdata=key.getDecryptData(this.sn);}}}abortRequests(){var _this$loader,_this$keyLoader;(_this$loader=this.loader)==null?void 0:_this$loader.abort();(_this$keyLoader=this.keyLoader)==null?void 0:_this$keyLoader.abort();}setElementaryStreamInfo(type,startPTS,endPTS,startDTS,endDTS,partial=false){const{elementaryStreams}=this;const info=elementaryStreams[type];if(!info){elementaryStreams[type]={startPTS,endPTS,startDTS,endDTS,partial};return;}info.startPTS=Math.min(info.startPTS,startPTS);info.endPTS=Math.max(info.endPTS,endPTS);info.startDTS=Math.min(info.startDTS,startDTS);info.endDTS=Math.max(info.endDTS,endDTS);}clearElementaryStreamInfo(){const{elementaryStreams}=this;elementaryStreams[ElementaryStreamTypes.AUDIO]=null;elementaryStreams[ElementaryStreamTypes.VIDEO]=null;elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO]=null;}}/**
 * Object representing parsed data from an HLS Partial Segment. Found in {@link hls.js#LevelDetails.partList}.
 */class Part extends BaseSegment{constructor(partAttrs,frag,baseurl,index,previous){super(baseurl);this.fragOffset=0;this.duration=0;this.gap=false;this.independent=false;this.relurl=void 0;this.fragment=void 0;this.index=void 0;this.stats=new LoadStats();this.duration=partAttrs.decimalFloatingPoint('DURATION');this.gap=partAttrs.bool('GAP');this.independent=partAttrs.bool('INDEPENDENT');this.relurl=partAttrs.enumeratedString('URI');this.fragment=frag;this.index=index;const byteRange=partAttrs.enumeratedString('BYTERANGE');if(byteRange){this.setByteRange(byteRange,previous);}if(previous){this.fragOffset=previous.fragOffset+previous.duration;}}get start(){return this.fragment.start+this.fragOffset;}get end(){return this.start+this.duration;}get loaded(){const{elementaryStreams}=this;return !!(elementaryStreams.audio||elementaryStreams.video||elementaryStreams.audiovideo);}}const DEFAULT_TARGET_DURATION=10;/**
 * Object representing parsed data from an HLS Media Playlist. Found in {@link hls.js#Level.details}.
 */class LevelDetails{constructor(baseUrl){this.PTSKnown=false;this.alignedSliding=false;this.averagetargetduration=void 0;this.endCC=0;this.endSN=0;this.fragments=void 0;this.fragmentHint=void 0;this.partList=null;this.dateRanges=void 0;this.live=true;this.ageHeader=0;this.advancedDateTime=void 0;this.updated=true;this.advanced=true;this.availabilityDelay=void 0;// Manifest reload synchronization
this.misses=0;this.startCC=0;this.startSN=0;this.startTimeOffset=null;this.targetduration=0;this.totalduration=0;this.type=null;this.url=void 0;this.m3u8='';this.version=null;this.canBlockReload=false;this.canSkipUntil=0;this.canSkipDateRanges=false;this.skippedSegments=0;this.recentlyRemovedDateranges=void 0;this.partHoldBack=0;this.holdBack=0;this.partTarget=0;this.preloadHint=void 0;this.renditionReports=void 0;this.tuneInGoal=0;this.deltaUpdateFailed=void 0;this.driftStartTime=0;this.driftEndTime=0;this.driftStart=0;this.driftEnd=0;this.encryptedFragments=void 0;this.playlistParsingError=null;this.variableList=null;this.hasVariableRefs=false;this.fragments=[];this.encryptedFragments=[];this.dateRanges={};this.url=baseUrl;}reloaded(previous){if(!previous){this.advanced=true;this.updated=true;return;}const partSnDiff=this.lastPartSn-previous.lastPartSn;const partIndexDiff=this.lastPartIndex-previous.lastPartIndex;this.updated=this.endSN!==previous.endSN||!!partIndexDiff||!!partSnDiff||!this.live;this.advanced=this.endSN>previous.endSN||partSnDiff>0||partSnDiff===0&&partIndexDiff>0;if(this.updated||this.advanced){this.misses=Math.floor(previous.misses*0.6);}else {this.misses=previous.misses+1;}this.availabilityDelay=previous.availabilityDelay;}get hasProgramDateTime(){if(this.fragments.length){return isFiniteNumber(this.fragments[this.fragments.length-1].programDateTime);}return false;}get levelTargetDuration(){return this.averagetargetduration||this.targetduration||DEFAULT_TARGET_DURATION;}get drift(){const runTime=this.driftEndTime-this.driftStartTime;if(runTime>0){const runDuration=this.driftEnd-this.driftStart;return runDuration*1000/runTime;}return 1;}get edge(){return this.partEnd||this.fragmentEnd;}get partEnd(){var _this$partList;if((_this$partList=this.partList)!=null&&_this$partList.length){return this.partList[this.partList.length-1].end;}return this.fragmentEnd;}get fragmentEnd(){var _this$fragments;if((_this$fragments=this.fragments)!=null&&_this$fragments.length){return this.fragments[this.fragments.length-1].end;}return 0;}get age(){if(this.advancedDateTime){return Math.max(Date.now()-this.advancedDateTime,0)/1000;}return 0;}get lastPartIndex(){var _this$partList2;if((_this$partList2=this.partList)!=null&&_this$partList2.length){return this.partList[this.partList.length-1].index;}return -1;}get lastPartSn(){var _this$partList3;if((_this$partList3=this.partList)!=null&&_this$partList3.length){return this.partList[this.partList.length-1].fragment.sn;}return this.endSN;}}function base64Decode$1(base64encodedStr){return Uint8Array.from(atob(base64encodedStr),c=>c.charCodeAt(0));}function getKeyIdBytes(str){const keyIdbytes=strToUtf8array(str).subarray(0,16);const paddedkeyIdbytes=new Uint8Array(16);paddedkeyIdbytes.set(keyIdbytes,16-keyIdbytes.length);return paddedkeyIdbytes;}function changeEndianness(keyId){const swap=function swap(array,from,to){const cur=array[from];array[from]=array[to];array[to]=cur;};swap(keyId,0,3);swap(keyId,1,2);swap(keyId,4,5);swap(keyId,6,7);}function convertDataUriToArrayBytes(uri){// data:[<media type][;attribute=value][;base64],<data>
const colonsplit=uri.split(':');let keydata=null;if(colonsplit[0]==='data'&&colonsplit.length===2){const semicolonsplit=colonsplit[1].split(';');const commasplit=semicolonsplit[semicolonsplit.length-1].split(',');if(commasplit.length===2){const isbase64=commasplit[0]==='base64';const data=commasplit[1];if(isbase64){semicolonsplit.splice(-1,1);// remove from processing
keydata=base64Decode$1(data);}else {keydata=getKeyIdBytes(data);}}}return keydata;}function strToUtf8array(str){return Uint8Array.from(unescape(encodeURIComponent(str)),c=>c.charCodeAt(0));}/** returns `undefined` is `self` is missing, e.g. in node */const optionalSelf=typeof self!=='undefined'?self:undefined;/**
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess
 */var KeySystems={CLEARKEY:"org.w3.clearkey",FAIRPLAY:"com.apple.fps",PLAYREADY:"com.microsoft.playready",WIDEVINE:"com.widevine.alpha"};// Playlist #EXT-X-KEY KEYFORMAT values
var KeySystemFormats={CLEARKEY:"org.w3.clearkey",FAIRPLAY:"com.apple.streamingkeydelivery",PLAYREADY:"com.microsoft.playready",WIDEVINE:"urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed"};function keySystemFormatToKeySystemDomain(format){switch(format){case KeySystemFormats.FAIRPLAY:return KeySystems.FAIRPLAY;case KeySystemFormats.PLAYREADY:return KeySystems.PLAYREADY;case KeySystemFormats.WIDEVINE:return KeySystems.WIDEVINE;case KeySystemFormats.CLEARKEY:return KeySystems.CLEARKEY;}}// System IDs for which we can extract a key ID from "encrypted" event PSSH
var KeySystemIds={CENC:"1077efecc0b24d02ace33c1e52e2fb4b",CLEARKEY:"e2719d58a985b3c9781ab030af78d30e",FAIRPLAY:"94ce86fb07ff4f43adb893d2fa968ca2",PLAYREADY:"9a04f07998404286ab92e65be0885f95",WIDEVINE:"edef8ba979d64acea3c827dcd51d21ed"};function keySystemIdToKeySystemDomain(systemId){if(systemId===KeySystemIds.WIDEVINE){return KeySystems.WIDEVINE;}else if(systemId===KeySystemIds.PLAYREADY){return KeySystems.PLAYREADY;}else if(systemId===KeySystemIds.CENC||systemId===KeySystemIds.CLEARKEY){return KeySystems.CLEARKEY;}}function keySystemDomainToKeySystemFormat(keySystem){switch(keySystem){case KeySystems.FAIRPLAY:return KeySystemFormats.FAIRPLAY;case KeySystems.PLAYREADY:return KeySystemFormats.PLAYREADY;case KeySystems.WIDEVINE:return KeySystemFormats.WIDEVINE;case KeySystems.CLEARKEY:return KeySystemFormats.CLEARKEY;}}function getKeySystemsForConfig(config){const{drmSystems,widevineLicenseUrl}=config;const keySystemsToAttempt=drmSystems?[KeySystems.FAIRPLAY,KeySystems.WIDEVINE,KeySystems.PLAYREADY,KeySystems.CLEARKEY].filter(keySystem=>!!drmSystems[keySystem]):[];if(!keySystemsToAttempt[KeySystems.WIDEVINE]&&widevineLicenseUrl){keySystemsToAttempt.push(KeySystems.WIDEVINE);}return keySystemsToAttempt;}const requestMediaKeySystemAccess=function(_optionalSelf$navigat){if(optionalSelf!=null&&(_optionalSelf$navigat=optionalSelf.navigator)!=null&&_optionalSelf$navigat.requestMediaKeySystemAccess){return self.navigator.requestMediaKeySystemAccess.bind(self.navigator);}else {return null;}}();/**
 * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration
 */function getSupportedMediaKeySystemConfigurations(keySystem,audioCodecs,videoCodecs,drmSystemOptions){let initDataTypes;switch(keySystem){case KeySystems.FAIRPLAY:initDataTypes=['cenc','sinf'];break;case KeySystems.WIDEVINE:case KeySystems.PLAYREADY:initDataTypes=['cenc'];break;case KeySystems.CLEARKEY:initDataTypes=['cenc','keyids'];break;default:throw new Error(`Unknown key-system: ${keySystem}`);}return createMediaKeySystemConfigurations(initDataTypes,audioCodecs,videoCodecs,drmSystemOptions);}function createMediaKeySystemConfigurations(initDataTypes,audioCodecs,videoCodecs,drmSystemOptions){const baseConfig={initDataTypes:initDataTypes,persistentState:drmSystemOptions.persistentState||'optional',distinctiveIdentifier:drmSystemOptions.distinctiveIdentifier||'optional',sessionTypes:drmSystemOptions.sessionTypes||[drmSystemOptions.sessionType||'temporary'],audioCapabilities:audioCodecs.map(codec=>({contentType:`audio/mp4; codecs="${codec}"`,robustness:drmSystemOptions.audioRobustness||'',encryptionScheme:drmSystemOptions.audioEncryptionScheme||null})),videoCapabilities:videoCodecs.map(codec=>({contentType:`video/mp4; codecs="${codec}"`,robustness:drmSystemOptions.videoRobustness||'',encryptionScheme:drmSystemOptions.videoEncryptionScheme||null}))};return [baseConfig];}function parsePlayReadyWRM(keyBytes){const keyBytesUtf16=new Uint16Array(keyBytes.buffer,keyBytes.byteOffset,keyBytes.byteLength/2);const keyByteStr=String.fromCharCode.apply(null,Array.from(keyBytesUtf16));// Parse Playready WRMHeader XML
const xmlKeyBytes=keyByteStr.substring(keyByteStr.indexOf('<'),keyByteStr.length);const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlKeyBytes,'text/xml');const keyData=xmlDoc.getElementsByTagName('KID')[0];if(keyData){const keyId=keyData.childNodes[0]?keyData.childNodes[0].nodeValue:keyData.getAttribute('VALUE');if(keyId){const keyIdArray=base64Decode$1(keyId).subarray(0,16);// KID value in PRO is a base64-encoded little endian GUID interpretation of UUID
// KID value in ‘tenc’ is a big endian UUID GUID interpretation of UUID
changeEndianness(keyIdArray);return keyIdArray;}}return null;}function sliceUint8(array,start,end){// @ts-expect-error This polyfills IE11 usage of Uint8Array slice.
// It always exists in the TypeScript definition so fails, but it fails at runtime on IE11.
return Uint8Array.prototype.slice?array.slice(start,end):new Uint8Array(Array.prototype.slice.call(array,start,end));}// breaking up those two types in order to clarify what is happening in the decoding path.
/**
 * Returns true if an ID3 header can be found at offset in data
 * @param data - The data to search
 * @param offset - The offset at which to start searching
 */const isHeader$2=(data,offset)=>{/*
   * http://id3.org/id3v2.3.0
   * [0]     = 'I'
   * [1]     = 'D'
   * [2]     = '3'
   * [3,4]   = {Version}
   * [5]     = {Flags}
   * [6-9]   = {ID3 Size}
   *
   * An ID3v2 tag can be detected with the following pattern:
   *  $49 44 33 yy yy xx zz zz zz zz
   * Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80
   */if(offset+10<=data.length){// look for 'ID3' identifier
if(data[offset]===0x49&&data[offset+1]===0x44&&data[offset+2]===0x33){// check version is within range
if(data[offset+3]<0xff&&data[offset+4]<0xff){// check size is within range
if(data[offset+6]<0x80&&data[offset+7]<0x80&&data[offset+8]<0x80&&data[offset+9]<0x80){return true;}}}}return false;};/**
 * Returns true if an ID3 footer can be found at offset in data
 * @param data - The data to search
 * @param offset - The offset at which to start searching
 */const isFooter=(data,offset)=>{/*
   * The footer is a copy of the header, but with a different identifier
   */if(offset+10<=data.length){// look for '3DI' identifier
if(data[offset]===0x33&&data[offset+1]===0x44&&data[offset+2]===0x49){// check version is within range
if(data[offset+3]<0xff&&data[offset+4]<0xff){// check size is within range
if(data[offset+6]<0x80&&data[offset+7]<0x80&&data[offset+8]<0x80&&data[offset+9]<0x80){return true;}}}}return false;};/**
 * Returns any adjacent ID3 tags found in data starting at offset, as one block of data
 * @param data - The data to search in
 * @param offset - The offset at which to start searching
 * @returns the block of data containing any ID3 tags found
 * or *undefined* if no header is found at the starting offset
 */const getID3Data=(data,offset)=>{const front=offset;let length=0;while(isHeader$2(data,offset)){// ID3 header is 10 bytes
length+=10;const size=readSize(data,offset+6);length+=size;if(isFooter(data,offset+10)){// ID3 footer is 10 bytes
length+=10;}offset+=length;}if(length>0){return data.subarray(front,front+length);}return undefined;};const readSize=(data,offset)=>{let size=0;size=(data[offset]&0x7f)<<21;size|=(data[offset+1]&0x7f)<<14;size|=(data[offset+2]&0x7f)<<7;size|=data[offset+3]&0x7f;return size;};const canParse$2=(data,offset)=>{return isHeader$2(data,offset)&&readSize(data,offset+6)+10<=data.length-offset;};/**
 * Searches for the Elementary Stream timestamp found in the ID3 data chunk
 * @param data - Block of data containing one or more ID3 tags
 */const getTimeStamp=data=>{const frames=getID3Frames(data);for(let i=0;i<frames.length;i++){const frame=frames[i];if(isTimeStampFrame(frame)){return readTimeStamp(frame);}}return undefined;};/**
 * Returns true if the ID3 frame is an Elementary Stream timestamp frame
 */const isTimeStampFrame=frame=>{return frame&&frame.key==='PRIV'&&frame.info==='com.apple.streaming.transportStreamTimestamp';};const getFrameData=data=>{/*
  Frame ID       $xx xx xx xx (four characters)
  Size           $xx xx xx xx
  Flags          $xx xx
  */const type=String.fromCharCode(data[0],data[1],data[2],data[3]);const size=readSize(data,4);// skip frame id, size, and flags
const offset=10;return {type,size,data:data.subarray(offset,offset+size)};};/**
 * Returns an array of ID3 frames found in all the ID3 tags in the id3Data
 * @param id3Data - The ID3 data containing one or more ID3 tags
 */const getID3Frames=id3Data=>{let offset=0;const frames=[];while(isHeader$2(id3Data,offset)){const size=readSize(id3Data,offset+6);// skip past ID3 header
offset+=10;const end=offset+size;// loop through frames in the ID3 tag
while(offset+8<end){const frameData=getFrameData(id3Data.subarray(offset));const frame=decodeFrame(frameData);if(frame){frames.push(frame);}// skip frame header and frame data
offset+=frameData.size+10;}if(isFooter(id3Data,offset)){offset+=10;}}return frames;};const decodeFrame=frame=>{if(frame.type==='PRIV'){return decodePrivFrame(frame);}else if(frame.type[0]==='W'){return decodeURLFrame(frame);}return decodeTextFrame(frame);};const decodePrivFrame=frame=>{/*
  Format: <text string>\0<binary data>
  */if(frame.size<2){return undefined;}const owner=utf8ArrayToStr(frame.data,true);const privateData=new Uint8Array(frame.data.subarray(owner.length+1));return {key:frame.type,info:owner,data:privateData.buffer};};const decodeTextFrame=frame=>{if(frame.size<2){return undefined;}if(frame.type==='TXXX'){/*
    Format:
    [0]   = {Text Encoding}
    [1-?] = {Description}\0{Value}
    */let index=1;const description=utf8ArrayToStr(frame.data.subarray(index),true);index+=description.length+1;const value=utf8ArrayToStr(frame.data.subarray(index));return {key:frame.type,info:description,data:value};}/*
  Format:
  [0]   = {Text Encoding}
  [1-?] = {Value}
  */const text=utf8ArrayToStr(frame.data.subarray(1));return {key:frame.type,data:text};};const decodeURLFrame=frame=>{if(frame.type==='WXXX'){/*
    Format:
    [0]   = {Text Encoding}
    [1-?] = {Description}\0{URL}
    */if(frame.size<2){return undefined;}let index=1;const description=utf8ArrayToStr(frame.data.subarray(index),true);index+=description.length+1;const value=utf8ArrayToStr(frame.data.subarray(index));return {key:frame.type,info:description,data:value};}/*
  Format:
  [0-?] = {URL}
  */const url=utf8ArrayToStr(frame.data);return {key:frame.type,data:url};};const readTimeStamp=timeStampFrame=>{if(timeStampFrame.data.byteLength===8){const data=new Uint8Array(timeStampFrame.data);// timestamp is 33 bit expressed as a big-endian eight-octet number,
// with the upper 31 bits set to zero.
const pts33Bit=data[3]&0x1;let timestamp=(data[4]<<23)+(data[5]<<15)+(data[6]<<7)+data[7];timestamp/=45;if(pts33Bit){timestamp+=47721858.84;}// 2^32 / 90
return Math.round(timestamp);}return undefined;};// http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197
// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt
/* utf.js - UTF-8 <=> UTF-16 convertion
 *
 * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
 * Version: 1.0
 * LastModified: Dec 25 1999
 * This library is free.  You can redistribute it and/or modify it.
 */const utf8ArrayToStr=(array,exitOnNull=false)=>{const decoder=getTextDecoder();if(decoder){const decoded=decoder.decode(array);if(exitOnNull){// grab up to the first null
const idx=decoded.indexOf('\0');return idx!==-1?decoded.substring(0,idx):decoded;}// remove any null characters
return decoded.replace(/\0/g,'');}const len=array.length;let c;let char2;let char3;let out='';let i=0;while(i<len){c=array[i++];if(c===0x00&&exitOnNull){return out;}else if(c===0x00||c===0x03){// If the character is 3 (END_OF_TEXT) or 0 (NULL) then skip it
continue;}switch(c>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:// 0xxxxxxx
out+=String.fromCharCode(c);break;case 12:case 13:// 110x xxxx   10xx xxxx
char2=array[i++];out+=String.fromCharCode((c&0x1f)<<6|char2&0x3f);break;case 14:// 1110 xxxx  10xx xxxx  10xx xxxx
char2=array[i++];char3=array[i++];out+=String.fromCharCode((c&0x0f)<<12|(char2&0x3f)<<6|(char3&0x3f)<<0);break;}}return out;};let decoder;function getTextDecoder(){// On Play Station 4, TextDecoder is defined but partially implemented.
// Manual decoding option is preferable
if(navigator.userAgent.includes('PlayStation 4')){return;}if(!decoder&&typeof self.TextDecoder!=='undefined'){decoder=new self.TextDecoder('utf-8');}return decoder;}/**
 *  hex dump helper class
 */const Hex={hexDump:function(array){let str='';for(let i=0;i<array.length;i++){let h=array[i].toString(16);if(h.length<2){h='0'+h;}str+=h;}return str;}};const UINT32_MAX$1=Math.pow(2,32)-1;const push=[].push;// We are using fixed track IDs for driving the MP4 remuxer
// instead of following the TS PIDs.
// There is no reason not to do this and some browsers/SourceBuffer-demuxers
// may not like if there are TrackID "switches"
// See https://github.com/video-dev/hls.js/issues/1331
// Here we are mapping our internal track types to constant MP4 track IDs
// With MSE currently one can only have one track of each, and we are muxing
// whatever video/audio rendition in them.
const RemuxerTrackIdConfig={video:1,audio:2,id3:3,text:4};function bin2str(data){return String.fromCharCode.apply(null,data);}function readUint16(buffer,offset){const val=buffer[offset]<<8|buffer[offset+1];return val<0?65536+val:val;}function readUint32(buffer,offset){const val=readSint32(buffer,offset);return val<0?4294967296+val:val;}function readUint64(buffer,offset){let result=readUint32(buffer,offset);result*=Math.pow(2,32);result+=readUint32(buffer,offset+4);return result;}function readSint32(buffer,offset){return buffer[offset]<<24|buffer[offset+1]<<16|buffer[offset+2]<<8|buffer[offset+3];}function writeUint32(buffer,offset,value){buffer[offset]=value>>24;buffer[offset+1]=value>>16&0xff;buffer[offset+2]=value>>8&0xff;buffer[offset+3]=value&0xff;}// Find "moof" box
function hasMoofData(data){const end=data.byteLength;for(let i=0;i<end;){const size=readUint32(data,i);if(size>8&&data[i+4]===0x6d&&data[i+5]===0x6f&&data[i+6]===0x6f&&data[i+7]===0x66){return true;}i=size>1?i+size:end;}return false;}// Find the data for a box specified by its path
function findBox(data,path){const results=[];if(!path.length){// short-circuit the search for empty paths
return results;}const end=data.byteLength;for(let i=0;i<end;){const size=readUint32(data,i);const type=bin2str(data.subarray(i+4,i+8));const endbox=size>1?i+size:end;if(type===path[0]){if(path.length===1){// this is the end of the path and we've found the box we were
// looking for
results.push(data.subarray(i+8,endbox));}else {// recursively search for the next box along the path
const subresults=findBox(data.subarray(i+8,endbox),path.slice(1));if(subresults.length){push.apply(results,subresults);}}}i=endbox;}// we've finished searching all of data
return results;}function parseSegmentIndex(sidx){const references=[];const version=sidx[0];// set initial offset, we skip the reference ID (not needed)
let index=8;const timescale=readUint32(sidx,index);index+=4;let earliestPresentationTime=0;let firstOffset=0;if(version===0){earliestPresentationTime=readUint32(sidx,index);firstOffset=readUint32(sidx,index+4);index+=8;}else {earliestPresentationTime=readUint64(sidx,index);firstOffset=readUint64(sidx,index+8);index+=16;}// skip reserved
index+=2;let startByte=sidx.length+firstOffset;const referencesCount=readUint16(sidx,index);index+=2;for(let i=0;i<referencesCount;i++){let referenceIndex=index;const referenceInfo=readUint32(sidx,referenceIndex);referenceIndex+=4;const referenceSize=referenceInfo&0x7fffffff;const referenceType=(referenceInfo&0x80000000)>>>31;if(referenceType===1){logger$2.warn('SIDX has hierarchical references (not supported)');return null;}const subsegmentDuration=readUint32(sidx,referenceIndex);referenceIndex+=4;references.push({referenceSize,subsegmentDuration,// unscaled
info:{duration:subsegmentDuration/timescale,start:startByte,end:startByte+referenceSize-1}});startByte+=referenceSize;// Skipping 1 bit for |startsWithSap|, 3 bits for |sapType|, and 28 bits
// for |sapDelta|.
referenceIndex+=4;// skip to next ref
index=referenceIndex;}return {earliestPresentationTime,timescale,version,referencesCount,references};}/**
 * Parses an MP4 initialization segment and extracts stream type and
 * timescale values for any declared tracks. Timescale values indicate the
 * number of clock ticks per second to assume for time-based values
 * elsewhere in the MP4.
 *
 * To determine the start time of an MP4, you need two pieces of
 * information: the timescale unit and the earliest base media decode
 * time. Multiple timescales can be specified within an MP4 but the
 * base media decode time is always expressed in the timescale from
 * the media header box for the track:
 * ```
 * moov > trak > mdia > mdhd.timescale
 * moov > trak > mdia > hdlr
 * ```
 * @param initSegment the bytes of the init segment
 * @returns a hash of track type to timescale values or null if
 * the init segment is malformed.
 */function parseInitSegment(initSegment){const result=[];const traks=findBox(initSegment,['moov','trak']);for(let i=0;i<traks.length;i++){const trak=traks[i];const tkhd=findBox(trak,['tkhd'])[0];if(tkhd){let version=tkhd[0];const trackId=readUint32(tkhd,version===0?12:20);const mdhd=findBox(trak,['mdia','mdhd'])[0];if(mdhd){version=mdhd[0];const timescale=readUint32(mdhd,version===0?12:20);const hdlr=findBox(trak,['mdia','hdlr'])[0];if(hdlr){const hdlrType=bin2str(hdlr.subarray(8,12));const type={soun:ElementaryStreamTypes.AUDIO,vide:ElementaryStreamTypes.VIDEO}[hdlrType];if(type){// Parse codec details
const stsd=findBox(trak,['mdia','minf','stbl','stsd'])[0];const stsdData=parseStsd(stsd);result[trackId]={timescale,type};result[type]=_objectSpread2({timescale,id:trackId},stsdData);}}}}}const trex=findBox(initSegment,['moov','mvex','trex']);trex.forEach(trex=>{const trackId=readUint32(trex,4);const track=result[trackId];if(track){track.default={duration:readUint32(trex,12),flags:readUint32(trex,20)};}});return result;}function parseStsd(stsd){const sampleEntries=stsd.subarray(8);const sampleEntriesEnd=sampleEntries.subarray(8+78);const fourCC=bin2str(sampleEntries.subarray(4,8));let codec=fourCC;const encrypted=fourCC==='enca'||fourCC==='encv';if(encrypted){const encBox=findBox(sampleEntries,[fourCC])[0];const encBoxChildren=encBox.subarray(fourCC==='enca'?28:78);const sinfs=findBox(encBoxChildren,['sinf']);sinfs.forEach(sinf=>{const schm=findBox(sinf,['schm'])[0];if(schm){const scheme=bin2str(schm.subarray(4,8));if(scheme==='cbcs'||scheme==='cenc'){const frma=findBox(sinf,['frma'])[0];if(frma){// for encrypted content codec fourCC will be in frma
codec=bin2str(frma);}}}});}switch(codec){case'avc1':case'avc2':case'avc3':case'avc4':{// extract profile + compatibility + level out of avcC box
const avcCBox=findBox(sampleEntriesEnd,['avcC'])[0];codec+='.'+toHex(avcCBox[1])+toHex(avcCBox[2])+toHex(avcCBox[3]);break;}case'mp4a':{const codecBox=findBox(sampleEntries,[fourCC])[0];const esdsBox=findBox(codecBox.subarray(28),['esds'])[0];if(esdsBox&&esdsBox.length>12){let i=4;// ES Descriptor tag
if(esdsBox[i++]!==0x03){break;}i=skipBERInteger(esdsBox,i);i+=2;// skip es_id;
const flags=esdsBox[i++];if(flags&0x80){i+=2;// skip dependency es_id
}if(flags&0x40){i+=esdsBox[i++];// skip URL
}// Decoder config descriptor
if(esdsBox[i++]!==0x04){break;}i=skipBERInteger(esdsBox,i);const objectType=esdsBox[i++];if(objectType===0x40){codec+='.'+toHex(objectType);}else {break;}i+=12;// Decoder specific info
if(esdsBox[i++]!==0x05){break;}i=skipBERInteger(esdsBox,i);const firstByte=esdsBox[i++];let audioObjectType=(firstByte&0xf8)>>3;if(audioObjectType===31){audioObjectType+=1+((firstByte&0x7)<<3)+((esdsBox[i]&0xe0)>>5);}codec+='.'+audioObjectType;}break;}case'hvc1':case'hev1':{const hvcCBox=findBox(sampleEntriesEnd,['hvcC'])[0];const profileByte=hvcCBox[1];const profileSpace=['','A','B','C'][profileByte>>6];const generalProfileIdc=profileByte&0x1f;const profileCompat=readUint32(hvcCBox,2);const tierFlag=(profileByte&0x20)>>5?'H':'L';const levelIDC=hvcCBox[12];const constraintIndicator=hvcCBox.subarray(6,12);codec+='.'+profileSpace+generalProfileIdc;codec+='.'+profileCompat.toString(16).toUpperCase();codec+='.'+tierFlag+levelIDC;let constraintString='';for(let i=constraintIndicator.length;i--;){const byte=constraintIndicator[i];if(byte||constraintString){const encodedByte=byte.toString(16).toUpperCase();constraintString='.'+encodedByte+constraintString;}}codec+=constraintString;break;}case'dvh1':case'dvhe':{const dvcCBox=findBox(sampleEntriesEnd,['dvcC'])[0];const profile=dvcCBox[2]>>1&0x7f;const level=dvcCBox[2]<<5&0x20|dvcCBox[3]>>3&0x1f;codec+='.'+addLeadingZero(profile)+'.'+addLeadingZero(level);break;}case'vp09':{const vpcCBox=findBox(sampleEntriesEnd,['vpcC'])[0];const profile=vpcCBox[4];const level=vpcCBox[5];const bitDepth=vpcCBox[6]>>4&0x0f;codec+='.'+addLeadingZero(profile)+'.'+addLeadingZero(level)+'.'+addLeadingZero(bitDepth);break;}case'av01':{const av1CBox=findBox(sampleEntriesEnd,['av1C'])[0];const profile=av1CBox[1]>>>5;const level=av1CBox[1]&0x1f;const tierFlag=av1CBox[2]>>>7?'H':'M';const highBitDepth=(av1CBox[2]&0x40)>>6;const twelveBit=(av1CBox[2]&0x20)>>5;const bitDepth=profile===2&&highBitDepth?twelveBit?12:10:highBitDepth?10:8;const monochrome=(av1CBox[2]&0x10)>>4;const chromaSubsamplingX=(av1CBox[2]&0x08)>>3;const chromaSubsamplingY=(av1CBox[2]&0x04)>>2;const chromaSamplePosition=av1CBox[2]&0x03;// TODO: parse color_description_present_flag
// default it to BT.709/limited range for now
// more info https://aomediacodec.github.io/av1-isobmff/#av1codecconfigurationbox-syntax
const colorPrimaries=1;const transferCharacteristics=1;const matrixCoefficients=1;const videoFullRangeFlag=0;codec+='.'+profile+'.'+addLeadingZero(level)+tierFlag+'.'+addLeadingZero(bitDepth)+'.'+monochrome+'.'+chromaSubsamplingX+chromaSubsamplingY+chromaSamplePosition+'.'+addLeadingZero(colorPrimaries)+'.'+addLeadingZero(transferCharacteristics)+'.'+addLeadingZero(matrixCoefficients)+'.'+videoFullRangeFlag;break;}}return {codec,encrypted};}function skipBERInteger(bytes,i){const limit=i+5;while(bytes[i++]&0x80&&i<limit){}return i;}function toHex(x){return ('0'+x.toString(16).toUpperCase()).slice(-2);}function addLeadingZero(num){return (num<10?'0':'')+num;}function patchEncyptionData(initSegment,decryptdata){if(!initSegment||!decryptdata){return initSegment;}const keyId=decryptdata.keyId;if(keyId&&decryptdata.isCommonEncryption){const traks=findBox(initSegment,['moov','trak']);traks.forEach(trak=>{const stsd=findBox(trak,['mdia','minf','stbl','stsd'])[0];// skip the sample entry count
const sampleEntries=stsd.subarray(8);let encBoxes=findBox(sampleEntries,['enca']);const isAudio=encBoxes.length>0;if(!isAudio){encBoxes=findBox(sampleEntries,['encv']);}encBoxes.forEach(enc=>{const encBoxChildren=isAudio?enc.subarray(28):enc.subarray(78);const sinfBoxes=findBox(encBoxChildren,['sinf']);sinfBoxes.forEach(sinf=>{const tenc=parseSinf(sinf);if(tenc){// Look for default key id (keyID offset is always 8 within the tenc box):
const tencKeyId=tenc.subarray(8,24);if(!tencKeyId.some(b=>b!==0)){logger$2.log(`[eme] Patching keyId in 'enc${isAudio?'a':'v'}>sinf>>tenc' box: ${Hex.hexDump(tencKeyId)} -> ${Hex.hexDump(keyId)}`);tenc.set(keyId,8);}}});});});}return initSegment;}function parseSinf(sinf){const schm=findBox(sinf,['schm'])[0];if(schm){const scheme=bin2str(schm.subarray(4,8));if(scheme==='cbcs'||scheme==='cenc'){return findBox(sinf,['schi','tenc'])[0];}}return null;}/**
 * Determine the base media decode start time, in seconds, for an MP4
 * fragment. If multiple fragments are specified, the earliest time is
 * returned.
 *
 * The base media decode time can be parsed from track fragment
 * metadata:
 * ```
 * moof > traf > tfdt.baseMediaDecodeTime
 * ```
 * It requires the timescale value from the mdhd to interpret.
 *
 * @param initData - a hash of track type to timescale values
 * @param fmp4 - the bytes of the mp4 fragment
 * @returns the earliest base media decode start time for the
 * fragment, in seconds
 */function getStartDTS(initData,fmp4){// we need info from two children of each track fragment box
return findBox(fmp4,['moof','traf']).reduce((result,traf)=>{const tfdt=findBox(traf,['tfdt'])[0];const version=tfdt[0];const start=findBox(traf,['tfhd']).reduce((result,tfhd)=>{// get the track id from the tfhd
const id=readUint32(tfhd,4);const track=initData[id];if(track){let baseTime=readUint32(tfdt,4);if(version===1){// If value is too large, assume signed 64-bit. Negative track fragment decode times are invalid, but they exist in the wild.
// This prevents large values from being used for initPTS, which can cause playlist sync issues.
// https://github.com/video-dev/hls.js/issues/5303
if(baseTime===UINT32_MAX$1){logger$2.warn(`[mp4-demuxer]: Ignoring assumed invalid signed 64-bit track fragment decode time`);return result;}baseTime*=UINT32_MAX$1+1;baseTime+=readUint32(tfdt,8);}// assume a 90kHz clock if no timescale was specified
const scale=track.timescale||90e3;// convert base time to seconds
const startTime=baseTime/scale;if(isFiniteNumber(startTime)&&(result===null||startTime<result)){return startTime;}}return result;},null);if(start!==null&&isFiniteNumber(start)&&(result===null||start<result)){return start;}return result;},null);}/*
  For Reference:
  aligned(8) class TrackFragmentHeaderBox
           extends FullBox(‘tfhd’, 0, tf_flags){
     unsigned int(32)  track_ID;
     // all the following are optional fields
     unsigned int(64)  base_data_offset;
     unsigned int(32)  sample_description_index;
     unsigned int(32)  default_sample_duration;
     unsigned int(32)  default_sample_size;
     unsigned int(32)  default_sample_flags
  }
 */function getDuration(data,initData){let rawDuration=0;let videoDuration=0;let audioDuration=0;const trafs=findBox(data,['moof','traf']);for(let i=0;i<trafs.length;i++){const traf=trafs[i];// There is only one tfhd & trun per traf
// This is true for CMAF style content, and we should perhaps check the ftyp
// and only look for a single trun then, but for ISOBMFF we should check
// for multiple track runs.
const tfhd=findBox(traf,['tfhd'])[0];// get the track id from the tfhd
const id=readUint32(tfhd,4);const track=initData[id];if(!track){continue;}const trackDefault=track.default;const tfhdFlags=readUint32(tfhd,0)|(trackDefault==null?void 0:trackDefault.flags);let sampleDuration=trackDefault==null?void 0:trackDefault.duration;if(tfhdFlags&0x000008){// 0x000008 indicates the presence of the default_sample_duration field
if(tfhdFlags&0x000002){// 0x000002 indicates the presence of the sample_description_index field, which precedes default_sample_duration
// If present, the default_sample_duration exists at byte offset 12
sampleDuration=readUint32(tfhd,12);}else {// Otherwise, the duration is at byte offset 8
sampleDuration=readUint32(tfhd,8);}}// assume a 90kHz clock if no timescale was specified
const timescale=track.timescale||90e3;const truns=findBox(traf,['trun']);for(let j=0;j<truns.length;j++){rawDuration=computeRawDurationFromSamples(truns[j]);if(!rawDuration&&sampleDuration){const sampleCount=readUint32(truns[j],4);rawDuration=sampleDuration*sampleCount;}if(track.type===ElementaryStreamTypes.VIDEO){videoDuration+=rawDuration/timescale;}else if(track.type===ElementaryStreamTypes.AUDIO){audioDuration+=rawDuration/timescale;}}}if(videoDuration===0&&audioDuration===0){// If duration samples are not available in the traf use sidx subsegment_duration
let sidxMinStart=Infinity;let sidxMaxEnd=0;let sidxDuration=0;const sidxs=findBox(data,['sidx']);for(let i=0;i<sidxs.length;i++){const sidx=parseSegmentIndex(sidxs[i]);if(sidx!=null&&sidx.references){sidxMinStart=Math.min(sidxMinStart,sidx.earliestPresentationTime/sidx.timescale);const subSegmentDuration=sidx.references.reduce((dur,ref)=>dur+ref.info.duration||0,0);sidxMaxEnd=Math.max(sidxMaxEnd,subSegmentDuration+sidx.earliestPresentationTime/sidx.timescale);sidxDuration=sidxMaxEnd-sidxMinStart;}}if(sidxDuration&&isFiniteNumber(sidxDuration)){return sidxDuration;}}if(videoDuration){return videoDuration;}return audioDuration;}/*
  For Reference:
  aligned(8) class TrackRunBox
           extends FullBox(‘trun’, version, tr_flags) {
     unsigned int(32)  sample_count;
     // the following are optional fields
     signed int(32) data_offset;
     unsigned int(32)  first_sample_flags;
     // all fields in the following array are optional
     {
        unsigned int(32)  sample_duration;
        unsigned int(32)  sample_size;
        unsigned int(32)  sample_flags
        if (version == 0)
           { unsigned int(32)
        else
           { signed int(32)
     }[ sample_count ]
  }
 */function computeRawDurationFromSamples(trun){const flags=readUint32(trun,0);// Flags are at offset 0, non-optional sample_count is at offset 4. Therefore we start 8 bytes in.
// Each field is an int32, which is 4 bytes
let offset=8;// data-offset-present flag
if(flags&0x000001){offset+=4;}// first-sample-flags-present flag
if(flags&0x000004){offset+=4;}let duration=0;const sampleCount=readUint32(trun,4);for(let i=0;i<sampleCount;i++){// sample-duration-present flag
if(flags&0x000100){const sampleDuration=readUint32(trun,offset);duration+=sampleDuration;offset+=4;}// sample-size-present flag
if(flags&0x000200){offset+=4;}// sample-flags-present flag
if(flags&0x000400){offset+=4;}// sample-composition-time-offsets-present flag
if(flags&0x000800){offset+=4;}}return duration;}function offsetStartDTS(initData,fmp4,timeOffset){findBox(fmp4,['moof','traf']).forEach(traf=>{findBox(traf,['tfhd']).forEach(tfhd=>{// get the track id from the tfhd
const id=readUint32(tfhd,4);const track=initData[id];if(!track){return;}// assume a 90kHz clock if no timescale was specified
const timescale=track.timescale||90e3;// get the base media decode time from the tfdt
findBox(traf,['tfdt']).forEach(tfdt=>{const version=tfdt[0];const offset=timeOffset*timescale;if(offset){let baseMediaDecodeTime=readUint32(tfdt,4);if(version===0){baseMediaDecodeTime-=offset;baseMediaDecodeTime=Math.max(baseMediaDecodeTime,0);writeUint32(tfdt,4,baseMediaDecodeTime);}else {baseMediaDecodeTime*=Math.pow(2,32);baseMediaDecodeTime+=readUint32(tfdt,8);baseMediaDecodeTime-=offset;baseMediaDecodeTime=Math.max(baseMediaDecodeTime,0);const upper=Math.floor(baseMediaDecodeTime/(UINT32_MAX$1+1));const lower=Math.floor(baseMediaDecodeTime%(UINT32_MAX$1+1));writeUint32(tfdt,4,upper);writeUint32(tfdt,8,lower);}}});});});}// TODO: Check if the last moof+mdat pair is part of the valid range
function segmentValidRange(data){const segmentedRange={valid:null,remainder:null};const moofs=findBox(data,['moof']);if(moofs.length<2){segmentedRange.remainder=data;return segmentedRange;}const last=moofs[moofs.length-1];// Offset by 8 bytes; findBox offsets the start by as much
segmentedRange.valid=sliceUint8(data,0,last.byteOffset-8);segmentedRange.remainder=sliceUint8(data,last.byteOffset-8);return segmentedRange;}function appendUint8Array(data1,data2){const temp=new Uint8Array(data1.length+data2.length);temp.set(data1);temp.set(data2,data1.length);return temp;}function parseSamples(timeOffset,track){const seiSamples=[];const videoData=track.samples;const timescale=track.timescale;const trackId=track.id;let isHEVCFlavor=false;const moofs=findBox(videoData,['moof']);moofs.map(moof=>{const moofOffset=moof.byteOffset-8;const trafs=findBox(moof,['traf']);trafs.map(traf=>{// get the base media decode time from the tfdt
const baseTime=findBox(traf,['tfdt']).map(tfdt=>{const version=tfdt[0];let result=readUint32(tfdt,4);if(version===1){result*=Math.pow(2,32);result+=readUint32(tfdt,8);}return result/timescale;})[0];if(baseTime!==undefined){timeOffset=baseTime;}return findBox(traf,['tfhd']).map(tfhd=>{const id=readUint32(tfhd,4);const tfhdFlags=readUint32(tfhd,0)&0xffffff;const baseDataOffsetPresent=(tfhdFlags&0x000001)!==0;const sampleDescriptionIndexPresent=(tfhdFlags&0x000002)!==0;const defaultSampleDurationPresent=(tfhdFlags&0x000008)!==0;let defaultSampleDuration=0;const defaultSampleSizePresent=(tfhdFlags&0x000010)!==0;let defaultSampleSize=0;const defaultSampleFlagsPresent=(tfhdFlags&0x000020)!==0;let tfhdOffset=8;if(id===trackId){if(baseDataOffsetPresent){tfhdOffset+=8;}if(sampleDescriptionIndexPresent){tfhdOffset+=4;}if(defaultSampleDurationPresent){defaultSampleDuration=readUint32(tfhd,tfhdOffset);tfhdOffset+=4;}if(defaultSampleSizePresent){defaultSampleSize=readUint32(tfhd,tfhdOffset);tfhdOffset+=4;}if(defaultSampleFlagsPresent){tfhdOffset+=4;}if(track.type==='video'){isHEVCFlavor=isHEVC(track.codec);}findBox(traf,['trun']).map(trun=>{const version=trun[0];const flags=readUint32(trun,0)&0xffffff;const dataOffsetPresent=(flags&0x000001)!==0;let dataOffset=0;const firstSampleFlagsPresent=(flags&0x000004)!==0;const sampleDurationPresent=(flags&0x000100)!==0;let sampleDuration=0;const sampleSizePresent=(flags&0x000200)!==0;let sampleSize=0;const sampleFlagsPresent=(flags&0x000400)!==0;const sampleCompositionOffsetsPresent=(flags&0x000800)!==0;let compositionOffset=0;const sampleCount=readUint32(trun,4);let trunOffset=8;// past version, flags, and sample count
if(dataOffsetPresent){dataOffset=readUint32(trun,trunOffset);trunOffset+=4;}if(firstSampleFlagsPresent){trunOffset+=4;}let sampleOffset=dataOffset+moofOffset;for(let ix=0;ix<sampleCount;ix++){if(sampleDurationPresent){sampleDuration=readUint32(trun,trunOffset);trunOffset+=4;}else {sampleDuration=defaultSampleDuration;}if(sampleSizePresent){sampleSize=readUint32(trun,trunOffset);trunOffset+=4;}else {sampleSize=defaultSampleSize;}if(sampleFlagsPresent){trunOffset+=4;}if(sampleCompositionOffsetsPresent){if(version===0){compositionOffset=readUint32(trun,trunOffset);}else {compositionOffset=readSint32(trun,trunOffset);}trunOffset+=4;}if(track.type===ElementaryStreamTypes.VIDEO){let naluTotalSize=0;while(naluTotalSize<sampleSize){const naluSize=readUint32(videoData,sampleOffset);sampleOffset+=4;if(isSEIMessage(isHEVCFlavor,videoData[sampleOffset])){const data=videoData.subarray(sampleOffset,sampleOffset+naluSize);parseSEIMessageFromNALu(data,isHEVCFlavor?2:1,timeOffset+compositionOffset/timescale,seiSamples);}sampleOffset+=naluSize;naluTotalSize+=naluSize+4;}}timeOffset+=sampleDuration/timescale;}});}});});});return seiSamples;}function isHEVC(codec){if(!codec){return false;}const delimit=codec.indexOf('.');const baseCodec=delimit<0?codec:codec.substring(0,delimit);return baseCodec==='hvc1'||baseCodec==='hev1'||// Dolby Vision
baseCodec==='dvh1'||baseCodec==='dvhe';}function isSEIMessage(isHEVCFlavor,naluHeader){if(isHEVCFlavor){const naluType=naluHeader>>1&0x3f;return naluType===39||naluType===40;}else {const naluType=naluHeader&0x1f;return naluType===6;}}function parseSEIMessageFromNALu(unescapedData,headerSize,pts,samples){const data=discardEPB(unescapedData);let seiPtr=0;// skip nal header
seiPtr+=headerSize;let payloadType=0;let payloadSize=0;let b=0;while(seiPtr<data.length){payloadType=0;do{if(seiPtr>=data.length){break;}b=data[seiPtr++];payloadType+=b;}while(b===0xff);// Parse payload size.
payloadSize=0;do{if(seiPtr>=data.length){break;}b=data[seiPtr++];payloadSize+=b;}while(b===0xff);const leftOver=data.length-seiPtr;// Create a variable to process the payload
let payPtr=seiPtr;// Increment the seiPtr to the end of the payload
if(payloadSize<leftOver){seiPtr+=payloadSize;}else if(payloadSize>leftOver){// Some type of corruption has happened?
logger$2.error(`Malformed SEI payload. ${payloadSize} is too small, only ${leftOver} bytes left to parse.`);// We might be able to parse some data, but let's be safe and ignore it.
break;}if(payloadType===4){const countryCode=data[payPtr++];if(countryCode===181){const providerCode=readUint16(data,payPtr);payPtr+=2;if(providerCode===49){const userStructure=readUint32(data,payPtr);payPtr+=4;if(userStructure===0x47413934){const userDataType=data[payPtr++];// Raw CEA-608 bytes wrapped in CEA-708 packet
if(userDataType===3){const firstByte=data[payPtr++];const totalCCs=0x1f&firstByte;const enabled=0x40&firstByte;const totalBytes=enabled?2+totalCCs*3:0;const byteArray=new Uint8Array(totalBytes);if(enabled){byteArray[0]=firstByte;for(let i=1;i<totalBytes;i++){byteArray[i]=data[payPtr++];}}samples.push({type:userDataType,payloadType,pts,bytes:byteArray});}}}}}else if(payloadType===5){if(payloadSize>16){const uuidStrArray=[];for(let i=0;i<16;i++){const _b=data[payPtr++].toString(16);uuidStrArray.push(_b.length==1?'0'+_b:_b);if(i===3||i===5||i===7||i===9){uuidStrArray.push('-');}}const length=payloadSize-16;const userDataBytes=new Uint8Array(length);for(let i=0;i<length;i++){userDataBytes[i]=data[payPtr++];}samples.push({payloadType,pts,uuid:uuidStrArray.join(''),userData:utf8ArrayToStr(userDataBytes),userDataBytes});}}}}/**
 * remove Emulation Prevention bytes from a RBSP
 */function discardEPB(data){const length=data.byteLength;const EPBPositions=[];let i=1;// Find all `Emulation Prevention Bytes`
while(i<length-2){if(data[i]===0&&data[i+1]===0&&data[i+2]===0x03){EPBPositions.push(i+2);i+=2;}else {i++;}}// If no Emulation Prevention Bytes were found just return the original
// array
if(EPBPositions.length===0){return data;}// Create a new array to hold the NAL unit data
const newLength=length-EPBPositions.length;const newData=new Uint8Array(newLength);let sourceIndex=0;for(i=0;i<newLength;sourceIndex++,i++){if(sourceIndex===EPBPositions[0]){// Skip this byte
sourceIndex++;// Remove this position index
EPBPositions.shift();}newData[i]=data[sourceIndex];}return newData;}function parseEmsg(data){const version=data[0];let schemeIdUri='';let value='';let timeScale=0;let presentationTimeDelta=0;let presentationTime=0;let eventDuration=0;let id=0;let offset=0;if(version===0){while(bin2str(data.subarray(offset,offset+1))!=='\0'){schemeIdUri+=bin2str(data.subarray(offset,offset+1));offset+=1;}schemeIdUri+=bin2str(data.subarray(offset,offset+1));offset+=1;while(bin2str(data.subarray(offset,offset+1))!=='\0'){value+=bin2str(data.subarray(offset,offset+1));offset+=1;}value+=bin2str(data.subarray(offset,offset+1));offset+=1;timeScale=readUint32(data,12);presentationTimeDelta=readUint32(data,16);eventDuration=readUint32(data,20);id=readUint32(data,24);offset=28;}else if(version===1){offset+=4;timeScale=readUint32(data,offset);offset+=4;const leftPresentationTime=readUint32(data,offset);offset+=4;const rightPresentationTime=readUint32(data,offset);offset+=4;presentationTime=2**32*leftPresentationTime+rightPresentationTime;if(!isSafeInteger(presentationTime)){presentationTime=Number.MAX_SAFE_INTEGER;logger$2.warn('Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box');}eventDuration=readUint32(data,offset);offset+=4;id=readUint32(data,offset);offset+=4;while(bin2str(data.subarray(offset,offset+1))!=='\0'){schemeIdUri+=bin2str(data.subarray(offset,offset+1));offset+=1;}schemeIdUri+=bin2str(data.subarray(offset,offset+1));offset+=1;while(bin2str(data.subarray(offset,offset+1))!=='\0'){value+=bin2str(data.subarray(offset,offset+1));offset+=1;}value+=bin2str(data.subarray(offset,offset+1));offset+=1;}const payload=data.subarray(offset,data.byteLength);return {schemeIdUri,value,timeScale,presentationTime,presentationTimeDelta,eventDuration,id,payload};}function mp4Box(type,...payload){const len=payload.length;let size=8;let i=len;while(i--){size+=payload[i].byteLength;}const result=new Uint8Array(size);result[0]=size>>24&0xff;result[1]=size>>16&0xff;result[2]=size>>8&0xff;result[3]=size&0xff;result.set(type,4);for(i=0,size=8;i<len;i++){result.set(payload[i],size);size+=payload[i].byteLength;}return result;}function mp4pssh(systemId,keyids,data){if(systemId.byteLength!==16){throw new RangeError('Invalid system id');}let version;let kids;if(keyids){version=1;kids=new Uint8Array(keyids.length*16);for(let ix=0;ix<keyids.length;ix++){const k=keyids[ix];// uint8array
if(k.byteLength!==16){throw new RangeError('Invalid key');}kids.set(k,ix*16);}}else {version=0;kids=new Uint8Array();}let kidCount;if(version>0){kidCount=new Uint8Array(4);if(keyids.length>0){new DataView(kidCount.buffer).setUint32(0,keyids.length,false);}}else {kidCount=new Uint8Array();}const dataSize=new Uint8Array(4);if(data&&data.byteLength>0){new DataView(dataSize.buffer).setUint32(0,data.byteLength,false);}return mp4Box([112,115,115,104],new Uint8Array([version,0x00,0x00,0x00// Flags
]),systemId,// 16 bytes
kidCount,kids,dataSize,data||new Uint8Array());}function parseMultiPssh(initData){const results=[];if(initData instanceof ArrayBuffer){const length=initData.byteLength;let offset=0;while(offset+32<length){const view=new DataView(initData,offset);const pssh=parsePssh(view);results.push(pssh);offset+=pssh.size;}}return results;}function parsePssh(view){const size=view.getUint32(0);const offset=view.byteOffset;const length=view.byteLength;if(length<size){return {offset,size:length};}const type=view.getUint32(4);if(type!==0x70737368){return {offset,size};}const version=view.getUint32(8)>>>24;if(version!==0&&version!==1){return {offset,size};}const buffer=view.buffer;const systemId=Hex.hexDump(new Uint8Array(buffer,offset+12,16));const dataSizeOrKidCount=view.getUint32(28);let kids=null;let data=null;if(version===0){if(size-32<dataSizeOrKidCount||dataSizeOrKidCount<22){return {offset,size};}data=new Uint8Array(buffer,offset+32,dataSizeOrKidCount);}else if(version===1){if(!dataSizeOrKidCount||length<offset+32+dataSizeOrKidCount*16+16){return {offset,size};}kids=[];for(let i=0;i<dataSizeOrKidCount;i++){kids.push(new Uint8Array(buffer,offset+32+i*16,16));}}return {version,systemId,kids,data,offset,size};}let keyUriToKeyIdMap={};class LevelKey{static clearKeyUriToKeyIdMap(){keyUriToKeyIdMap={};}constructor(method,uri,format,formatversions=[1],iv=null){this.uri=void 0;this.method=void 0;this.keyFormat=void 0;this.keyFormatVersions=void 0;this.encrypted=void 0;this.isCommonEncryption=void 0;this.iv=null;this.key=null;this.keyId=null;this.pssh=null;this.method=method;this.uri=uri;this.keyFormat=format;this.keyFormatVersions=formatversions;this.iv=iv;this.encrypted=method?method!=='NONE':false;this.isCommonEncryption=this.encrypted&&method!=='AES-128';}isSupported(){// If it's Segment encryption or No encryption, just select that key system
if(this.method){if(this.method==='AES-128'||this.method==='NONE'){return true;}if(this.keyFormat==='identity'){// Maintain support for clear SAMPLE-AES with MPEG-3 TS
return this.method==='SAMPLE-AES';}else {switch(this.keyFormat){case KeySystemFormats.FAIRPLAY:case KeySystemFormats.WIDEVINE:case KeySystemFormats.PLAYREADY:case KeySystemFormats.CLEARKEY:return ['ISO-23001-7','SAMPLE-AES','SAMPLE-AES-CENC','SAMPLE-AES-CTR'].indexOf(this.method)!==-1;}}}return false;}getDecryptData(sn){if(!this.encrypted||!this.uri){return null;}if(this.method==='AES-128'&&this.uri&&!this.iv){if(typeof sn!=='number'){// We are fetching decryption data for a initialization segment
// If the segment was encrypted with AES-128
// It must have an IV defined. We cannot substitute the Segment Number in.
if(this.method==='AES-128'&&!this.iv){logger$2.warn(`missing IV for initialization segment with method="${this.method}" - compliance issue`);}// Explicitly set sn to resulting value from implicit conversions 'initSegment' values for IV generation.
sn=0;}const iv=createInitializationVector(sn);const decryptdata=new LevelKey(this.method,this.uri,'identity',this.keyFormatVersions,iv);return decryptdata;}// Initialize keyId if possible
const keyBytes=convertDataUriToArrayBytes(this.uri);if(keyBytes){switch(this.keyFormat){case KeySystemFormats.WIDEVINE:// Setting `pssh` on this LevelKey/DecryptData allows HLS.js to generate a session using
// the playlist-key before the "encrypted" event. (Comment out to only use "encrypted" path.)
this.pssh=keyBytes;// In case of widevine keyID is embedded in PSSH box. Read Key ID.
if(keyBytes.length>=22){this.keyId=keyBytes.subarray(keyBytes.length-22,keyBytes.length-6);}break;case KeySystemFormats.PLAYREADY:{const PlayReadyKeySystemUUID=new Uint8Array([0x9a,0x04,0xf0,0x79,0x98,0x40,0x42,0x86,0xab,0x92,0xe6,0x5b,0xe0,0x88,0x5f,0x95]);// Setting `pssh` on this LevelKey/DecryptData allows HLS.js to generate a session using
// the playlist-key before the "encrypted" event. (Comment out to only use "encrypted" path.)
this.pssh=mp4pssh(PlayReadyKeySystemUUID,null,keyBytes);this.keyId=parsePlayReadyWRM(keyBytes);break;}default:{let keydata=keyBytes.subarray(0,16);if(keydata.length!==16){const padded=new Uint8Array(16);padded.set(keydata,16-keydata.length);keydata=padded;}this.keyId=keydata;break;}}}// Default behavior: assign a new keyId for each uri
if(!this.keyId||this.keyId.byteLength!==16){let keyId=keyUriToKeyIdMap[this.uri];if(!keyId){const val=Object.keys(keyUriToKeyIdMap).length%Number.MAX_SAFE_INTEGER;keyId=new Uint8Array(16);const dv=new DataView(keyId.buffer,12,4);// Just set the last 4 bytes
dv.setUint32(0,val);keyUriToKeyIdMap[this.uri]=keyId;}this.keyId=keyId;}return this;}}function createInitializationVector(segmentNumber){const uint8View=new Uint8Array(16);for(let i=12;i<16;i++){uint8View[i]=segmentNumber>>8*(15-i)&0xff;}return uint8View;}const VARIABLE_REPLACEMENT_REGEX=/\{\$([a-zA-Z0-9-_]+)\}/g;function hasVariableReferences(str){return VARIABLE_REPLACEMENT_REGEX.test(str);}function substituteVariablesInAttributes(parsed,attr,attributeNames){if(parsed.variableList!==null||parsed.hasVariableRefs){for(let i=attributeNames.length;i--;){const name=attributeNames[i];const value=attr[name];if(value){attr[name]=substituteVariables(parsed,value);}}}}function substituteVariables(parsed,value){if(parsed.variableList!==null||parsed.hasVariableRefs){const variableList=parsed.variableList;return value.replace(VARIABLE_REPLACEMENT_REGEX,variableReference=>{const variableName=variableReference.substring(2,variableReference.length-1);const variableValue=variableList==null?void 0:variableList[variableName];if(variableValue===undefined){parsed.playlistParsingError||(parsed.playlistParsingError=new Error(`Missing preceding EXT-X-DEFINE tag for Variable Reference: "${variableName}"`));return variableReference;}return variableValue;});}return value;}function addVariableDefinition(parsed,attr,parentUrl){let variableList=parsed.variableList;if(!variableList){parsed.variableList=variableList={};}let NAME;let VALUE;if('QUERYPARAM'in attr){NAME=attr.QUERYPARAM;try{const searchParams=new self.URL(parentUrl).searchParams;if(searchParams.has(NAME)){VALUE=searchParams.get(NAME);}else {throw new Error(`"${NAME}" does not match any query parameter in URI: "${parentUrl}"`);}}catch(error){parsed.playlistParsingError||(parsed.playlistParsingError=new Error(`EXT-X-DEFINE QUERYPARAM: ${error.message}`));}}else {NAME=attr.NAME;VALUE=attr.VALUE;}if(NAME in variableList){parsed.playlistParsingError||(parsed.playlistParsingError=new Error(`EXT-X-DEFINE duplicate Variable Name declarations: "${NAME}"`));}else {variableList[NAME]=VALUE||'';}}function importVariableDefinition(parsed,attr,sourceVariableList){const IMPORT=attr.IMPORT;if(sourceVariableList&&IMPORT in sourceVariableList){let variableList=parsed.variableList;if(!variableList){parsed.variableList=variableList={};}variableList[IMPORT]=sourceVariableList[IMPORT];}else {parsed.playlistParsingError||(parsed.playlistParsingError=new Error(`EXT-X-DEFINE IMPORT attribute not found in Multivariant Playlist: "${IMPORT}"`));}}/**
 * MediaSource helper
 */function getMediaSource(preferManagedMediaSource=true){if(typeof self==='undefined')return undefined;const mms=(preferManagedMediaSource||!self.MediaSource)&&self.ManagedMediaSource;return mms||self.MediaSource||self.WebKitMediaSource;}function isManagedMediaSource(source){return typeof self!=='undefined'&&source===self.ManagedMediaSource;}// from http://mp4ra.org/codecs.html
// values indicate codec selection preference (lower is higher priority)
const sampleEntryCodesISO={audio:{a3ds:1,'ac-3':0.95,'ac-4':1,alac:0.9,alaw:1,dra1:1,'dts+':1,'dts-':1,dtsc:1,dtse:1,dtsh:1,'ec-3':0.9,enca:1,fLaC:0.9,// MP4-RA listed codec entry for FLAC
flac:0.9,// legacy browser codec name for FLAC
FLAC:0.9,// some manifests may list "FLAC" with Apple's tools
g719:1,g726:1,m4ae:1,mha1:1,mha2:1,mhm1:1,mhm2:1,mlpa:1,mp4a:1,'raw ':1,Opus:1,opus:1,// browsers expect this to be lowercase despite MP4RA says 'Opus'
samr:1,sawb:1,sawp:1,sevc:1,sqcp:1,ssmv:1,twos:1,ulaw:1},video:{avc1:1,avc2:1,avc3:1,avc4:1,avcp:1,av01:0.8,drac:1,dva1:1,dvav:1,dvh1:0.7,dvhe:0.7,encv:1,hev1:0.75,hvc1:0.75,mjp2:1,mp4v:1,mvc1:1,mvc2:1,mvc3:1,mvc4:1,resv:1,rv60:1,s263:1,svc1:1,svc2:1,'vc-1':1,vp08:1,vp09:0.9},text:{stpp:1,wvtt:1}};function isCodecType(codec,type){const typeCodes=sampleEntryCodesISO[type];return !!typeCodes&&!!typeCodes[codec.slice(0,4)];}function areCodecsMediaSourceSupported(codecs,type,preferManagedMediaSource=true){return !codecs.split(',').some(codec=>!isCodecMediaSourceSupported(codec,type,preferManagedMediaSource));}function isCodecMediaSourceSupported(codec,type,preferManagedMediaSource=true){var _MediaSource$isTypeSu;const MediaSource=getMediaSource(preferManagedMediaSource);return (_MediaSource$isTypeSu=MediaSource==null?void 0:MediaSource.isTypeSupported(mimeTypeForCodec(codec,type)))!=null?_MediaSource$isTypeSu:false;}function mimeTypeForCodec(codec,type){return `${type}/mp4;codecs="${codec}"`;}function videoCodecPreferenceValue(videoCodec){if(videoCodec){const fourCC=videoCodec.substring(0,4);return sampleEntryCodesISO.video[fourCC];}return 2;}function codecsSetSelectionPreferenceValue(codecSet){return codecSet.split(',').reduce((num,fourCC)=>{const preferenceValue=sampleEntryCodesISO.video[fourCC];if(preferenceValue){return (preferenceValue*2+num)/(num?3:2);}return (sampleEntryCodesISO.audio[fourCC]+num)/(num?2:1);},0);}const CODEC_COMPATIBLE_NAMES={};function getCodecCompatibleNameLower(lowerCaseCodec,preferManagedMediaSource=true){if(CODEC_COMPATIBLE_NAMES[lowerCaseCodec]){return CODEC_COMPATIBLE_NAMES[lowerCaseCodec];}// Idealy fLaC and Opus would be first (spec-compliant) but
// some browsers will report that fLaC is supported then fail.
// see: https://bugs.chromium.org/p/chromium/issues/detail?id=1422728
const codecsToCheck={flac:['flac','fLaC','FLAC'],opus:['opus','Opus']}[lowerCaseCodec];for(let i=0;i<codecsToCheck.length;i++){if(isCodecMediaSourceSupported(codecsToCheck[i],'audio',preferManagedMediaSource)){CODEC_COMPATIBLE_NAMES[lowerCaseCodec]=codecsToCheck[i];return codecsToCheck[i];}}return lowerCaseCodec;}const AUDIO_CODEC_REGEXP=/flac|opus/i;function getCodecCompatibleName(codec,preferManagedMediaSource=true){return codec.replace(AUDIO_CODEC_REGEXP,m=>getCodecCompatibleNameLower(m.toLowerCase(),preferManagedMediaSource));}function pickMostCompleteCodecName(parsedCodec,levelCodec){// Parsing of mp4a codecs strings in mp4-tools from media is incomplete as of d8c6c7a
// so use level codec is parsed codec is unavailable or incomplete
if(parsedCodec&&parsedCodec!=='mp4a'){return parsedCodec;}return levelCodec?levelCodec.split(',')[0]:levelCodec;}function convertAVC1ToAVCOTI(codec){// Convert avc1 codec string from RFC-4281 to RFC-6381 for MediaSource.isTypeSupported
// Examples: avc1.66.30 to avc1.42001e and avc1.77.30,avc1.66.30 to avc1.4d001e,avc1.42001e.
const codecs=codec.split(',');for(let i=0;i<codecs.length;i++){const avcdata=codecs[i].split('.');if(avcdata.length>2){let result=avcdata.shift()+'.';result+=parseInt(avcdata.shift()).toString(16);result+=('000'+parseInt(avcdata.shift()).toString(16)).slice(-4);codecs[i]=result;}}return codecs.join(',');}const MASTER_PLAYLIST_REGEX=/#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-(SESSION-DATA|SESSION-KEY|DEFINE|CONTENT-STEERING|START):([^\r\n]*)[\r\n]+/g;const MASTER_PLAYLIST_MEDIA_REGEX=/#EXT-X-MEDIA:(.*)/g;const IS_MEDIA_PLAYLIST=/^#EXT(?:INF|-X-TARGETDURATION):/m;// Handle empty Media Playlist (first EXTINF not signaled, but TARGETDURATION present)
const LEVEL_PLAYLIST_REGEX_FAST=new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,// duration (#EXTINF:<duration>,<title>), group 1 => duration, group 2 => title
/(?!#) *(\S[^\r\n]*)/.source,// segment URI, group 3 => the URI (note newline is not eaten)
/#EXT-X-BYTERANGE:*(.+)/.source,// next segment's byterange, group 4 => range spec (x@y)
/#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,// next segment's program date/time group 5 => the datetime spec
/#.*/.source// All other non-segment oriented tags will match with all groups empty
].join('|'),'g');const LEVEL_PLAYLIST_REGEX_SLOW=new RegExp([/#(EXTM3U)/.source,/#EXT-X-(DATERANGE|DEFINE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/.source,/#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\d+)/.source,/#EXT-X-(DISCONTINUITY|ENDLIST|GAP|INDEPENDENT-SEGMENTS)/.source,/(#)([^:]*):(.*)/.source,/(#)(.*)(?:.*)\r?\n?/.source].join('|'));class M3U8Parser{static findGroup(groups,mediaGroupId){for(let i=0;i<groups.length;i++){const group=groups[i];if(group.id===mediaGroupId){return group;}}}static resolve(url,baseUrl){return urlToolkitExports.buildAbsoluteURL(baseUrl,url,{alwaysNormalize:true});}static isMediaPlaylist(str){return IS_MEDIA_PLAYLIST.test(str);}static parseMasterPlaylist(string,baseurl){const hasVariableRefs=hasVariableReferences(string);const parsed={contentSteering:null,levels:[],playlistParsingError:null,sessionData:null,sessionKeys:null,startTimeOffset:null,variableList:null,hasVariableRefs};const levelsWithKnownCodecs=[];MASTER_PLAYLIST_REGEX.lastIndex=0;let result;while((result=MASTER_PLAYLIST_REGEX.exec(string))!=null){if(result[1]){var _level$unknownCodecs;// '#EXT-X-STREAM-INF' is found, parse level tag  in group 1
const attrs=new AttrList(result[1]);{substituteVariablesInAttributes(parsed,attrs,['CODECS','SUPPLEMENTAL-CODECS','ALLOWED-CPC','PATHWAY-ID','STABLE-VARIANT-ID','AUDIO','VIDEO','SUBTITLES','CLOSED-CAPTIONS','NAME']);}const uri=substituteVariables(parsed,result[2]);const level={attrs,bitrate:attrs.decimalInteger('BANDWIDTH')||attrs.decimalInteger('AVERAGE-BANDWIDTH'),name:attrs.NAME,url:M3U8Parser.resolve(uri,baseurl)};const resolution=attrs.decimalResolution('RESOLUTION');if(resolution){level.width=resolution.width;level.height=resolution.height;}setCodecs(attrs.CODECS,level);if(!((_level$unknownCodecs=level.unknownCodecs)!=null&&_level$unknownCodecs.length)){levelsWithKnownCodecs.push(level);}parsed.levels.push(level);}else if(result[3]){const tag=result[3];const attributes=result[4];switch(tag){case'SESSION-DATA':{// #EXT-X-SESSION-DATA
const sessionAttrs=new AttrList(attributes);{substituteVariablesInAttributes(parsed,sessionAttrs,['DATA-ID','LANGUAGE','VALUE','URI']);}const dataId=sessionAttrs['DATA-ID'];if(dataId){if(parsed.sessionData===null){parsed.sessionData={};}parsed.sessionData[dataId]=sessionAttrs;}break;}case'SESSION-KEY':{// #EXT-X-SESSION-KEY
const sessionKey=parseKey(attributes,baseurl,parsed);if(sessionKey.encrypted&&sessionKey.isSupported()){if(parsed.sessionKeys===null){parsed.sessionKeys=[];}parsed.sessionKeys.push(sessionKey);}else {logger$2.warn(`[Keys] Ignoring invalid EXT-X-SESSION-KEY tag: "${attributes}"`);}break;}case'DEFINE':{// #EXT-X-DEFINE
{const variableAttributes=new AttrList(attributes);substituteVariablesInAttributes(parsed,variableAttributes,['NAME','VALUE','QUERYPARAM']);addVariableDefinition(parsed,variableAttributes,baseurl);}break;}case'CONTENT-STEERING':{// #EXT-X-CONTENT-STEERING
const contentSteeringAttributes=new AttrList(attributes);{substituteVariablesInAttributes(parsed,contentSteeringAttributes,['SERVER-URI','PATHWAY-ID']);}parsed.contentSteering={uri:M3U8Parser.resolve(contentSteeringAttributes['SERVER-URI'],baseurl),pathwayId:contentSteeringAttributes['PATHWAY-ID']||'.'};break;}case'START':{// #EXT-X-START
parsed.startTimeOffset=parseStartTimeOffset(attributes);break;}}}}// Filter out levels with unknown codecs if it does not remove all levels
const stripUnknownCodecLevels=levelsWithKnownCodecs.length>0&&levelsWithKnownCodecs.length<parsed.levels.length;parsed.levels=stripUnknownCodecLevels?levelsWithKnownCodecs:parsed.levels;if(parsed.levels.length===0){parsed.playlistParsingError=new Error('no levels found in manifest');}return parsed;}static parseMasterPlaylistMedia(string,baseurl,parsed){let result;const results={};const levels=parsed.levels;const groupsByType={AUDIO:levels.map(level=>({id:level.attrs.AUDIO,audioCodec:level.audioCodec})),SUBTITLES:levels.map(level=>({id:level.attrs.SUBTITLES,textCodec:level.textCodec})),'CLOSED-CAPTIONS':[]};let id=0;MASTER_PLAYLIST_MEDIA_REGEX.lastIndex=0;while((result=MASTER_PLAYLIST_MEDIA_REGEX.exec(string))!==null){const attrs=new AttrList(result[1]);const type=attrs.TYPE;if(type){const groups=groupsByType[type];const medias=results[type]||[];results[type]=medias;{substituteVariablesInAttributes(parsed,attrs,['URI','GROUP-ID','LANGUAGE','ASSOC-LANGUAGE','STABLE-RENDITION-ID','NAME','INSTREAM-ID','CHARACTERISTICS','CHANNELS']);}const lang=attrs.LANGUAGE;const assocLang=attrs['ASSOC-LANGUAGE'];const channels=attrs.CHANNELS;const characteristics=attrs.CHARACTERISTICS;const instreamId=attrs['INSTREAM-ID'];const media={attrs,bitrate:0,id:id++,groupId:attrs['GROUP-ID']||'',name:attrs.NAME||lang||'',type,default:attrs.bool('DEFAULT'),autoselect:attrs.bool('AUTOSELECT'),forced:attrs.bool('FORCED'),lang,url:attrs.URI?M3U8Parser.resolve(attrs.URI,baseurl):''};if(assocLang){media.assocLang=assocLang;}if(channels){media.channels=channels;}if(characteristics){media.characteristics=characteristics;}if(instreamId){media.instreamId=instreamId;}if(groups!=null&&groups.length){// If there are audio or text groups signalled in the manifest, let's look for a matching codec string for this track
// If we don't find the track signalled, lets use the first audio groups codec we have
// Acting as a best guess
const groupCodec=M3U8Parser.findGroup(groups,media.groupId)||groups[0];assignCodec(media,groupCodec,'audioCodec');assignCodec(media,groupCodec,'textCodec');}medias.push(media);}}return results;}static parseLevelPlaylist(string,baseurl,id,type,levelUrlId,multivariantVariableList){const level=new LevelDetails(baseurl);const fragments=level.fragments;// The most recent init segment seen (applies to all subsequent segments)
let currentInitSegment=null;let currentSN=0;let currentPart=0;let totalduration=0;let discontinuityCounter=0;let prevFrag=null;let frag=new Fragment(type,baseurl);let result;let i;let levelkeys;let firstPdtIndex=-1;let createNextFrag=false;let nextByteRange=null;LEVEL_PLAYLIST_REGEX_FAST.lastIndex=0;level.m3u8=string;level.hasVariableRefs=hasVariableReferences(string);while((result=LEVEL_PLAYLIST_REGEX_FAST.exec(string))!==null){if(createNextFrag){createNextFrag=false;frag=new Fragment(type,baseurl);// setup the next fragment for part loading
frag.start=totalduration;frag.sn=currentSN;frag.cc=discontinuityCounter;frag.level=id;if(currentInitSegment){frag.initSegment=currentInitSegment;frag.rawProgramDateTime=currentInitSegment.rawProgramDateTime;currentInitSegment.rawProgramDateTime=null;if(nextByteRange){frag.setByteRange(nextByteRange);nextByteRange=null;}}}const duration=result[1];if(duration){// INF
frag.duration=parseFloat(duration);// avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
const title=(' '+result[2]).slice(1);frag.title=title||null;frag.tagList.push(title?['INF',duration,title]:['INF',duration]);}else if(result[3]){// url
if(isFiniteNumber(frag.duration)){frag.start=totalduration;if(levelkeys){setFragLevelKeys(frag,levelkeys,level);}frag.sn=currentSN;frag.level=id;frag.cc=discontinuityCounter;fragments.push(frag);// avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
const uri=(' '+result[3]).slice(1);frag.relurl=substituteVariables(level,uri);assignProgramDateTime(frag,prevFrag);prevFrag=frag;totalduration+=frag.duration;currentSN++;currentPart=0;createNextFrag=true;}}else if(result[4]){// X-BYTERANGE
const data=(' '+result[4]).slice(1);if(prevFrag){frag.setByteRange(data,prevFrag);}else {frag.setByteRange(data);}}else if(result[5]){// PROGRAM-DATE-TIME
// avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
frag.rawProgramDateTime=(' '+result[5]).slice(1);frag.tagList.push(['PROGRAM-DATE-TIME',frag.rawProgramDateTime]);if(firstPdtIndex===-1){firstPdtIndex=fragments.length;}}else {result=result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);if(!result){logger$2.warn('No matches on slow regex match for level playlist!');continue;}for(i=1;i<result.length;i++){if(typeof result[i]!=='undefined'){break;}}// avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
const tag=(' '+result[i]).slice(1);const value1=(' '+result[i+1]).slice(1);const value2=result[i+2]?(' '+result[i+2]).slice(1):'';switch(tag){case'PLAYLIST-TYPE':level.type=value1.toUpperCase();break;case'MEDIA-SEQUENCE':currentSN=level.startSN=parseInt(value1);break;case'SKIP':{const skipAttrs=new AttrList(value1);{substituteVariablesInAttributes(level,skipAttrs,['RECENTLY-REMOVED-DATERANGES']);}const skippedSegments=skipAttrs.decimalInteger('SKIPPED-SEGMENTS');if(isFiniteNumber(skippedSegments)){level.skippedSegments=skippedSegments;// This will result in fragments[] containing undefined values, which we will fill in with `mergeDetails`
for(let _i=skippedSegments;_i--;){fragments.unshift(null);}currentSN+=skippedSegments;}const recentlyRemovedDateranges=skipAttrs.enumeratedString('RECENTLY-REMOVED-DATERANGES');if(recentlyRemovedDateranges){level.recentlyRemovedDateranges=recentlyRemovedDateranges.split('\t');}break;}case'TARGETDURATION':level.targetduration=Math.max(parseInt(value1),1);break;case'VERSION':level.version=parseInt(value1);break;case'INDEPENDENT-SEGMENTS':case'EXTM3U':break;case'ENDLIST':level.live=false;break;case'#':if(value1||value2){frag.tagList.push(value2?[value1,value2]:[value1]);}break;case'DISCONTINUITY':discontinuityCounter++;frag.tagList.push(['DIS']);break;case'GAP':frag.gap=true;frag.tagList.push([tag]);break;case'BITRATE':frag.tagList.push([tag,value1]);break;case'DATERANGE':{const dateRangeAttr=new AttrList(value1);{substituteVariablesInAttributes(level,dateRangeAttr,['ID','CLASS','START-DATE','END-DATE','SCTE35-CMD','SCTE35-OUT','SCTE35-IN']);substituteVariablesInAttributes(level,dateRangeAttr,dateRangeAttr.clientAttrs);}const dateRange=new DateRange(dateRangeAttr,level.dateRanges[dateRangeAttr.ID]);if(dateRange.isValid||level.skippedSegments){level.dateRanges[dateRange.id]=dateRange;}else {logger$2.warn(`Ignoring invalid DATERANGE tag: "${value1}"`);}// Add to fragment tag list for backwards compatibility (< v1.2.0)
frag.tagList.push(['EXT-X-DATERANGE',value1]);break;}case'DEFINE':{{const variableAttributes=new AttrList(value1);substituteVariablesInAttributes(level,variableAttributes,['NAME','VALUE','IMPORT','QUERYPARAM']);if('IMPORT'in variableAttributes){importVariableDefinition(level,variableAttributes,multivariantVariableList);}else {addVariableDefinition(level,variableAttributes,baseurl);}}break;}case'DISCONTINUITY-SEQUENCE':discontinuityCounter=parseInt(value1);break;case'KEY':{const levelKey=parseKey(value1,baseurl,level);if(levelKey.isSupported()){if(levelKey.method==='NONE'){levelkeys=undefined;break;}if(!levelkeys){levelkeys={};}if(levelkeys[levelKey.keyFormat]){levelkeys=_extends({},levelkeys);}levelkeys[levelKey.keyFormat]=levelKey;}else {logger$2.warn(`[Keys] Ignoring invalid EXT-X-KEY tag: "${value1}"`);}break;}case'START':level.startTimeOffset=parseStartTimeOffset(value1);break;case'MAP':{const mapAttrs=new AttrList(value1);{substituteVariablesInAttributes(level,mapAttrs,['BYTERANGE','URI']);}if(frag.duration){// Initial segment tag is after segment duration tag.
//   #EXTINF: 6.0
//   #EXT-X-MAP:URI="init.mp4
const init=new Fragment(type,baseurl);setInitSegment(init,mapAttrs,id,levelkeys);currentInitSegment=init;frag.initSegment=currentInitSegment;if(currentInitSegment.rawProgramDateTime&&!frag.rawProgramDateTime){frag.rawProgramDateTime=currentInitSegment.rawProgramDateTime;}}else {// Initial segment tag is before segment duration tag
// Handle case where EXT-X-MAP is declared after EXT-X-BYTERANGE
const end=frag.byteRangeEndOffset;if(end){const start=frag.byteRangeStartOffset;nextByteRange=`${end-start}@${start}`;}else {nextByteRange=null;}setInitSegment(frag,mapAttrs,id,levelkeys);currentInitSegment=frag;createNextFrag=true;}break;}case'SERVER-CONTROL':{const serverControlAttrs=new AttrList(value1);level.canBlockReload=serverControlAttrs.bool('CAN-BLOCK-RELOAD');level.canSkipUntil=serverControlAttrs.optionalFloat('CAN-SKIP-UNTIL',0);level.canSkipDateRanges=level.canSkipUntil>0&&serverControlAttrs.bool('CAN-SKIP-DATERANGES');level.partHoldBack=serverControlAttrs.optionalFloat('PART-HOLD-BACK',0);level.holdBack=serverControlAttrs.optionalFloat('HOLD-BACK',0);break;}case'PART-INF':{const partInfAttrs=new AttrList(value1);level.partTarget=partInfAttrs.decimalFloatingPoint('PART-TARGET');break;}case'PART':{let partList=level.partList;if(!partList){partList=level.partList=[];}const previousFragmentPart=currentPart>0?partList[partList.length-1]:undefined;const index=currentPart++;const partAttrs=new AttrList(value1);{substituteVariablesInAttributes(level,partAttrs,['BYTERANGE','URI']);}const part=new Part(partAttrs,frag,baseurl,index,previousFragmentPart);partList.push(part);frag.duration+=part.duration;break;}case'PRELOAD-HINT':{const preloadHintAttrs=new AttrList(value1);{substituteVariablesInAttributes(level,preloadHintAttrs,['URI']);}level.preloadHint=preloadHintAttrs;break;}case'RENDITION-REPORT':{const renditionReportAttrs=new AttrList(value1);{substituteVariablesInAttributes(level,renditionReportAttrs,['URI']);}level.renditionReports=level.renditionReports||[];level.renditionReports.push(renditionReportAttrs);break;}default:logger$2.warn(`line parsed but not handled: ${result}`);break;}}}if(prevFrag&&!prevFrag.relurl){fragments.pop();totalduration-=prevFrag.duration;if(level.partList){level.fragmentHint=prevFrag;}}else if(level.partList){assignProgramDateTime(frag,prevFrag);frag.cc=discontinuityCounter;level.fragmentHint=frag;if(levelkeys){setFragLevelKeys(frag,levelkeys,level);}}const fragmentLength=fragments.length;const firstFragment=fragments[0];const lastFragment=fragments[fragmentLength-1];totalduration+=level.skippedSegments*level.targetduration;if(totalduration>0&&fragmentLength&&lastFragment){level.averagetargetduration=totalduration/fragmentLength;const lastSn=lastFragment.sn;level.endSN=lastSn!=='initSegment'?lastSn:0;if(!level.live){lastFragment.endList=true;}if(firstFragment){level.startCC=firstFragment.cc;}}else {level.endSN=0;level.startCC=0;}if(level.fragmentHint){totalduration+=level.fragmentHint.duration;}level.totalduration=totalduration;level.endCC=discontinuityCounter;/**
     * Backfill any missing PDT values
     * "If the first EXT-X-PROGRAM-DATE-TIME tag in a Playlist appears after
     * one or more Media Segment URIs, the client SHOULD extrapolate
     * backward from that tag (using EXTINF durations and/or media
     * timestamps) to associate dates with those segments."
     * We have already extrapolated forward, but all fragments up to the first instance of PDT do not have their PDTs
     * computed.
     */if(firstPdtIndex>0){backfillProgramDateTimes(fragments,firstPdtIndex);}return level;}}function parseKey(keyTagAttributes,baseurl,parsed){var _keyAttrs$METHOD,_keyAttrs$KEYFORMAT;// https://tools.ietf.org/html/rfc8216#section-4.3.2.4
const keyAttrs=new AttrList(keyTagAttributes);{substituteVariablesInAttributes(parsed,keyAttrs,['KEYFORMAT','KEYFORMATVERSIONS','URI','IV','URI']);}const decryptmethod=(_keyAttrs$METHOD=keyAttrs.METHOD)!=null?_keyAttrs$METHOD:'';const decrypturi=keyAttrs.URI;const decryptiv=keyAttrs.hexadecimalInteger('IV');const decryptkeyformatversions=keyAttrs.KEYFORMATVERSIONS;// From RFC: This attribute is OPTIONAL; its absence indicates an implicit value of "identity".
const decryptkeyformat=(_keyAttrs$KEYFORMAT=keyAttrs.KEYFORMAT)!=null?_keyAttrs$KEYFORMAT:'identity';if(decrypturi&&keyAttrs.IV&&!decryptiv){logger$2.error(`Invalid IV: ${keyAttrs.IV}`);}// If decrypturi is a URI with a scheme, then baseurl will be ignored
// No uri is allowed when METHOD is NONE
const resolvedUri=decrypturi?M3U8Parser.resolve(decrypturi,baseurl):'';const keyFormatVersions=(decryptkeyformatversions?decryptkeyformatversions:'1').split('/').map(Number).filter(Number.isFinite);return new LevelKey(decryptmethod,resolvedUri,decryptkeyformat,keyFormatVersions,decryptiv);}function parseStartTimeOffset(startAttributes){const startAttrs=new AttrList(startAttributes);const startTimeOffset=startAttrs.decimalFloatingPoint('TIME-OFFSET');if(isFiniteNumber(startTimeOffset)){return startTimeOffset;}return null;}function setCodecs(codecsAttributeValue,level){let codecs=(codecsAttributeValue||'').split(/[ ,]+/).filter(c=>c);['video','audio','text'].forEach(type=>{const filtered=codecs.filter(codec=>isCodecType(codec,type));if(filtered.length){// Comma separated list of all codecs for type
level[`${type}Codec`]=filtered.join(',');// Remove known codecs so that only unknownCodecs are left after iterating through each type
codecs=codecs.filter(codec=>filtered.indexOf(codec)===-1);}});level.unknownCodecs=codecs;}function assignCodec(media,groupItem,codecProperty){const codecValue=groupItem[codecProperty];if(codecValue){media[codecProperty]=codecValue;}}function backfillProgramDateTimes(fragments,firstPdtIndex){let fragPrev=fragments[firstPdtIndex];for(let i=firstPdtIndex;i--;){const frag=fragments[i];// Exit on delta-playlist skipped segments
if(!frag){return;}frag.programDateTime=fragPrev.programDateTime-frag.duration*1000;fragPrev=frag;}}function assignProgramDateTime(frag,prevFrag){if(frag.rawProgramDateTime){frag.programDateTime=Date.parse(frag.rawProgramDateTime);}else if(prevFrag!=null&&prevFrag.programDateTime){frag.programDateTime=prevFrag.endProgramDateTime;}if(!isFiniteNumber(frag.programDateTime)){frag.programDateTime=null;frag.rawProgramDateTime=null;}}function setInitSegment(frag,mapAttrs,id,levelkeys){frag.relurl=mapAttrs.URI;if(mapAttrs.BYTERANGE){frag.setByteRange(mapAttrs.BYTERANGE);}frag.level=id;frag.sn='initSegment';if(levelkeys){frag.levelkeys=levelkeys;}frag.initSegment=null;}function setFragLevelKeys(frag,levelkeys,level){frag.levelkeys=levelkeys;const{encryptedFragments}=level;if((!encryptedFragments.length||encryptedFragments[encryptedFragments.length-1].levelkeys!==levelkeys)&&Object.keys(levelkeys).some(format=>levelkeys[format].isCommonEncryption)){encryptedFragments.push(frag);}}var PlaylistContextType={MANIFEST:"manifest",LEVEL:"level",AUDIO_TRACK:"audioTrack",SUBTITLE_TRACK:"subtitleTrack"};var PlaylistLevelType={MAIN:"main",AUDIO:"audio",SUBTITLE:"subtitle"};function mapContextToLevelType(context){const{type}=context;switch(type){case PlaylistContextType.AUDIO_TRACK:return PlaylistLevelType.AUDIO;case PlaylistContextType.SUBTITLE_TRACK:return PlaylistLevelType.SUBTITLE;default:return PlaylistLevelType.MAIN;}}function getResponseUrl(response,context){let url=response.url;// responseURL not supported on some browsers (it is used to detect URL redirection)
// data-uri mode also not supported (but no need to detect redirection)
if(url===undefined||url.indexOf('data:')===0){// fallback to initial URL
url=context.url;}return url;}class PlaylistLoader{constructor(hls){this.hls=void 0;this.loaders=Object.create(null);this.variableList=null;this.hls=hls;this.registerListeners();}startLoad(startPosition){}stopLoad(){this.destroyInternalLoaders();}registerListeners(){const{hls}=this;hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.on(Events.LEVEL_LOADING,this.onLevelLoading,this);hls.on(Events.AUDIO_TRACK_LOADING,this.onAudioTrackLoading,this);hls.on(Events.SUBTITLE_TRACK_LOADING,this.onSubtitleTrackLoading,this);}unregisterListeners(){const{hls}=this;hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.off(Events.LEVEL_LOADING,this.onLevelLoading,this);hls.off(Events.AUDIO_TRACK_LOADING,this.onAudioTrackLoading,this);hls.off(Events.SUBTITLE_TRACK_LOADING,this.onSubtitleTrackLoading,this);}/**
   * Returns defaults or configured loader-type overloads (pLoader and loader config params)
   */createInternalLoader(context){const config=this.hls.config;const PLoader=config.pLoader;const Loader=config.loader;const InternalLoader=PLoader||Loader;const loader=new InternalLoader(config);this.loaders[context.type]=loader;return loader;}getInternalLoader(context){return this.loaders[context.type];}resetInternalLoader(contextType){if(this.loaders[contextType]){delete this.loaders[contextType];}}/**
   * Call `destroy` on all internal loader instances mapped (one per context type)
   */destroyInternalLoaders(){for(const contextType in this.loaders){const loader=this.loaders[contextType];if(loader){loader.destroy();}this.resetInternalLoader(contextType);}}destroy(){this.variableList=null;this.unregisterListeners();this.destroyInternalLoaders();}onManifestLoading(event,data){const{url}=data;this.variableList=null;this.load({id:null,level:0,responseType:'text',type:PlaylistContextType.MANIFEST,url,deliveryDirectives:null});}onLevelLoading(event,data){const{id,level,pathwayId,url,deliveryDirectives}=data;this.load({id,level,pathwayId,responseType:'text',type:PlaylistContextType.LEVEL,url,deliveryDirectives});}onAudioTrackLoading(event,data){const{id,groupId,url,deliveryDirectives}=data;this.load({id,groupId,level:null,responseType:'text',type:PlaylistContextType.AUDIO_TRACK,url,deliveryDirectives});}onSubtitleTrackLoading(event,data){const{id,groupId,url,deliveryDirectives}=data;this.load({id,groupId,level:null,responseType:'text',type:PlaylistContextType.SUBTITLE_TRACK,url,deliveryDirectives});}load(context){var _context$deliveryDire;const config=this.hls.config;// logger.debug(`[playlist-loader]: Loading playlist of type ${context.type}, level: ${context.level}, id: ${context.id}`);
// Check if a loader for this context already exists
let loader=this.getInternalLoader(context);if(loader){const loaderContext=loader.context;if(loaderContext&&loaderContext.url===context.url&&loaderContext.level===context.level){// same URL can't overlap
logger$2.trace('[playlist-loader]: playlist request ongoing');return;}logger$2.log(`[playlist-loader]: aborting previous loader for type: ${context.type}`);loader.abort();}// apply different configs for retries depending on
// context (manifest, level, audio/subs playlist)
let loadPolicy;if(context.type===PlaylistContextType.MANIFEST){loadPolicy=config.manifestLoadPolicy.default;}else {loadPolicy=_extends({},config.playlistLoadPolicy.default,{timeoutRetry:null,errorRetry:null});}loader=this.createInternalLoader(context);// Override level/track timeout for LL-HLS requests
// (the default of 10000ms is counter productive to blocking playlist reload requests)
if(isFiniteNumber((_context$deliveryDire=context.deliveryDirectives)==null?void 0:_context$deliveryDire.part)){let levelDetails;if(context.type===PlaylistContextType.LEVEL&&context.level!==null){levelDetails=this.hls.levels[context.level].details;}else if(context.type===PlaylistContextType.AUDIO_TRACK&&context.id!==null){levelDetails=this.hls.audioTracks[context.id].details;}else if(context.type===PlaylistContextType.SUBTITLE_TRACK&&context.id!==null){levelDetails=this.hls.subtitleTracks[context.id].details;}if(levelDetails){const partTarget=levelDetails.partTarget;const targetDuration=levelDetails.targetduration;if(partTarget&&targetDuration){const maxLowLatencyPlaylistRefresh=Math.max(partTarget*3,targetDuration*0.8)*1000;loadPolicy=_extends({},loadPolicy,{maxTimeToFirstByteMs:Math.min(maxLowLatencyPlaylistRefresh,loadPolicy.maxTimeToFirstByteMs),maxLoadTimeMs:Math.min(maxLowLatencyPlaylistRefresh,loadPolicy.maxTimeToFirstByteMs)});}}}const legacyRetryCompatibility=loadPolicy.errorRetry||loadPolicy.timeoutRetry||{};const loaderConfig={loadPolicy,timeout:loadPolicy.maxLoadTimeMs,maxRetry:legacyRetryCompatibility.maxNumRetry||0,retryDelay:legacyRetryCompatibility.retryDelayMs||0,maxRetryDelay:legacyRetryCompatibility.maxRetryDelayMs||0};const loaderCallbacks={onSuccess:(response,stats,context,networkDetails)=>{const loader=this.getInternalLoader(context);this.resetInternalLoader(context.type);const string=response.data;// Validate if it is an M3U8 at all
if(string.indexOf('#EXTM3U')!==0){this.handleManifestParsingError(response,context,new Error('no EXTM3U delimiter'),networkDetails||null,stats);return;}stats.parsing.start=performance.now();if(M3U8Parser.isMediaPlaylist(string)){this.handleTrackOrLevelPlaylist(response,stats,context,networkDetails||null,loader);}else {this.handleMasterPlaylist(response,stats,context,networkDetails);}},onError:(response,context,networkDetails,stats)=>{this.handleNetworkError(context,networkDetails,false,response,stats);},onTimeout:(stats,context,networkDetails)=>{this.handleNetworkError(context,networkDetails,true,undefined,stats);}};// logger.debug(`[playlist-loader]: Calling internal loader delegate for URL: ${context.url}`);
loader.load(context,loaderConfig,loaderCallbacks);}handleMasterPlaylist(response,stats,context,networkDetails){const hls=this.hls;const string=response.data;const url=getResponseUrl(response,context);const parsedResult=M3U8Parser.parseMasterPlaylist(string,url);if(parsedResult.playlistParsingError){this.handleManifestParsingError(response,context,parsedResult.playlistParsingError,networkDetails,stats);return;}const{contentSteering,levels,sessionData,sessionKeys,startTimeOffset,variableList}=parsedResult;this.variableList=variableList;const{AUDIO:audioTracks=[],SUBTITLES:subtitles,'CLOSED-CAPTIONS':captions}=M3U8Parser.parseMasterPlaylistMedia(string,url,parsedResult);if(audioTracks.length){// check if we have found an audio track embedded in main playlist (audio track without URI attribute)
const embeddedAudioFound=audioTracks.some(audioTrack=>!audioTrack.url);// if no embedded audio track defined, but audio codec signaled in quality level,
// we need to signal this main audio track this could happen with playlists with
// alt audio rendition in which quality levels (main)
// contains both audio+video. but with mixed audio track not signaled
if(!embeddedAudioFound&&levels[0].audioCodec&&!levels[0].attrs.AUDIO){logger$2.log('[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one');audioTracks.unshift({type:'main',name:'main',groupId:'main',default:false,autoselect:false,forced:false,id:-1,attrs:new AttrList({}),bitrate:0,url:''});}}hls.trigger(Events.MANIFEST_LOADED,{levels,audioTracks,subtitles,captions,contentSteering,url,stats,networkDetails,sessionData,sessionKeys,startTimeOffset,variableList});}handleTrackOrLevelPlaylist(response,stats,context,networkDetails,loader){const hls=this.hls;const{id,level,type}=context;const url=getResponseUrl(response,context);const levelUrlId=0;const levelId=isFiniteNumber(level)?level:isFiniteNumber(id)?id:0;const levelType=mapContextToLevelType(context);const levelDetails=M3U8Parser.parseLevelPlaylist(response.data,url,levelId,levelType,levelUrlId,this.variableList);// We have done our first request (Manifest-type) and receive
// not a master playlist but a chunk-list (track/level)
// We fire the manifest-loaded event anyway with the parsed level-details
// by creating a single-level structure for it.
if(type===PlaylistContextType.MANIFEST){const singleLevel={attrs:new AttrList({}),bitrate:0,details:levelDetails,name:'',url};hls.trigger(Events.MANIFEST_LOADED,{levels:[singleLevel],audioTracks:[],url,stats,networkDetails,sessionData:null,sessionKeys:null,contentSteering:null,startTimeOffset:null,variableList:null});}// save parsing time
stats.parsing.end=performance.now();// extend the context with the new levelDetails property
context.levelDetails=levelDetails;this.handlePlaylistLoaded(levelDetails,response,stats,context,networkDetails,loader);}handleManifestParsingError(response,context,error,networkDetails,stats){this.hls.trigger(Events.ERROR,{type:ErrorTypes.NETWORK_ERROR,details:ErrorDetails.MANIFEST_PARSING_ERROR,fatal:context.type===PlaylistContextType.MANIFEST,url:response.url,err:error,error,reason:error.message,response,context,networkDetails,stats});}handleNetworkError(context,networkDetails,timeout=false,response,stats){let message=`A network ${timeout?'timeout':'error'+(response?' (status '+response.code+')':'')} occurred while loading ${context.type}`;if(context.type===PlaylistContextType.LEVEL){message+=`: ${context.level} id: ${context.id}`;}else if(context.type===PlaylistContextType.AUDIO_TRACK||context.type===PlaylistContextType.SUBTITLE_TRACK){message+=` id: ${context.id} group-id: "${context.groupId}"`;}const error=new Error(message);logger$2.warn(`[playlist-loader]: ${message}`);let details=ErrorDetails.UNKNOWN;let fatal=false;const loader=this.getInternalLoader(context);switch(context.type){case PlaylistContextType.MANIFEST:details=timeout?ErrorDetails.MANIFEST_LOAD_TIMEOUT:ErrorDetails.MANIFEST_LOAD_ERROR;fatal=true;break;case PlaylistContextType.LEVEL:details=timeout?ErrorDetails.LEVEL_LOAD_TIMEOUT:ErrorDetails.LEVEL_LOAD_ERROR;fatal=false;break;case PlaylistContextType.AUDIO_TRACK:details=timeout?ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:ErrorDetails.AUDIO_TRACK_LOAD_ERROR;fatal=false;break;case PlaylistContextType.SUBTITLE_TRACK:details=timeout?ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT:ErrorDetails.SUBTITLE_LOAD_ERROR;fatal=false;break;}if(loader){this.resetInternalLoader(context.type);}const errorData={type:ErrorTypes.NETWORK_ERROR,details,fatal,url:context.url,loader,context,error,networkDetails,stats};if(response){const url=(networkDetails==null?void 0:networkDetails.url)||context.url;errorData.response=_objectSpread2({url,data:undefined},response);}this.hls.trigger(Events.ERROR,errorData);}handlePlaylistLoaded(levelDetails,response,stats,context,networkDetails,loader){const hls=this.hls;const{type,level,id,groupId,deliveryDirectives}=context;const url=getResponseUrl(response,context);const parent=mapContextToLevelType(context);const levelIndex=typeof context.level==='number'&&parent===PlaylistLevelType.MAIN?level:undefined;if(!levelDetails.fragments.length){const _error=new Error('No Segments found in Playlist');hls.trigger(Events.ERROR,{type:ErrorTypes.NETWORK_ERROR,details:ErrorDetails.LEVEL_EMPTY_ERROR,fatal:false,url,error:_error,reason:_error.message,response,context,level:levelIndex,parent,networkDetails,stats});return;}if(!levelDetails.targetduration){levelDetails.playlistParsingError=new Error('Missing Target Duration');}const error=levelDetails.playlistParsingError;if(error){hls.trigger(Events.ERROR,{type:ErrorTypes.NETWORK_ERROR,details:ErrorDetails.LEVEL_PARSING_ERROR,fatal:false,url,error,reason:error.message,response,context,level:levelIndex,parent,networkDetails,stats});return;}if(levelDetails.live&&loader){if(loader.getCacheAge){levelDetails.ageHeader=loader.getCacheAge()||0;}if(!loader.getCacheAge||isNaN(levelDetails.ageHeader)){levelDetails.ageHeader=0;}}switch(type){case PlaylistContextType.MANIFEST:case PlaylistContextType.LEVEL:hls.trigger(Events.LEVEL_LOADED,{details:levelDetails,level:levelIndex||0,id:id||0,stats,networkDetails,deliveryDirectives});break;case PlaylistContextType.AUDIO_TRACK:hls.trigger(Events.AUDIO_TRACK_LOADED,{details:levelDetails,id:id||0,groupId:groupId||'',stats,networkDetails,deliveryDirectives});break;case PlaylistContextType.SUBTITLE_TRACK:hls.trigger(Events.SUBTITLE_TRACK_LOADED,{details:levelDetails,id:id||0,groupId:groupId||'',stats,networkDetails,deliveryDirectives});break;}}}function sendAddTrackEvent(track,videoEl){let event;try{event=new Event('addtrack');}catch(err){// for IE11
event=document.createEvent('Event');event.initEvent('addtrack',false,false);}event.track=track;videoEl.dispatchEvent(event);}function addCueToTrack(track,cue){// Sometimes there are cue overlaps on segmented vtts so the same
// cue can appear more than once in different vtt files.
// This avoid showing duplicated cues with same timecode and text.
const mode=track.mode;if(mode==='disabled'){track.mode='hidden';}if(track.cues&&!track.cues.getCueById(cue.id)){try{track.addCue(cue);if(!track.cues.getCueById(cue.id)){throw new Error(`addCue is failed for: ${cue}`);}}catch(err){logger$2.debug(`[texttrack-utils]: ${err}`);try{const textTrackCue=new self.TextTrackCue(cue.startTime,cue.endTime,cue.text);textTrackCue.id=cue.id;track.addCue(textTrackCue);}catch(err2){logger$2.debug(`[texttrack-utils]: Legacy TextTrackCue fallback failed: ${err2}`);}}}if(mode==='disabled'){track.mode=mode;}}function clearCurrentCues(track){// When track.mode is disabled, track.cues will be null.
// To guarantee the removal of cues, we need to temporarily
// change the mode to hidden
const mode=track.mode;if(mode==='disabled'){track.mode='hidden';}if(track.cues){for(let i=track.cues.length;i--;){track.removeCue(track.cues[i]);}}if(mode==='disabled'){track.mode=mode;}}function removeCuesInRange(track,start,end,predicate){const mode=track.mode;if(mode==='disabled'){track.mode='hidden';}if(track.cues&&track.cues.length>0){const cues=getCuesInRange(track.cues,start,end);for(let i=0;i<cues.length;i++){if(!predicate||predicate(cues[i])){track.removeCue(cues[i]);}}}if(mode==='disabled'){track.mode=mode;}}// Find first cue starting after given time.
// Modified version of binary search O(log(n)).
function getFirstCueIndexAfterTime(cues,time){// If first cue starts after time, start there
if(time<cues[0].startTime){return 0;}// If the last cue ends before time there is no overlap
const len=cues.length-1;if(time>cues[len].endTime){return -1;}let left=0;let right=len;while(left<=right){const mid=Math.floor((right+left)/2);if(time<cues[mid].startTime){right=mid-1;}else if(time>cues[mid].startTime&&left<len){left=mid+1;}else {// If it's not lower or higher, it must be equal.
return mid;}}// At this point, left and right have swapped.
// No direct match was found, left or right element must be the closest. Check which one has the smallest diff.
return cues[left].startTime-time<time-cues[right].startTime?left:right;}function getCuesInRange(cues,start,end){const cuesFound=[];const firstCueInRange=getFirstCueIndexAfterTime(cues,start);if(firstCueInRange>-1){for(let i=firstCueInRange,len=cues.length;i<len;i++){const cue=cues[i];if(cue.startTime>=start&&cue.endTime<=end){cuesFound.push(cue);}else if(cue.startTime>end){return cuesFound;}}}return cuesFound;}function filterSubtitleTracks(textTrackList){const tracks=[];for(let i=0;i<textTrackList.length;i++){const track=textTrackList[i];// Edge adds a track without a label; we don't want to use it
if((track.kind==='subtitles'||track.kind==='captions')&&track.label){tracks.push(textTrackList[i]);}}return tracks;}var MetadataSchema={audioId3:"org.id3",dateRange:"com.apple.quicktime.HLS",emsg:"https://aomedia.org/emsg/ID3"};const MIN_CUE_DURATION=0.25;function getCueClass(){if(typeof self==='undefined')return undefined;return self.VTTCue||self.TextTrackCue;}function createCueWithDataFields(Cue,startTime,endTime,data,type){let cue=new Cue(startTime,endTime,'');try{cue.value=data;if(type){cue.type=type;}}catch(e){cue=new Cue(startTime,endTime,JSON.stringify(type?_objectSpread2({type},data):data));}return cue;}// VTTCue latest draft allows an infinite duration, fallback
// to MAX_VALUE if necessary
const MAX_CUE_ENDTIME=(()=>{const Cue=getCueClass();try{Cue&&new Cue(0,Number.POSITIVE_INFINITY,'');}catch(e){return Number.MAX_VALUE;}return Number.POSITIVE_INFINITY;})();function dateRangeDateToTimelineSeconds(date,offset){return date.getTime()/1000-offset;}function hexToArrayBuffer(str){return Uint8Array.from(str.replace(/^0x/,'').replace(/([\da-fA-F]{2}) ?/g,'0x$1 ').replace(/ +$/,'').split(' ')).buffer;}class ID3TrackController{constructor(hls){this.hls=void 0;this.id3Track=null;this.media=null;this.dateRangeCuesAppended={};this.hls=hls;this._registerListeners();}destroy(){this._unregisterListeners();this.id3Track=null;this.media=null;this.dateRangeCuesAppended={};// @ts-ignore
this.hls=null;}_registerListeners(){const{hls}=this;hls.on(Events.MEDIA_ATTACHED,this.onMediaAttached,this);hls.on(Events.MEDIA_DETACHING,this.onMediaDetaching,this);hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.on(Events.FRAG_PARSING_METADATA,this.onFragParsingMetadata,this);hls.on(Events.BUFFER_FLUSHING,this.onBufferFlushing,this);hls.on(Events.LEVEL_UPDATED,this.onLevelUpdated,this);}_unregisterListeners(){const{hls}=this;hls.off(Events.MEDIA_ATTACHED,this.onMediaAttached,this);hls.off(Events.MEDIA_DETACHING,this.onMediaDetaching,this);hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.off(Events.FRAG_PARSING_METADATA,this.onFragParsingMetadata,this);hls.off(Events.BUFFER_FLUSHING,this.onBufferFlushing,this);hls.off(Events.LEVEL_UPDATED,this.onLevelUpdated,this);}// Add ID3 metatadata text track.
onMediaAttached(event,data){this.media=data.media;}onMediaDetaching(){if(!this.id3Track){return;}clearCurrentCues(this.id3Track);this.id3Track=null;this.media=null;this.dateRangeCuesAppended={};}onManifestLoading(){this.dateRangeCuesAppended={};}createTrack(media){const track=this.getID3Track(media.textTracks);track.mode='hidden';return track;}getID3Track(textTracks){if(!this.media){return;}for(let i=0;i<textTracks.length;i++){const textTrack=textTracks[i];if(textTrack.kind==='metadata'&&textTrack.label==='id3'){// send 'addtrack' when reusing the textTrack for metadata,
// same as what we do for captions
sendAddTrackEvent(textTrack,this.media);return textTrack;}}return this.media.addTextTrack('metadata','id3');}onFragParsingMetadata(event,data){if(!this.media){return;}const{hls:{config:{enableEmsgMetadataCues,enableID3MetadataCues}}}=this;if(!enableEmsgMetadataCues&&!enableID3MetadataCues){return;}const{samples}=data;// create track dynamically
if(!this.id3Track){this.id3Track=this.createTrack(this.media);}const Cue=getCueClass();if(!Cue){return;}for(let i=0;i<samples.length;i++){const type=samples[i].type;if(type===MetadataSchema.emsg&&!enableEmsgMetadataCues||!enableID3MetadataCues){continue;}const frames=getID3Frames(samples[i].data);if(frames){const startTime=samples[i].pts;let endTime=startTime+samples[i].duration;if(endTime>MAX_CUE_ENDTIME){endTime=MAX_CUE_ENDTIME;}const timeDiff=endTime-startTime;if(timeDiff<=0){endTime=startTime+MIN_CUE_DURATION;}for(let j=0;j<frames.length;j++){const frame=frames[j];// Safari doesn't put the timestamp frame in the TextTrack
if(!isTimeStampFrame(frame)){// add a bounds to any unbounded cues
this.updateId3CueEnds(startTime,type);const cue=createCueWithDataFields(Cue,startTime,endTime,frame,type);if(cue){this.id3Track.addCue(cue);}}}}}}updateId3CueEnds(startTime,type){var _this$id3Track;const cues=(_this$id3Track=this.id3Track)==null?void 0:_this$id3Track.cues;if(cues){for(let i=cues.length;i--;){const cue=cues[i];if(cue.type===type&&cue.startTime<startTime&&cue.endTime===MAX_CUE_ENDTIME){cue.endTime=startTime;}}}}onBufferFlushing(event,{startOffset,endOffset,type}){const{id3Track,hls}=this;if(!hls){return;}const{config:{enableEmsgMetadataCues,enableID3MetadataCues}}=hls;if(id3Track&&(enableEmsgMetadataCues||enableID3MetadataCues)){let predicate;if(type==='audio'){predicate=cue=>cue.type===MetadataSchema.audioId3&&enableID3MetadataCues;}else if(type==='video'){predicate=cue=>cue.type===MetadataSchema.emsg&&enableEmsgMetadataCues;}else {predicate=cue=>cue.type===MetadataSchema.audioId3&&enableID3MetadataCues||cue.type===MetadataSchema.emsg&&enableEmsgMetadataCues;}removeCuesInRange(id3Track,startOffset,endOffset,predicate);}}onLevelUpdated(event,{details}){if(!this.media||!details.hasProgramDateTime||!this.hls.config.enableDateRangeMetadataCues){return;}const{dateRangeCuesAppended,id3Track}=this;const{dateRanges}=details;const ids=Object.keys(dateRanges);// Remove cues from track not found in details.dateRanges
if(id3Track){const idsToRemove=Object.keys(dateRangeCuesAppended).filter(id=>!ids.includes(id));for(let i=idsToRemove.length;i--;){const id=idsToRemove[i];Object.keys(dateRangeCuesAppended[id].cues).forEach(key=>{id3Track.removeCue(dateRangeCuesAppended[id].cues[key]);});delete dateRangeCuesAppended[id];}}// Exit if the playlist does not have Date Ranges or does not have Program Date Time
const lastFragment=details.fragments[details.fragments.length-1];if(ids.length===0||!isFiniteNumber(lastFragment==null?void 0:lastFragment.programDateTime)){return;}if(!this.id3Track){this.id3Track=this.createTrack(this.media);}const dateTimeOffset=lastFragment.programDateTime/1000-lastFragment.start;const Cue=getCueClass();for(let i=0;i<ids.length;i++){const id=ids[i];const dateRange=dateRanges[id];const startTime=dateRangeDateToTimelineSeconds(dateRange.startDate,dateTimeOffset);// Process DateRanges to determine end-time (known DURATION, END-DATE, or END-ON-NEXT)
const appendedDateRangeCues=dateRangeCuesAppended[id];const cues=(appendedDateRangeCues==null?void 0:appendedDateRangeCues.cues)||{};let durationKnown=(appendedDateRangeCues==null?void 0:appendedDateRangeCues.durationKnown)||false;let endTime=MAX_CUE_ENDTIME;const endDate=dateRange.endDate;if(endDate){endTime=dateRangeDateToTimelineSeconds(endDate,dateTimeOffset);durationKnown=true;}else if(dateRange.endOnNext&&!durationKnown){const nextDateRangeWithSameClass=ids.reduce((candidateDateRange,id)=>{if(id!==dateRange.id){const otherDateRange=dateRanges[id];if(otherDateRange.class===dateRange.class&&otherDateRange.startDate>dateRange.startDate&&(!candidateDateRange||dateRange.startDate<candidateDateRange.startDate)){return otherDateRange;}}return candidateDateRange;},null);if(nextDateRangeWithSameClass){endTime=dateRangeDateToTimelineSeconds(nextDateRangeWithSameClass.startDate,dateTimeOffset);durationKnown=true;}}// Create TextTrack Cues for each MetadataGroup Item (select DateRange attribute)
// This is to emulate Safari HLS playback handling of DateRange tags
const attributes=Object.keys(dateRange.attr);for(let j=0;j<attributes.length;j++){const key=attributes[j];if(!isDateRangeCueAttribute(key)){continue;}const cue=cues[key];if(cue){if(durationKnown&&!appendedDateRangeCues.durationKnown){cue.endTime=endTime;}}else if(Cue){let data=dateRange.attr[key];if(isSCTE35Attribute(key)){data=hexToArrayBuffer(data);}const _cue=createCueWithDataFields(Cue,startTime,endTime,{key,data},MetadataSchema.dateRange);if(_cue){_cue.id=id;this.id3Track.addCue(_cue);cues[key]=_cue;}}}// Keep track of processed DateRanges by ID for updating cues with new DateRange tag attributes
dateRangeCuesAppended[id]={cues,dateRange,durationKnown};}}}class LatencyController{constructor(hls){this.hls=void 0;this.config=void 0;this.media=null;this.levelDetails=null;this.currentTime=0;this.stallCount=0;this._latency=null;this.timeupdateHandler=()=>this.timeupdate();this.hls=hls;this.config=hls.config;this.registerListeners();}get latency(){return this._latency||0;}get maxLatency(){const{config,levelDetails}=this;if(config.liveMaxLatencyDuration!==undefined){return config.liveMaxLatencyDuration;}return levelDetails?config.liveMaxLatencyDurationCount*levelDetails.targetduration:0;}get targetLatency(){const{levelDetails}=this;if(levelDetails===null){return null;}const{holdBack,partHoldBack,targetduration}=levelDetails;const{liveSyncDuration,liveSyncDurationCount,lowLatencyMode}=this.config;const userConfig=this.hls.userConfig;let targetLatency=lowLatencyMode?partHoldBack||holdBack:holdBack;if(userConfig.liveSyncDuration||userConfig.liveSyncDurationCount||targetLatency===0){targetLatency=liveSyncDuration!==undefined?liveSyncDuration:liveSyncDurationCount*targetduration;}const maxLiveSyncOnStallIncrease=targetduration;const liveSyncOnStallIncrease=1.0;return targetLatency+Math.min(this.stallCount*liveSyncOnStallIncrease,maxLiveSyncOnStallIncrease);}get liveSyncPosition(){const liveEdge=this.estimateLiveEdge();const targetLatency=this.targetLatency;const levelDetails=this.levelDetails;if(liveEdge===null||targetLatency===null||levelDetails===null){return null;}const edge=levelDetails.edge;const syncPosition=liveEdge-targetLatency-this.edgeStalled;const min=edge-levelDetails.totalduration;const max=edge-(this.config.lowLatencyMode&&levelDetails.partTarget||levelDetails.targetduration);return Math.min(Math.max(min,syncPosition),max);}get drift(){const{levelDetails}=this;if(levelDetails===null){return 1;}return levelDetails.drift;}get edgeStalled(){const{levelDetails}=this;if(levelDetails===null){return 0;}const maxLevelUpdateAge=(this.config.lowLatencyMode&&levelDetails.partTarget||levelDetails.targetduration)*3;return Math.max(levelDetails.age-maxLevelUpdateAge,0);}get forwardBufferLength(){const{media,levelDetails}=this;if(!media||!levelDetails){return 0;}const bufferedRanges=media.buffered.length;return (bufferedRanges?media.buffered.end(bufferedRanges-1):levelDetails.edge)-this.currentTime;}destroy(){this.unregisterListeners();this.onMediaDetaching();this.levelDetails=null;// @ts-ignore
this.hls=this.timeupdateHandler=null;}registerListeners(){this.hls.on(Events.MEDIA_ATTACHED,this.onMediaAttached,this);this.hls.on(Events.MEDIA_DETACHING,this.onMediaDetaching,this);this.hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);this.hls.on(Events.LEVEL_UPDATED,this.onLevelUpdated,this);this.hls.on(Events.ERROR,this.onError,this);}unregisterListeners(){this.hls.off(Events.MEDIA_ATTACHED,this.onMediaAttached,this);this.hls.off(Events.MEDIA_DETACHING,this.onMediaDetaching,this);this.hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);this.hls.off(Events.LEVEL_UPDATED,this.onLevelUpdated,this);this.hls.off(Events.ERROR,this.onError,this);}onMediaAttached(event,data){this.media=data.media;this.media.addEventListener('timeupdate',this.timeupdateHandler);}onMediaDetaching(){if(this.media){this.media.removeEventListener('timeupdate',this.timeupdateHandler);this.media=null;}}onManifestLoading(){this.levelDetails=null;this._latency=null;this.stallCount=0;}onLevelUpdated(event,{details}){this.levelDetails=details;if(details.advanced){this.timeupdate();}if(!details.live&&this.media){this.media.removeEventListener('timeupdate',this.timeupdateHandler);}}onError(event,data){var _this$levelDetails;if(data.details!==ErrorDetails.BUFFER_STALLED_ERROR){return;}this.stallCount++;if((_this$levelDetails=this.levelDetails)!=null&&_this$levelDetails.live){logger$2.warn('[playback-rate-controller]: Stall detected, adjusting target latency');}}timeupdate(){const{media,levelDetails}=this;if(!media||!levelDetails){return;}this.currentTime=media.currentTime;const latency=this.computeLatency();if(latency===null){return;}this._latency=latency;// Adapt playbackRate to meet target latency in low-latency mode
const{lowLatencyMode,maxLiveSyncPlaybackRate}=this.config;if(!lowLatencyMode||maxLiveSyncPlaybackRate===1||!levelDetails.live){return;}const targetLatency=this.targetLatency;if(targetLatency===null){return;}const distanceFromTarget=latency-targetLatency;// Only adjust playbackRate when within one target duration of targetLatency
// and more than one second from under-buffering.
// Playback further than one target duration from target can be considered DVR playback.
const liveMinLatencyDuration=Math.min(this.maxLatency,targetLatency+levelDetails.targetduration);const inLiveRange=distanceFromTarget<liveMinLatencyDuration;if(inLiveRange&&distanceFromTarget>0.05&&this.forwardBufferLength>1){const max=Math.min(2,Math.max(1.0,maxLiveSyncPlaybackRate));const rate=Math.round(2/(1+Math.exp(-0.75*distanceFromTarget-this.edgeStalled))*20)/20;media.playbackRate=Math.min(max,Math.max(1,rate));}else if(media.playbackRate!==1&&media.playbackRate!==0){media.playbackRate=1;}}estimateLiveEdge(){const{levelDetails}=this;if(levelDetails===null){return null;}return levelDetails.edge+levelDetails.age;}computeLatency(){const liveEdge=this.estimateLiveEdge();if(liveEdge===null){return null;}return liveEdge-this.currentTime;}}const HdcpLevels=['NONE','TYPE-0','TYPE-1',null];function isHdcpLevel(value){return HdcpLevels.indexOf(value)>-1;}const VideoRangeValues=['SDR','PQ','HLG'];function isVideoRange(value){return !!value&&VideoRangeValues.indexOf(value)>-1;}var HlsSkip={No:"",Yes:"YES",v2:"v2"};function getSkipValue(details){const{canSkipUntil,canSkipDateRanges,age}=details;// A Client SHOULD NOT request a Playlist Delta Update unless it already
// has a version of the Playlist that is no older than one-half of the Skip Boundary.
// @see: https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis#section-6.3.7
const playlistRecentEnough=age<canSkipUntil/2;if(canSkipUntil&&playlistRecentEnough){if(canSkipDateRanges){return HlsSkip.v2;}return HlsSkip.Yes;}return HlsSkip.No;}class HlsUrlParameters{constructor(msn,part,skip){this.msn=void 0;this.part=void 0;this.skip=void 0;this.msn=msn;this.part=part;this.skip=skip;}addDirectives(uri){const url=new self.URL(uri);if(this.msn!==undefined){url.searchParams.set('_HLS_msn',this.msn.toString());}if(this.part!==undefined){url.searchParams.set('_HLS_part',this.part.toString());}if(this.skip){url.searchParams.set('_HLS_skip',this.skip);}return url.href;}}class Level{constructor(data){this._attrs=void 0;this.audioCodec=void 0;this.bitrate=void 0;this.codecSet=void 0;this.url=void 0;this.frameRate=void 0;this.height=void 0;this.id=void 0;this.name=void 0;this.videoCodec=void 0;this.width=void 0;this.details=void 0;this.fragmentError=0;this.loadError=0;this.loaded=void 0;this.realBitrate=0;this.supportedPromise=void 0;this.supportedResult=void 0;this._avgBitrate=0;this._audioGroups=void 0;this._subtitleGroups=void 0;// Deprecated (retained for backwards compatibility)
this._urlId=0;this.url=[data.url];this._attrs=[data.attrs];this.bitrate=data.bitrate;if(data.details){this.details=data.details;}this.id=data.id||0;this.name=data.name;this.width=data.width||0;this.height=data.height||0;this.frameRate=data.attrs.optionalFloat('FRAME-RATE',0);this._avgBitrate=data.attrs.decimalInteger('AVERAGE-BANDWIDTH');this.audioCodec=data.audioCodec;this.videoCodec=data.videoCodec;this.codecSet=[data.videoCodec,data.audioCodec].filter(c=>!!c).map(s=>s.substring(0,4)).join(',');this.addGroupId('audio',data.attrs.AUDIO);this.addGroupId('text',data.attrs.SUBTITLES);}get maxBitrate(){return Math.max(this.realBitrate,this.bitrate);}get averageBitrate(){return this._avgBitrate||this.realBitrate||this.bitrate;}get attrs(){return this._attrs[0];}get codecs(){return this.attrs.CODECS||'';}get pathwayId(){return this.attrs['PATHWAY-ID']||'.';}get videoRange(){return this.attrs['VIDEO-RANGE']||'SDR';}get score(){return this.attrs.optionalFloat('SCORE',0);}get uri(){return this.url[0]||'';}hasAudioGroup(groupId){return hasGroup(this._audioGroups,groupId);}hasSubtitleGroup(groupId){return hasGroup(this._subtitleGroups,groupId);}get audioGroups(){return this._audioGroups;}get subtitleGroups(){return this._subtitleGroups;}addGroupId(type,groupId){if(!groupId){return;}if(type==='audio'){let audioGroups=this._audioGroups;if(!audioGroups){audioGroups=this._audioGroups=[];}if(audioGroups.indexOf(groupId)===-1){audioGroups.push(groupId);}}else if(type==='text'){let subtitleGroups=this._subtitleGroups;if(!subtitleGroups){subtitleGroups=this._subtitleGroups=[];}if(subtitleGroups.indexOf(groupId)===-1){subtitleGroups.push(groupId);}}}// Deprecated methods (retained for backwards compatibility)
get urlId(){return 0;}set urlId(value){}get audioGroupIds(){return this.audioGroups?[this.audioGroupId]:undefined;}get textGroupIds(){return this.subtitleGroups?[this.textGroupId]:undefined;}get audioGroupId(){var _this$audioGroups;return (_this$audioGroups=this.audioGroups)==null?void 0:_this$audioGroups[0];}get textGroupId(){var _this$subtitleGroups;return (_this$subtitleGroups=this.subtitleGroups)==null?void 0:_this$subtitleGroups[0];}addFallback(){}}function hasGroup(groups,groupId){if(!groupId||!groups){return false;}return groups.indexOf(groupId)!==-1;}function updateFromToPTS(fragFrom,fragTo){const fragToPTS=fragTo.startPTS;// if we know startPTS[toIdx]
if(isFiniteNumber(fragToPTS)){// update fragment duration.
// it helps to fix drifts between playlist reported duration and fragment real duration
let duration=0;let frag;if(fragTo.sn>fragFrom.sn){duration=fragToPTS-fragFrom.start;frag=fragFrom;}else {duration=fragFrom.start-fragToPTS;frag=fragTo;}if(frag.duration!==duration){frag.duration=duration;}// we dont know startPTS[toIdx]
}else if(fragTo.sn>fragFrom.sn){const contiguous=fragFrom.cc===fragTo.cc;// TODO: With part-loading end/durations we need to confirm the whole fragment is loaded before using (or setting) minEndPTS
if(contiguous&&fragFrom.minEndPTS){fragTo.start=fragFrom.start+(fragFrom.minEndPTS-fragFrom.start);}else {fragTo.start=fragFrom.start+fragFrom.duration;}}else {fragTo.start=Math.max(fragFrom.start-fragTo.duration,0);}}function updateFragPTSDTS(details,frag,startPTS,endPTS,startDTS,endDTS){const parsedMediaDuration=endPTS-startPTS;if(parsedMediaDuration<=0){logger$2.warn('Fragment should have a positive duration',frag);endPTS=startPTS+frag.duration;endDTS=startDTS+frag.duration;}let maxStartPTS=startPTS;let minEndPTS=endPTS;const fragStartPts=frag.startPTS;const fragEndPts=frag.endPTS;if(isFiniteNumber(fragStartPts)){// delta PTS between audio and video
const deltaPTS=Math.abs(fragStartPts-startPTS);if(!isFiniteNumber(frag.deltaPTS)){frag.deltaPTS=deltaPTS;}else {frag.deltaPTS=Math.max(deltaPTS,frag.deltaPTS);}maxStartPTS=Math.max(startPTS,fragStartPts);startPTS=Math.min(startPTS,fragStartPts);startDTS=Math.min(startDTS,frag.startDTS);minEndPTS=Math.min(endPTS,fragEndPts);endPTS=Math.max(endPTS,fragEndPts);endDTS=Math.max(endDTS,frag.endDTS);}const drift=startPTS-frag.start;if(frag.start!==0){frag.start=startPTS;}frag.duration=endPTS-frag.start;frag.startPTS=startPTS;frag.maxStartPTS=maxStartPTS;frag.startDTS=startDTS;frag.endPTS=endPTS;frag.minEndPTS=minEndPTS;frag.endDTS=endDTS;const sn=frag.sn;// 'initSegment'
// exit if sn out of range
if(!details||sn<details.startSN||sn>details.endSN){return 0;}let i;const fragIdx=sn-details.startSN;const fragments=details.fragments;// update frag reference in fragments array
// rationale is that fragments array might not contain this frag object.
// this will happen if playlist has been refreshed between frag loading and call to updateFragPTSDTS()
// if we don't update frag, we won't be able to propagate PTS info on the playlist
// resulting in invalid sliding computation
fragments[fragIdx]=frag;// adjust fragment PTS/duration from seqnum-1 to frag 0
for(i=fragIdx;i>0;i--){updateFromToPTS(fragments[i],fragments[i-1]);}// adjust fragment PTS/duration from seqnum to last frag
for(i=fragIdx;i<fragments.length-1;i++){updateFromToPTS(fragments[i],fragments[i+1]);}if(details.fragmentHint){updateFromToPTS(fragments[fragments.length-1],details.fragmentHint);}details.PTSKnown=details.alignedSliding=true;return drift;}function mergeDetails(oldDetails,newDetails){// Track the last initSegment processed. Initialize it to the last one on the timeline.
let currentInitSegment=null;const oldFragments=oldDetails.fragments;for(let i=oldFragments.length-1;i>=0;i--){const oldInit=oldFragments[i].initSegment;if(oldInit){currentInitSegment=oldInit;break;}}if(oldDetails.fragmentHint){// prevent PTS and duration from being adjusted on the next hint
delete oldDetails.fragmentHint.endPTS;}// check if old/new playlists have fragments in common
// loop through overlapping SN and update startPTS, cc, and duration if any found
let PTSFrag;mapFragmentIntersection(oldDetails,newDetails,(oldFrag,newFrag,newFragIndex,newFragments)=>{if(newDetails.skippedSegments){if(newFrag.cc!==oldFrag.cc){const ccOffset=oldFrag.cc-newFrag.cc;for(let i=newFragIndex;i<newFragments.length;i++){newFragments[i].cc+=ccOffset;}}}if(isFiniteNumber(oldFrag.startPTS)&&isFiniteNumber(oldFrag.endPTS)){newFrag.start=newFrag.startPTS=oldFrag.startPTS;newFrag.startDTS=oldFrag.startDTS;newFrag.maxStartPTS=oldFrag.maxStartPTS;newFrag.endPTS=oldFrag.endPTS;newFrag.endDTS=oldFrag.endDTS;newFrag.minEndPTS=oldFrag.minEndPTS;newFrag.duration=oldFrag.endPTS-oldFrag.startPTS;if(newFrag.duration){PTSFrag=newFrag;}// PTS is known when any segment has startPTS and endPTS
newDetails.PTSKnown=newDetails.alignedSliding=true;}newFrag.elementaryStreams=oldFrag.elementaryStreams;newFrag.loader=oldFrag.loader;newFrag.stats=oldFrag.stats;if(oldFrag.initSegment){newFrag.initSegment=oldFrag.initSegment;currentInitSegment=oldFrag.initSegment;}});const newFragments=newDetails.fragments;if(currentInitSegment){const fragmentsToCheck=newDetails.fragmentHint?newFragments.concat(newDetails.fragmentHint):newFragments;fragmentsToCheck.forEach(frag=>{var _currentInitSegment;if(frag&&(!frag.initSegment||frag.initSegment.relurl===((_currentInitSegment=currentInitSegment)==null?void 0:_currentInitSegment.relurl))){frag.initSegment=currentInitSegment;}});}if(newDetails.skippedSegments){newDetails.deltaUpdateFailed=newFragments.some(frag=>!frag);if(newDetails.deltaUpdateFailed){logger$2.warn('[level-helper] Previous playlist missing segments skipped in delta playlist');for(let i=newDetails.skippedSegments;i--;){newFragments.shift();}newDetails.startSN=newFragments[0].sn;}else {if(newDetails.canSkipDateRanges){newDetails.dateRanges=mergeDateRanges(oldDetails.dateRanges,newDetails.dateRanges,newDetails.recentlyRemovedDateranges);}}newDetails.startCC=newDetails.fragments[0].cc;newDetails.endCC=newFragments[newFragments.length-1].cc;}// Merge parts
mapPartIntersection(oldDetails.partList,newDetails.partList,(oldPart,newPart)=>{newPart.elementaryStreams=oldPart.elementaryStreams;newPart.stats=oldPart.stats;});// if at least one fragment contains PTS info, recompute PTS information for all fragments
if(PTSFrag){updateFragPTSDTS(newDetails,PTSFrag,PTSFrag.startPTS,PTSFrag.endPTS,PTSFrag.startDTS,PTSFrag.endDTS);}else {// ensure that delta is within oldFragments range
// also adjust sliding in case delta is 0 (we could have old=[50-60] and new=old=[50-61])
// in that case we also need to adjust start offset of all fragments
adjustSliding(oldDetails,newDetails);}if(newFragments.length){newDetails.totalduration=newDetails.edge-newFragments[0].start;}newDetails.driftStartTime=oldDetails.driftStartTime;newDetails.driftStart=oldDetails.driftStart;const advancedDateTime=newDetails.advancedDateTime;if(newDetails.advanced&&advancedDateTime){const edge=newDetails.edge;if(!newDetails.driftStart){newDetails.driftStartTime=advancedDateTime;newDetails.driftStart=edge;}newDetails.driftEndTime=advancedDateTime;newDetails.driftEnd=edge;}else {newDetails.driftEndTime=oldDetails.driftEndTime;newDetails.driftEnd=oldDetails.driftEnd;newDetails.advancedDateTime=oldDetails.advancedDateTime;}}function mergeDateRanges(oldDateRanges,deltaDateRanges,recentlyRemovedDateranges){const dateRanges=_extends({},oldDateRanges);if(recentlyRemovedDateranges){recentlyRemovedDateranges.forEach(id=>{delete dateRanges[id];});}Object.keys(deltaDateRanges).forEach(id=>{const dateRange=new DateRange(deltaDateRanges[id].attr,dateRanges[id]);if(dateRange.isValid){dateRanges[id]=dateRange;}else {logger$2.warn(`Ignoring invalid Playlist Delta Update DATERANGE tag: "${JSON.stringify(deltaDateRanges[id].attr)}"`);}});return dateRanges;}function mapPartIntersection(oldParts,newParts,intersectionFn){if(oldParts&&newParts){let delta=0;for(let i=0,len=oldParts.length;i<=len;i++){const oldPart=oldParts[i];const newPart=newParts[i+delta];if(oldPart&&newPart&&oldPart.index===newPart.index&&oldPart.fragment.sn===newPart.fragment.sn){intersectionFn(oldPart,newPart);}else {delta--;}}}}function mapFragmentIntersection(oldDetails,newDetails,intersectionFn){const skippedSegments=newDetails.skippedSegments;const start=Math.max(oldDetails.startSN,newDetails.startSN)-newDetails.startSN;const end=(oldDetails.fragmentHint?1:0)+(skippedSegments?newDetails.endSN:Math.min(oldDetails.endSN,newDetails.endSN))-newDetails.startSN;const delta=newDetails.startSN-oldDetails.startSN;const newFrags=newDetails.fragmentHint?newDetails.fragments.concat(newDetails.fragmentHint):newDetails.fragments;const oldFrags=oldDetails.fragmentHint?oldDetails.fragments.concat(oldDetails.fragmentHint):oldDetails.fragments;for(let i=start;i<=end;i++){const oldFrag=oldFrags[delta+i];let newFrag=newFrags[i];if(skippedSegments&&!newFrag&&i<skippedSegments){// Fill in skipped segments in delta playlist
newFrag=newDetails.fragments[i]=oldFrag;}if(oldFrag&&newFrag){intersectionFn(oldFrag,newFrag,i,newFrags);}}}function adjustSliding(oldDetails,newDetails){const delta=newDetails.startSN+newDetails.skippedSegments-oldDetails.startSN;const oldFragments=oldDetails.fragments;if(delta<0||delta>=oldFragments.length){return;}addSliding(newDetails,oldFragments[delta].start);}function addSliding(details,start){if(start){const fragments=details.fragments;for(let i=details.skippedSegments;i<fragments.length;i++){fragments[i].start+=start;}if(details.fragmentHint){details.fragmentHint.start+=start;}}}function computeReloadInterval(newDetails,distanceToLiveEdgeMs=Infinity){let reloadInterval=1000*newDetails.targetduration;if(newDetails.updated){// Use last segment duration when shorter than target duration and near live edge
const fragments=newDetails.fragments;const liveEdgeMaxTargetDurations=4;if(fragments.length&&reloadInterval*liveEdgeMaxTargetDurations>distanceToLiveEdgeMs){const lastSegmentDuration=fragments[fragments.length-1].duration*1000;if(lastSegmentDuration<reloadInterval){reloadInterval=lastSegmentDuration;}}}else {// estimate = 'miss half average';
// follow HLS Spec, If the client reloads a Playlist file and finds that it has not
// changed then it MUST wait for a period of one-half the target
// duration before retrying.
reloadInterval/=2;}return Math.round(reloadInterval);}function getFragmentWithSN(level,sn,fragCurrent){if(!(level!=null&&level.details)){return null;}const levelDetails=level.details;let fragment=levelDetails.fragments[sn-levelDetails.startSN];if(fragment){return fragment;}fragment=levelDetails.fragmentHint;if(fragment&&fragment.sn===sn){return fragment;}if(sn<levelDetails.startSN&&fragCurrent&&fragCurrent.sn===sn){return fragCurrent;}return null;}function getPartWith(level,sn,partIndex){var _level$details;if(!(level!=null&&level.details)){return null;}return findPart((_level$details=level.details)==null?void 0:_level$details.partList,sn,partIndex);}function findPart(partList,sn,partIndex){if(partList){for(let i=partList.length;i--;){const part=partList[i];if(part.index===partIndex&&part.fragment.sn===sn){return part;}}}return null;}function reassignFragmentLevelIndexes(levels){levels.forEach((level,index)=>{const{details}=level;if(details!=null&&details.fragments){details.fragments.forEach(fragment=>{fragment.level=index;});}});}function isTimeoutError(error){switch(error.details){case ErrorDetails.FRAG_LOAD_TIMEOUT:case ErrorDetails.KEY_LOAD_TIMEOUT:case ErrorDetails.LEVEL_LOAD_TIMEOUT:case ErrorDetails.MANIFEST_LOAD_TIMEOUT:return true;}return false;}function getRetryConfig(loadPolicy,error){const isTimeout=isTimeoutError(error);return loadPolicy.default[`${isTimeout?'timeout':'error'}Retry`];}function getRetryDelay(retryConfig,retryCount){// exponential backoff capped to max retry delay
const backoffFactor=retryConfig.backoff==='linear'?1:Math.pow(2,retryCount);return Math.min(backoffFactor*retryConfig.retryDelayMs,retryConfig.maxRetryDelayMs);}function getLoaderConfigWithoutReties(loderConfig){return _objectSpread2(_objectSpread2({},loderConfig),{errorRetry:null,timeoutRetry:null});}function shouldRetry(retryConfig,retryCount,isTimeout,loaderResponse){if(!retryConfig){return false;}const httpStatus=loaderResponse==null?void 0:loaderResponse.code;const retry=retryCount<retryConfig.maxNumRetry&&(retryForHttpStatus(httpStatus)||!!isTimeout);return retryConfig.shouldRetry?retryConfig.shouldRetry(retryConfig,retryCount,isTimeout,loaderResponse,retry):retry;}function retryForHttpStatus(httpStatus){// Do not retry on status 4xx, status 0 (CORS error), or undefined (decrypt/gap/parse error)
return httpStatus===0&&navigator.onLine===false||!!httpStatus&&(httpStatus<400||httpStatus>499);}const BinarySearch={/**
   * Searches for an item in an array which matches a certain condition.
   * This requires the condition to only match one item in the array,
   * and for the array to be ordered.
   *
   * @param list The array to search.
   * @param comparisonFn
   *      Called and provided a candidate item as the first argument.
   *      Should return:
   *          > -1 if the item should be located at a lower index than the provided item.
   *          > 1 if the item should be located at a higher index than the provided item.
   *          > 0 if the item is the item you're looking for.
   *
   * @returns the object if found, otherwise returns null
   */search:function(list,comparisonFn){let minIndex=0;let maxIndex=list.length-1;let currentIndex=null;let currentElement=null;while(minIndex<=maxIndex){currentIndex=(minIndex+maxIndex)/2|0;currentElement=list[currentIndex];const comparisonResult=comparisonFn(currentElement);if(comparisonResult>0){minIndex=currentIndex+1;}else if(comparisonResult<0){maxIndex=currentIndex-1;}else {return currentElement;}}return null;}};/**
 * Returns first fragment whose endPdt value exceeds the given PDT, or null.
 * @param fragments - The array of candidate fragments
 * @param PDTValue - The PDT value which must be exceeded
 * @param maxFragLookUpTolerance - The amount of time that a fragment's start/end can be within in order to be considered contiguous
 */function findFragmentByPDT(fragments,PDTValue,maxFragLookUpTolerance){if(PDTValue===null||!Array.isArray(fragments)||!fragments.length||!isFiniteNumber(PDTValue)){return null;}// if less than start
const startPDT=fragments[0].programDateTime;if(PDTValue<(startPDT||0)){return null;}const endPDT=fragments[fragments.length-1].endProgramDateTime;if(PDTValue>=(endPDT||0)){return null;}maxFragLookUpTolerance=maxFragLookUpTolerance||0;for(let seg=0;seg<fragments.length;++seg){const frag=fragments[seg];if(pdtWithinToleranceTest(PDTValue,maxFragLookUpTolerance,frag)){return frag;}}return null;}/**
 * Finds a fragment based on the SN of the previous fragment; or based on the needs of the current buffer.
 * This method compensates for small buffer gaps by applying a tolerance to the start of any candidate fragment, thus
 * breaking any traps which would cause the same fragment to be continuously selected within a small range.
 * @param fragPrevious - The last frag successfully appended
 * @param fragments - The array of candidate fragments
 * @param bufferEnd - The end of the contiguous buffered range the playhead is currently within
 * @param maxFragLookUpTolerance - The amount of time that a fragment's start/end can be within in order to be considered contiguous
 * @returns a matching fragment or null
 */function findFragmentByPTS(fragPrevious,fragments,bufferEnd=0,maxFragLookUpTolerance=0,nextFragLookupTolerance=0.005){let fragNext=null;if(fragPrevious){fragNext=fragments[fragPrevious.sn-fragments[0].sn+1]||null;// check for buffer-end rounding error
const bufferEdgeError=fragPrevious.endDTS-bufferEnd;if(bufferEdgeError>0&&bufferEdgeError<0.0000015){bufferEnd+=0.0000015;}}else if(bufferEnd===0&&fragments[0].start===0){fragNext=fragments[0];}// Prefer the next fragment if it's within tolerance
if(fragNext&&((!fragPrevious||fragPrevious.level===fragNext.level)&&fragmentWithinToleranceTest(bufferEnd,maxFragLookUpTolerance,fragNext)===0||fragmentWithinFastStartSwitch(fragNext,fragPrevious,Math.min(nextFragLookupTolerance,maxFragLookUpTolerance)))){return fragNext;}// We might be seeking past the tolerance so find the best match
const foundFragment=BinarySearch.search(fragments,fragmentWithinToleranceTest.bind(null,bufferEnd,maxFragLookUpTolerance));if(foundFragment&&(foundFragment!==fragPrevious||!fragNext)){return foundFragment;}// If no match was found return the next fragment after fragPrevious, or null
return fragNext;}function fragmentWithinFastStartSwitch(fragNext,fragPrevious,nextFragLookupTolerance){if(fragPrevious&&fragPrevious.start===0&&fragPrevious.level<fragNext.level&&(fragPrevious.endPTS||0)>0){const firstDuration=fragPrevious.tagList.reduce((duration,tag)=>{if(tag[0]==='INF'){duration+=parseFloat(tag[1]);}return duration;},nextFragLookupTolerance);return fragNext.start<=firstDuration;}return false;}/**
 * The test function used by the findFragmentBySn's BinarySearch to look for the best match to the current buffer conditions.
 * @param candidate - The fragment to test
 * @param bufferEnd - The end of the current buffered range the playhead is currently within
 * @param maxFragLookUpTolerance - The amount of time that a fragment's start can be within in order to be considered contiguous
 * @returns 0 if it matches, 1 if too low, -1 if too high
 */function fragmentWithinToleranceTest(bufferEnd=0,maxFragLookUpTolerance=0,candidate){// eagerly accept an accurate match (no tolerance)
if(candidate.start<=bufferEnd&&candidate.start+candidate.duration>bufferEnd){return 0;}// offset should be within fragment boundary - config.maxFragLookUpTolerance
// this is to cope with situations like
// bufferEnd = 9.991
// frag[Ø] : [0,10]
// frag[1] : [10,20]
// bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here
//              frag start               frag start+duration
//                  |-----------------------------|
//              <--->                         <--->
//  ...--------><-----------------------------><---------....
// previous frag         matching fragment         next frag
//  return -1             return 0                 return 1
// logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);
// Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments
const candidateLookupTolerance=Math.min(maxFragLookUpTolerance,candidate.duration+(candidate.deltaPTS?candidate.deltaPTS:0));if(candidate.start+candidate.duration-candidateLookupTolerance<=bufferEnd){return 1;}else if(candidate.start-candidateLookupTolerance>bufferEnd&&candidate.start){// if maxFragLookUpTolerance will have negative value then don't return -1 for first element
return -1;}return 0;}/**
 * The test function used by the findFragmentByPdt's BinarySearch to look for the best match to the current buffer conditions.
 * This function tests the candidate's program date time values, as represented in Unix time
 * @param candidate - The fragment to test
 * @param pdtBufferEnd - The Unix time representing the end of the current buffered range
 * @param maxFragLookUpTolerance - The amount of time that a fragment's start can be within in order to be considered contiguous
 * @returns true if contiguous, false otherwise
 */function pdtWithinToleranceTest(pdtBufferEnd,maxFragLookUpTolerance,candidate){const candidateLookupTolerance=Math.min(maxFragLookUpTolerance,candidate.duration+(candidate.deltaPTS?candidate.deltaPTS:0))*1000;// endProgramDateTime can be null, default to zero
const endProgramDateTime=candidate.endProgramDateTime||0;return endProgramDateTime-candidateLookupTolerance>pdtBufferEnd;}function findFragWithCC(fragments,cc){return BinarySearch.search(fragments,candidate=>{if(candidate.cc<cc){return 1;}else if(candidate.cc>cc){return -1;}else {return 0;}});}var NetworkErrorAction={DoNothing:0,SendEndCallback:1,SendAlternateToPenaltyBox:2,RemoveAlternatePermanently:3,InsertDiscontinuity:4,RetryRequest:5};var ErrorActionFlags={None:0,MoveAllAlternatesMatchingHost:1,MoveAllAlternatesMatchingHDCP:2,SwitchToSDR:4};// Reserved for future use
class ErrorController{constructor(hls){this.hls=void 0;this.playlistError=0;this.penalizedRenditions={};this.log=void 0;this.warn=void 0;this.error=void 0;this.hls=hls;this.log=logger$2.log.bind(logger$2,`[info]:`);this.warn=logger$2.warn.bind(logger$2,`[warning]:`);this.error=logger$2.error.bind(logger$2,`[error]:`);this.registerListeners();}registerListeners(){const hls=this.hls;hls.on(Events.ERROR,this.onError,this);hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.on(Events.LEVEL_UPDATED,this.onLevelUpdated,this);}unregisterListeners(){const hls=this.hls;if(!hls){return;}hls.off(Events.ERROR,this.onError,this);hls.off(Events.ERROR,this.onErrorOut,this);hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.off(Events.LEVEL_UPDATED,this.onLevelUpdated,this);}destroy(){this.unregisterListeners();// @ts-ignore
this.hls=null;this.penalizedRenditions={};}startLoad(startPosition){}stopLoad(){this.playlistError=0;}getVariantLevelIndex(frag){return (frag==null?void 0:frag.type)===PlaylistLevelType.MAIN?frag.level:this.hls.loadLevel;}onManifestLoading(){this.playlistError=0;this.penalizedRenditions={};}onLevelUpdated(){this.playlistError=0;}onError(event,data){var _data$frag,_data$level;if(data.fatal){return;}const hls=this.hls;const context=data.context;switch(data.details){case ErrorDetails.FRAG_LOAD_ERROR:case ErrorDetails.FRAG_LOAD_TIMEOUT:case ErrorDetails.KEY_LOAD_ERROR:case ErrorDetails.KEY_LOAD_TIMEOUT:data.errorAction=this.getFragRetryOrSwitchAction(data);return;case ErrorDetails.FRAG_PARSING_ERROR:// ignore empty segment errors marked as gap
if((_data$frag=data.frag)!=null&&_data$frag.gap){data.errorAction={action:NetworkErrorAction.DoNothing,flags:ErrorActionFlags.None};return;}// falls through
case ErrorDetails.FRAG_GAP:case ErrorDetails.FRAG_DECRYPT_ERROR:{// Switch level if possible, otherwise allow retry count to reach max error retries
data.errorAction=this.getFragRetryOrSwitchAction(data);data.errorAction.action=NetworkErrorAction.SendAlternateToPenaltyBox;return;}case ErrorDetails.LEVEL_EMPTY_ERROR:case ErrorDetails.LEVEL_PARSING_ERROR:{var _data$context,_data$context$levelDe;// Only retry when empty and live
const levelIndex=data.parent===PlaylistLevelType.MAIN?data.level:hls.loadLevel;if(data.details===ErrorDetails.LEVEL_EMPTY_ERROR&&!!((_data$context=data.context)!=null&&(_data$context$levelDe=_data$context.levelDetails)!=null&&_data$context$levelDe.live)){data.errorAction=this.getPlaylistRetryOrSwitchAction(data,levelIndex);}else {// Escalate to fatal if not retrying or switching
data.levelRetry=false;data.errorAction=this.getLevelSwitchAction(data,levelIndex);}}return;case ErrorDetails.LEVEL_LOAD_ERROR:case ErrorDetails.LEVEL_LOAD_TIMEOUT:if(typeof(context==null?void 0:context.level)==='number'){data.errorAction=this.getPlaylistRetryOrSwitchAction(data,context.level);}return;case ErrorDetails.AUDIO_TRACK_LOAD_ERROR:case ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:case ErrorDetails.SUBTITLE_LOAD_ERROR:case ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT:if(context){const level=hls.levels[hls.loadLevel];if(level&&(context.type===PlaylistContextType.AUDIO_TRACK&&level.hasAudioGroup(context.groupId)||context.type===PlaylistContextType.SUBTITLE_TRACK&&level.hasSubtitleGroup(context.groupId))){// Perform Pathway switch or Redundant failover if possible for fastest recovery
// otherwise allow playlist retry count to reach max error retries
data.errorAction=this.getPlaylistRetryOrSwitchAction(data,hls.loadLevel);data.errorAction.action=NetworkErrorAction.SendAlternateToPenaltyBox;data.errorAction.flags=ErrorActionFlags.MoveAllAlternatesMatchingHost;return;}}return;case ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED:{const level=hls.levels[hls.loadLevel];const restrictedHdcpLevel=level==null?void 0:level.attrs['HDCP-LEVEL'];if(restrictedHdcpLevel){data.errorAction={action:NetworkErrorAction.SendAlternateToPenaltyBox,flags:ErrorActionFlags.MoveAllAlternatesMatchingHDCP,hdcpLevel:restrictedHdcpLevel};}else {this.keySystemError(data);}}return;case ErrorDetails.BUFFER_ADD_CODEC_ERROR:case ErrorDetails.REMUX_ALLOC_ERROR:case ErrorDetails.BUFFER_APPEND_ERROR:data.errorAction=this.getLevelSwitchAction(data,(_data$level=data.level)!=null?_data$level:hls.loadLevel);return;case ErrorDetails.INTERNAL_EXCEPTION:case ErrorDetails.BUFFER_APPENDING_ERROR:case ErrorDetails.BUFFER_FULL_ERROR:case ErrorDetails.LEVEL_SWITCH_ERROR:case ErrorDetails.BUFFER_STALLED_ERROR:case ErrorDetails.BUFFER_SEEK_OVER_HOLE:case ErrorDetails.BUFFER_NUDGE_ON_STALL:data.errorAction={action:NetworkErrorAction.DoNothing,flags:ErrorActionFlags.None};return;}if(data.type===ErrorTypes.KEY_SYSTEM_ERROR){this.keySystemError(data);}}keySystemError(data){const levelIndex=this.getVariantLevelIndex(data.frag);// Do not retry level. Escalate to fatal if switching levels fails.
data.levelRetry=false;data.errorAction=this.getLevelSwitchAction(data,levelIndex);}getPlaylistRetryOrSwitchAction(data,levelIndex){const hls=this.hls;const retryConfig=getRetryConfig(hls.config.playlistLoadPolicy,data);const retryCount=this.playlistError++;const retry=shouldRetry(retryConfig,retryCount,isTimeoutError(data),data.response);if(retry){return {action:NetworkErrorAction.RetryRequest,flags:ErrorActionFlags.None,retryConfig,retryCount};}const errorAction=this.getLevelSwitchAction(data,levelIndex);if(retryConfig){errorAction.retryConfig=retryConfig;errorAction.retryCount=retryCount;}return errorAction;}getFragRetryOrSwitchAction(data){const hls=this.hls;// Share fragment error count accross media options (main, audio, subs)
// This allows for level based rendition switching when media option assets fail
const variantLevelIndex=this.getVariantLevelIndex(data.frag);const level=hls.levels[variantLevelIndex];const{fragLoadPolicy,keyLoadPolicy}=hls.config;const retryConfig=getRetryConfig(data.details.startsWith('key')?keyLoadPolicy:fragLoadPolicy,data);const fragmentErrors=hls.levels.reduce((acc,level)=>acc+level.fragmentError,0);// Switch levels when out of retried or level index out of bounds
if(level){if(data.details!==ErrorDetails.FRAG_GAP){level.fragmentError++;}const retry=shouldRetry(retryConfig,fragmentErrors,isTimeoutError(data),data.response);if(retry){return {action:NetworkErrorAction.RetryRequest,flags:ErrorActionFlags.None,retryConfig,retryCount:fragmentErrors};}}// Reach max retry count, or Missing level reference
// Switch to valid index
const errorAction=this.getLevelSwitchAction(data,variantLevelIndex);// Add retry details to allow skipping of FRAG_PARSING_ERROR
if(retryConfig){errorAction.retryConfig=retryConfig;errorAction.retryCount=fragmentErrors;}return errorAction;}getLevelSwitchAction(data,levelIndex){const hls=this.hls;if(levelIndex===null||levelIndex===undefined){levelIndex=hls.loadLevel;}const level=this.hls.levels[levelIndex];if(level){var _data$frag2,_data$context2;const errorDetails=data.details;level.loadError++;if(errorDetails===ErrorDetails.BUFFER_APPEND_ERROR){level.fragmentError++;}// Search for next level to retry
let nextLevel=-1;const{levels,loadLevel,minAutoLevel,maxAutoLevel}=hls;if(!hls.autoLevelEnabled){hls.loadLevel=-1;}const fragErrorType=(_data$frag2=data.frag)==null?void 0:_data$frag2.type;// Find alternate audio codec if available on audio codec error
const isAudioCodecError=fragErrorType===PlaylistLevelType.AUDIO&&errorDetails===ErrorDetails.FRAG_PARSING_ERROR||data.sourceBufferName==='audio'&&(errorDetails===ErrorDetails.BUFFER_ADD_CODEC_ERROR||errorDetails===ErrorDetails.BUFFER_APPEND_ERROR);const findAudioCodecAlternate=isAudioCodecError&&levels.some(({audioCodec})=>level.audioCodec!==audioCodec);// Find alternate video codec if available on video codec error
const isVideoCodecError=data.sourceBufferName==='video'&&(errorDetails===ErrorDetails.BUFFER_ADD_CODEC_ERROR||errorDetails===ErrorDetails.BUFFER_APPEND_ERROR);const findVideoCodecAlternate=isVideoCodecError&&levels.some(({codecSet,audioCodec})=>level.codecSet!==codecSet&&level.audioCodec===audioCodec);const{type:playlistErrorType,groupId:playlistErrorGroupId}=(_data$context2=data.context)!=null?_data$context2:{};for(let i=levels.length;i--;){const candidate=(i+loadLevel)%levels.length;if(candidate!==loadLevel&&candidate>=minAutoLevel&&candidate<=maxAutoLevel&&levels[candidate].loadError===0){var _level$audioGroups,_level$subtitleGroups;const levelCandidate=levels[candidate];// Skip level switch if GAP tag is found in next level at same position
if(errorDetails===ErrorDetails.FRAG_GAP&&fragErrorType===PlaylistLevelType.MAIN&&data.frag){const levelDetails=levels[candidate].details;if(levelDetails){const fragCandidate=findFragmentByPTS(data.frag,levelDetails.fragments,data.frag.start);if(fragCandidate!=null&&fragCandidate.gap){continue;}}}else if(playlistErrorType===PlaylistContextType.AUDIO_TRACK&&levelCandidate.hasAudioGroup(playlistErrorGroupId)||playlistErrorType===PlaylistContextType.SUBTITLE_TRACK&&levelCandidate.hasSubtitleGroup(playlistErrorGroupId)){// For audio/subs playlist errors find another group ID or fallthrough to redundant fail-over
continue;}else if(fragErrorType===PlaylistLevelType.AUDIO&&(_level$audioGroups=level.audioGroups)!=null&&_level$audioGroups.some(groupId=>levelCandidate.hasAudioGroup(groupId))||fragErrorType===PlaylistLevelType.SUBTITLE&&(_level$subtitleGroups=level.subtitleGroups)!=null&&_level$subtitleGroups.some(groupId=>levelCandidate.hasSubtitleGroup(groupId))||findAudioCodecAlternate&&level.audioCodec===levelCandidate.audioCodec||!findAudioCodecAlternate&&level.audioCodec!==levelCandidate.audioCodec||findVideoCodecAlternate&&level.codecSet===levelCandidate.codecSet){// For video/audio/subs frag errors find another group ID or fallthrough to redundant fail-over
continue;}nextLevel=candidate;break;}}if(nextLevel>-1&&hls.loadLevel!==nextLevel){data.levelRetry=true;this.playlistError=0;return {action:NetworkErrorAction.SendAlternateToPenaltyBox,flags:ErrorActionFlags.None,nextAutoLevel:nextLevel};}}// No levels to switch / Manual level selection / Level not found
// Resolve with Pathway switch, Redundant fail-over, or stay on lowest Level
return {action:NetworkErrorAction.SendAlternateToPenaltyBox,flags:ErrorActionFlags.MoveAllAlternatesMatchingHost};}onErrorOut(event,data){var _data$errorAction;switch((_data$errorAction=data.errorAction)==null?void 0:_data$errorAction.action){case NetworkErrorAction.DoNothing:break;case NetworkErrorAction.SendAlternateToPenaltyBox:this.sendAlternateToPenaltyBox(data);if(!data.errorAction.resolved&&data.details!==ErrorDetails.FRAG_GAP){data.fatal=true;}else if(/MediaSource readyState: ended/.test(data.error.message)){this.warn(`MediaSource ended after "${data.sourceBufferName}" sourceBuffer append error. Attempting to recover from media error.`);this.hls.recoverMediaError();}break;}if(data.fatal){this.hls.stopLoad();return;}}sendAlternateToPenaltyBox(data){const hls=this.hls;const errorAction=data.errorAction;if(!errorAction){return;}const{flags,hdcpLevel,nextAutoLevel}=errorAction;switch(flags){case ErrorActionFlags.None:this.switchLevel(data,nextAutoLevel);break;case ErrorActionFlags.MoveAllAlternatesMatchingHDCP:if(hdcpLevel){hls.maxHdcpLevel=HdcpLevels[HdcpLevels.indexOf(hdcpLevel)-1];errorAction.resolved=true;}this.warn(`Restricting playback to HDCP-LEVEL of "${hls.maxHdcpLevel}" or lower`);break;}// If not resolved by previous actions try to switch to next level
if(!errorAction.resolved){this.switchLevel(data,nextAutoLevel);}}switchLevel(data,levelIndex){if(levelIndex!==undefined&&data.errorAction){this.warn(`switching to level ${levelIndex} after ${data.details}`);this.hls.nextAutoLevel=levelIndex;data.errorAction.resolved=true;// Stream controller is responsible for this but won't switch on false start
this.hls.nextLoadLevel=this.hls.nextAutoLevel;}}}class BasePlaylistController{constructor(hls,logPrefix){this.hls=void 0;this.timer=-1;this.requestScheduled=-1;this.canLoad=false;this.log=void 0;this.warn=void 0;this.log=logger$2.log.bind(logger$2,`${logPrefix}:`);this.warn=logger$2.warn.bind(logger$2,`${logPrefix}:`);this.hls=hls;}destroy(){this.clearTimer();// @ts-ignore
this.hls=this.log=this.warn=null;}clearTimer(){if(this.timer!==-1){self.clearTimeout(this.timer);this.timer=-1;}}startLoad(){this.canLoad=true;this.requestScheduled=-1;this.loadPlaylist();}stopLoad(){this.canLoad=false;this.clearTimer();}switchParams(playlistUri,previous,current){const renditionReports=previous==null?void 0:previous.renditionReports;if(renditionReports){let foundIndex=-1;for(let i=0;i<renditionReports.length;i++){const attr=renditionReports[i];let uri;try{uri=new self.URL(attr.URI,previous.url).href;}catch(error){logger$2.warn(`Could not construct new URL for Rendition Report: ${error}`);uri=attr.URI||'';}// Use exact match. Otherwise, the last partial match, if any, will be used
// (Playlist URI includes a query string that the Rendition Report does not)
if(uri===playlistUri){foundIndex=i;break;}else if(uri===playlistUri.substring(0,uri.length)){foundIndex=i;}}if(foundIndex!==-1){const attr=renditionReports[foundIndex];const msn=parseInt(attr['LAST-MSN'])||(previous==null?void 0:previous.lastPartSn);let part=parseInt(attr['LAST-PART'])||(previous==null?void 0:previous.lastPartIndex);if(this.hls.config.lowLatencyMode){const currentGoal=Math.min(previous.age-previous.partTarget,previous.targetduration);if(part>=0&&currentGoal>previous.partTarget){part+=1;}}const skip=current&&getSkipValue(current);return new HlsUrlParameters(msn,part>=0?part:undefined,skip);}}}loadPlaylist(hlsUrlParameters){if(this.requestScheduled===-1){this.requestScheduled=self.performance.now();}// Loading is handled by the subclasses
}shouldLoadPlaylist(playlist){return this.canLoad&&!!playlist&&!!playlist.url&&(!playlist.details||playlist.details.live);}shouldReloadPlaylist(playlist){return this.timer===-1&&this.requestScheduled===-1&&this.shouldLoadPlaylist(playlist);}playlistLoaded(index,data,previousDetails){const{details,stats}=data;// Set last updated date-time
const now=self.performance.now();const elapsed=stats.loading.first?Math.max(0,now-stats.loading.first):0;details.advancedDateTime=Date.now()-elapsed;// if current playlist is a live playlist, arm a timer to reload it
if(details.live||previousDetails!=null&&previousDetails.live){details.reloaded(previousDetails);if(previousDetails){this.log(`live playlist ${index} ${details.advanced?'REFRESHED '+details.lastPartSn+'-'+details.lastPartIndex:details.updated?'UPDATED':'MISSED'}`);}// Merge live playlists to adjust fragment starts and fill in delta playlist skipped segments
if(previousDetails&&details.fragments.length>0){mergeDetails(previousDetails,details);}if(!this.canLoad||!details.live){return;}let deliveryDirectives;let msn=undefined;let part=undefined;if(details.canBlockReload&&details.endSN&&details.advanced){// Load level with LL-HLS delivery directives
const lowLatencyMode=this.hls.config.lowLatencyMode;const lastPartSn=details.lastPartSn;const endSn=details.endSN;const lastPartIndex=details.lastPartIndex;const hasParts=lastPartIndex!==-1;const lastPart=lastPartSn===endSn;// When low latency mode is disabled, we'll skip part requests once the last part index is found
const nextSnStartIndex=lowLatencyMode?0:lastPartIndex;if(hasParts){msn=lastPart?endSn+1:lastPartSn;part=lastPart?nextSnStartIndex:lastPartIndex+1;}else {msn=endSn+1;}// Low-Latency CDN Tune-in: "age" header and time since load indicates we're behind by more than one part
// Update directives to obtain the Playlist that has the estimated additional duration of media
const lastAdvanced=details.age;const cdnAge=lastAdvanced+details.ageHeader;let currentGoal=Math.min(cdnAge-details.partTarget,details.targetduration*1.5);if(currentGoal>0){if(previousDetails&&currentGoal>previousDetails.tuneInGoal){// If we attempted to get the next or latest playlist update, but currentGoal increased,
// then we either can't catchup, or the "age" header cannot be trusted.
this.warn(`CDN Tune-in goal increased from: ${previousDetails.tuneInGoal} to: ${currentGoal} with playlist age: ${details.age}`);currentGoal=0;}else {const segments=Math.floor(currentGoal/details.targetduration);msn+=segments;if(part!==undefined){const parts=Math.round(currentGoal%details.targetduration/details.partTarget);part+=parts;}this.log(`CDN Tune-in age: ${details.ageHeader}s last advanced ${lastAdvanced.toFixed(2)}s goal: ${currentGoal} skip sn ${segments} to part ${part}`);}details.tuneInGoal=currentGoal;}deliveryDirectives=this.getDeliveryDirectives(details,data.deliveryDirectives,msn,part);if(lowLatencyMode||!lastPart){this.loadPlaylist(deliveryDirectives);return;}}else if(details.canBlockReload||details.canSkipUntil){deliveryDirectives=this.getDeliveryDirectives(details,data.deliveryDirectives,msn,part);}const bufferInfo=this.hls.mainForwardBufferInfo;const position=bufferInfo?bufferInfo.end-bufferInfo.len:0;const distanceToLiveEdgeMs=(details.edge-position)*1000;const reloadInterval=computeReloadInterval(details,distanceToLiveEdgeMs);if(details.updated&&now>this.requestScheduled+reloadInterval){this.requestScheduled=stats.loading.start;}if(msn!==undefined&&details.canBlockReload){this.requestScheduled=stats.loading.first+reloadInterval-(details.partTarget*1000||1000);}else if(this.requestScheduled===-1||this.requestScheduled+reloadInterval<now){this.requestScheduled=now;}else if(this.requestScheduled-now<=0){this.requestScheduled+=reloadInterval;}let estimatedTimeUntilUpdate=this.requestScheduled-now;estimatedTimeUntilUpdate=Math.max(0,estimatedTimeUntilUpdate);this.log(`reload live playlist ${index} in ${Math.round(estimatedTimeUntilUpdate)} ms`);// this.log(
//   `live reload ${details.updated ? 'REFRESHED' : 'MISSED'}
// reload in ${estimatedTimeUntilUpdate / 1000}
// round trip ${(stats.loading.end - stats.loading.start) / 1000}
// diff ${
//   (reloadInterval -
//     (estimatedTimeUntilUpdate +
//       stats.loading.end -
//       stats.loading.start)) /
//   1000
// }
// reload interval ${reloadInterval / 1000}
// target duration ${details.targetduration}
// distance to edge ${distanceToLiveEdgeMs / 1000}`
// );
this.timer=self.setTimeout(()=>this.loadPlaylist(deliveryDirectives),estimatedTimeUntilUpdate);}else {this.clearTimer();}}getDeliveryDirectives(details,previousDeliveryDirectives,msn,part){let skip=getSkipValue(details);if(previousDeliveryDirectives!=null&&previousDeliveryDirectives.skip&&details.deltaUpdateFailed){msn=previousDeliveryDirectives.msn;part=previousDeliveryDirectives.part;skip=HlsSkip.No;}return new HlsUrlParameters(msn,part,skip);}checkRetry(errorEvent){const errorDetails=errorEvent.details;const isTimeout=isTimeoutError(errorEvent);const errorAction=errorEvent.errorAction;const{action,retryCount=0,retryConfig}=errorAction||{};const retry=!!errorAction&&!!retryConfig&&(action===NetworkErrorAction.RetryRequest||!errorAction.resolved&&action===NetworkErrorAction.SendAlternateToPenaltyBox);if(retry){var _errorEvent$context;this.requestScheduled=-1;if(retryCount>=retryConfig.maxNumRetry){return false;}if(isTimeout&&(_errorEvent$context=errorEvent.context)!=null&&_errorEvent$context.deliveryDirectives){// The LL-HLS request already timed out so retry immediately
this.warn(`Retrying playlist loading ${retryCount+1}/${retryConfig.maxNumRetry} after "${errorDetails}" without delivery-directives`);this.loadPlaylist();}else {const delay=getRetryDelay(retryConfig,retryCount);// Schedule level/track reload
this.timer=self.setTimeout(()=>this.loadPlaylist(),delay);this.warn(`Retrying playlist loading ${retryCount+1}/${retryConfig.maxNumRetry} after "${errorDetails}" in ${delay}ms`);}// `levelRetry = true` used to inform other controllers that a retry is happening
errorEvent.levelRetry=true;errorAction.resolved=true;}return retry;}}/*
 * compute an Exponential Weighted moving average
 * - https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
 *  - heavily inspired from shaka-player
 */class EWMA{//  About half of the estimated value will be from the last |halfLife| samples by weight.
constructor(halfLife,estimate=0,weight=0){this.halfLife=void 0;this.alpha_=void 0;this.estimate_=void 0;this.totalWeight_=void 0;this.halfLife=halfLife;// Larger values of alpha expire historical data more slowly.
this.alpha_=halfLife?Math.exp(Math.log(0.5)/halfLife):0;this.estimate_=estimate;this.totalWeight_=weight;}sample(weight,value){const adjAlpha=Math.pow(this.alpha_,weight);this.estimate_=value*(1-adjAlpha)+adjAlpha*this.estimate_;this.totalWeight_+=weight;}getTotalWeight(){return this.totalWeight_;}getEstimate(){if(this.alpha_){const zeroFactor=1-Math.pow(this.alpha_,this.totalWeight_);if(zeroFactor){return this.estimate_/zeroFactor;}}return this.estimate_;}}/*
 * EWMA Bandwidth Estimator
 *  - heavily inspired from shaka-player
 * Tracks bandwidth samples and estimates available bandwidth.
 * Based on the minimum of two exponentially-weighted moving averages with
 * different half-lives.
 */class EwmaBandWidthEstimator{constructor(slow,fast,defaultEstimate,defaultTTFB=100){this.defaultEstimate_=void 0;this.minWeight_=void 0;this.minDelayMs_=void 0;this.slow_=void 0;this.fast_=void 0;this.defaultTTFB_=void 0;this.ttfb_=void 0;this.defaultEstimate_=defaultEstimate;this.minWeight_=0.001;this.minDelayMs_=50;this.slow_=new EWMA(slow);this.fast_=new EWMA(fast);this.defaultTTFB_=defaultTTFB;this.ttfb_=new EWMA(slow);}update(slow,fast){const{slow_,fast_,ttfb_}=this;if(slow_.halfLife!==slow){this.slow_=new EWMA(slow,slow_.getEstimate(),slow_.getTotalWeight());}if(fast_.halfLife!==fast){this.fast_=new EWMA(fast,fast_.getEstimate(),fast_.getTotalWeight());}if(ttfb_.halfLife!==slow){this.ttfb_=new EWMA(slow,ttfb_.getEstimate(),ttfb_.getTotalWeight());}}sample(durationMs,numBytes){durationMs=Math.max(durationMs,this.minDelayMs_);const numBits=8*numBytes;// weight is duration in seconds
const durationS=durationMs/1000;// value is bandwidth in bits/s
const bandwidthInBps=numBits/durationS;this.fast_.sample(durationS,bandwidthInBps);this.slow_.sample(durationS,bandwidthInBps);}sampleTTFB(ttfb){// weight is frequency curve applied to TTFB in seconds
// (longer times have less weight with expected input under 1 second)
const seconds=ttfb/1000;const weight=Math.sqrt(2)*Math.exp(-Math.pow(seconds,2)/2);this.ttfb_.sample(weight,Math.max(ttfb,5));}canEstimate(){return this.fast_.getTotalWeight()>=this.minWeight_;}getEstimate(){if(this.canEstimate()){// console.log('slow estimate:'+ Math.round(this.slow_.getEstimate()));
// console.log('fast estimate:'+ Math.round(this.fast_.getEstimate()));
// Take the minimum of these two estimates.  This should have the effect of
// adapting down quickly, but up more slowly.
return Math.min(this.fast_.getEstimate(),this.slow_.getEstimate());}else {return this.defaultEstimate_;}}getEstimateTTFB(){if(this.ttfb_.getTotalWeight()>=this.minWeight_){return this.ttfb_.getEstimate();}else {return this.defaultTTFB_;}}destroy(){}}const SUPPORTED_INFO_DEFAULT={supported:true,configurations:[],decodingInfoResults:[{supported:true,powerEfficient:true,smooth:true}]};const SUPPORTED_INFO_CACHE={};function requiresMediaCapabilitiesDecodingInfo(level,audioTracksByGroup,currentVideoRange,currentFrameRate,currentBw,audioPreference){// Only test support when configuration is exceeds minimum options
const audioGroups=level.audioCodec?level.audioGroups:null;const audioCodecPreference=audioPreference==null?void 0:audioPreference.audioCodec;const channelsPreference=audioPreference==null?void 0:audioPreference.channels;const maxChannels=channelsPreference?parseInt(channelsPreference):audioCodecPreference?Infinity:2;let audioChannels=null;if(audioGroups!=null&&audioGroups.length){try{if(audioGroups.length===1&&audioGroups[0]){audioChannels=audioTracksByGroup.groups[audioGroups[0]].channels;}else {audioChannels=audioGroups.reduce((acc,groupId)=>{if(groupId){const audioTrackGroup=audioTracksByGroup.groups[groupId];if(!audioTrackGroup){throw new Error(`Audio track group ${groupId} not found`);}// Sum all channel key values
Object.keys(audioTrackGroup.channels).forEach(key=>{acc[key]=(acc[key]||0)+audioTrackGroup.channels[key];});}return acc;},{2:0});}}catch(error){return true;}}return level.videoCodec!==undefined&&(level.width>1920&&level.height>1088||level.height>1920&&level.width>1088||level.frameRate>Math.max(currentFrameRate,30)||level.videoRange!=='SDR'&&level.videoRange!==currentVideoRange||level.bitrate>Math.max(currentBw,8e6))||!!audioChannels&&isFiniteNumber(maxChannels)&&Object.keys(audioChannels).some(channels=>parseInt(channels)>maxChannels);}function getMediaDecodingInfoPromise(level,audioTracksByGroup,mediaCapabilities){const videoCodecs=level.videoCodec;const audioCodecs=level.audioCodec;if(!videoCodecs||!audioCodecs||!mediaCapabilities){return Promise.resolve(SUPPORTED_INFO_DEFAULT);}const baseVideoConfiguration={width:level.width,height:level.height,bitrate:Math.ceil(Math.max(level.bitrate*0.9,level.averageBitrate)),// Assume a framerate of 30fps since MediaCapabilities will not accept Level default of 0.
framerate:level.frameRate||30};const videoRange=level.videoRange;if(videoRange!=='SDR'){baseVideoConfiguration.transferFunction=videoRange.toLowerCase();}const configurations=videoCodecs.split(',').map(videoCodec=>({type:'media-source',video:_objectSpread2(_objectSpread2({},baseVideoConfiguration),{},{contentType:mimeTypeForCodec(videoCodec,'video')})}));if(audioCodecs&&level.audioGroups){level.audioGroups.forEach(audioGroupId=>{var _audioTracksByGroup$g;if(!audioGroupId){return;}(_audioTracksByGroup$g=audioTracksByGroup.groups[audioGroupId])==null?void 0:_audioTracksByGroup$g.tracks.forEach(audioTrack=>{if(audioTrack.groupId===audioGroupId){const channels=audioTrack.channels||'';const channelsNumber=parseFloat(channels);if(isFiniteNumber(channelsNumber)&&channelsNumber>2){configurations.push.apply(configurations,audioCodecs.split(',').map(audioCodec=>({type:'media-source',audio:{contentType:mimeTypeForCodec(audioCodec,'audio'),channels:''+channelsNumber// spatialRendering:
//   audioCodec === 'ec-3' && channels.indexOf('JOC'),
}})));}}});});}return Promise.all(configurations.map(configuration=>{// Cache MediaCapabilities promises
const decodingInfoKey=getMediaDecodingInfoKey(configuration);return SUPPORTED_INFO_CACHE[decodingInfoKey]||(SUPPORTED_INFO_CACHE[decodingInfoKey]=mediaCapabilities.decodingInfo(configuration));})).then(decodingInfoResults=>({supported:!decodingInfoResults.some(info=>!info.supported),configurations,decodingInfoResults})).catch(error=>({supported:false,configurations,decodingInfoResults:[],error}));}function getMediaDecodingInfoKey(config){const{audio,video}=config;const mediaConfig=video||audio;if(mediaConfig){const codec=mediaConfig.contentType.split('"')[1];if(video){return `r${video.height}x${video.width}f${Math.ceil(video.framerate)}${video.transferFunction||'sd'}_${codec}_${Math.ceil(video.bitrate/1e5)}`;}if(audio){return `c${audio.channels}${audio.spatialRendering?'s':'n'}_${codec}`;}}return '';}/**
 * @returns Whether we can detect and validate HDR capability within the window context
 */function isHdrSupported(){if(typeof matchMedia==='function'){const mediaQueryList=matchMedia('(dynamic-range: high)');const badQuery=matchMedia('bad query');if(mediaQueryList.media!==badQuery.media){return mediaQueryList.matches===true;}}return false;}/**
 * Sanitizes inputs to return the active video selection options for HDR/SDR.
 * When both inputs are null:
 *
 *    `{ preferHDR: false, allowedVideoRanges: [] }`
 *
 * When `currentVideoRange` non-null, maintain the active range:
 *
 *    `{ preferHDR: currentVideoRange !== 'SDR', allowedVideoRanges: [currentVideoRange] }`
 *
 * When VideoSelectionOption non-null:
 *
 *  - Allow all video ranges if `allowedVideoRanges` unspecified.
 *  - If `preferHDR` is non-null use the value to filter `allowedVideoRanges`.
 *  - Else check window for HDR support and set `preferHDR` to the result.
 *
 * @param currentVideoRange
 * @param videoPreference
 */function getVideoSelectionOptions(currentVideoRange,videoPreference){let preferHDR=false;let allowedVideoRanges=[];if(currentVideoRange){preferHDR=currentVideoRange!=='SDR';allowedVideoRanges=[currentVideoRange];}if(videoPreference){allowedVideoRanges=videoPreference.allowedVideoRanges||VideoRangeValues.slice(0);preferHDR=videoPreference.preferHDR!==undefined?videoPreference.preferHDR:isHdrSupported();if(preferHDR){allowedVideoRanges=allowedVideoRanges.filter(range=>range!=='SDR');}else {allowedVideoRanges=['SDR'];}}return {preferHDR,allowedVideoRanges};}function getStartCodecTier(codecTiers,currentVideoRange,currentBw,audioPreference,videoPreference){const codecSets=Object.keys(codecTiers);const channelsPreference=audioPreference==null?void 0:audioPreference.channels;const audioCodecPreference=audioPreference==null?void 0:audioPreference.audioCodec;const preferStereo=channelsPreference&&parseInt(channelsPreference)===2;// Use first level set to determine stereo, and minimum resolution and framerate
let hasStereo=true;let hasCurrentVideoRange=false;let minHeight=Infinity;let minFramerate=Infinity;let minBitrate=Infinity;let selectedScore=0;let videoRanges=[];const{preferHDR,allowedVideoRanges}=getVideoSelectionOptions(currentVideoRange,videoPreference);for(let i=codecSets.length;i--;){const tier=codecTiers[codecSets[i]];hasStereo=tier.channels[2]>0;minHeight=Math.min(minHeight,tier.minHeight);minFramerate=Math.min(minFramerate,tier.minFramerate);minBitrate=Math.min(minBitrate,tier.minBitrate);const matchingVideoRanges=allowedVideoRanges.filter(range=>tier.videoRanges[range]>0);if(matchingVideoRanges.length>0){hasCurrentVideoRange=true;videoRanges=matchingVideoRanges;}}minHeight=isFiniteNumber(minHeight)?minHeight:0;minFramerate=isFiniteNumber(minFramerate)?minFramerate:0;const maxHeight=Math.max(1080,minHeight);const maxFramerate=Math.max(30,minFramerate);minBitrate=isFiniteNumber(minBitrate)?minBitrate:currentBw;currentBw=Math.max(minBitrate,currentBw);// If there are no variants with matching preference, set currentVideoRange to undefined
if(!hasCurrentVideoRange){currentVideoRange=undefined;videoRanges=[];}const codecSet=codecSets.reduce((selected,candidate)=>{// Remove candiates which do not meet bitrate, default audio, stereo or channels preference, 1080p or lower, 30fps or lower, or SDR/HDR selection if present
const candidateTier=codecTiers[candidate];if(candidate===selected){return selected;}if(candidateTier.minBitrate>currentBw){logStartCodecCandidateIgnored(candidate,`min bitrate of ${candidateTier.minBitrate} > current estimate of ${currentBw}`);return selected;}if(!candidateTier.hasDefaultAudio){logStartCodecCandidateIgnored(candidate,`no renditions with default or auto-select sound found`);return selected;}if(audioCodecPreference&&candidate.indexOf(audioCodecPreference.substring(0,4))%5!==0){logStartCodecCandidateIgnored(candidate,`audio codec preference "${audioCodecPreference}" not found`);return selected;}if(channelsPreference&&!preferStereo){if(!candidateTier.channels[channelsPreference]){logStartCodecCandidateIgnored(candidate,`no renditions with ${channelsPreference} channel sound found (channels options: ${Object.keys(candidateTier.channels)})`);return selected;}}else if((!audioCodecPreference||preferStereo)&&hasStereo&&candidateTier.channels['2']===0){logStartCodecCandidateIgnored(candidate,`no renditions with stereo sound found`);return selected;}if(candidateTier.minHeight>maxHeight){logStartCodecCandidateIgnored(candidate,`min resolution of ${candidateTier.minHeight} > maximum of ${maxHeight}`);return selected;}if(candidateTier.minFramerate>maxFramerate){logStartCodecCandidateIgnored(candidate,`min framerate of ${candidateTier.minFramerate} > maximum of ${maxFramerate}`);return selected;}if(!videoRanges.some(range=>candidateTier.videoRanges[range]>0)){logStartCodecCandidateIgnored(candidate,`no variants with VIDEO-RANGE of ${JSON.stringify(videoRanges)} found`);return selected;}if(candidateTier.maxScore<selectedScore){logStartCodecCandidateIgnored(candidate,`max score of ${candidateTier.maxScore} < selected max of ${selectedScore}`);return selected;}// Remove candiates with less preferred codecs or more errors
if(selected&&(codecsSetSelectionPreferenceValue(candidate)>=codecsSetSelectionPreferenceValue(selected)||candidateTier.fragmentError>codecTiers[selected].fragmentError)){return selected;}selectedScore=candidateTier.maxScore;return candidate;},undefined);return {codecSet,videoRanges,preferHDR,minFramerate,minBitrate};}function logStartCodecCandidateIgnored(codeSet,reason){logger$2.log(`[abr] start candidates with "${codeSet}" ignored because ${reason}`);}function getAudioTracksByGroup(allAudioTracks){return allAudioTracks.reduce((audioTracksByGroup,track)=>{let trackGroup=audioTracksByGroup.groups[track.groupId];if(!trackGroup){trackGroup=audioTracksByGroup.groups[track.groupId]={tracks:[],channels:{2:0},hasDefault:false,hasAutoSelect:false};}trackGroup.tracks.push(track);const channelsKey=track.channels||'2';trackGroup.channels[channelsKey]=(trackGroup.channels[channelsKey]||0)+1;trackGroup.hasDefault=trackGroup.hasDefault||track.default;trackGroup.hasAutoSelect=trackGroup.hasAutoSelect||track.autoselect;if(trackGroup.hasDefault){audioTracksByGroup.hasDefaultAudio=true;}if(trackGroup.hasAutoSelect){audioTracksByGroup.hasAutoSelectAudio=true;}return audioTracksByGroup;},{hasDefaultAudio:false,hasAutoSelectAudio:false,groups:{}});}function getCodecTiers(levels,audioTracksByGroup,minAutoLevel,maxAutoLevel){return levels.slice(minAutoLevel,maxAutoLevel+1).reduce((tiers,level)=>{if(!level.codecSet){return tiers;}const audioGroups=level.audioGroups;let tier=tiers[level.codecSet];if(!tier){tiers[level.codecSet]=tier={minBitrate:Infinity,minHeight:Infinity,minFramerate:Infinity,maxScore:0,videoRanges:{SDR:0},channels:{'2':0},hasDefaultAudio:!audioGroups,fragmentError:0};}tier.minBitrate=Math.min(tier.minBitrate,level.bitrate);const lesserWidthOrHeight=Math.min(level.height,level.width);tier.minHeight=Math.min(tier.minHeight,lesserWidthOrHeight);tier.minFramerate=Math.min(tier.minFramerate,level.frameRate);tier.maxScore=Math.max(tier.maxScore,level.score);tier.fragmentError+=level.fragmentError;tier.videoRanges[level.videoRange]=(tier.videoRanges[level.videoRange]||0)+1;if(audioGroups){audioGroups.forEach(audioGroupId=>{if(!audioGroupId){return;}const audioGroup=audioTracksByGroup.groups[audioGroupId];if(!audioGroup){return;}// Default audio is any group with DEFAULT=YES, or if missing then any group with AUTOSELECT=YES, or all variants
tier.hasDefaultAudio=tier.hasDefaultAudio||audioTracksByGroup.hasDefaultAudio?audioGroup.hasDefault:audioGroup.hasAutoSelect||!audioTracksByGroup.hasDefaultAudio&&!audioTracksByGroup.hasAutoSelectAudio;Object.keys(audioGroup.channels).forEach(channels=>{tier.channels[channels]=(tier.channels[channels]||0)+audioGroup.channels[channels];});});}return tiers;},{});}function findMatchingOption(option,tracks,matchPredicate){if('attrs'in option){const index=tracks.indexOf(option);if(index!==-1){return index;}}for(let i=0;i<tracks.length;i++){const track=tracks[i];if(matchesOption(option,track,matchPredicate)){return i;}}return -1;}function matchesOption(option,track,matchPredicate){const{groupId,name,lang,assocLang,default:isDefault}=option;const forced=option.forced;return (groupId===undefined||track.groupId===groupId)&&(name===undefined||track.name===name)&&(lang===undefined||track.lang===lang)&&(lang===undefined||track.assocLang===assocLang)&&(isDefault===undefined||track.default===isDefault)&&(forced===undefined||track.forced===forced)&&(!('characteristics'in option)||characteristicsMatch(option.characteristics||'',track.characteristics))&&(matchPredicate===undefined||matchPredicate(option,track));}function characteristicsMatch(characteristicsA,characteristicsB=''){const arrA=characteristicsA.split(',');const arrB=characteristicsB.split(',');// Expects each item to be unique:
return arrA.length===arrB.length&&!arrA.some(el=>arrB.indexOf(el)===-1);}function audioMatchPredicate(option,track){const{audioCodec,channels}=option;return (audioCodec===undefined||(track.audioCodec||'').substring(0,4)===audioCodec.substring(0,4))&&(channels===undefined||channels===(track.channels||'2'));}function findClosestLevelWithAudioGroup(option,levels,allAudioTracks,searchIndex,matchPredicate){const currentLevel=levels[searchIndex];// Are there variants with same URI as current level?
// If so, find a match that does not require any level URI change
const variants=levels.reduce((variantMap,level,index)=>{const uri=level.uri;const renditions=variantMap[uri]||(variantMap[uri]=[]);renditions.push(index);return variantMap;},{});const renditions=variants[currentLevel.uri];if(renditions.length>1){searchIndex=Math.max.apply(Math,renditions);}// Find best match
const currentVideoRange=currentLevel.videoRange;const currentFrameRate=currentLevel.frameRate;const currentVideoCodec=currentLevel.codecSet.substring(0,4);const matchingVideo=searchDownAndUpList(levels,searchIndex,level=>{if(level.videoRange!==currentVideoRange||level.frameRate!==currentFrameRate||level.codecSet.substring(0,4)!==currentVideoCodec){return false;}const audioGroups=level.audioGroups;const tracks=allAudioTracks.filter(track=>!audioGroups||audioGroups.indexOf(track.groupId)!==-1);return findMatchingOption(option,tracks,matchPredicate)>-1;});if(matchingVideo>-1){return matchingVideo;}return searchDownAndUpList(levels,searchIndex,level=>{const audioGroups=level.audioGroups;const tracks=allAudioTracks.filter(track=>!audioGroups||audioGroups.indexOf(track.groupId)!==-1);return findMatchingOption(option,tracks,matchPredicate)>-1;});}function searchDownAndUpList(arr,searchIndex,predicate){for(let i=searchIndex;i>-1;i--){if(predicate(arr[i])){return i;}}for(let i=searchIndex+1;i<arr.length;i++){if(predicate(arr[i])){return i;}}return -1;}class AbrController{constructor(_hls){this.hls=void 0;this.lastLevelLoadSec=0;this.lastLoadedFragLevel=-1;this.firstSelection=-1;this._nextAutoLevel=-1;this.nextAutoLevelKey='';this.audioTracksByGroup=null;this.codecTiers=null;this.timer=-1;this.fragCurrent=null;this.partCurrent=null;this.bitrateTestDelay=0;this.bwEstimator=void 0;/*
        This method monitors the download rate of the current fragment, and will downswitch if that fragment will not load
        quickly enough to prevent underbuffering
      */this._abandonRulesCheck=()=>{const{fragCurrent:frag,partCurrent:part,hls}=this;const{autoLevelEnabled,media}=hls;if(!frag||!media){return;}const now=performance.now();const stats=part?part.stats:frag.stats;const duration=part?part.duration:frag.duration;const timeLoading=now-stats.loading.start;const minAutoLevel=hls.minAutoLevel;// If frag loading is aborted, complete, or from lowest level, stop timer and return
if(stats.aborted||stats.loaded&&stats.loaded===stats.total||frag.level<=minAutoLevel){this.clearTimer();// reset forced auto level value so that next level will be selected
this._nextAutoLevel=-1;return;}// This check only runs if we're in ABR mode and actually playing
if(!autoLevelEnabled||media.paused||!media.playbackRate||!media.readyState){return;}const bufferInfo=hls.mainForwardBufferInfo;if(bufferInfo===null){return;}const ttfbEstimate=this.bwEstimator.getEstimateTTFB();const playbackRate=Math.abs(media.playbackRate);// To maintain stable adaptive playback, only begin monitoring frag loading after half or more of its playback duration has passed
if(timeLoading<=Math.max(ttfbEstimate,1000*(duration/(playbackRate*2)))){return;}// bufferStarvationDelay is an estimate of the amount time (in seconds) it will take to exhaust the buffer
const bufferStarvationDelay=bufferInfo.len/playbackRate;const ttfb=stats.loading.first?stats.loading.first-stats.loading.start:-1;const loadedFirstByte=stats.loaded&&ttfb>-1;const bwEstimate=this.getBwEstimate();const levels=hls.levels;const level=levels[frag.level];const expectedLen=stats.total||Math.max(stats.loaded,Math.round(duration*level.averageBitrate/8));let timeStreaming=loadedFirstByte?timeLoading-ttfb:timeLoading;if(timeStreaming<1&&loadedFirstByte){timeStreaming=Math.min(timeLoading,stats.loaded*8/bwEstimate);}const loadRate=loadedFirstByte?stats.loaded*1000/timeStreaming:0;// fragLoadDelay is an estimate of the time (in seconds) it will take to buffer the remainder of the fragment
const fragLoadedDelay=loadRate?(expectedLen-stats.loaded)/loadRate:expectedLen*8/bwEstimate+ttfbEstimate/1000;// Only downswitch if the time to finish loading the current fragment is greater than the amount of buffer left
if(fragLoadedDelay<=bufferStarvationDelay){return;}const bwe=loadRate?loadRate*8:bwEstimate;let fragLevelNextLoadedDelay=Number.POSITIVE_INFINITY;let nextLoadLevel;// Iterate through lower level and try to find the largest one that avoids rebuffering
for(nextLoadLevel=frag.level-1;nextLoadLevel>minAutoLevel;nextLoadLevel--){// compute time to load next fragment at lower level
// 8 = bits per byte (bps/Bps)
const levelNextBitrate=levels[nextLoadLevel].maxBitrate;fragLevelNextLoadedDelay=this.getTimeToLoadFrag(ttfbEstimate/1000,bwe,duration*levelNextBitrate,!levels[nextLoadLevel].details);if(fragLevelNextLoadedDelay<bufferStarvationDelay){break;}}// Only emergency switch down if it takes less time to load a new fragment at lowest level instead of continuing
// to load the current one
if(fragLevelNextLoadedDelay>=fragLoadedDelay){return;}// if estimated load time of new segment is completely unreasonable, ignore and do not emergency switch down
if(fragLevelNextLoadedDelay>duration*10){return;}hls.nextLoadLevel=hls.nextAutoLevel=nextLoadLevel;if(loadedFirstByte){// If there has been loading progress, sample bandwidth using loading time offset by minimum TTFB time
this.bwEstimator.sample(timeLoading-Math.min(ttfbEstimate,ttfb),stats.loaded);}else {// If there has been no loading progress, sample TTFB
this.bwEstimator.sampleTTFB(timeLoading);}const nextLoadLevelBitrate=levels[nextLoadLevel].maxBitrate;if(this.getBwEstimate()*this.hls.config.abrBandWidthUpFactor>nextLoadLevelBitrate){this.resetEstimator(nextLoadLevelBitrate);}this.clearTimer();logger$2.warn(`[abr] Fragment ${frag.sn}${part?' part '+part.index:''} of level ${frag.level} is loading too slowly;
      Time to underbuffer: ${bufferStarvationDelay.toFixed(3)} s
      Estimated load time for current fragment: ${fragLoadedDelay.toFixed(3)} s
      Estimated load time for down switch fragment: ${fragLevelNextLoadedDelay.toFixed(3)} s
      TTFB estimate: ${ttfb|0} ms
      Current BW estimate: ${isFiniteNumber(bwEstimate)?bwEstimate|0:'Unknown'} bps
      New BW estimate: ${this.getBwEstimate()|0} bps
      Switching to level ${nextLoadLevel} @ ${nextLoadLevelBitrate|0} bps`);hls.trigger(Events.FRAG_LOAD_EMERGENCY_ABORTED,{frag,part,stats});};this.hls=_hls;this.bwEstimator=this.initEstimator();this.registerListeners();}resetEstimator(abrEwmaDefaultEstimate){if(abrEwmaDefaultEstimate){logger$2.log(`setting initial bwe to ${abrEwmaDefaultEstimate}`);this.hls.config.abrEwmaDefaultEstimate=abrEwmaDefaultEstimate;}this.firstSelection=-1;this.bwEstimator=this.initEstimator();}initEstimator(){const config=this.hls.config;return new EwmaBandWidthEstimator(config.abrEwmaSlowVoD,config.abrEwmaFastVoD,config.abrEwmaDefaultEstimate);}registerListeners(){const{hls}=this;hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.on(Events.FRAG_LOADING,this.onFragLoading,this);hls.on(Events.FRAG_LOADED,this.onFragLoaded,this);hls.on(Events.FRAG_BUFFERED,this.onFragBuffered,this);hls.on(Events.LEVEL_SWITCHING,this.onLevelSwitching,this);hls.on(Events.LEVEL_LOADED,this.onLevelLoaded,this);hls.on(Events.LEVELS_UPDATED,this.onLevelsUpdated,this);hls.on(Events.MAX_AUTO_LEVEL_UPDATED,this.onMaxAutoLevelUpdated,this);hls.on(Events.ERROR,this.onError,this);}unregisterListeners(){const{hls}=this;if(!hls){return;}hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.off(Events.FRAG_LOADING,this.onFragLoading,this);hls.off(Events.FRAG_LOADED,this.onFragLoaded,this);hls.off(Events.FRAG_BUFFERED,this.onFragBuffered,this);hls.off(Events.LEVEL_SWITCHING,this.onLevelSwitching,this);hls.off(Events.LEVEL_LOADED,this.onLevelLoaded,this);hls.off(Events.LEVELS_UPDATED,this.onLevelsUpdated,this);hls.off(Events.MAX_AUTO_LEVEL_UPDATED,this.onMaxAutoLevelUpdated,this);hls.off(Events.ERROR,this.onError,this);}destroy(){this.unregisterListeners();this.clearTimer();// @ts-ignore
this.hls=this._abandonRulesCheck=null;this.fragCurrent=this.partCurrent=null;}onManifestLoading(event,data){this.lastLoadedFragLevel=-1;this.firstSelection=-1;this.lastLevelLoadSec=0;this.fragCurrent=this.partCurrent=null;this.onLevelsUpdated();this.clearTimer();}onLevelsUpdated(){if(this.lastLoadedFragLevel>-1&&this.fragCurrent){this.lastLoadedFragLevel=this.fragCurrent.level;}this._nextAutoLevel=-1;this.onMaxAutoLevelUpdated();this.codecTiers=null;this.audioTracksByGroup=null;}onMaxAutoLevelUpdated(){this.firstSelection=-1;this.nextAutoLevelKey='';}onFragLoading(event,data){const frag=data.frag;if(this.ignoreFragment(frag)){return;}if(!frag.bitrateTest){var _data$part;this.fragCurrent=frag;this.partCurrent=(_data$part=data.part)!=null?_data$part:null;}this.clearTimer();this.timer=self.setInterval(this._abandonRulesCheck,100);}onLevelSwitching(event,data){this.clearTimer();}onError(event,data){if(data.fatal){return;}switch(data.details){case ErrorDetails.BUFFER_ADD_CODEC_ERROR:case ErrorDetails.BUFFER_APPEND_ERROR:// Reset last loaded level so that a new selection can be made after calling recoverMediaError
this.lastLoadedFragLevel=-1;this.firstSelection=-1;break;case ErrorDetails.FRAG_LOAD_TIMEOUT:{const frag=data.frag;const{fragCurrent,partCurrent:part}=this;if(frag&&fragCurrent&&frag.sn===fragCurrent.sn&&frag.level===fragCurrent.level){const now=performance.now();const stats=part?part.stats:frag.stats;const timeLoading=now-stats.loading.start;const ttfb=stats.loading.first?stats.loading.first-stats.loading.start:-1;const loadedFirstByte=stats.loaded&&ttfb>-1;if(loadedFirstByte){const ttfbEstimate=this.bwEstimator.getEstimateTTFB();this.bwEstimator.sample(timeLoading-Math.min(ttfbEstimate,ttfb),stats.loaded);}else {this.bwEstimator.sampleTTFB(timeLoading);}}break;}}}getTimeToLoadFrag(timeToFirstByteSec,bandwidth,fragSizeBits,isSwitch){const fragLoadSec=timeToFirstByteSec+fragSizeBits/bandwidth;const playlistLoadSec=isSwitch?this.lastLevelLoadSec:0;return fragLoadSec+playlistLoadSec;}onLevelLoaded(event,data){const config=this.hls.config;const{loading}=data.stats;const timeLoadingMs=loading.end-loading.start;if(isFiniteNumber(timeLoadingMs)){this.lastLevelLoadSec=timeLoadingMs/1000;}if(data.details.live){this.bwEstimator.update(config.abrEwmaSlowLive,config.abrEwmaFastLive);}else {this.bwEstimator.update(config.abrEwmaSlowVoD,config.abrEwmaFastVoD);}}onFragLoaded(event,{frag,part}){const stats=part?part.stats:frag.stats;if(frag.type===PlaylistLevelType.MAIN){this.bwEstimator.sampleTTFB(stats.loading.first-stats.loading.start);}if(this.ignoreFragment(frag)){return;}// stop monitoring bw once frag loaded
this.clearTimer();// reset forced auto level value so that next level will be selected
if(frag.level===this._nextAutoLevel){this._nextAutoLevel=-1;}this.firstSelection=-1;// compute level average bitrate
if(this.hls.config.abrMaxWithRealBitrate){const duration=part?part.duration:frag.duration;const level=this.hls.levels[frag.level];const loadedBytes=(level.loaded?level.loaded.bytes:0)+stats.loaded;const loadedDuration=(level.loaded?level.loaded.duration:0)+duration;level.loaded={bytes:loadedBytes,duration:loadedDuration};level.realBitrate=Math.round(8*loadedBytes/loadedDuration);}if(frag.bitrateTest){const fragBufferedData={stats,frag,part,id:frag.type};this.onFragBuffered(Events.FRAG_BUFFERED,fragBufferedData);frag.bitrateTest=false;}else {// store level id after successful fragment load for playback
this.lastLoadedFragLevel=frag.level;}}onFragBuffered(event,data){const{frag,part}=data;const stats=part!=null&&part.stats.loaded?part.stats:frag.stats;if(stats.aborted){return;}if(this.ignoreFragment(frag)){return;}// Use the difference between parsing and request instead of buffering and request to compute fragLoadingProcessing;
// rationale is that buffer appending only happens once media is attached. This can happen when config.startFragPrefetch
// is used. If we used buffering in that case, our BW estimate sample will be very large.
const processingMs=stats.parsing.end-stats.loading.start-Math.min(stats.loading.first-stats.loading.start,this.bwEstimator.getEstimateTTFB());this.bwEstimator.sample(processingMs,stats.loaded);stats.bwEstimate=this.getBwEstimate();if(frag.bitrateTest){this.bitrateTestDelay=processingMs/1000;}else {this.bitrateTestDelay=0;}}ignoreFragment(frag){// Only count non-alt-audio frags which were actually buffered in our BW calculations
return frag.type!==PlaylistLevelType.MAIN||frag.sn==='initSegment';}clearTimer(){if(this.timer>-1){self.clearInterval(this.timer);this.timer=-1;}}get firstAutoLevel(){const{maxAutoLevel,minAutoLevel}=this.hls;const bwEstimate=this.getBwEstimate();const maxStartDelay=this.hls.config.maxStarvationDelay;const abrAutoLevel=this.findBestLevel(bwEstimate,minAutoLevel,maxAutoLevel,0,maxStartDelay,1,1);if(abrAutoLevel>-1){return abrAutoLevel;}const firstLevel=this.hls.firstLevel;const clamped=Math.min(Math.max(firstLevel,minAutoLevel),maxAutoLevel);logger$2.warn(`[abr] Could not find best starting auto level. Defaulting to first in playlist ${firstLevel} clamped to ${clamped}`);return clamped;}get forcedAutoLevel(){if(this.nextAutoLevelKey){return -1;}return this._nextAutoLevel;}// return next auto level
get nextAutoLevel(){const forcedAutoLevel=this.forcedAutoLevel;const bwEstimator=this.bwEstimator;const useEstimate=bwEstimator.canEstimate();const loadedFirstFrag=this.lastLoadedFragLevel>-1;// in case next auto level has been forced, and bw not available or not reliable, return forced value
if(forcedAutoLevel!==-1&&(!useEstimate||!loadedFirstFrag||this.nextAutoLevelKey===this.getAutoLevelKey())){return forcedAutoLevel;}// compute next level using ABR logic
const nextABRAutoLevel=useEstimate&&loadedFirstFrag?this.getNextABRAutoLevel():this.firstAutoLevel;// use forced auto level while it hasn't errored more than ABR selection
if(forcedAutoLevel!==-1){const levels=this.hls.levels;if(levels.length>Math.max(forcedAutoLevel,nextABRAutoLevel)&&levels[forcedAutoLevel].loadError<=levels[nextABRAutoLevel].loadError){return forcedAutoLevel;}}// save result until state has changed
this._nextAutoLevel=nextABRAutoLevel;this.nextAutoLevelKey=this.getAutoLevelKey();return nextABRAutoLevel;}getAutoLevelKey(){return `${this.getBwEstimate()}_${this.getStarvationDelay().toFixed(2)}`;}getNextABRAutoLevel(){const{fragCurrent,partCurrent,hls}=this;const{maxAutoLevel,config,minAutoLevel}=hls;const currentFragDuration=partCurrent?partCurrent.duration:fragCurrent?fragCurrent.duration:0;const avgbw=this.getBwEstimate();// bufferStarvationDelay is the wall-clock time left until the playback buffer is exhausted.
const bufferStarvationDelay=this.getStarvationDelay();let bwFactor=config.abrBandWidthFactor;let bwUpFactor=config.abrBandWidthUpFactor;// First, look to see if we can find a level matching with our avg bandwidth AND that could also guarantee no rebuffering at all
if(bufferStarvationDelay){const _bestLevel=this.findBestLevel(avgbw,minAutoLevel,maxAutoLevel,bufferStarvationDelay,0,bwFactor,bwUpFactor);if(_bestLevel>=0){return _bestLevel;}}// not possible to get rid of rebuffering... try to find level that will guarantee less than maxStarvationDelay of rebuffering
let maxStarvationDelay=currentFragDuration?Math.min(currentFragDuration,config.maxStarvationDelay):config.maxStarvationDelay;if(!bufferStarvationDelay){// in case buffer is empty, let's check if previous fragment was loaded to perform a bitrate test
const bitrateTestDelay=this.bitrateTestDelay;if(bitrateTestDelay){// if it is the case, then we need to adjust our max starvation delay using maxLoadingDelay config value
// max video loading delay used in  automatic start level selection :
// in that mode ABR controller will ensure that video loading time (ie the time to fetch the first fragment at lowest quality level +
// the time to fetch the fragment at the appropriate quality level is less than ```maxLoadingDelay``` )
// cap maxLoadingDelay and ensure it is not bigger 'than bitrate test' frag duration
const maxLoadingDelay=currentFragDuration?Math.min(currentFragDuration,config.maxLoadingDelay):config.maxLoadingDelay;maxStarvationDelay=maxLoadingDelay-bitrateTestDelay;logger$2.info(`[abr] bitrate test took ${Math.round(1000*bitrateTestDelay)}ms, set first fragment max fetchDuration to ${Math.round(1000*maxStarvationDelay)} ms`);// don't use conservative factor on bitrate test
bwFactor=bwUpFactor=1;}}const bestLevel=this.findBestLevel(avgbw,minAutoLevel,maxAutoLevel,bufferStarvationDelay,maxStarvationDelay,bwFactor,bwUpFactor);logger$2.info(`[abr] ${bufferStarvationDelay?'rebuffering expected':'buffer is empty'}, optimal quality level ${bestLevel}`);if(bestLevel>-1){return bestLevel;}// If no matching level found, see if min auto level would be a better option
const minLevel=hls.levels[minAutoLevel];const autoLevel=hls.levels[hls.loadLevel];if((minLevel==null?void 0:minLevel.bitrate)<(autoLevel==null?void 0:autoLevel.bitrate)){return minAutoLevel;}// or if bitrate is not lower, continue to use loadLevel
return hls.loadLevel;}getStarvationDelay(){const hls=this.hls;const media=hls.media;if(!media){return Infinity;}// playbackRate is the absolute value of the playback rate; if media.playbackRate is 0, we use 1 to load as
// if we're playing back at the normal rate.
const playbackRate=media&&media.playbackRate!==0?Math.abs(media.playbackRate):1.0;const bufferInfo=hls.mainForwardBufferInfo;return (bufferInfo?bufferInfo.len:0)/playbackRate;}getBwEstimate(){return this.bwEstimator.canEstimate()?this.bwEstimator.getEstimate():this.hls.config.abrEwmaDefaultEstimate;}findBestLevel(currentBw,minAutoLevel,maxAutoLevel,bufferStarvationDelay,maxStarvationDelay,bwFactor,bwUpFactor){var _level$details;const maxFetchDuration=bufferStarvationDelay+maxStarvationDelay;const lastLoadedFragLevel=this.lastLoadedFragLevel;const selectionBaseLevel=lastLoadedFragLevel===-1?this.hls.firstLevel:lastLoadedFragLevel;const{fragCurrent,partCurrent}=this;const{levels,allAudioTracks,loadLevel,config}=this.hls;if(levels.length===1){return 0;}const level=levels[selectionBaseLevel];const live=!!(level!=null&&(_level$details=level.details)!=null&&_level$details.live);const firstSelection=loadLevel===-1||lastLoadedFragLevel===-1;let currentCodecSet;let currentVideoRange='SDR';let currentFrameRate=(level==null?void 0:level.frameRate)||0;const{audioPreference,videoPreference}=config;const audioTracksByGroup=this.audioTracksByGroup||(this.audioTracksByGroup=getAudioTracksByGroup(allAudioTracks));if(firstSelection){if(this.firstSelection!==-1){return this.firstSelection;}const codecTiers=this.codecTiers||(this.codecTiers=getCodecTiers(levels,audioTracksByGroup,minAutoLevel,maxAutoLevel));const startTier=getStartCodecTier(codecTiers,currentVideoRange,currentBw,audioPreference,videoPreference);const{codecSet,videoRanges,minFramerate,minBitrate,preferHDR}=startTier;currentCodecSet=codecSet;currentVideoRange=preferHDR?videoRanges[videoRanges.length-1]:videoRanges[0];currentFrameRate=minFramerate;currentBw=Math.max(currentBw,minBitrate);logger$2.log(`[abr] picked start tier ${JSON.stringify(startTier)}`);}else {currentCodecSet=level==null?void 0:level.codecSet;currentVideoRange=level==null?void 0:level.videoRange;}const currentFragDuration=partCurrent?partCurrent.duration:fragCurrent?fragCurrent.duration:0;const ttfbEstimateSec=this.bwEstimator.getEstimateTTFB()/1000;const levelsSkipped=[];for(let i=maxAutoLevel;i>=minAutoLevel;i--){var _levelInfo$supportedR;const levelInfo=levels[i];const upSwitch=i>selectionBaseLevel;if(!levelInfo){continue;}if(config.useMediaCapabilities&&!levelInfo.supportedResult&&!levelInfo.supportedPromise){const mediaCapabilities=navigator.mediaCapabilities;if(typeof(mediaCapabilities==null?void 0:mediaCapabilities.decodingInfo)==='function'&&requiresMediaCapabilitiesDecodingInfo(levelInfo,audioTracksByGroup,currentVideoRange,currentFrameRate,currentBw,audioPreference)){levelInfo.supportedPromise=getMediaDecodingInfoPromise(levelInfo,audioTracksByGroup,mediaCapabilities);levelInfo.supportedPromise.then(decodingInfo=>{if(!this.hls){return;}levelInfo.supportedResult=decodingInfo;const levels=this.hls.levels;const index=levels.indexOf(levelInfo);if(decodingInfo.error){logger$2.warn(`[abr] MediaCapabilities decodingInfo error: "${decodingInfo.error}" for level ${index} ${JSON.stringify(decodingInfo)}`);}else if(!decodingInfo.supported){logger$2.warn(`[abr] Unsupported MediaCapabilities decodingInfo result for level ${index} ${JSON.stringify(decodingInfo)}`);if(index>-1&&levels.length>1){logger$2.log(`[abr] Removing unsupported level ${index}`);this.hls.removeLevel(index);}}});}else {levelInfo.supportedResult=SUPPORTED_INFO_DEFAULT;}}// skip candidates which change codec-family or video-range,
// and which decrease or increase frame-rate for up and down-switch respectfully
if(currentCodecSet&&levelInfo.codecSet!==currentCodecSet||currentVideoRange&&levelInfo.videoRange!==currentVideoRange||upSwitch&&currentFrameRate>levelInfo.frameRate||!upSwitch&&currentFrameRate>0&&currentFrameRate<levelInfo.frameRate||levelInfo.supportedResult&&!((_levelInfo$supportedR=levelInfo.supportedResult.decodingInfoResults)!=null&&_levelInfo$supportedR[0].smooth)){levelsSkipped.push(i);continue;}const levelDetails=levelInfo.details;const avgDuration=(partCurrent?levelDetails==null?void 0:levelDetails.partTarget:levelDetails==null?void 0:levelDetails.averagetargetduration)||currentFragDuration;let adjustedbw;// follow algorithm captured from stagefright :
// https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/httplive/LiveSession.cpp
// Pick the highest bandwidth stream below or equal to estimated bandwidth.
// consider only 80% of the available bandwidth, but if we are switching up,
// be even more conservative (70%) to avoid overestimating and immediately
// switching back.
if(!upSwitch){adjustedbw=bwFactor*currentBw;}else {adjustedbw=bwUpFactor*currentBw;}// Use average bitrate when starvation delay (buffer length) is gt or eq two segment durations and rebuffering is not expected (maxStarvationDelay > 0)
const bitrate=currentFragDuration&&bufferStarvationDelay>=currentFragDuration*2&&maxStarvationDelay===0?levels[i].averageBitrate:levels[i].maxBitrate;const fetchDuration=this.getTimeToLoadFrag(ttfbEstimateSec,adjustedbw,bitrate*avgDuration,levelDetails===undefined);const canSwitchWithinTolerance=// if adjusted bw is greater than level bitrate AND
adjustedbw>=bitrate&&(// no level change, or new level has no error history
i===lastLoadedFragLevel||levelInfo.loadError===0&&levelInfo.fragmentError===0)&&(// fragment fetchDuration unknown OR live stream OR fragment fetchDuration less than max allowed fetch duration, then this level matches
// we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...
// special case to support startLevel = -1 (bitrateTest) on live streams : in that case we should not exit loop so that findBestLevel will return -1
fetchDuration<=ttfbEstimateSec||!isFiniteNumber(fetchDuration)||live&&!this.bitrateTestDelay||fetchDuration<maxFetchDuration);if(canSwitchWithinTolerance){const forcedAutoLevel=this.forcedAutoLevel;if(i!==loadLevel&&(forcedAutoLevel===-1||forcedAutoLevel!==loadLevel)){if(levelsSkipped.length){logger$2.trace(`[abr] Skipped level(s) ${levelsSkipped.join(',')} of ${maxAutoLevel} max with CODECS and VIDEO-RANGE:"${levels[levelsSkipped[0]].codecs}" ${levels[levelsSkipped[0]].videoRange}; not compatible with "${level.codecs}" ${currentVideoRange}`);}logger$2.info(`[abr] switch candidate:${selectionBaseLevel}->${i} adjustedbw(${Math.round(adjustedbw)})-bitrate=${Math.round(adjustedbw-bitrate)} ttfb:${ttfbEstimateSec.toFixed(1)} avgDuration:${avgDuration.toFixed(1)} maxFetchDuration:${maxFetchDuration.toFixed(1)} fetchDuration:${fetchDuration.toFixed(1)} firstSelection:${firstSelection} codecSet:${currentCodecSet} videoRange:${currentVideoRange} hls.loadLevel:${loadLevel}`);}if(firstSelection){this.firstSelection=i;}// as we are looping from highest to lowest, this will return the best achievable quality level
return i;}}// not enough time budget even with quality level 0 ... rebuffering might happen
return -1;}set nextAutoLevel(nextLevel){const{maxAutoLevel,minAutoLevel}=this.hls;const value=Math.min(Math.max(nextLevel,minAutoLevel),maxAutoLevel);if(this._nextAutoLevel!==value){this.nextAutoLevelKey='';this._nextAutoLevel=value;}}}/**
 * @ignore
 * Sub-class specialization of EventHandler base class.
 *
 * TaskLoop allows to schedule a task function being called (optionnaly repeatedly) on the main loop,
 * scheduled asynchroneously, avoiding recursive calls in the same tick.
 *
 * The task itself is implemented in `doTick`. It can be requested and called for single execution
 * using the `tick` method.
 *
 * It will be assured that the task execution method (`tick`) only gets called once per main loop "tick",
 * no matter how often it gets requested for execution. Execution in further ticks will be scheduled accordingly.
 *
 * If further execution requests have already been scheduled on the next tick, it can be checked with `hasNextTick`,
 * and cancelled with `clearNextTick`.
 *
 * The task can be scheduled as an interval repeatedly with a period as parameter (see `setInterval`, `clearInterval`).
 *
 * Sub-classes need to implement the `doTick` method which will effectively have the task execution routine.
 *
 * Further explanations:
 *
 * The baseclass has a `tick` method that will schedule the doTick call. It may be called synchroneously
 * only for a stack-depth of one. On re-entrant calls, sub-sequent calls are scheduled for next main loop ticks.
 *
 * When the task execution (`tick` method) is called in re-entrant way this is detected and
 * we are limiting the task execution per call stack to exactly one, but scheduling/post-poning further
 * task processing on the next main loop iteration (also known as "next tick" in the Node/JS runtime lingo).
 */class TaskLoop{constructor(){this._boundTick=void 0;this._tickTimer=null;this._tickInterval=null;this._tickCallCount=0;this._boundTick=this.tick.bind(this);}destroy(){this.onHandlerDestroying();this.onHandlerDestroyed();}onHandlerDestroying(){// clear all timers before unregistering from event bus
this.clearNextTick();this.clearInterval();}onHandlerDestroyed(){}hasInterval(){return !!this._tickInterval;}hasNextTick(){return !!this._tickTimer;}/**
   * @param millis - Interval time (ms)
   * @eturns True when interval has been scheduled, false when already scheduled (no effect)
   */setInterval(millis){if(!this._tickInterval){this._tickCallCount=0;this._tickInterval=self.setInterval(this._boundTick,millis);return true;}return false;}/**
   * @returns True when interval was cleared, false when none was set (no effect)
   */clearInterval(){if(this._tickInterval){self.clearInterval(this._tickInterval);this._tickInterval=null;return true;}return false;}/**
   * @returns True when timeout was cleared, false when none was set (no effect)
   */clearNextTick(){if(this._tickTimer){self.clearTimeout(this._tickTimer);this._tickTimer=null;return true;}return false;}/**
   * Will call the subclass doTick implementation in this main loop tick
   * or in the next one (via setTimeout(,0)) in case it has already been called
   * in this tick (in case this is a re-entrant call).
   */tick(){this._tickCallCount++;if(this._tickCallCount===1){this.doTick();// re-entrant call to tick from previous doTick call stack
// -> schedule a call on the next main loop iteration to process this task processing request
if(this._tickCallCount>1){// make sure only one timer exists at any time at max
this.tickImmediate();}this._tickCallCount=0;}}tickImmediate(){this.clearNextTick();this._tickTimer=self.setTimeout(this._boundTick,0);}/**
   * For subclass to implement task logic
   * @abstract
   */doTick(){}}var FragmentState={NOT_LOADED:"NOT_LOADED",APPENDING:"APPENDING",PARTIAL:"PARTIAL",OK:"OK"};class FragmentTracker{constructor(hls){this.activePartLists=Object.create(null);this.endListFragments=Object.create(null);this.fragments=Object.create(null);this.timeRanges=Object.create(null);this.bufferPadding=0.2;this.hls=void 0;this.hasGaps=false;this.hls=hls;this._registerListeners();}_registerListeners(){const{hls}=this;hls.on(Events.BUFFER_APPENDED,this.onBufferAppended,this);hls.on(Events.FRAG_BUFFERED,this.onFragBuffered,this);hls.on(Events.FRAG_LOADED,this.onFragLoaded,this);}_unregisterListeners(){const{hls}=this;hls.off(Events.BUFFER_APPENDED,this.onBufferAppended,this);hls.off(Events.FRAG_BUFFERED,this.onFragBuffered,this);hls.off(Events.FRAG_LOADED,this.onFragLoaded,this);}destroy(){this._unregisterListeners();// @ts-ignore
this.fragments=// @ts-ignore
this.activePartLists=// @ts-ignore
this.endListFragments=this.timeRanges=null;}/**
   * Return a Fragment or Part with an appended range that matches the position and levelType
   * Otherwise, return null
   */getAppendedFrag(position,levelType){const activeParts=this.activePartLists[levelType];if(activeParts){for(let i=activeParts.length;i--;){const activePart=activeParts[i];if(!activePart){break;}const appendedPTS=activePart.end;if(activePart.start<=position&&appendedPTS!==null&&position<=appendedPTS){return activePart;}}}return this.getBufferedFrag(position,levelType);}/**
   * Return a buffered Fragment that matches the position and levelType.
   * A buffered Fragment is one whose loading, parsing and appending is done (completed or "partial" meaning aborted).
   * If not found any Fragment, return null
   */getBufferedFrag(position,levelType){const{fragments}=this;const keys=Object.keys(fragments);for(let i=keys.length;i--;){const fragmentEntity=fragments[keys[i]];if((fragmentEntity==null?void 0:fragmentEntity.body.type)===levelType&&fragmentEntity.buffered){const frag=fragmentEntity.body;if(frag.start<=position&&position<=frag.end){return frag;}}}return null;}/**
   * Partial fragments effected by coded frame eviction will be removed
   * The browser will unload parts of the buffer to free up memory for new buffer data
   * Fragments will need to be reloaded when the buffer is freed up, removing partial fragments will allow them to reload(since there might be parts that are still playable)
   */detectEvictedFragments(elementaryStream,timeRange,playlistType,appendedPart){if(this.timeRanges){this.timeRanges[elementaryStream]=timeRange;}// Check if any flagged fragments have been unloaded
// excluding anything newer than appendedPartSn
const appendedPartSn=(appendedPart==null?void 0:appendedPart.fragment.sn)||-1;Object.keys(this.fragments).forEach(key=>{const fragmentEntity=this.fragments[key];if(!fragmentEntity){return;}if(appendedPartSn>=fragmentEntity.body.sn){return;}if(!fragmentEntity.buffered&&!fragmentEntity.loaded){if(fragmentEntity.body.type===playlistType){this.removeFragment(fragmentEntity.body);}return;}const esData=fragmentEntity.range[elementaryStream];if(!esData){return;}esData.time.some(time=>{const isNotBuffered=!this.isTimeBuffered(time.startPTS,time.endPTS,timeRange);if(isNotBuffered){// Unregister partial fragment as it needs to load again to be reused
this.removeFragment(fragmentEntity.body);}return isNotBuffered;});});}/**
   * Checks if the fragment passed in is loaded in the buffer properly
   * Partially loaded fragments will be registered as a partial fragment
   */detectPartialFragments(data){const timeRanges=this.timeRanges;const{frag,part}=data;if(!timeRanges||frag.sn==='initSegment'){return;}const fragKey=getFragmentKey(frag);const fragmentEntity=this.fragments[fragKey];if(!fragmentEntity||fragmentEntity.buffered&&frag.gap){return;}const isFragHint=!frag.relurl;Object.keys(timeRanges).forEach(elementaryStream=>{const streamInfo=frag.elementaryStreams[elementaryStream];if(!streamInfo){return;}const timeRange=timeRanges[elementaryStream];const partial=isFragHint||streamInfo.partial===true;fragmentEntity.range[elementaryStream]=this.getBufferedTimes(frag,part,partial,timeRange);});fragmentEntity.loaded=null;if(Object.keys(fragmentEntity.range).length){fragmentEntity.buffered=true;const endList=fragmentEntity.body.endList=frag.endList||fragmentEntity.body.endList;if(endList){this.endListFragments[fragmentEntity.body.type]=fragmentEntity;}if(!isPartial(fragmentEntity)){// Remove older fragment parts from lookup after frag is tracked as buffered
this.removeParts(frag.sn-1,frag.type);}}else {// remove fragment if nothing was appended
this.removeFragment(fragmentEntity.body);}}removeParts(snToKeep,levelType){const activeParts=this.activePartLists[levelType];if(!activeParts){return;}this.activePartLists[levelType]=activeParts.filter(part=>part.fragment.sn>=snToKeep);}fragBuffered(frag,force){const fragKey=getFragmentKey(frag);let fragmentEntity=this.fragments[fragKey];if(!fragmentEntity&&force){fragmentEntity=this.fragments[fragKey]={body:frag,appendedPTS:null,loaded:null,buffered:false,range:Object.create(null)};if(frag.gap){this.hasGaps=true;}}if(fragmentEntity){fragmentEntity.loaded=null;fragmentEntity.buffered=true;}}getBufferedTimes(fragment,part,partial,timeRange){const buffered={time:[],partial};const startPTS=fragment.start;const endPTS=fragment.end;const minEndPTS=fragment.minEndPTS||endPTS;const maxStartPTS=fragment.maxStartPTS||startPTS;for(let i=0;i<timeRange.length;i++){const startTime=timeRange.start(i)-this.bufferPadding;const endTime=timeRange.end(i)+this.bufferPadding;if(maxStartPTS>=startTime&&minEndPTS<=endTime){// Fragment is entirely contained in buffer
// No need to check the other timeRange times since it's completely playable
buffered.time.push({startPTS:Math.max(startPTS,timeRange.start(i)),endPTS:Math.min(endPTS,timeRange.end(i))});break;}else if(startPTS<endTime&&endPTS>startTime){const start=Math.max(startPTS,timeRange.start(i));const end=Math.min(endPTS,timeRange.end(i));if(end>start){buffered.partial=true;// Check for intersection with buffer
// Get playable sections of the fragment
buffered.time.push({startPTS:start,endPTS:end});}}else if(endPTS<=startTime){// No need to check the rest of the timeRange as it is in order
break;}}return buffered;}/**
   * Gets the partial fragment for a certain time
   */getPartialFragment(time){let bestFragment=null;let timePadding;let startTime;let endTime;let bestOverlap=0;const{bufferPadding,fragments}=this;Object.keys(fragments).forEach(key=>{const fragmentEntity=fragments[key];if(!fragmentEntity){return;}if(isPartial(fragmentEntity)){startTime=fragmentEntity.body.start-bufferPadding;endTime=fragmentEntity.body.end+bufferPadding;if(time>=startTime&&time<=endTime){// Use the fragment that has the most padding from start and end time
timePadding=Math.min(time-startTime,endTime-time);if(bestOverlap<=timePadding){bestFragment=fragmentEntity.body;bestOverlap=timePadding;}}}});return bestFragment;}isEndListAppended(type){const lastFragmentEntity=this.endListFragments[type];return lastFragmentEntity!==undefined&&(lastFragmentEntity.buffered||isPartial(lastFragmentEntity));}getState(fragment){const fragKey=getFragmentKey(fragment);const fragmentEntity=this.fragments[fragKey];if(fragmentEntity){if(!fragmentEntity.buffered){return FragmentState.APPENDING;}else if(isPartial(fragmentEntity)){return FragmentState.PARTIAL;}else {return FragmentState.OK;}}return FragmentState.NOT_LOADED;}isTimeBuffered(startPTS,endPTS,timeRange){let startTime;let endTime;for(let i=0;i<timeRange.length;i++){startTime=timeRange.start(i)-this.bufferPadding;endTime=timeRange.end(i)+this.bufferPadding;if(startPTS>=startTime&&endPTS<=endTime){return true;}if(endPTS<=startTime){// No need to check the rest of the timeRange as it is in order
return false;}}return false;}onFragLoaded(event,data){const{frag,part}=data;// don't track initsegment (for which sn is not a number)
// don't track frags used for bitrateTest, they're irrelevant.
if(frag.sn==='initSegment'||frag.bitrateTest){return;}// Fragment entity `loaded` FragLoadedData is null when loading parts
const loaded=part?null:data;const fragKey=getFragmentKey(frag);this.fragments[fragKey]={body:frag,appendedPTS:null,loaded,buffered:false,range:Object.create(null)};}onBufferAppended(event,data){const{frag,part,timeRanges}=data;if(frag.sn==='initSegment'){return;}const playlistType=frag.type;if(part){let activeParts=this.activePartLists[playlistType];if(!activeParts){this.activePartLists[playlistType]=activeParts=[];}activeParts.push(part);}// Store the latest timeRanges loaded in the buffer
this.timeRanges=timeRanges;Object.keys(timeRanges).forEach(elementaryStream=>{const timeRange=timeRanges[elementaryStream];this.detectEvictedFragments(elementaryStream,timeRange,playlistType,part);});}onFragBuffered(event,data){this.detectPartialFragments(data);}hasFragment(fragment){const fragKey=getFragmentKey(fragment);return !!this.fragments[fragKey];}hasParts(type){var _this$activePartLists;return !!((_this$activePartLists=this.activePartLists[type])!=null&&_this$activePartLists.length);}removeFragmentsInRange(start,end,playlistType,withGapOnly,unbufferedOnly){if(withGapOnly&&!this.hasGaps){return;}Object.keys(this.fragments).forEach(key=>{const fragmentEntity=this.fragments[key];if(!fragmentEntity){return;}const frag=fragmentEntity.body;if(frag.type!==playlistType||withGapOnly&&!frag.gap){return;}if(frag.start<end&&frag.end>start&&(fragmentEntity.buffered||unbufferedOnly)){this.removeFragment(frag);}});}removeFragment(fragment){const fragKey=getFragmentKey(fragment);fragment.stats.loaded=0;fragment.clearElementaryStreamInfo();const activeParts=this.activePartLists[fragment.type];if(activeParts){const snToRemove=fragment.sn;this.activePartLists[fragment.type]=activeParts.filter(part=>part.fragment.sn!==snToRemove);}delete this.fragments[fragKey];if(fragment.endList){delete this.endListFragments[fragment.type];}}removeAllFragments(){this.fragments=Object.create(null);this.endListFragments=Object.create(null);this.activePartLists=Object.create(null);this.hasGaps=false;}}function isPartial(fragmentEntity){var _fragmentEntity$range,_fragmentEntity$range2,_fragmentEntity$range3;return fragmentEntity.buffered&&(fragmentEntity.body.gap||((_fragmentEntity$range=fragmentEntity.range.video)==null?void 0:_fragmentEntity$range.partial)||((_fragmentEntity$range2=fragmentEntity.range.audio)==null?void 0:_fragmentEntity$range2.partial)||((_fragmentEntity$range3=fragmentEntity.range.audiovideo)==null?void 0:_fragmentEntity$range3.partial));}function getFragmentKey(fragment){return `${fragment.type}_${fragment.level}_${fragment.sn}`;}/**
 * Provides methods dealing with buffer length retrieval for example.
 *
 * In general, a helper around HTML5 MediaElement TimeRanges gathered from `buffered` property.
 *
 * Also @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered
 */const noopBuffered={length:0,start:()=>0,end:()=>0};class BufferHelper{/**
   * Return true if `media`'s buffered include `position`
   */static isBuffered(media,position){try{if(media){const buffered=BufferHelper.getBuffered(media);for(let i=0;i<buffered.length;i++){if(position>=buffered.start(i)&&position<=buffered.end(i)){return true;}}}}catch(error){// this is to catch
// InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':
// This SourceBuffer has been removed from the parent media source
}return false;}static bufferInfo(media,pos,maxHoleDuration){try{if(media){const vbuffered=BufferHelper.getBuffered(media);const buffered=[];let i;for(i=0;i<vbuffered.length;i++){buffered.push({start:vbuffered.start(i),end:vbuffered.end(i)});}return this.bufferedInfo(buffered,pos,maxHoleDuration);}}catch(error){// this is to catch
// InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':
// This SourceBuffer has been removed from the parent media source
}return {len:0,start:pos,end:pos,nextStart:undefined};}static bufferedInfo(buffered,pos,maxHoleDuration){pos=Math.max(0,pos);// sort on buffer.start/smaller end (IE does not always return sorted buffered range)
buffered.sort(function(a,b){const diff=a.start-b.start;if(diff){return diff;}else {return b.end-a.end;}});let buffered2=[];if(maxHoleDuration){// there might be some small holes between buffer time range
// consider that holes smaller than maxHoleDuration are irrelevant and build another
// buffer time range representations that discards those holes
for(let i=0;i<buffered.length;i++){const buf2len=buffered2.length;if(buf2len){const buf2end=buffered2[buf2len-1].end;// if small hole (value between 0 or maxHoleDuration ) or overlapping (negative)
if(buffered[i].start-buf2end<maxHoleDuration){// merge overlapping time ranges
// update lastRange.end only if smaller than item.end
// e.g.  [ 1, 15] with  [ 2,8] => [ 1,15] (no need to modify lastRange.end)
// whereas [ 1, 8] with  [ 2,15] => [ 1,15] ( lastRange should switch from [1,8] to [1,15])
if(buffered[i].end>buf2end){buffered2[buf2len-1].end=buffered[i].end;}}else {// big hole
buffered2.push(buffered[i]);}}else {// first value
buffered2.push(buffered[i]);}}}else {buffered2=buffered;}let bufferLen=0;// bufferStartNext can possibly be undefined based on the conditional logic below
let bufferStartNext;// bufferStart and bufferEnd are buffer boundaries around current video position
let bufferStart=pos;let bufferEnd=pos;for(let i=0;i<buffered2.length;i++){const start=buffered2[i].start;const end=buffered2[i].end;// logger.log('buf start/end:' + buffered.start(i) + '/' + buffered.end(i));
if(pos+maxHoleDuration>=start&&pos<end){// play position is inside this buffer TimeRange, retrieve end of buffer position and buffer length
bufferStart=start;bufferEnd=end;bufferLen=bufferEnd-pos;}else if(pos+maxHoleDuration<start){bufferStartNext=start;break;}}return {len:bufferLen,start:bufferStart||0,end:bufferEnd||0,nextStart:bufferStartNext};}/**
   * Safe method to get buffered property.
   * SourceBuffer.buffered may throw if SourceBuffer is removed from it's MediaSource
   */static getBuffered(media){try{return media.buffered;}catch(e){logger$2.log('failed to get media.buffered',e);return noopBuffered;}}}class ChunkMetadata{constructor(level,sn,id,size=0,part=-1,partial=false){this.level=void 0;this.sn=void 0;this.part=void 0;this.id=void 0;this.size=void 0;this.partial=void 0;this.transmuxing=getNewPerformanceTiming();this.buffering={audio:getNewPerformanceTiming(),video:getNewPerformanceTiming(),audiovideo:getNewPerformanceTiming()};this.level=level;this.sn=sn;this.id=id;this.size=size;this.part=part;this.partial=partial;}}function getNewPerformanceTiming(){return {start:0,executeStart:0,executeEnd:0,end:0};}function findFirstFragWithCC(fragments,cc){for(let i=0,len=fragments.length;i<len;i++){var _fragments$i;if(((_fragments$i=fragments[i])==null?void 0:_fragments$i.cc)===cc){return fragments[i];}}return null;}function shouldAlignOnDiscontinuities(lastFrag,switchDetails,details){if(switchDetails){if(details.endCC>details.startCC||lastFrag&&lastFrag.cc<details.startCC){return true;}}return false;}// Find the first frag in the previous level which matches the CC of the first frag of the new level
function findDiscontinuousReferenceFrag(prevDetails,curDetails){const prevFrags=prevDetails.fragments;const curFrags=curDetails.fragments;if(!curFrags.length||!prevFrags.length){logger$2.log('No fragments to align');return;}const prevStartFrag=findFirstFragWithCC(prevFrags,curFrags[0].cc);if(!prevStartFrag||prevStartFrag&&!prevStartFrag.startPTS){logger$2.log('No frag in previous level to align on');return;}return prevStartFrag;}function adjustFragmentStart(frag,sliding){if(frag){const start=frag.start+sliding;frag.start=frag.startPTS=start;frag.endPTS=start+frag.duration;}}function adjustSlidingStart(sliding,details){// Update segments
const fragments=details.fragments;for(let i=0,len=fragments.length;i<len;i++){adjustFragmentStart(fragments[i],sliding);}// Update LL-HLS parts at the end of the playlist
if(details.fragmentHint){adjustFragmentStart(details.fragmentHint,sliding);}details.alignedSliding=true;}/**
 * Using the parameters of the last level, this function computes PTS' of the new fragments so that they form a
 * contiguous stream with the last fragments.
 * The PTS of a fragment lets Hls.js know where it fits into a stream - by knowing every PTS, we know which fragment to
 * download at any given time. PTS is normally computed when the fragment is demuxed, so taking this step saves us time
 * and an extra download.
 * @param lastFrag
 * @param lastLevel
 * @param details
 */function alignStream(lastFrag,switchDetails,details){if(!switchDetails){return;}alignDiscontinuities(lastFrag,details,switchDetails);if(!details.alignedSliding&&switchDetails){// If the PTS wasn't figured out via discontinuity sequence that means there was no CC increase within the level.
// Aligning via Program Date Time should therefore be reliable, since PDT should be the same within the same
// discontinuity sequence.
alignMediaPlaylistByPDT(details,switchDetails);}if(!details.alignedSliding&&switchDetails&&!details.skippedSegments){// Try to align on sn so that we pick a better start fragment.
// Do not perform this on playlists with delta updates as this is only to align levels on switch
// and adjustSliding only adjusts fragments after skippedSegments.
adjustSliding(switchDetails,details);}}/**
 * Computes the PTS if a new level's fragments using the PTS of a fragment in the last level which shares the same
 * discontinuity sequence.
 * @param lastFrag - The last Fragment which shares the same discontinuity sequence
 * @param lastLevel - The details of the last loaded level
 * @param details - The details of the new level
 */function alignDiscontinuities(lastFrag,details,switchDetails){if(shouldAlignOnDiscontinuities(lastFrag,switchDetails,details)){const referenceFrag=findDiscontinuousReferenceFrag(switchDetails,details);if(referenceFrag&&isFiniteNumber(referenceFrag.start)){logger$2.log(`Adjusting PTS using last level due to CC increase within current level ${details.url}`);adjustSlidingStart(referenceFrag.start,details);}}}/**
 * Ensures appropriate time-alignment between renditions based on PDT.
 * This function assumes the timelines represented in `refDetails` are accurate, including the PDTs
 * for the last discontinuity sequence number shared by both playlists when present,
 * and uses the "wallclock"/PDT timeline as a cross-reference to `details`, adjusting the presentation
 * times/timelines of `details` accordingly.
 * Given the asynchronous nature of fetches and initial loads of live `main` and audio/subtitle tracks,
 * the primary purpose of this function is to ensure the "local timelines" of audio/subtitle tracks
 * are aligned to the main/video timeline, using PDT as the cross-reference/"anchor" that should
 * be consistent across playlists, per the HLS spec.
 * @param details - The details of the rendition you'd like to time-align (e.g. an audio rendition).
 * @param refDetails - The details of the reference rendition with start and PDT times for alignment.
 */function alignMediaPlaylistByPDT(details,refDetails){if(!details.hasProgramDateTime||!refDetails.hasProgramDateTime){return;}const fragments=details.fragments;const refFragments=refDetails.fragments;if(!fragments.length||!refFragments.length){return;}// Calculate a delta to apply to all fragments according to the delta in PDT times and start times
// of a fragment in the reference details, and a fragment in the target details of the same discontinuity.
// If a fragment of the same discontinuity was not found use the middle fragment of both.
let refFrag;let frag;const targetCC=Math.min(refDetails.endCC,details.endCC);if(refDetails.startCC<targetCC&&details.startCC<targetCC){refFrag=findFirstFragWithCC(refFragments,targetCC);frag=findFirstFragWithCC(fragments,targetCC);}if(!refFrag||!frag){refFrag=refFragments[Math.floor(refFragments.length/2)];frag=findFirstFragWithCC(fragments,refFrag.cc)||fragments[Math.floor(fragments.length/2)];}const refPDT=refFrag.programDateTime;const targetPDT=frag.programDateTime;if(!refPDT||!targetPDT){return;}const delta=(targetPDT-refPDT)/1000-(frag.start-refFrag.start);adjustSlidingStart(delta,details);}const MIN_CHUNK_SIZE=Math.pow(2,17);// 128kb
class FragmentLoader{constructor(config){this.config=void 0;this.loader=null;this.partLoadTimeout=-1;this.config=config;}destroy(){if(this.loader){this.loader.destroy();this.loader=null;}}abort(){if(this.loader){// Abort the loader for current fragment. Only one may load at any given time
this.loader.abort();}}load(frag,onProgress){const url=frag.url;if(!url){return Promise.reject(new LoadError({type:ErrorTypes.NETWORK_ERROR,details:ErrorDetails.FRAG_LOAD_ERROR,fatal:false,frag,error:new Error(`Fragment does not have a ${url?'part list':'url'}`),networkDetails:null}));}this.abort();const config=this.config;const FragmentILoader=config.fLoader;const DefaultILoader=config.loader;return new Promise((resolve,reject)=>{if(this.loader){this.loader.destroy();}if(frag.gap){if(frag.tagList.some(tags=>tags[0]==='GAP')){reject(createGapLoadError(frag));return;}else {// Reset temporary treatment as GAP tag
frag.gap=false;}}const loader=this.loader=frag.loader=FragmentILoader?new FragmentILoader(config):new DefaultILoader(config);const loaderContext=createLoaderContext(frag);const loadPolicy=getLoaderConfigWithoutReties(config.fragLoadPolicy.default);const loaderConfig={loadPolicy,timeout:loadPolicy.maxLoadTimeMs,maxRetry:0,retryDelay:0,maxRetryDelay:0,highWaterMark:frag.sn==='initSegment'?Infinity:MIN_CHUNK_SIZE};// Assign frag stats to the loader's stats reference
frag.stats=loader.stats;loader.load(loaderContext,loaderConfig,{onSuccess:(response,stats,context,networkDetails)=>{this.resetLoader(frag,loader);let payload=response.data;if(context.resetIV&&frag.decryptdata){frag.decryptdata.iv=new Uint8Array(payload.slice(0,16));payload=payload.slice(16);}resolve({frag,part:null,payload,networkDetails});},onError:(response,context,networkDetails,stats)=>{this.resetLoader(frag,loader);reject(new LoadError({type:ErrorTypes.NETWORK_ERROR,details:ErrorDetails.FRAG_LOAD_ERROR,fatal:false,frag,response:_objectSpread2({url,data:undefined},response),error:new Error(`HTTP Error ${response.code} ${response.text}`),networkDetails,stats}));},onAbort:(stats,context,networkDetails)=>{this.resetLoader(frag,loader);reject(new LoadError({type:ErrorTypes.NETWORK_ERROR,details:ErrorDetails.INTERNAL_ABORTED,fatal:false,frag,error:new Error('Aborted'),networkDetails,stats}));},onTimeout:(stats,context,networkDetails)=>{this.resetLoader(frag,loader);reject(new LoadError({type:ErrorTypes.NETWORK_ERROR,details:ErrorDetails.FRAG_LOAD_TIMEOUT,fatal:false,frag,error:new Error(`Timeout after ${loaderConfig.timeout}ms`),networkDetails,stats}));},onProgress:(stats,context,data,networkDetails)=>{if(onProgress){onProgress({frag,part:null,payload:data,networkDetails});}}});});}loadPart(frag,part,onProgress){this.abort();const config=this.config;const FragmentILoader=config.fLoader;const DefaultILoader=config.loader;return new Promise((resolve,reject)=>{if(this.loader){this.loader.destroy();}if(frag.gap||part.gap){reject(createGapLoadError(frag,part));return;}const loader=this.loader=frag.loader=FragmentILoader?new FragmentILoader(config):new DefaultILoader(config);const loaderContext=createLoaderContext(frag,part);// Should we define another load policy for parts?
const loadPolicy=getLoaderConfigWithoutReties(config.fragLoadPolicy.default);const loaderConfig={loadPolicy,timeout:loadPolicy.maxLoadTimeMs,maxRetry:0,retryDelay:0,maxRetryDelay:0,highWaterMark:MIN_CHUNK_SIZE};// Assign part stats to the loader's stats reference
part.stats=loader.stats;loader.load(loaderContext,loaderConfig,{onSuccess:(response,stats,context,networkDetails)=>{this.resetLoader(frag,loader);this.updateStatsFromPart(frag,part);const partLoadedData={frag,part,payload:response.data,networkDetails};onProgress(partLoadedData);resolve(partLoadedData);},onError:(response,context,networkDetails,stats)=>{this.resetLoader(frag,loader);reject(new LoadError({type:ErrorTypes.NETWORK_ERROR,details:ErrorDetails.FRAG_LOAD_ERROR,fatal:false,frag,part,response:_objectSpread2({url:loaderContext.url,data:undefined},response),error:new Error(`HTTP Error ${response.code} ${response.text}`),networkDetails,stats}));},onAbort:(stats,context,networkDetails)=>{frag.stats.aborted=part.stats.aborted;this.resetLoader(frag,loader);reject(new LoadError({type:ErrorTypes.NETWORK_ERROR,details:ErrorDetails.INTERNAL_ABORTED,fatal:false,frag,part,error:new Error('Aborted'),networkDetails,stats}));},onTimeout:(stats,context,networkDetails)=>{this.resetLoader(frag,loader);reject(new LoadError({type:ErrorTypes.NETWORK_ERROR,details:ErrorDetails.FRAG_LOAD_TIMEOUT,fatal:false,frag,part,error:new Error(`Timeout after ${loaderConfig.timeout}ms`),networkDetails,stats}));}});});}updateStatsFromPart(frag,part){const fragStats=frag.stats;const partStats=part.stats;const partTotal=partStats.total;fragStats.loaded+=partStats.loaded;if(partTotal){const estTotalParts=Math.round(frag.duration/part.duration);const estLoadedParts=Math.min(Math.round(fragStats.loaded/partTotal),estTotalParts);const estRemainingParts=estTotalParts-estLoadedParts;const estRemainingBytes=estRemainingParts*Math.round(fragStats.loaded/estLoadedParts);fragStats.total=fragStats.loaded+estRemainingBytes;}else {fragStats.total=Math.max(fragStats.loaded,fragStats.total);}const fragLoading=fragStats.loading;const partLoading=partStats.loading;if(fragLoading.start){// add to fragment loader latency
fragLoading.first+=partLoading.first-partLoading.start;}else {fragLoading.start=partLoading.start;fragLoading.first=partLoading.first;}fragLoading.end=partLoading.end;}resetLoader(frag,loader){frag.loader=null;if(this.loader===loader){self.clearTimeout(this.partLoadTimeout);this.loader=null;}loader.destroy();}}function createLoaderContext(frag,part=null){const segment=part||frag;const loaderContext={frag,part,responseType:'arraybuffer',url:segment.url,headers:{},rangeStart:0,rangeEnd:0};const start=segment.byteRangeStartOffset;const end=segment.byteRangeEndOffset;if(isFiniteNumber(start)&&isFiniteNumber(end)){var _frag$decryptdata;let byteRangeStart=start;let byteRangeEnd=end;if(frag.sn==='initSegment'&&((_frag$decryptdata=frag.decryptdata)==null?void 0:_frag$decryptdata.method)==='AES-128'){// MAP segment encrypted with method 'AES-128', when served with HTTP Range,
// has the unencrypted size specified in the range.
// Ref: https://tools.ietf.org/html/draft-pantos-hls-rfc8216bis-08#section-6.3.6
const fragmentLen=end-start;if(fragmentLen%16){byteRangeEnd=end+(16-fragmentLen%16);}if(start!==0){loaderContext.resetIV=true;byteRangeStart=start-16;}}loaderContext.rangeStart=byteRangeStart;loaderContext.rangeEnd=byteRangeEnd;}return loaderContext;}function createGapLoadError(frag,part){const error=new Error(`GAP ${frag.gap?'tag':'attribute'} found`);const errorData={type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.FRAG_GAP,fatal:false,frag,error,networkDetails:null};if(part){errorData.part=part;}(part?part:frag).stats.aborted=true;return new LoadError(errorData);}class LoadError extends Error{constructor(data){super(data.error.message);this.data=void 0;this.data=data;}}class AESCrypto{constructor(subtle,iv){this.subtle=void 0;this.aesIV=void 0;this.subtle=subtle;this.aesIV=iv;}decrypt(data,key){return this.subtle.decrypt({name:'AES-CBC',iv:this.aesIV},key,data);}}class FastAESKey{constructor(subtle,key){this.subtle=void 0;this.key=void 0;this.subtle=subtle;this.key=key;}expandKey(){return this.subtle.importKey('raw',this.key,{name:'AES-CBC'},false,['encrypt','decrypt']);}}// PKCS7
function removePadding(array){const outputBytes=array.byteLength;const paddingBytes=outputBytes&&new DataView(array.buffer).getUint8(outputBytes-1);if(paddingBytes){return sliceUint8(array,0,outputBytes-paddingBytes);}return array;}class AESDecryptor{constructor(){this.rcon=[0x0,0x1,0x2,0x4,0x8,0x10,0x20,0x40,0x80,0x1b,0x36];this.subMix=[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)];this.invSubMix=[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)];this.sBox=new Uint32Array(256);this.invSBox=new Uint32Array(256);this.key=new Uint32Array(0);this.ksRows=0;this.keySize=0;this.keySchedule=void 0;this.invKeySchedule=void 0;this.initTable();}// Using view.getUint32() also swaps the byte order.
uint8ArrayToUint32Array_(arrayBuffer){const view=new DataView(arrayBuffer);const newArray=new Uint32Array(4);for(let i=0;i<4;i++){newArray[i]=view.getUint32(i*4);}return newArray;}initTable(){const sBox=this.sBox;const invSBox=this.invSBox;const subMix=this.subMix;const subMix0=subMix[0];const subMix1=subMix[1];const subMix2=subMix[2];const subMix3=subMix[3];const invSubMix=this.invSubMix;const invSubMix0=invSubMix[0];const invSubMix1=invSubMix[1];const invSubMix2=invSubMix[2];const invSubMix3=invSubMix[3];const d=new Uint32Array(256);let x=0;let xi=0;let i=0;for(i=0;i<256;i++){if(i<128){d[i]=i<<1;}else {d[i]=i<<1^0x11b;}}for(i=0;i<256;i++){let sx=xi^xi<<1^xi<<2^xi<<3^xi<<4;sx=sx>>>8^sx&0xff^0x63;sBox[x]=sx;invSBox[sx]=x;// Compute multiplication
const x2=d[x];const x4=d[x2];const x8=d[x4];// Compute sub/invSub bytes, mix columns tables
let t=d[sx]*0x101^sx*0x1010100;subMix0[x]=t<<24|t>>>8;subMix1[x]=t<<16|t>>>16;subMix2[x]=t<<8|t>>>24;subMix3[x]=t;// Compute inv sub bytes, inv mix columns tables
t=x8*0x1010101^x4*0x10001^x2*0x101^x*0x1010100;invSubMix0[sx]=t<<24|t>>>8;invSubMix1[sx]=t<<16|t>>>16;invSubMix2[sx]=t<<8|t>>>24;invSubMix3[sx]=t;// Compute next counter
if(!x){x=xi=1;}else {x=x2^d[d[d[x8^x2]]];xi^=d[d[xi]];}}}expandKey(keyBuffer){// convert keyBuffer to Uint32Array
const key=this.uint8ArrayToUint32Array_(keyBuffer);let sameKey=true;let offset=0;while(offset<key.length&&sameKey){sameKey=key[offset]===this.key[offset];offset++;}if(sameKey){return;}this.key=key;const keySize=this.keySize=key.length;if(keySize!==4&&keySize!==6&&keySize!==8){throw new Error('Invalid aes key size='+keySize);}const ksRows=this.ksRows=(keySize+6+1)*4;let ksRow;let invKsRow;const keySchedule=this.keySchedule=new Uint32Array(ksRows);const invKeySchedule=this.invKeySchedule=new Uint32Array(ksRows);const sbox=this.sBox;const rcon=this.rcon;const invSubMix=this.invSubMix;const invSubMix0=invSubMix[0];const invSubMix1=invSubMix[1];const invSubMix2=invSubMix[2];const invSubMix3=invSubMix[3];let prev;let t;for(ksRow=0;ksRow<ksRows;ksRow++){if(ksRow<keySize){prev=keySchedule[ksRow]=key[ksRow];continue;}t=prev;if(ksRow%keySize===0){// Rot word
t=t<<8|t>>>24;// Sub word
t=sbox[t>>>24]<<24|sbox[t>>>16&0xff]<<16|sbox[t>>>8&0xff]<<8|sbox[t&0xff];// Mix Rcon
t^=rcon[ksRow/keySize|0]<<24;}else if(keySize>6&&ksRow%keySize===4){// Sub word
t=sbox[t>>>24]<<24|sbox[t>>>16&0xff]<<16|sbox[t>>>8&0xff]<<8|sbox[t&0xff];}keySchedule[ksRow]=prev=(keySchedule[ksRow-keySize]^t)>>>0;}for(invKsRow=0;invKsRow<ksRows;invKsRow++){ksRow=ksRows-invKsRow;if(invKsRow&3){t=keySchedule[ksRow];}else {t=keySchedule[ksRow-4];}if(invKsRow<4||ksRow<=4){invKeySchedule[invKsRow]=t;}else {invKeySchedule[invKsRow]=invSubMix0[sbox[t>>>24]]^invSubMix1[sbox[t>>>16&0xff]]^invSubMix2[sbox[t>>>8&0xff]]^invSubMix3[sbox[t&0xff]];}invKeySchedule[invKsRow]=invKeySchedule[invKsRow]>>>0;}}// Adding this as a method greatly improves performance.
networkToHostOrderSwap(word){return word<<24|(word&0xff00)<<8|(word&0xff0000)>>8|word>>>24;}decrypt(inputArrayBuffer,offset,aesIV){const nRounds=this.keySize+6;const invKeySchedule=this.invKeySchedule;const invSBOX=this.invSBox;const invSubMix=this.invSubMix;const invSubMix0=invSubMix[0];const invSubMix1=invSubMix[1];const invSubMix2=invSubMix[2];const invSubMix3=invSubMix[3];const initVector=this.uint8ArrayToUint32Array_(aesIV);let initVector0=initVector[0];let initVector1=initVector[1];let initVector2=initVector[2];let initVector3=initVector[3];const inputInt32=new Int32Array(inputArrayBuffer);const outputInt32=new Int32Array(inputInt32.length);let t0,t1,t2,t3;let s0,s1,s2,s3;let inputWords0,inputWords1,inputWords2,inputWords3;let ksRow,i;const swapWord=this.networkToHostOrderSwap;while(offset<inputInt32.length){inputWords0=swapWord(inputInt32[offset]);inputWords1=swapWord(inputInt32[offset+1]);inputWords2=swapWord(inputInt32[offset+2]);inputWords3=swapWord(inputInt32[offset+3]);s0=inputWords0^invKeySchedule[0];s1=inputWords3^invKeySchedule[1];s2=inputWords2^invKeySchedule[2];s3=inputWords1^invKeySchedule[3];ksRow=4;// Iterate through the rounds of decryption
for(i=1;i<nRounds;i++){t0=invSubMix0[s0>>>24]^invSubMix1[s1>>16&0xff]^invSubMix2[s2>>8&0xff]^invSubMix3[s3&0xff]^invKeySchedule[ksRow];t1=invSubMix0[s1>>>24]^invSubMix1[s2>>16&0xff]^invSubMix2[s3>>8&0xff]^invSubMix3[s0&0xff]^invKeySchedule[ksRow+1];t2=invSubMix0[s2>>>24]^invSubMix1[s3>>16&0xff]^invSubMix2[s0>>8&0xff]^invSubMix3[s1&0xff]^invKeySchedule[ksRow+2];t3=invSubMix0[s3>>>24]^invSubMix1[s0>>16&0xff]^invSubMix2[s1>>8&0xff]^invSubMix3[s2&0xff]^invKeySchedule[ksRow+3];// Update state
s0=t0;s1=t1;s2=t2;s3=t3;ksRow=ksRow+4;}// Shift rows, sub bytes, add round key
t0=invSBOX[s0>>>24]<<24^invSBOX[s1>>16&0xff]<<16^invSBOX[s2>>8&0xff]<<8^invSBOX[s3&0xff]^invKeySchedule[ksRow];t1=invSBOX[s1>>>24]<<24^invSBOX[s2>>16&0xff]<<16^invSBOX[s3>>8&0xff]<<8^invSBOX[s0&0xff]^invKeySchedule[ksRow+1];t2=invSBOX[s2>>>24]<<24^invSBOX[s3>>16&0xff]<<16^invSBOX[s0>>8&0xff]<<8^invSBOX[s1&0xff]^invKeySchedule[ksRow+2];t3=invSBOX[s3>>>24]<<24^invSBOX[s0>>16&0xff]<<16^invSBOX[s1>>8&0xff]<<8^invSBOX[s2&0xff]^invKeySchedule[ksRow+3];// Write
outputInt32[offset]=swapWord(t0^initVector0);outputInt32[offset+1]=swapWord(t3^initVector1);outputInt32[offset+2]=swapWord(t2^initVector2);outputInt32[offset+3]=swapWord(t1^initVector3);// reset initVector to last 4 unsigned int
initVector0=inputWords0;initVector1=inputWords1;initVector2=inputWords2;initVector3=inputWords3;offset=offset+4;}return outputInt32.buffer;}}const CHUNK_SIZE=16;// 16 bytes, 128 bits
class Decrypter{constructor(config,{removePKCS7Padding=true}={}){this.logEnabled=true;this.removePKCS7Padding=void 0;this.subtle=null;this.softwareDecrypter=null;this.key=null;this.fastAesKey=null;this.remainderData=null;this.currentIV=null;this.currentResult=null;this.useSoftware=void 0;this.useSoftware=config.enableSoftwareAES;this.removePKCS7Padding=removePKCS7Padding;// built in decryptor expects PKCS7 padding
if(removePKCS7Padding){try{const browserCrypto=self.crypto;if(browserCrypto){this.subtle=browserCrypto.subtle||browserCrypto.webkitSubtle;}}catch(e){/* no-op */}}this.useSoftware=!this.subtle;}destroy(){this.subtle=null;this.softwareDecrypter=null;this.key=null;this.fastAesKey=null;this.remainderData=null;this.currentIV=null;this.currentResult=null;}isSync(){return this.useSoftware;}flush(){const{currentResult,remainderData}=this;if(!currentResult||remainderData){this.reset();return null;}const data=new Uint8Array(currentResult);this.reset();if(this.removePKCS7Padding){return removePadding(data);}return data;}reset(){this.currentResult=null;this.currentIV=null;this.remainderData=null;if(this.softwareDecrypter){this.softwareDecrypter=null;}}decrypt(data,key,iv){if(this.useSoftware){return new Promise((resolve,reject)=>{this.softwareDecrypt(new Uint8Array(data),key,iv);const decryptResult=this.flush();if(decryptResult){resolve(decryptResult.buffer);}else {reject(new Error('[softwareDecrypt] Failed to decrypt data'));}});}return this.webCryptoDecrypt(new Uint8Array(data),key,iv);}// Software decryption is progressive. Progressive decryption may not return a result on each call. Any cached
// data is handled in the flush() call
softwareDecrypt(data,key,iv){const{currentIV,currentResult,remainderData}=this;this.logOnce('JS AES decrypt');// The output is staggered during progressive parsing - the current result is cached, and emitted on the next call
// This is done in order to strip PKCS7 padding, which is found at the end of each segment. We only know we've reached
// the end on flush(), but by that time we have already received all bytes for the segment.
// Progressive decryption does not work with WebCrypto
if(remainderData){data=appendUint8Array(remainderData,data);this.remainderData=null;}// Byte length must be a multiple of 16 (AES-128 = 128 bit blocks = 16 bytes)
const currentChunk=this.getValidChunk(data);if(!currentChunk.length){return null;}if(currentIV){iv=currentIV;}let softwareDecrypter=this.softwareDecrypter;if(!softwareDecrypter){softwareDecrypter=this.softwareDecrypter=new AESDecryptor();}softwareDecrypter.expandKey(key);const result=currentResult;this.currentResult=softwareDecrypter.decrypt(currentChunk.buffer,0,iv);this.currentIV=sliceUint8(currentChunk,-16).buffer;if(!result){return null;}return result;}webCryptoDecrypt(data,key,iv){if(this.key!==key||!this.fastAesKey){if(!this.subtle){return Promise.resolve(this.onWebCryptoError(data,key,iv));}this.key=key;this.fastAesKey=new FastAESKey(this.subtle,key);}return this.fastAesKey.expandKey().then(aesKey=>{// decrypt using web crypto
if(!this.subtle){return Promise.reject(new Error('web crypto not initialized'));}this.logOnce('WebCrypto AES decrypt');const crypto=new AESCrypto(this.subtle,new Uint8Array(iv));return crypto.decrypt(data.buffer,aesKey);}).catch(err=>{logger$2.warn(`[decrypter]: WebCrypto Error, disable WebCrypto API, ${err.name}: ${err.message}`);return this.onWebCryptoError(data,key,iv);});}onWebCryptoError(data,key,iv){this.useSoftware=true;this.logEnabled=true;this.softwareDecrypt(data,key,iv);const decryptResult=this.flush();if(decryptResult){return decryptResult.buffer;}throw new Error('WebCrypto and softwareDecrypt: failed to decrypt data');}getValidChunk(data){let currentChunk=data;const splitPoint=data.length-data.length%CHUNK_SIZE;if(splitPoint!==data.length){currentChunk=sliceUint8(data,0,splitPoint);this.remainderData=sliceUint8(data,splitPoint);}return currentChunk;}logOnce(msg){if(!this.logEnabled){return;}logger$2.log(`[decrypter]: ${msg}`);this.logEnabled=false;}}/**
 *  TimeRanges to string helper
 */const TimeRanges={toString:function(r){let log='';const len=r.length;for(let i=0;i<len;i++){log+=`[${r.start(i).toFixed(3)}-${r.end(i).toFixed(3)}]`;}return log;}};const State={STOPPED:'STOPPED',IDLE:'IDLE',KEY_LOADING:'KEY_LOADING',FRAG_LOADING:'FRAG_LOADING',FRAG_LOADING_WAITING_RETRY:'FRAG_LOADING_WAITING_RETRY',WAITING_TRACK:'WAITING_TRACK',PARSING:'PARSING',PARSED:'PARSED',ENDED:'ENDED',ERROR:'ERROR',WAITING_INIT_PTS:'WAITING_INIT_PTS',WAITING_LEVEL:'WAITING_LEVEL'};class BaseStreamController extends TaskLoop{constructor(hls,fragmentTracker,keyLoader,logPrefix,playlistType){super();this.hls=void 0;this.fragPrevious=null;this.fragCurrent=null;this.fragmentTracker=void 0;this.transmuxer=null;this._state=State.STOPPED;this.playlistType=void 0;this.media=null;this.mediaBuffer=null;this.config=void 0;this.bitrateTest=false;this.lastCurrentTime=0;this.nextLoadPosition=0;this.startPosition=0;this.startTimeOffset=null;this.loadedmetadata=false;this.retryDate=0;this.levels=null;this.fragmentLoader=void 0;this.keyLoader=void 0;this.levelLastLoaded=null;this.startFragRequested=false;this.decrypter=void 0;this.initPTS=[];this.buffering=true;this.onvseeking=null;this.onvended=null;this.logPrefix='';this.log=void 0;this.warn=void 0;this.playlistType=playlistType;this.logPrefix=logPrefix;this.log=logger$2.log.bind(logger$2,`${logPrefix}:`);this.warn=logger$2.warn.bind(logger$2,`${logPrefix}:`);this.hls=hls;this.fragmentLoader=new FragmentLoader(hls.config);this.keyLoader=keyLoader;this.fragmentTracker=fragmentTracker;this.config=hls.config;this.decrypter=new Decrypter(hls.config);hls.on(Events.MANIFEST_LOADED,this.onManifestLoaded,this);}doTick(){this.onTickEnd();}onTickEnd(){}// eslint-disable-next-line @typescript-eslint/no-unused-vars
startLoad(startPosition){}stopLoad(){this.fragmentLoader.abort();this.keyLoader.abort(this.playlistType);const frag=this.fragCurrent;if(frag!=null&&frag.loader){frag.abortRequests();this.fragmentTracker.removeFragment(frag);}this.resetTransmuxer();this.fragCurrent=null;this.fragPrevious=null;this.clearInterval();this.clearNextTick();this.state=State.STOPPED;}pauseBuffering(){this.buffering=false;}resumeBuffering(){this.buffering=true;}_streamEnded(bufferInfo,levelDetails){// If playlist is live, there is another buffered range after the current range, nothing buffered, media is detached,
// of nothing loading/loaded return false
if(levelDetails.live||bufferInfo.nextStart||!bufferInfo.end||!this.media){return false;}const partList=levelDetails.partList;// Since the last part isn't guaranteed to correspond to the last playlist segment for Low-Latency HLS,
// check instead if the last part is buffered.
if(partList!=null&&partList.length){const lastPart=partList[partList.length-1];// Checking the midpoint of the part for potential margin of error and related issues.
// NOTE: Technically I believe parts could yield content that is < the computed duration (including potential a duration of 0)
// and still be spec-compliant, so there may still be edge cases here. Likewise, there could be issues in end of stream
// part mismatches for independent audio and video playlists/segments.
const lastPartBuffered=BufferHelper.isBuffered(this.media,lastPart.start+lastPart.duration/2);return lastPartBuffered;}const playlistType=levelDetails.fragments[levelDetails.fragments.length-1].type;return this.fragmentTracker.isEndListAppended(playlistType);}getLevelDetails(){if(this.levels&&this.levelLastLoaded!==null){var _this$levelLastLoaded;return (_this$levelLastLoaded=this.levelLastLoaded)==null?void 0:_this$levelLastLoaded.details;}}onMediaAttached(event,data){const media=this.media=this.mediaBuffer=data.media;this.onvseeking=this.onMediaSeeking.bind(this);this.onvended=this.onMediaEnded.bind(this);media.addEventListener('seeking',this.onvseeking);media.addEventListener('ended',this.onvended);const config=this.config;if(this.levels&&config.autoStartLoad&&this.state===State.STOPPED){this.startLoad(config.startPosition);}}onMediaDetaching(){const media=this.media;if(media!=null&&media.ended){this.log('MSE detaching and video ended, reset startPosition');this.startPosition=this.lastCurrentTime=0;}// remove video listeners
if(media&&this.onvseeking&&this.onvended){media.removeEventListener('seeking',this.onvseeking);media.removeEventListener('ended',this.onvended);this.onvseeking=this.onvended=null;}if(this.keyLoader){this.keyLoader.detach();}this.media=this.mediaBuffer=null;this.loadedmetadata=false;this.fragmentTracker.removeAllFragments();this.stopLoad();}onMediaSeeking(){const{config,fragCurrent,media,mediaBuffer,state}=this;const currentTime=media?media.currentTime:0;const bufferInfo=BufferHelper.bufferInfo(mediaBuffer?mediaBuffer:media,currentTime,config.maxBufferHole);this.log(`media seeking to ${isFiniteNumber(currentTime)?currentTime.toFixed(3):currentTime}, state: ${state}`);if(this.state===State.ENDED){this.resetLoadingState();}else if(fragCurrent){// Seeking while frag load is in progress
const tolerance=config.maxFragLookUpTolerance;const fragStartOffset=fragCurrent.start-tolerance;const fragEndOffset=fragCurrent.start+fragCurrent.duration+tolerance;// if seeking out of buffered range or into new one
if(!bufferInfo.len||fragEndOffset<bufferInfo.start||fragStartOffset>bufferInfo.end){const pastFragment=currentTime>fragEndOffset;// if the seek position is outside the current fragment range
if(currentTime<fragStartOffset||pastFragment){if(pastFragment&&fragCurrent.loader){this.log('seeking outside of buffer while fragment load in progress, cancel fragment load');fragCurrent.abortRequests();this.resetLoadingState();}this.fragPrevious=null;}}}if(media){// Remove gap fragments
this.fragmentTracker.removeFragmentsInRange(currentTime,Infinity,this.playlistType,true);this.lastCurrentTime=currentTime;}// in case seeking occurs although no media buffered, adjust startPosition and nextLoadPosition to seek target
if(!this.loadedmetadata&&!bufferInfo.len){this.nextLoadPosition=this.startPosition=currentTime;}// Async tick to speed up processing
this.tickImmediate();}onMediaEnded(){// reset startPosition and lastCurrentTime to restart playback @ stream beginning
this.startPosition=this.lastCurrentTime=0;}onManifestLoaded(event,data){this.startTimeOffset=data.startTimeOffset;this.initPTS=[];}onHandlerDestroying(){this.hls.off(Events.MANIFEST_LOADED,this.onManifestLoaded,this);this.stopLoad();super.onHandlerDestroying();// @ts-ignore
this.hls=null;}onHandlerDestroyed(){this.state=State.STOPPED;if(this.fragmentLoader){this.fragmentLoader.destroy();}if(this.keyLoader){this.keyLoader.destroy();}if(this.decrypter){this.decrypter.destroy();}this.hls=this.log=this.warn=this.decrypter=this.keyLoader=this.fragmentLoader=this.fragmentTracker=null;super.onHandlerDestroyed();}loadFragment(frag,level,targetBufferTime){this._loadFragForPlayback(frag,level,targetBufferTime);}_loadFragForPlayback(frag,level,targetBufferTime){const progressCallback=data=>{if(this.fragContextChanged(frag)){this.warn(`Fragment ${frag.sn}${data.part?' p: '+data.part.index:''} of level ${frag.level} was dropped during download.`);this.fragmentTracker.removeFragment(frag);return;}frag.stats.chunkCount++;this._handleFragmentLoadProgress(data);};this._doFragLoad(frag,level,targetBufferTime,progressCallback).then(data=>{if(!data){// if we're here we probably needed to backtrack or are waiting for more parts
return;}const state=this.state;if(this.fragContextChanged(frag)){if(state===State.FRAG_LOADING||!this.fragCurrent&&state===State.PARSING){this.fragmentTracker.removeFragment(frag);this.state=State.IDLE;}return;}if('payload'in data){this.log(`Loaded fragment ${frag.sn} of level ${frag.level}`);this.hls.trigger(Events.FRAG_LOADED,data);}// Pass through the whole payload; controllers not implementing progressive loading receive data from this callback
this._handleFragmentLoadComplete(data);}).catch(reason=>{if(this.state===State.STOPPED||this.state===State.ERROR){return;}this.warn(`Frag error: ${(reason==null?void 0:reason.message)||reason}`);this.resetFragmentLoading(frag);});}clearTrackerIfNeeded(frag){var _this$mediaBuffer;const{fragmentTracker}=this;const fragState=fragmentTracker.getState(frag);if(fragState===FragmentState.APPENDING){// Lower the max buffer length and try again
const playlistType=frag.type;const bufferedInfo=this.getFwdBufferInfo(this.mediaBuffer,playlistType);const minForwardBufferLength=Math.max(frag.duration,bufferedInfo?bufferedInfo.len:this.config.maxBufferLength);// If backtracking, always remove from the tracker without reducing max buffer length
const backtrackFragment=this.backtrackFragment;const backtracked=backtrackFragment?frag.sn-backtrackFragment.sn:0;if(backtracked===1||this.reduceMaxBufferLength(minForwardBufferLength,frag.duration)){fragmentTracker.removeFragment(frag);}}else if(((_this$mediaBuffer=this.mediaBuffer)==null?void 0:_this$mediaBuffer.buffered.length)===0){// Stop gap for bad tracker / buffer flush behavior
fragmentTracker.removeAllFragments();}else if(fragmentTracker.hasParts(frag.type)){// In low latency mode, remove fragments for which only some parts were buffered
fragmentTracker.detectPartialFragments({frag,part:null,stats:frag.stats,id:frag.type});if(fragmentTracker.getState(frag)===FragmentState.PARTIAL){fragmentTracker.removeFragment(frag);}}}checkLiveUpdate(details){if(details.updated&&!details.live){// Live stream ended, update fragment tracker
const lastFragment=details.fragments[details.fragments.length-1];this.fragmentTracker.detectPartialFragments({frag:lastFragment,part:null,stats:lastFragment.stats,id:lastFragment.type});}if(!details.fragments[0]){details.deltaUpdateFailed=true;}}flushMainBuffer(startOffset,endOffset,type=null){if(!(startOffset-endOffset)){return;}// When alternate audio is playing, the audio-stream-controller is responsible for the audio buffer. Otherwise,
// passing a null type flushes both buffers
const flushScope={startOffset,endOffset,type};this.hls.trigger(Events.BUFFER_FLUSHING,flushScope);}_loadInitSegment(frag,level){this._doFragLoad(frag,level).then(data=>{if(!data||this.fragContextChanged(frag)||!this.levels){throw new Error('init load aborted');}return data;}).then(data=>{const{hls}=this;const{payload}=data;const decryptData=frag.decryptdata;// check to see if the payload needs to be decrypted
if(payload&&payload.byteLength>0&&decryptData!=null&&decryptData.key&&decryptData.iv&&decryptData.method==='AES-128'){const startTime=self.performance.now();// decrypt init segment data
return this.decrypter.decrypt(new Uint8Array(payload),decryptData.key.buffer,decryptData.iv.buffer).catch(err=>{hls.trigger(Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.FRAG_DECRYPT_ERROR,fatal:false,error:err,reason:err.message,frag});throw err;}).then(decryptedData=>{const endTime=self.performance.now();hls.trigger(Events.FRAG_DECRYPTED,{frag,payload:decryptedData,stats:{tstart:startTime,tdecrypt:endTime}});data.payload=decryptedData;return this.completeInitSegmentLoad(data);});}return this.completeInitSegmentLoad(data);}).catch(reason=>{if(this.state===State.STOPPED||this.state===State.ERROR){return;}this.warn(reason);this.resetFragmentLoading(frag);});}completeInitSegmentLoad(data){const{levels}=this;if(!levels){throw new Error('init load aborted, missing levels');}const stats=data.frag.stats;this.state=State.IDLE;data.frag.data=new Uint8Array(data.payload);stats.parsing.start=stats.buffering.start=self.performance.now();stats.parsing.end=stats.buffering.end=self.performance.now();this.tick();}fragContextChanged(frag){const{fragCurrent}=this;return !frag||!fragCurrent||frag.sn!==fragCurrent.sn||frag.level!==fragCurrent.level;}fragBufferedComplete(frag,part){var _frag$startPTS,_frag$endPTS,_this$fragCurrent,_this$fragPrevious;const media=this.mediaBuffer?this.mediaBuffer:this.media;this.log(`Buffered ${frag.type} sn: ${frag.sn}${part?' part: '+part.index:''} of ${this.playlistType===PlaylistLevelType.MAIN?'level':'track'} ${frag.level} (frag:[${((_frag$startPTS=frag.startPTS)!=null?_frag$startPTS:NaN).toFixed(3)}-${((_frag$endPTS=frag.endPTS)!=null?_frag$endPTS:NaN).toFixed(3)}] > buffer:${media?TimeRanges.toString(BufferHelper.getBuffered(media)):'(detached)'})`);if(frag.sn!=='initSegment'){var _this$levels;if(frag.type!==PlaylistLevelType.SUBTITLE){const el=frag.elementaryStreams;if(!Object.keys(el).some(type=>!!el[type])){// empty segment
this.state=State.IDLE;return;}}const level=(_this$levels=this.levels)==null?void 0:_this$levels[frag.level];if(level!=null&&level.fragmentError){this.log(`Resetting level fragment error count of ${level.fragmentError} on frag buffered`);level.fragmentError=0;}}this.state=State.IDLE;if(!media){return;}if(!this.loadedmetadata&&frag.type==PlaylistLevelType.MAIN&&media.buffered.length&&((_this$fragCurrent=this.fragCurrent)==null?void 0:_this$fragCurrent.sn)===((_this$fragPrevious=this.fragPrevious)==null?void 0:_this$fragPrevious.sn)){this.loadedmetadata=true;this.seekToStartPos();}this.tick();}seekToStartPos(){}_handleFragmentLoadComplete(fragLoadedEndData){const{transmuxer}=this;if(!transmuxer){return;}const{frag,part,partsLoaded}=fragLoadedEndData;// If we did not load parts, or loaded all parts, we have complete (not partial) fragment data
const complete=!partsLoaded||partsLoaded.length===0||partsLoaded.some(fragLoaded=>!fragLoaded);const chunkMeta=new ChunkMetadata(frag.level,frag.sn,frag.stats.chunkCount+1,0,part?part.index:-1,!complete);transmuxer.flush(chunkMeta);}// eslint-disable-next-line @typescript-eslint/no-unused-vars
_handleFragmentLoadProgress(frag){}_doFragLoad(frag,level,targetBufferTime=null,progressCallback){var _frag$decryptdata;const details=level==null?void 0:level.details;if(!this.levels||!details){throw new Error(`frag load aborted, missing level${details?'':' detail'}s`);}let keyLoadingPromise=null;if(frag.encrypted&&!((_frag$decryptdata=frag.decryptdata)!=null&&_frag$decryptdata.key)){this.log(`Loading key for ${frag.sn} of [${details.startSN}-${details.endSN}], ${this.logPrefix==='[stream-controller]'?'level':'track'} ${frag.level}`);this.state=State.KEY_LOADING;this.fragCurrent=frag;keyLoadingPromise=this.keyLoader.load(frag).then(keyLoadedData=>{if(!this.fragContextChanged(keyLoadedData.frag)){this.hls.trigger(Events.KEY_LOADED,keyLoadedData);if(this.state===State.KEY_LOADING){this.state=State.IDLE;}return keyLoadedData;}});this.hls.trigger(Events.KEY_LOADING,{frag});if(this.fragCurrent===null){keyLoadingPromise=Promise.reject(new Error(`frag load aborted, context changed in KEY_LOADING`));}}else if(!frag.encrypted&&details.encryptedFragments.length){this.keyLoader.loadClear(frag,details.encryptedFragments);}targetBufferTime=Math.max(frag.start,targetBufferTime||0);if(this.config.lowLatencyMode&&frag.sn!=='initSegment'){const partList=details.partList;if(partList&&progressCallback){if(targetBufferTime>frag.end&&details.fragmentHint){frag=details.fragmentHint;}const partIndex=this.getNextPart(partList,frag,targetBufferTime);if(partIndex>-1){const part=partList[partIndex];this.log(`Loading part sn: ${frag.sn} p: ${part.index} cc: ${frag.cc} of playlist [${details.startSN}-${details.endSN}] parts [0-${partIndex}-${partList.length-1}] ${this.logPrefix==='[stream-controller]'?'level':'track'}: ${frag.level}, target: ${parseFloat(targetBufferTime.toFixed(3))}`);this.nextLoadPosition=part.start+part.duration;this.state=State.FRAG_LOADING;let _result;if(keyLoadingPromise){_result=keyLoadingPromise.then(keyLoadedData=>{if(!keyLoadedData||this.fragContextChanged(keyLoadedData.frag)){return null;}return this.doFragPartsLoad(frag,part,level,progressCallback);}).catch(error=>this.handleFragLoadError(error));}else {_result=this.doFragPartsLoad(frag,part,level,progressCallback).catch(error=>this.handleFragLoadError(error));}this.hls.trigger(Events.FRAG_LOADING,{frag,part,targetBufferTime});if(this.fragCurrent===null){return Promise.reject(new Error(`frag load aborted, context changed in FRAG_LOADING parts`));}return _result;}else if(!frag.url||this.loadedEndOfParts(partList,targetBufferTime)){// Fragment hint has no parts
return Promise.resolve(null);}}}this.log(`Loading fragment ${frag.sn} cc: ${frag.cc} ${details?'of ['+details.startSN+'-'+details.endSN+'] ':''}${this.logPrefix==='[stream-controller]'?'level':'track'}: ${frag.level}, target: ${parseFloat(targetBufferTime.toFixed(3))}`);// Don't update nextLoadPosition for fragments which are not buffered
if(isFiniteNumber(frag.sn)&&!this.bitrateTest){this.nextLoadPosition=frag.start+frag.duration;}this.state=State.FRAG_LOADING;// Load key before streaming fragment data
const dataOnProgress=this.config.progressive;let result;if(dataOnProgress&&keyLoadingPromise){result=keyLoadingPromise.then(keyLoadedData=>{if(!keyLoadedData||this.fragContextChanged(keyLoadedData==null?void 0:keyLoadedData.frag)){return null;}return this.fragmentLoader.load(frag,progressCallback);}).catch(error=>this.handleFragLoadError(error));}else {// load unencrypted fragment data with progress event,
// or handle fragment result after key and fragment are finished loading
result=Promise.all([this.fragmentLoader.load(frag,dataOnProgress?progressCallback:undefined),keyLoadingPromise]).then(([fragLoadedData])=>{if(!dataOnProgress&&fragLoadedData&&progressCallback){progressCallback(fragLoadedData);}return fragLoadedData;}).catch(error=>this.handleFragLoadError(error));}this.hls.trigger(Events.FRAG_LOADING,{frag,targetBufferTime});if(this.fragCurrent===null){return Promise.reject(new Error(`frag load aborted, context changed in FRAG_LOADING`));}return result;}doFragPartsLoad(frag,fromPart,level,progressCallback){return new Promise((resolve,reject)=>{var _level$details;const partsLoaded=[];const initialPartList=(_level$details=level.details)==null?void 0:_level$details.partList;const loadPart=part=>{this.fragmentLoader.loadPart(frag,part,progressCallback).then(partLoadedData=>{partsLoaded[part.index]=partLoadedData;const loadedPart=partLoadedData.part;this.hls.trigger(Events.FRAG_LOADED,partLoadedData);const nextPart=getPartWith(level,frag.sn,part.index+1)||findPart(initialPartList,frag.sn,part.index+1);if(nextPart){loadPart(nextPart);}else {return resolve({frag,part:loadedPart,partsLoaded});}}).catch(reject);};loadPart(fromPart);});}handleFragLoadError(error){if('data'in error){const data=error.data;if(error.data&&data.details===ErrorDetails.INTERNAL_ABORTED){this.handleFragLoadAborted(data.frag,data.part);}else {this.hls.trigger(Events.ERROR,data);}}else {this.hls.trigger(Events.ERROR,{type:ErrorTypes.OTHER_ERROR,details:ErrorDetails.INTERNAL_EXCEPTION,err:error,error,fatal:true});}return null;}_handleTransmuxerFlush(chunkMeta){const context=this.getCurrentContext(chunkMeta);if(!context||this.state!==State.PARSING){if(!this.fragCurrent&&this.state!==State.STOPPED&&this.state!==State.ERROR){this.state=State.IDLE;}return;}const{frag,part,level}=context;const now=self.performance.now();frag.stats.parsing.end=now;if(part){part.stats.parsing.end=now;}this.updateLevelTiming(frag,part,level,chunkMeta.partial);}getCurrentContext(chunkMeta){const{levels,fragCurrent}=this;const{level:levelIndex,sn,part:partIndex}=chunkMeta;if(!(levels!=null&&levels[levelIndex])){this.warn(`Levels object was unset while buffering fragment ${sn} of level ${levelIndex}. The current chunk will not be buffered.`);return null;}const level=levels[levelIndex];const part=partIndex>-1?getPartWith(level,sn,partIndex):null;const frag=part?part.fragment:getFragmentWithSN(level,sn,fragCurrent);if(!frag){return null;}if(fragCurrent&&fragCurrent!==frag){frag.stats=fragCurrent.stats;}return {frag,part,level};}bufferFragmentData(data,frag,part,chunkMeta,noBacktracking){var _buffer;if(!data||this.state!==State.PARSING){return;}const{data1,data2}=data;let buffer=data1;if(data1&&data2){// Combine the moof + mdat so that we buffer with a single append
buffer=appendUint8Array(data1,data2);}if(!((_buffer=buffer)!=null&&_buffer.length)){return;}const segment={type:data.type,frag,part,chunkMeta,parent:frag.type,data:buffer};this.hls.trigger(Events.BUFFER_APPENDING,segment);if(data.dropped&&data.independent&&!part){if(noBacktracking){return;}// Clear buffer so that we reload previous segments sequentially if required
this.flushBufferGap(frag);}}flushBufferGap(frag){const media=this.media;if(!media){return;}// If currentTime is not buffered, clear the back buffer so that we can backtrack as much as needed
if(!BufferHelper.isBuffered(media,media.currentTime)){this.flushMainBuffer(0,frag.start);return;}// Remove back-buffer without interrupting playback to allow back tracking
const currentTime=media.currentTime;const bufferInfo=BufferHelper.bufferInfo(media,currentTime,0);const fragDuration=frag.duration;const segmentFraction=Math.min(this.config.maxFragLookUpTolerance*2,fragDuration*0.25);const start=Math.max(Math.min(frag.start-segmentFraction,bufferInfo.end-segmentFraction),currentTime+segmentFraction);if(frag.start-start>segmentFraction){this.flushMainBuffer(start,frag.start);}}getFwdBufferInfo(bufferable,type){const pos=this.getLoadPosition();if(!isFiniteNumber(pos)){return null;}return this.getFwdBufferInfoAtPos(bufferable,pos,type);}getFwdBufferInfoAtPos(bufferable,pos,type){const{config:{maxBufferHole}}=this;const bufferInfo=BufferHelper.bufferInfo(bufferable,pos,maxBufferHole);// Workaround flaw in getting forward buffer when maxBufferHole is smaller than gap at current pos
if(bufferInfo.len===0&&bufferInfo.nextStart!==undefined){const bufferedFragAtPos=this.fragmentTracker.getBufferedFrag(pos,type);if(bufferedFragAtPos&&bufferInfo.nextStart<bufferedFragAtPos.end){return BufferHelper.bufferInfo(bufferable,pos,Math.max(bufferInfo.nextStart,maxBufferHole));}}return bufferInfo;}getMaxBufferLength(levelBitrate){const{config}=this;let maxBufLen;if(levelBitrate){maxBufLen=Math.max(8*config.maxBufferSize/levelBitrate,config.maxBufferLength);}else {maxBufLen=config.maxBufferLength;}return Math.min(maxBufLen,config.maxMaxBufferLength);}reduceMaxBufferLength(threshold,fragDuration){const config=this.config;const minLength=Math.max(Math.min(threshold-fragDuration,config.maxBufferLength),fragDuration);const reducedLength=Math.max(threshold-fragDuration*3,config.maxMaxBufferLength/2,minLength);if(reducedLength>=minLength){// reduce max buffer length as it might be too high. we do this to avoid loop flushing ...
config.maxMaxBufferLength=reducedLength;this.warn(`Reduce max buffer length to ${reducedLength}s`);return true;}return false;}getAppendedFrag(position,playlistType=PlaylistLevelType.MAIN){const fragOrPart=this.fragmentTracker.getAppendedFrag(position,PlaylistLevelType.MAIN);if(fragOrPart&&'fragment'in fragOrPart){return fragOrPart.fragment;}return fragOrPart;}getNextFragment(pos,levelDetails){const fragments=levelDetails.fragments;const fragLen=fragments.length;if(!fragLen){return null;}// find fragment index, contiguous with end of buffer position
const{config}=this;const start=fragments[0].start;let frag;if(levelDetails.live){const initialLiveManifestSize=config.initialLiveManifestSize;if(fragLen<initialLiveManifestSize){this.warn(`Not enough fragments to start playback (have: ${fragLen}, need: ${initialLiveManifestSize})`);return null;}// The real fragment start times for a live stream are only known after the PTS range for that level is known.
// In order to discover the range, we load the best matching fragment for that level and demux it.
// Do not load using live logic if the starting frag is requested - we want to use getFragmentAtPosition() so that
// we get the fragment matching that start time
if(!levelDetails.PTSKnown&&!this.startFragRequested&&this.startPosition===-1||pos<start){frag=this.getInitialLiveFragment(levelDetails,fragments);this.startPosition=this.nextLoadPosition=frag?this.hls.liveSyncPosition||frag.start:pos;}}else if(pos<=start){// VoD playlist: if loadPosition before start of playlist, load first fragment
frag=fragments[0];}// If we haven't run into any special cases already, just load the fragment most closely matching the requested position
if(!frag){const end=config.lowLatencyMode?levelDetails.partEnd:levelDetails.fragmentEnd;frag=this.getFragmentAtPosition(pos,end,levelDetails);}return this.mapToInitFragWhenRequired(frag);}isLoopLoading(frag,targetBufferTime){const trackerState=this.fragmentTracker.getState(frag);return (trackerState===FragmentState.OK||trackerState===FragmentState.PARTIAL&&!!frag.gap)&&this.nextLoadPosition>targetBufferTime;}getNextFragmentLoopLoading(frag,levelDetails,bufferInfo,playlistType,maxBufLen){const gapStart=frag.gap;const nextFragment=this.getNextFragment(this.nextLoadPosition,levelDetails);if(nextFragment===null){return nextFragment;}frag=nextFragment;if(gapStart&&frag&&!frag.gap&&bufferInfo.nextStart){// Media buffered after GAP tags should not make the next buffer timerange exceed forward buffer length
const nextbufferInfo=this.getFwdBufferInfoAtPos(this.mediaBuffer?this.mediaBuffer:this.media,bufferInfo.nextStart,playlistType);if(nextbufferInfo!==null&&bufferInfo.len+nextbufferInfo.len>=maxBufLen){// Returning here might result in not finding an audio and video candiate to skip to
this.log(`buffer full after gaps in "${playlistType}" playlist starting at sn: ${frag.sn}`);return null;}}return frag;}mapToInitFragWhenRequired(frag){// If an initSegment is present, it must be buffered first
if(frag!=null&&frag.initSegment&&!(frag!=null&&frag.initSegment.data)&&!this.bitrateTest){return frag.initSegment;}return frag;}getNextPart(partList,frag,targetBufferTime){let nextPart=-1;let contiguous=false;let independentAttrOmitted=true;for(let i=0,len=partList.length;i<len;i++){const part=partList[i];independentAttrOmitted=independentAttrOmitted&&!part.independent;if(nextPart>-1&&targetBufferTime<part.start){break;}const loaded=part.loaded;if(loaded){nextPart=-1;}else if((contiguous||part.independent||independentAttrOmitted)&&part.fragment===frag){nextPart=i;}contiguous=loaded;}return nextPart;}loadedEndOfParts(partList,targetBufferTime){const lastPart=partList[partList.length-1];return lastPart&&targetBufferTime>lastPart.start&&lastPart.loaded;}/*
   This method is used find the best matching first fragment for a live playlist. This fragment is used to calculate the
   "sliding" of the playlist, which is its offset from the start of playback. After sliding we can compute the real
   start and end times for each fragment in the playlist (after which this method will not need to be called).
  */getInitialLiveFragment(levelDetails,fragments){const fragPrevious=this.fragPrevious;let frag=null;if(fragPrevious){if(levelDetails.hasProgramDateTime){// Prefer using PDT, because it can be accurate enough to choose the correct fragment without knowing the level sliding
this.log(`Live playlist, switching playlist, load frag with same PDT: ${fragPrevious.programDateTime}`);frag=findFragmentByPDT(fragments,fragPrevious.endProgramDateTime,this.config.maxFragLookUpTolerance);}if(!frag){// SN does not need to be accurate between renditions, but depending on the packaging it may be so.
const targetSN=fragPrevious.sn+1;if(targetSN>=levelDetails.startSN&&targetSN<=levelDetails.endSN){const fragNext=fragments[targetSN-levelDetails.startSN];// Ensure that we're staying within the continuity range, since PTS resets upon a new range
if(fragPrevious.cc===fragNext.cc){frag=fragNext;this.log(`Live playlist, switching playlist, load frag with next SN: ${frag.sn}`);}}// It's important to stay within the continuity range if available; otherwise the fragments in the playlist
// will have the wrong start times
if(!frag){frag=findFragWithCC(fragments,fragPrevious.cc);if(frag){this.log(`Live playlist, switching playlist, load frag with same CC: ${frag.sn}`);}}}}else {// Find a new start fragment when fragPrevious is null
const liveStart=this.hls.liveSyncPosition;if(liveStart!==null){frag=this.getFragmentAtPosition(liveStart,this.bitrateTest?levelDetails.fragmentEnd:levelDetails.edge,levelDetails);}}return frag;}/*
  This method finds the best matching fragment given the provided position.
   */getFragmentAtPosition(bufferEnd,end,levelDetails){const{config}=this;let{fragPrevious}=this;let{fragments,endSN}=levelDetails;const{fragmentHint}=levelDetails;const{maxFragLookUpTolerance}=config;const partList=levelDetails.partList;const loadingParts=!!(config.lowLatencyMode&&partList!=null&&partList.length&&fragmentHint);if(loadingParts&&fragmentHint&&!this.bitrateTest){// Include incomplete fragment with parts at end
fragments=fragments.concat(fragmentHint);endSN=fragmentHint.sn;}let frag;if(bufferEnd<end){const lookupTolerance=bufferEnd>end-maxFragLookUpTolerance?0:maxFragLookUpTolerance;// Remove the tolerance if it would put the bufferEnd past the actual end of stream
// Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)
frag=findFragmentByPTS(fragPrevious,fragments,bufferEnd,lookupTolerance);}else {// reach end of playlist
frag=fragments[fragments.length-1];}if(frag){const curSNIdx=frag.sn-levelDetails.startSN;// Move fragPrevious forward to support forcing the next fragment to load
// when the buffer catches up to a previously buffered range.
const fragState=this.fragmentTracker.getState(frag);if(fragState===FragmentState.OK||fragState===FragmentState.PARTIAL&&frag.gap){fragPrevious=frag;}if(fragPrevious&&frag.sn===fragPrevious.sn&&(!loadingParts||partList[0].fragment.sn>frag.sn)){// Force the next fragment to load if the previous one was already selected. This can occasionally happen with
// non-uniform fragment durations
const sameLevel=fragPrevious&&frag.level===fragPrevious.level;if(sameLevel){const nextFrag=fragments[curSNIdx+1];if(frag.sn<endSN&&this.fragmentTracker.getState(nextFrag)!==FragmentState.OK){frag=nextFrag;}else {frag=null;}}}}return frag;}synchronizeToLiveEdge(levelDetails){const{config,media}=this;if(!media){return;}const liveSyncPosition=this.hls.liveSyncPosition;const currentTime=media.currentTime;const start=levelDetails.fragments[0].start;const end=levelDetails.edge;const withinSlidingWindow=currentTime>=start-config.maxFragLookUpTolerance&&currentTime<=end;// Continue if we can seek forward to sync position or if current time is outside of sliding window
if(liveSyncPosition!==null&&media.duration>liveSyncPosition&&(currentTime<liveSyncPosition||!withinSlidingWindow)){// Continue if buffer is starving or if current time is behind max latency
const maxLatency=config.liveMaxLatencyDuration!==undefined?config.liveMaxLatencyDuration:config.liveMaxLatencyDurationCount*levelDetails.targetduration;if(!withinSlidingWindow&&media.readyState<4||currentTime<end-maxLatency){if(!this.loadedmetadata){this.nextLoadPosition=liveSyncPosition;}// Only seek if ready and there is not a significant forward buffer available for playback
if(media.readyState){this.warn(`Playback: ${currentTime.toFixed(3)} is located too far from the end of live sliding playlist: ${end}, reset currentTime to : ${liveSyncPosition.toFixed(3)}`);media.currentTime=liveSyncPosition;}}}}alignPlaylists(details,previousDetails,switchDetails){// FIXME: If not for `shouldAlignOnDiscontinuities` requiring fragPrevious.cc,
//  this could all go in level-helper mergeDetails()
const length=details.fragments.length;if(!length){this.warn(`No fragments in live playlist`);return 0;}const slidingStart=details.fragments[0].start;const firstLevelLoad=!previousDetails;const aligned=details.alignedSliding&&isFiniteNumber(slidingStart);if(firstLevelLoad||!aligned&&!slidingStart){const{fragPrevious}=this;alignStream(fragPrevious,switchDetails,details);const alignedSlidingStart=details.fragments[0].start;this.log(`Live playlist sliding: ${alignedSlidingStart.toFixed(2)} start-sn: ${previousDetails?previousDetails.startSN:'na'}->${details.startSN} prev-sn: ${fragPrevious?fragPrevious.sn:'na'} fragments: ${length}`);return alignedSlidingStart;}return slidingStart;}waitForCdnTuneIn(details){// Wait for Low-Latency CDN Tune-in to get an updated playlist
const advancePartLimit=3;return details.live&&details.canBlockReload&&details.partTarget&&details.tuneInGoal>Math.max(details.partHoldBack,details.partTarget*advancePartLimit);}setStartPosition(details,sliding){// compute start position if set to -1. use it straight away if value is defined
let startPosition=this.startPosition;if(startPosition<sliding){startPosition=-1;}if(startPosition===-1||this.lastCurrentTime===-1){// Use Playlist EXT-X-START:TIME-OFFSET when set
// Prioritize Multivariant Playlist offset so that main, audio, and subtitle stream-controller start times match
const offsetInMultivariantPlaylist=this.startTimeOffset!==null;const startTimeOffset=offsetInMultivariantPlaylist?this.startTimeOffset:details.startTimeOffset;if(startTimeOffset!==null&&isFiniteNumber(startTimeOffset)){startPosition=sliding+startTimeOffset;if(startTimeOffset<0){startPosition+=details.totalduration;}startPosition=Math.min(Math.max(sliding,startPosition),sliding+details.totalduration);this.log(`Start time offset ${startTimeOffset} found in ${offsetInMultivariantPlaylist?'multivariant':'media'} playlist, adjust startPosition to ${startPosition}`);this.startPosition=startPosition;}else if(details.live){// Leave this.startPosition at -1, so that we can use `getInitialLiveFragment` logic when startPosition has
// not been specified via the config or an as an argument to startLoad (#3736).
startPosition=this.hls.liveSyncPosition||sliding;}else {this.startPosition=startPosition=0;}this.lastCurrentTime=startPosition;}this.nextLoadPosition=startPosition;}getLoadPosition(){const{media}=this;// if we have not yet loaded any fragment, start loading from start position
let pos=0;if(this.loadedmetadata&&media){pos=media.currentTime;}else if(this.nextLoadPosition){pos=this.nextLoadPosition;}return pos;}handleFragLoadAborted(frag,part){if(this.transmuxer&&frag.sn!=='initSegment'&&frag.stats.aborted){this.warn(`Fragment ${frag.sn}${part?' part '+part.index:''} of level ${frag.level} was aborted`);this.resetFragmentLoading(frag);}}resetFragmentLoading(frag){if(!this.fragCurrent||!this.fragContextChanged(frag)&&this.state!==State.FRAG_LOADING_WAITING_RETRY){this.state=State.IDLE;}}onFragmentOrKeyLoadError(filterType,data){if(data.chunkMeta&&!data.frag){const context=this.getCurrentContext(data.chunkMeta);if(context){data.frag=context.frag;}}const frag=data.frag;// Handle frag error related to caller's filterType
if(!frag||frag.type!==filterType||!this.levels){return;}if(this.fragContextChanged(frag)){var _this$fragCurrent2;this.warn(`Frag load error must match current frag to retry ${frag.url} > ${(_this$fragCurrent2=this.fragCurrent)==null?void 0:_this$fragCurrent2.url}`);return;}const gapTagEncountered=data.details===ErrorDetails.FRAG_GAP;if(gapTagEncountered){this.fragmentTracker.fragBuffered(frag,true);}// keep retrying until the limit will be reached
const errorAction=data.errorAction;const{action,retryCount=0,retryConfig}=errorAction||{};if(errorAction&&action===NetworkErrorAction.RetryRequest&&retryConfig){this.resetStartWhenNotLoaded(this.levelLastLoaded);const delay=getRetryDelay(retryConfig,retryCount);this.warn(`Fragment ${frag.sn} of ${filterType} ${frag.level} errored with ${data.details}, retrying loading ${retryCount+1}/${retryConfig.maxNumRetry} in ${delay}ms`);errorAction.resolved=true;this.retryDate=self.performance.now()+delay;this.state=State.FRAG_LOADING_WAITING_RETRY;}else if(retryConfig&&errorAction){this.resetFragmentErrors(filterType);if(retryCount<retryConfig.maxNumRetry){// Network retry is skipped when level switch is preferred
if(!gapTagEncountered&&action!==NetworkErrorAction.RemoveAlternatePermanently){errorAction.resolved=true;}}else {logger$2.warn(`${data.details} reached or exceeded max retry (${retryCount})`);return;}}else if((errorAction==null?void 0:errorAction.action)===NetworkErrorAction.SendAlternateToPenaltyBox){this.state=State.WAITING_LEVEL;}else {this.state=State.ERROR;}// Perform next async tick sooner to speed up error action resolution
this.tickImmediate();}reduceLengthAndFlushBuffer(data){// if in appending state
if(this.state===State.PARSING||this.state===State.PARSED){const frag=data.frag;const playlistType=data.parent;const bufferedInfo=this.getFwdBufferInfo(this.mediaBuffer,playlistType);// 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end
// reduce max buf len if current position is buffered
const buffered=bufferedInfo&&bufferedInfo.len>0.5;if(buffered){this.reduceMaxBufferLength(bufferedInfo.len,(frag==null?void 0:frag.duration)||10);}const flushBuffer=!buffered;if(flushBuffer){// current position is not buffered, but browser is still complaining about buffer full error
// this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708
// in that case flush the whole audio buffer to recover
this.warn(`Buffer full error while media.currentTime is not buffered, flush ${playlistType} buffer`);}if(frag){this.fragmentTracker.removeFragment(frag);this.nextLoadPosition=frag.start;}this.resetLoadingState();return flushBuffer;}return false;}resetFragmentErrors(filterType){if(filterType===PlaylistLevelType.AUDIO){// Reset current fragment since audio track audio is essential and may not have a fail-over track
this.fragCurrent=null;}// Fragment errors that result in a level switch or redundant fail-over
// should reset the stream controller state to idle
if(!this.loadedmetadata){this.startFragRequested=false;}if(this.state!==State.STOPPED){this.state=State.IDLE;}}afterBufferFlushed(media,bufferType,playlistType){if(!media){return;}// After successful buffer flushing, filter flushed fragments from bufferedFrags use mediaBuffered instead of media
// (so that we will check against video.buffered ranges in case of alt audio track)
const bufferedTimeRanges=BufferHelper.getBuffered(media);this.fragmentTracker.detectEvictedFragments(bufferType,bufferedTimeRanges,playlistType);if(this.state===State.ENDED){this.resetLoadingState();}}resetLoadingState(){this.log('Reset loading state');this.fragCurrent=null;this.fragPrevious=null;this.state=State.IDLE;}resetStartWhenNotLoaded(level){// if loadedmetadata is not set, it means that first frag request failed
// in that case, reset startFragRequested flag
if(!this.loadedmetadata){this.startFragRequested=false;const details=level?level.details:null;if(details!=null&&details.live){// Update the start position and return to IDLE to recover live start
this.startPosition=-1;this.setStartPosition(details,0);this.resetLoadingState();}else {this.nextLoadPosition=this.startPosition;}}}resetWhenMissingContext(chunkMeta){this.warn(`The loading context changed while buffering fragment ${chunkMeta.sn} of level ${chunkMeta.level}. This chunk will not be buffered.`);this.removeUnbufferedFrags();this.resetStartWhenNotLoaded(this.levelLastLoaded);this.resetLoadingState();}removeUnbufferedFrags(start=0){this.fragmentTracker.removeFragmentsInRange(start,Infinity,this.playlistType,false,true);}updateLevelTiming(frag,part,level,partial){var _this$transmuxer;const details=level.details;if(!details){this.warn('level.details undefined');return;}const parsed=Object.keys(frag.elementaryStreams).reduce((result,type)=>{const info=frag.elementaryStreams[type];if(info){const parsedDuration=info.endPTS-info.startPTS;if(parsedDuration<=0){// Destroy the transmuxer after it's next time offset failed to advance because duration was <= 0.
// The new transmuxer will be configured with a time offset matching the next fragment start,
// preventing the timeline from shifting.
this.warn(`Could not parse fragment ${frag.sn} ${type} duration reliably (${parsedDuration})`);return result||false;}const drift=partial?0:updateFragPTSDTS(details,frag,info.startPTS,info.endPTS,info.startDTS,info.endDTS);this.hls.trigger(Events.LEVEL_PTS_UPDATED,{details,level,drift,type,frag,start:info.startPTS,end:info.endPTS});return true;}return result;},false);if(!parsed&&((_this$transmuxer=this.transmuxer)==null?void 0:_this$transmuxer.error)===null){const error=new Error(`Found no media in fragment ${frag.sn} of level ${frag.level} resetting transmuxer to fallback to playlist timing`);if(level.fragmentError===0){// Mark and track the odd empty segment as a gap to avoid reloading
level.fragmentError++;frag.gap=true;this.fragmentTracker.removeFragment(frag);this.fragmentTracker.fragBuffered(frag,true);}this.warn(error.message);this.hls.trigger(Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.FRAG_PARSING_ERROR,fatal:false,error,frag,reason:`Found no media in msn ${frag.sn} of level "${level.url}"`});if(!this.hls){return;}this.resetTransmuxer();// For this error fallthrough. Marking parsed will allow advancing to next fragment.
}this.state=State.PARSED;this.hls.trigger(Events.FRAG_PARSED,{frag,part});}resetTransmuxer(){if(this.transmuxer){this.transmuxer.destroy();this.transmuxer=null;}}recoverWorkerError(data){if(data.event==='demuxerWorker'){this.fragmentTracker.removeAllFragments();this.resetTransmuxer();this.resetStartWhenNotLoaded(this.levelLastLoaded);this.resetLoadingState();}}set state(nextState){const previousState=this._state;if(previousState!==nextState){this._state=nextState;this.log(`${previousState}->${nextState}`);}}get state(){return this._state;}}class ChunkCache{constructor(){this.chunks=[];this.dataLength=0;}push(chunk){this.chunks.push(chunk);this.dataLength+=chunk.length;}flush(){const{chunks,dataLength}=this;let result;if(!chunks.length){return new Uint8Array(0);}else if(chunks.length===1){result=chunks[0];}else {result=concatUint8Arrays(chunks,dataLength);}this.reset();return result;}reset(){this.chunks.length=0;this.dataLength=0;}}function concatUint8Arrays(chunks,dataLength){const result=new Uint8Array(dataLength);let offset=0;for(let i=0;i<chunks.length;i++){const chunk=chunks[i];result.set(chunk,offset);offset+=chunk.length;}return result;}// ensure the worker ends up in the bundle
// If the worker should not be included this gets aliased to empty.js
function hasUMDWorker(){return typeof __HLS_WORKER_BUNDLE__==='function';}function injectWorker(){const blob=new self.Blob([`var exports={};var module={exports:exports};function define(f){f()};define.amd=true;(${__HLS_WORKER_BUNDLE__.toString()})(true);`],{type:'text/javascript'});const objectURL=self.URL.createObjectURL(blob);const worker=new self.Worker(objectURL);return {worker,objectURL};}function loadWorker(path){const scriptURL=new self.URL(path,self.location.href).href;const worker=new self.Worker(scriptURL);return {worker,scriptURL};}function dummyTrack(type='',inputTimeScale=90000){return {type,id:-1,pid:-1,inputTimeScale,sequenceNumber:-1,samples:[],dropped:0};}class BaseAudioDemuxer{constructor(){this._audioTrack=void 0;this._id3Track=void 0;this.frameIndex=0;this.cachedData=null;this.basePTS=null;this.initPTS=null;this.lastPTS=null;}resetInitSegment(initSegment,audioCodec,videoCodec,trackDuration){this._id3Track={type:'id3',id:3,pid:-1,inputTimeScale:90000,sequenceNumber:0,samples:[],dropped:0};}resetTimeStamp(deaultTimestamp){this.initPTS=deaultTimestamp;this.resetContiguity();}resetContiguity(){this.basePTS=null;this.lastPTS=null;this.frameIndex=0;}canParse(data,offset){return false;}appendFrame(track,data,offset){}// feed incoming data to the front of the parsing pipeline
demux(data,timeOffset){if(this.cachedData){data=appendUint8Array(this.cachedData,data);this.cachedData=null;}let id3Data=getID3Data(data,0);let offset=id3Data?id3Data.length:0;let lastDataIndex;const track=this._audioTrack;const id3Track=this._id3Track;const timestamp=id3Data?getTimeStamp(id3Data):undefined;const length=data.length;if(this.basePTS===null||this.frameIndex===0&&isFiniteNumber(timestamp)){this.basePTS=initPTSFn(timestamp,timeOffset,this.initPTS);this.lastPTS=this.basePTS;}if(this.lastPTS===null){this.lastPTS=this.basePTS;}// more expressive than alternative: id3Data?.length
if(id3Data&&id3Data.length>0){id3Track.samples.push({pts:this.lastPTS,dts:this.lastPTS,data:id3Data,type:MetadataSchema.audioId3,duration:Number.POSITIVE_INFINITY});}while(offset<length){if(this.canParse(data,offset)){const frame=this.appendFrame(track,data,offset);if(frame){this.frameIndex++;this.lastPTS=frame.sample.pts;offset+=frame.length;lastDataIndex=offset;}else {offset=length;}}else if(canParse$2(data,offset)){// after a ID3.canParse, a call to ID3.getID3Data *should* always returns some data
id3Data=getID3Data(data,offset);id3Track.samples.push({pts:this.lastPTS,dts:this.lastPTS,data:id3Data,type:MetadataSchema.audioId3,duration:Number.POSITIVE_INFINITY});offset+=id3Data.length;lastDataIndex=offset;}else {offset++;}if(offset===length&&lastDataIndex!==length){const partialData=sliceUint8(data,lastDataIndex);if(this.cachedData){this.cachedData=appendUint8Array(this.cachedData,partialData);}else {this.cachedData=partialData;}}}return {audioTrack:track,videoTrack:dummyTrack(),id3Track,textTrack:dummyTrack()};}demuxSampleAes(data,keyData,timeOffset){return Promise.reject(new Error(`[${this}] This demuxer does not support Sample-AES decryption`));}flush(timeOffset){// Parse cache in case of remaining frames.
const cachedData=this.cachedData;if(cachedData){this.cachedData=null;this.demux(cachedData,0);}return {audioTrack:this._audioTrack,videoTrack:dummyTrack(),id3Track:this._id3Track,textTrack:dummyTrack()};}destroy(){}}/**
 * Initialize PTS
 * <p>
 *    use timestamp unless it is undefined, NaN or Infinity
 * </p>
 */const initPTSFn=(timestamp,timeOffset,initPTS)=>{if(isFiniteNumber(timestamp)){return timestamp*90;}const init90kHz=initPTS?initPTS.baseTime*90000/initPTS.timescale:0;return timeOffset*90000+init90kHz;};/**
 * ADTS parser helper
 * @link https://wiki.multimedia.cx/index.php?title=ADTS
 */function getAudioConfig(observer,data,offset,audioCodec){let adtsObjectType;let adtsExtensionSamplingIndex;let adtsChannelConfig;let config;const userAgent=navigator.userAgent.toLowerCase();const manifestCodec=audioCodec;const adtsSamplingRates=[96000,88200,64000,48000,44100,32000,24000,22050,16000,12000,11025,8000,7350];// byte 2
adtsObjectType=((data[offset+2]&0xc0)>>>6)+1;const adtsSamplingIndex=(data[offset+2]&0x3c)>>>2;if(adtsSamplingIndex>adtsSamplingRates.length-1){const error=new Error(`invalid ADTS sampling index:${adtsSamplingIndex}`);observer.emit(Events.ERROR,Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.FRAG_PARSING_ERROR,fatal:true,error,reason:error.message});return;}adtsChannelConfig=(data[offset+2]&0x01)<<2;// byte 3
adtsChannelConfig|=(data[offset+3]&0xc0)>>>6;logger$2.log(`manifest codec:${audioCodec}, ADTS type:${adtsObjectType}, samplingIndex:${adtsSamplingIndex}`);// firefox: freq less than 24kHz = AAC SBR (HE-AAC)
if(/firefox/i.test(userAgent)){if(adtsSamplingIndex>=6){adtsObjectType=5;config=new Array(4);// HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies
// there is a factor 2 between frame sample rate and output sample rate
// multiply frequency by 2 (see table below, equivalent to substract 3)
adtsExtensionSamplingIndex=adtsSamplingIndex-3;}else {adtsObjectType=2;config=new Array(2);adtsExtensionSamplingIndex=adtsSamplingIndex;}// Android : always use AAC
}else if(userAgent.indexOf('android')!==-1){adtsObjectType=2;config=new Array(2);adtsExtensionSamplingIndex=adtsSamplingIndex;}else {/*  for other browsers (Chrome/Vivaldi/Opera ...)
        always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)
    */adtsObjectType=5;config=new Array(4);// if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)
if(audioCodec&&(audioCodec.indexOf('mp4a.40.29')!==-1||audioCodec.indexOf('mp4a.40.5')!==-1)||!audioCodec&&adtsSamplingIndex>=6){// HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies
// there is a factor 2 between frame sample rate and output sample rate
// multiply frequency by 2 (see table below, equivalent to substract 3)
adtsExtensionSamplingIndex=adtsSamplingIndex-3;}else {// if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)
// Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.
if(audioCodec&&audioCodec.indexOf('mp4a.40.2')!==-1&&(adtsSamplingIndex>=6&&adtsChannelConfig===1||/vivaldi/i.test(userAgent))||!audioCodec&&adtsChannelConfig===1){adtsObjectType=2;config=new Array(2);}adtsExtensionSamplingIndex=adtsSamplingIndex;}}/* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config
      ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()
    Audio Profile / Audio Object Type
    0: Null
    1: AAC Main
    2: AAC LC (Low Complexity)
    3: AAC SSR (Scalable Sample Rate)
    4: AAC LTP (Long Term Prediction)
    5: SBR (Spectral Band Replication)
    6: AAC Scalable
   sampling freq
    0: 96000 Hz
    1: 88200 Hz
    2: 64000 Hz
    3: 48000 Hz
    4: 44100 Hz
    5: 32000 Hz
    6: 24000 Hz
    7: 22050 Hz
    8: 16000 Hz
    9: 12000 Hz
    10: 11025 Hz
    11: 8000 Hz
    12: 7350 Hz
    13: Reserved
    14: Reserved
    15: frequency is written explictly
    Channel Configurations
    These are the channel configurations:
    0: Defined in AOT Specifc Config
    1: 1 channel: front-center
    2: 2 channels: front-left, front-right
  */// audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1
config[0]=adtsObjectType<<3;// samplingFrequencyIndex
config[0]|=(adtsSamplingIndex&0x0e)>>1;config[1]|=(adtsSamplingIndex&0x01)<<7;// channelConfiguration
config[1]|=adtsChannelConfig<<3;if(adtsObjectType===5){// adtsExtensionSamplingIndex
config[1]|=(adtsExtensionSamplingIndex&0x0e)>>1;config[2]=(adtsExtensionSamplingIndex&0x01)<<7;// adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???
//    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc
config[2]|=2<<2;config[3]=0;}return {config,samplerate:adtsSamplingRates[adtsSamplingIndex],channelCount:adtsChannelConfig,codec:'mp4a.40.'+adtsObjectType,manifestCodec};}function isHeaderPattern$1(data,offset){return data[offset]===0xff&&(data[offset+1]&0xf6)===0xf0;}function getHeaderLength(data,offset){return data[offset+1]&0x01?7:9;}function getFullFrameLength(data,offset){return (data[offset+3]&0x03)<<11|data[offset+4]<<3|(data[offset+5]&0xe0)>>>5;}function canGetFrameLength(data,offset){return offset+5<data.length;}function isHeader$1(data,offset){// Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1
// Layer bits (position 14 and 15) in header should be always 0 for ADTS
// More info https://wiki.multimedia.cx/index.php?title=ADTS
return offset+1<data.length&&isHeaderPattern$1(data,offset);}function canParse$1(data,offset){return canGetFrameLength(data,offset)&&isHeaderPattern$1(data,offset)&&getFullFrameLength(data,offset)<=data.length-offset;}function probe$1(data,offset){// same as isHeader but we also check that ADTS frame follows last ADTS frame
// or end of data is reached
if(isHeader$1(data,offset)){// ADTS header Length
const headerLength=getHeaderLength(data,offset);if(offset+headerLength>=data.length){return false;}// ADTS frame Length
const frameLength=getFullFrameLength(data,offset);if(frameLength<=headerLength){return false;}const newOffset=offset+frameLength;return newOffset===data.length||isHeader$1(data,newOffset);}return false;}function initTrackConfig(track,observer,data,offset,audioCodec){if(!track.samplerate){const config=getAudioConfig(observer,data,offset,audioCodec);if(!config){return;}track.config=config.config;track.samplerate=config.samplerate;track.channelCount=config.channelCount;track.codec=config.codec;track.manifestCodec=config.manifestCodec;logger$2.log(`parsed codec:${track.codec}, rate:${config.samplerate}, channels:${config.channelCount}`);}}function getFrameDuration(samplerate){return 1024*90000/samplerate;}function parseFrameHeader(data,offset){// The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header
const headerLength=getHeaderLength(data,offset);if(offset+headerLength<=data.length){// retrieve frame size
const frameLength=getFullFrameLength(data,offset)-headerLength;if(frameLength>0){// logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}`);
return {headerLength,frameLength};}}}function appendFrame$2(track,data,offset,pts,frameIndex){const frameDuration=getFrameDuration(track.samplerate);const stamp=pts+frameIndex*frameDuration;const header=parseFrameHeader(data,offset);let unit;if(header){const{frameLength,headerLength}=header;const _length=headerLength+frameLength;const missing=Math.max(0,offset+_length-data.length);// logger.log(`AAC frame ${frameIndex}, pts:${stamp} length@offset/total: ${frameLength}@${offset+headerLength}/${data.byteLength} missing: ${missing}`);
if(missing){unit=new Uint8Array(_length-headerLength);unit.set(data.subarray(offset+headerLength,data.length),0);}else {unit=data.subarray(offset+headerLength,offset+_length);}const _sample={unit,pts:stamp};if(!missing){track.samples.push(_sample);}return {sample:_sample,length:_length,missing};}// overflow incomplete header
const length=data.length-offset;unit=new Uint8Array(length);unit.set(data.subarray(offset,data.length),0);const sample={unit,pts:stamp};return {sample,length,missing:-1};}/**
 *  MPEG parser helper
 */let chromeVersion$1=null;const BitratesMap=[32,64,96,128,160,192,224,256,288,320,352,384,416,448,32,48,56,64,80,96,112,128,160,192,224,256,320,384,32,40,48,56,64,80,96,112,128,160,192,224,256,320,32,48,56,64,80,96,112,128,144,160,176,192,224,256,8,16,24,32,40,48,56,64,80,96,112,128,144,160];const SamplingRateMap=[44100,48000,32000,22050,24000,16000,11025,12000,8000];const SamplesCoefficients=[// MPEG 2.5
[0,// Reserved
72,// Layer3
144,// Layer2
12// Layer1
],// Reserved
[0,// Reserved
0,// Layer3
0,// Layer2
0// Layer1
],// MPEG 2
[0,// Reserved
72,// Layer3
144,// Layer2
12// Layer1
],// MPEG 1
[0,// Reserved
144,// Layer3
144,// Layer2
12// Layer1
]];const BytesInSlot=[0,// Reserved
1,// Layer3
1,// Layer2
4// Layer1
];function appendFrame$1(track,data,offset,pts,frameIndex){// Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference
if(offset+24>data.length){return;}const header=parseHeader(data,offset);if(header&&offset+header.frameLength<=data.length){const frameDuration=header.samplesPerFrame*90000/header.sampleRate;const stamp=pts+frameIndex*frameDuration;const sample={unit:data.subarray(offset,offset+header.frameLength),pts:stamp,dts:stamp};track.config=[];track.channelCount=header.channelCount;track.samplerate=header.sampleRate;track.samples.push(sample);return {sample,length:header.frameLength,missing:0};}}function parseHeader(data,offset){const mpegVersion=data[offset+1]>>3&3;const mpegLayer=data[offset+1]>>1&3;const bitRateIndex=data[offset+2]>>4&15;const sampleRateIndex=data[offset+2]>>2&3;if(mpegVersion!==1&&bitRateIndex!==0&&bitRateIndex!==15&&sampleRateIndex!==3){const paddingBit=data[offset+2]>>1&1;const channelMode=data[offset+3]>>6;const columnInBitrates=mpegVersion===3?3-mpegLayer:mpegLayer===3?3:4;const bitRate=BitratesMap[columnInBitrates*14+bitRateIndex-1]*1000;const columnInSampleRates=mpegVersion===3?0:mpegVersion===2?1:2;const sampleRate=SamplingRateMap[columnInSampleRates*3+sampleRateIndex];const channelCount=channelMode===3?1:2;// If bits of channel mode are `11` then it is a single channel (Mono)
const sampleCoefficient=SamplesCoefficients[mpegVersion][mpegLayer];const bytesInSlot=BytesInSlot[mpegLayer];const samplesPerFrame=sampleCoefficient*8*bytesInSlot;const frameLength=Math.floor(sampleCoefficient*bitRate/sampleRate+paddingBit)*bytesInSlot;if(chromeVersion$1===null){const userAgent=navigator.userAgent||'';const result=userAgent.match(/Chrome\/(\d+)/i);chromeVersion$1=result?parseInt(result[1]):0;}const needChromeFix=!!chromeVersion$1&&chromeVersion$1<=87;if(needChromeFix&&mpegLayer===2&&bitRate>=224000&&channelMode===0){// Work around bug in Chromium by setting channelMode to dual-channel (01) instead of stereo (00)
data[offset+3]=data[offset+3]|0x80;}return {sampleRate,channelCount,frameLength,samplesPerFrame};}}function isHeaderPattern(data,offset){return data[offset]===0xff&&(data[offset+1]&0xe0)===0xe0&&(data[offset+1]&0x06)!==0x00;}function isHeader(data,offset){// Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1
// Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)
// More info http://www.mp3-tech.org/programmer/frame_header.html
return offset+1<data.length&&isHeaderPattern(data,offset);}function canParse(data,offset){const headerSize=4;return isHeaderPattern(data,offset)&&headerSize<=data.length-offset;}function probe(data,offset){// same as isHeader but we also check that MPEG frame follows last MPEG frame
// or end of data is reached
if(offset+1<data.length&&isHeaderPattern(data,offset)){// MPEG header Length
const headerLength=4;// MPEG frame Length
const header=parseHeader(data,offset);let frameLength=headerLength;if(header!=null&&header.frameLength){frameLength=header.frameLength;}const newOffset=offset+frameLength;return newOffset===data.length||isHeader(data,newOffset);}return false;}/**
 * AAC demuxer
 */class AACDemuxer extends BaseAudioDemuxer{constructor(observer,config){super();this.observer=void 0;this.config=void 0;this.observer=observer;this.config=config;}resetInitSegment(initSegment,audioCodec,videoCodec,trackDuration){super.resetInitSegment(initSegment,audioCodec,videoCodec,trackDuration);this._audioTrack={container:'audio/adts',type:'audio',id:2,pid:-1,sequenceNumber:0,segmentCodec:'aac',samples:[],manifestCodec:audioCodec,duration:trackDuration,inputTimeScale:90000,dropped:0};}// Source for probe info - https://wiki.multimedia.cx/index.php?title=ADTS
static probe(data){if(!data){return false;}// Check for the ADTS sync word
// Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1
// Layer bits (position 14 and 15) in header should be always 0 for ADTS
// More info https://wiki.multimedia.cx/index.php?title=ADTS
const id3Data=getID3Data(data,0);let offset=(id3Data==null?void 0:id3Data.length)||0;if(probe(data,offset)){return false;}for(let length=data.length;offset<length;offset++){if(probe$1(data,offset)){logger$2.log('ADTS sync word found !');return true;}}return false;}canParse(data,offset){return canParse$1(data,offset);}appendFrame(track,data,offset){initTrackConfig(track,this.observer,data,offset,track.manifestCodec);const frame=appendFrame$2(track,data,offset,this.basePTS,this.frameIndex);if(frame&&frame.missing===0){return frame;}}}const emsgSchemePattern=/\/emsg[-/]ID3/i;class MP4Demuxer{constructor(observer,config){this.remainderData=null;this.timeOffset=0;this.config=void 0;this.videoTrack=void 0;this.audioTrack=void 0;this.id3Track=void 0;this.txtTrack=void 0;this.config=config;}resetTimeStamp(){}resetInitSegment(initSegment,audioCodec,videoCodec,trackDuration){const videoTrack=this.videoTrack=dummyTrack('video',1);const audioTrack=this.audioTrack=dummyTrack('audio',1);const captionTrack=this.txtTrack=dummyTrack('text',1);this.id3Track=dummyTrack('id3',1);this.timeOffset=0;if(!(initSegment!=null&&initSegment.byteLength)){return;}const initData=parseInitSegment(initSegment);if(initData.video){const{id,timescale,codec}=initData.video;videoTrack.id=id;videoTrack.timescale=captionTrack.timescale=timescale;videoTrack.codec=codec;}if(initData.audio){const{id,timescale,codec}=initData.audio;audioTrack.id=id;audioTrack.timescale=timescale;audioTrack.codec=codec;}captionTrack.id=RemuxerTrackIdConfig.text;videoTrack.sampleDuration=0;videoTrack.duration=audioTrack.duration=trackDuration;}resetContiguity(){this.remainderData=null;}static probe(data){return hasMoofData(data);}demux(data,timeOffset){this.timeOffset=timeOffset;// Load all data into the avc track. The CMAF remuxer will look for the data in the samples object; the rest of the fields do not matter
let videoSamples=data;const videoTrack=this.videoTrack;const textTrack=this.txtTrack;if(this.config.progressive){// Split the bytestream into two ranges: one encompassing all data up until the start of the last moof, and everything else.
// This is done to guarantee that we're sending valid data to MSE - when demuxing progressively, we have no guarantee
// that the fetch loader gives us flush moof+mdat pairs. If we push jagged data to MSE, it will throw an exception.
if(this.remainderData){videoSamples=appendUint8Array(this.remainderData,data);}const segmentedData=segmentValidRange(videoSamples);this.remainderData=segmentedData.remainder;videoTrack.samples=segmentedData.valid||new Uint8Array();}else {videoTrack.samples=videoSamples;}const id3Track=this.extractID3Track(videoTrack,timeOffset);textTrack.samples=parseSamples(timeOffset,videoTrack);return {videoTrack,audioTrack:this.audioTrack,id3Track,textTrack:this.txtTrack};}flush(){const timeOffset=this.timeOffset;const videoTrack=this.videoTrack;const textTrack=this.txtTrack;videoTrack.samples=this.remainderData||new Uint8Array();this.remainderData=null;const id3Track=this.extractID3Track(videoTrack,this.timeOffset);textTrack.samples=parseSamples(timeOffset,videoTrack);return {videoTrack,audioTrack:dummyTrack(),id3Track,textTrack:dummyTrack()};}extractID3Track(videoTrack,timeOffset){const id3Track=this.id3Track;if(videoTrack.samples.length){const emsgs=findBox(videoTrack.samples,['emsg']);if(emsgs){emsgs.forEach(data=>{const emsgInfo=parseEmsg(data);if(emsgSchemePattern.test(emsgInfo.schemeIdUri)){const pts=isFiniteNumber(emsgInfo.presentationTime)?emsgInfo.presentationTime/emsgInfo.timeScale:timeOffset+emsgInfo.presentationTimeDelta/emsgInfo.timeScale;let duration=emsgInfo.eventDuration===0xffffffff?Number.POSITIVE_INFINITY:emsgInfo.eventDuration/emsgInfo.timeScale;// Safari takes anything <= 0.001 seconds and maps it to Infinity
if(duration<=0.001){duration=Number.POSITIVE_INFINITY;}const payload=emsgInfo.payload;id3Track.samples.push({data:payload,len:payload.byteLength,dts:pts,pts:pts,type:MetadataSchema.emsg,duration:duration});}});}}return id3Track;}demuxSampleAes(data,keyData,timeOffset){return Promise.reject(new Error('The MP4 demuxer does not support SAMPLE-AES decryption'));}destroy(){}}const getAudioBSID=(data,offset)=>{// check the bsid to confirm ac-3 | ec-3
let bsid=0;let numBits=5;offset+=numBits;const temp=new Uint32Array(1);// unsigned 32 bit for temporary storage
const mask=new Uint32Array(1);// unsigned 32 bit mask value
const byte=new Uint8Array(1);// unsigned 8 bit for temporary storage
while(numBits>0){byte[0]=data[offset];// read remaining bits, upto 8 bits at a time
const bits=Math.min(numBits,8);const shift=8-bits;mask[0]=0xff000000>>>24+shift<<shift;temp[0]=(byte[0]&mask[0])>>shift;bsid=!bsid?temp[0]:bsid<<bits|temp[0];offset+=1;numBits-=bits;}return bsid;};class AC3Demuxer extends BaseAudioDemuxer{constructor(observer){super();this.observer=void 0;this.observer=observer;}resetInitSegment(initSegment,audioCodec,videoCodec,trackDuration){super.resetInitSegment(initSegment,audioCodec,videoCodec,trackDuration);this._audioTrack={container:'audio/ac-3',type:'audio',id:2,pid:-1,sequenceNumber:0,segmentCodec:'ac3',samples:[],manifestCodec:audioCodec,duration:trackDuration,inputTimeScale:90000,dropped:0};}canParse(data,offset){return offset+64<data.length;}appendFrame(track,data,offset){const frameLength=appendFrame(track,data,offset,this.basePTS,this.frameIndex);if(frameLength!==-1){const sample=track.samples[track.samples.length-1];return {sample,length:frameLength,missing:0};}}static probe(data){if(!data){return false;}const id3Data=getID3Data(data,0);if(!id3Data){return false;}// look for the ac-3 sync bytes
const offset=id3Data.length;if(data[offset]===0x0b&&data[offset+1]===0x77&&getTimeStamp(id3Data)!==undefined&&// check the bsid to confirm ac-3
getAudioBSID(data,offset)<16){return true;}return false;}}function appendFrame(track,data,start,pts,frameIndex){if(start+8>data.length){return -1;// not enough bytes left
}if(data[start]!==0x0b||data[start+1]!==0x77){return -1;// invalid magic
}// get sample rate
const samplingRateCode=data[start+4]>>6;if(samplingRateCode>=3){return -1;// invalid sampling rate
}const samplingRateMap=[48000,44100,32000];const sampleRate=samplingRateMap[samplingRateCode];// get frame size
const frameSizeCode=data[start+4]&0x3f;const frameSizeMap=[64,69,96,64,70,96,80,87,120,80,88,120,96,104,144,96,105,144,112,121,168,112,122,168,128,139,192,128,140,192,160,174,240,160,175,240,192,208,288,192,209,288,224,243,336,224,244,336,256,278,384,256,279,384,320,348,480,320,349,480,384,417,576,384,418,576,448,487,672,448,488,672,512,557,768,512,558,768,640,696,960,640,697,960,768,835,1152,768,836,1152,896,975,1344,896,976,1344,1024,1114,1536,1024,1115,1536,1152,1253,1728,1152,1254,1728,1280,1393,1920,1280,1394,1920];const frameLength=frameSizeMap[frameSizeCode*3+samplingRateCode]*2;if(start+frameLength>data.length){return -1;}// get channel count
const channelMode=data[start+6]>>5;let skipCount=0;if(channelMode===2){skipCount+=2;}else {if(channelMode&1&&channelMode!==1){skipCount+=2;}if(channelMode&4){skipCount+=2;}}const lfeon=(data[start+6]<<8|data[start+7])>>12-skipCount&1;const channelsMap=[2,1,2,3,3,4,4,5];const channelCount=channelsMap[channelMode]+lfeon;// build dac3 box
const bsid=data[start+5]>>3;const bsmod=data[start+5]&7;const config=new Uint8Array([samplingRateCode<<6|bsid<<1|bsmod>>2,(bsmod&3)<<6|channelMode<<3|lfeon<<2|frameSizeCode>>4,frameSizeCode<<4&0xe0]);const frameDuration=1536/sampleRate*90000;const stamp=pts+frameIndex*frameDuration;const unit=data.subarray(start,start+frameLength);track.config=config;track.channelCount=channelCount;track.samplerate=sampleRate;track.samples.push({unit,pts:stamp});return frameLength;}class BaseVideoParser{constructor(){this.VideoSample=null;}createVideoSample(key,pts,dts,debug){return {key,frame:false,pts,dts,units:[],debug,length:0};}getLastNalUnit(samples){var _VideoSample;let VideoSample=this.VideoSample;let lastUnit;// try to fallback to previous sample if current one is empty
if(!VideoSample||VideoSample.units.length===0){VideoSample=samples[samples.length-1];}if((_VideoSample=VideoSample)!=null&&_VideoSample.units){const units=VideoSample.units;lastUnit=units[units.length-1];}return lastUnit;}pushAccessUnit(VideoSample,videoTrack){if(VideoSample.units.length&&VideoSample.frame){// if sample does not have PTS/DTS, patch with last sample PTS/DTS
if(VideoSample.pts===undefined){const samples=videoTrack.samples;const nbSamples=samples.length;if(nbSamples){const lastSample=samples[nbSamples-1];VideoSample.pts=lastSample.pts;VideoSample.dts=lastSample.dts;}else {// dropping samples, no timestamp found
videoTrack.dropped++;return;}}videoTrack.samples.push(VideoSample);}if(VideoSample.debug.length){logger$2.log(VideoSample.pts+'/'+VideoSample.dts+':'+VideoSample.debug);}}}/**
 * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.
 */class ExpGolomb{constructor(data){this.data=void 0;this.bytesAvailable=void 0;this.word=void 0;this.bitsAvailable=void 0;this.data=data;// the number of bytes left to examine in this.data
this.bytesAvailable=data.byteLength;// the current word being examined
this.word=0;// :uint
// the number of bits left to examine in the current word
this.bitsAvailable=0;// :uint
}// ():void
loadWord(){const data=this.data;const bytesAvailable=this.bytesAvailable;const position=data.byteLength-bytesAvailable;const workingBytes=new Uint8Array(4);const availableBytes=Math.min(4,bytesAvailable);if(availableBytes===0){throw new Error('no bytes available');}workingBytes.set(data.subarray(position,position+availableBytes));this.word=new DataView(workingBytes.buffer).getUint32(0);// track the amount of this.data that has been processed
this.bitsAvailable=availableBytes*8;this.bytesAvailable-=availableBytes;}// (count:int):void
skipBits(count){let skipBytes;// :int
count=Math.min(count,this.bytesAvailable*8+this.bitsAvailable);if(this.bitsAvailable>count){this.word<<=count;this.bitsAvailable-=count;}else {count-=this.bitsAvailable;skipBytes=count>>3;count-=skipBytes<<3;this.bytesAvailable-=skipBytes;this.loadWord();this.word<<=count;this.bitsAvailable-=count;}}// (size:int):uint
readBits(size){let bits=Math.min(this.bitsAvailable,size);// :uint
const valu=this.word>>>32-bits;// :uint
if(size>32){logger$2.error('Cannot read more than 32 bits at a time');}this.bitsAvailable-=bits;if(this.bitsAvailable>0){this.word<<=bits;}else if(this.bytesAvailable>0){this.loadWord();}else {throw new Error('no bits available');}bits=size-bits;if(bits>0&&this.bitsAvailable){return valu<<bits|this.readBits(bits);}else {return valu;}}// ():uint
skipLZ(){let leadingZeroCount;// :uint
for(leadingZeroCount=0;leadingZeroCount<this.bitsAvailable;++leadingZeroCount){if((this.word&0x80000000>>>leadingZeroCount)!==0){// the first bit of working word is 1
this.word<<=leadingZeroCount;this.bitsAvailable-=leadingZeroCount;return leadingZeroCount;}}// we exhausted word and still have not found a 1
this.loadWord();return leadingZeroCount+this.skipLZ();}// ():void
skipUEG(){this.skipBits(1+this.skipLZ());}// ():void
skipEG(){this.skipBits(1+this.skipLZ());}// ():uint
readUEG(){const clz=this.skipLZ();// :uint
return this.readBits(clz+1)-1;}// ():int
readEG(){const valu=this.readUEG();// :int
if(0x01&valu){// the number is odd if the low order bit is set
return 1+valu>>>1;// add 1 to make it even, and divide by 2
}else {return -1*(valu>>>1);// divide by two then make it negative
}}// Some convenience functions
// :Boolean
readBoolean(){return this.readBits(1)===1;}// ():int
readUByte(){return this.readBits(8);}// ():int
readUShort(){return this.readBits(16);}// ():int
readUInt(){return this.readBits(32);}/**
   * Advance the ExpGolomb decoder past a scaling list. The scaling
   * list is optionally transmitted as part of a sequence parameter
   * set and is not relevant to transmuxing.
   * @param count the number of entries in this scaling list
   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1
   */skipScalingList(count){let lastScale=8;let nextScale=8;let deltaScale;for(let j=0;j<count;j++){if(nextScale!==0){deltaScale=this.readEG();nextScale=(lastScale+deltaScale+256)%256;}lastScale=nextScale===0?lastScale:nextScale;}}/**
   * Read a sequence parameter set and return some interesting video
   * properties. A sequence parameter set is the H264 metadata that
   * describes the properties of upcoming video frames.
   * @returns an object with configuration parsed from the
   * sequence parameter set, including the dimensions of the
   * associated video frames.
   */readSPS(){let frameCropLeftOffset=0;let frameCropRightOffset=0;let frameCropTopOffset=0;let frameCropBottomOffset=0;let numRefFramesInPicOrderCntCycle;let scalingListCount;let i;const readUByte=this.readUByte.bind(this);const readBits=this.readBits.bind(this);const readUEG=this.readUEG.bind(this);const readBoolean=this.readBoolean.bind(this);const skipBits=this.skipBits.bind(this);const skipEG=this.skipEG.bind(this);const skipUEG=this.skipUEG.bind(this);const skipScalingList=this.skipScalingList.bind(this);readUByte();const profileIdc=readUByte();// profile_idc
readBits(5);// profileCompat constraint_set[0-4]_flag, u(5)
skipBits(3);// reserved_zero_3bits u(3),
readUByte();// level_idc u(8)
skipUEG();// seq_parameter_set_id
// some profiles have more optional data we don't need
if(profileIdc===100||profileIdc===110||profileIdc===122||profileIdc===244||profileIdc===44||profileIdc===83||profileIdc===86||profileIdc===118||profileIdc===128){const chromaFormatIdc=readUEG();if(chromaFormatIdc===3){skipBits(1);}// separate_colour_plane_flag
skipUEG();// bit_depth_luma_minus8
skipUEG();// bit_depth_chroma_minus8
skipBits(1);// qpprime_y_zero_transform_bypass_flag
if(readBoolean()){// seq_scaling_matrix_present_flag
scalingListCount=chromaFormatIdc!==3?8:12;for(i=0;i<scalingListCount;i++){if(readBoolean()){// seq_scaling_list_present_flag[ i ]
if(i<6){skipScalingList(16);}else {skipScalingList(64);}}}}}skipUEG();// log2_max_frame_num_minus4
const picOrderCntType=readUEG();if(picOrderCntType===0){readUEG();// log2_max_pic_order_cnt_lsb_minus4
}else if(picOrderCntType===1){skipBits(1);// delta_pic_order_always_zero_flag
skipEG();// offset_for_non_ref_pic
skipEG();// offset_for_top_to_bottom_field
numRefFramesInPicOrderCntCycle=readUEG();for(i=0;i<numRefFramesInPicOrderCntCycle;i++){skipEG();}// offset_for_ref_frame[ i ]
}skipUEG();// max_num_ref_frames
skipBits(1);// gaps_in_frame_num_value_allowed_flag
const picWidthInMbsMinus1=readUEG();const picHeightInMapUnitsMinus1=readUEG();const frameMbsOnlyFlag=readBits(1);if(frameMbsOnlyFlag===0){skipBits(1);}// mb_adaptive_frame_field_flag
skipBits(1);// direct_8x8_inference_flag
if(readBoolean()){// frame_cropping_flag
frameCropLeftOffset=readUEG();frameCropRightOffset=readUEG();frameCropTopOffset=readUEG();frameCropBottomOffset=readUEG();}let pixelRatio=[1,1];if(readBoolean()){// vui_parameters_present_flag
if(readBoolean()){// aspect_ratio_info_present_flag
const aspectRatioIdc=readUByte();switch(aspectRatioIdc){case 1:pixelRatio=[1,1];break;case 2:pixelRatio=[12,11];break;case 3:pixelRatio=[10,11];break;case 4:pixelRatio=[16,11];break;case 5:pixelRatio=[40,33];break;case 6:pixelRatio=[24,11];break;case 7:pixelRatio=[20,11];break;case 8:pixelRatio=[32,11];break;case 9:pixelRatio=[80,33];break;case 10:pixelRatio=[18,11];break;case 11:pixelRatio=[15,11];break;case 12:pixelRatio=[64,33];break;case 13:pixelRatio=[160,99];break;case 14:pixelRatio=[4,3];break;case 15:pixelRatio=[3,2];break;case 16:pixelRatio=[2,1];break;case 255:{pixelRatio=[readUByte()<<8|readUByte(),readUByte()<<8|readUByte()];break;}}}}return {width:Math.ceil((picWidthInMbsMinus1+1)*16-frameCropLeftOffset*2-frameCropRightOffset*2),height:(2-frameMbsOnlyFlag)*(picHeightInMapUnitsMinus1+1)*16-(frameMbsOnlyFlag?2:4)*(frameCropTopOffset+frameCropBottomOffset),pixelRatio:pixelRatio};}readSliceType(){// skip NALu type
this.readUByte();// discard first_mb_in_slice
this.readUEG();// return slice_type
return this.readUEG();}}class AvcVideoParser extends BaseVideoParser{parseAVCPES(track,textTrack,pes,last,duration){const units=this.parseAVCNALu(track,pes.data);let VideoSample=this.VideoSample;let push;let spsfound=false;// free pes.data to save up some memory
pes.data=null;// if new NAL units found and last sample still there, let's push ...
// this helps parsing streams with missing AUD (only do this if AUD never found)
if(VideoSample&&units.length&&!track.audFound){this.pushAccessUnit(VideoSample,track);VideoSample=this.VideoSample=this.createVideoSample(false,pes.pts,pes.dts,'');}units.forEach(unit=>{var _VideoSample2;switch(unit.type){// NDR
case 1:{let iskey=false;push=true;const data=unit.data;// only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)
if(spsfound&&data.length>4){// retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR
const sliceType=new ExpGolomb(data).readSliceType();// 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice
// SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.
// An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.
// I slice: A slice that is not an SI slice that is decoded using intra prediction only.
// if (sliceType === 2 || sliceType === 7) {
if(sliceType===2||sliceType===4||sliceType===7||sliceType===9){iskey=true;}}if(iskey){var _VideoSample;// if we have non-keyframe data already, that cannot belong to the same frame as a keyframe, so force a push
if((_VideoSample=VideoSample)!=null&&_VideoSample.frame&&!VideoSample.key){this.pushAccessUnit(VideoSample,track);VideoSample=this.VideoSample=null;}}if(!VideoSample){VideoSample=this.VideoSample=this.createVideoSample(true,pes.pts,pes.dts,'');}VideoSample.frame=true;VideoSample.key=iskey;break;// IDR
}case 5:push=true;// handle PES not starting with AUD
// if we have frame data already, that cannot belong to the same frame, so force a push
if((_VideoSample2=VideoSample)!=null&&_VideoSample2.frame&&!VideoSample.key){this.pushAccessUnit(VideoSample,track);VideoSample=this.VideoSample=null;}if(!VideoSample){VideoSample=this.VideoSample=this.createVideoSample(true,pes.pts,pes.dts,'');}VideoSample.key=true;VideoSample.frame=true;break;// SEI
case 6:{push=true;parseSEIMessageFromNALu(unit.data,1,pes.pts,textTrack.samples);break;// SPS
}case 7:{var _track$pixelRatio,_track$pixelRatio2;push=true;spsfound=true;const sps=unit.data;const expGolombDecoder=new ExpGolomb(sps);const config=expGolombDecoder.readSPS();if(!track.sps||track.width!==config.width||track.height!==config.height||((_track$pixelRatio=track.pixelRatio)==null?void 0:_track$pixelRatio[0])!==config.pixelRatio[0]||((_track$pixelRatio2=track.pixelRatio)==null?void 0:_track$pixelRatio2[1])!==config.pixelRatio[1]){track.width=config.width;track.height=config.height;track.pixelRatio=config.pixelRatio;track.sps=[sps];track.duration=duration;const codecarray=sps.subarray(1,4);let codecstring='avc1.';for(let i=0;i<3;i++){let h=codecarray[i].toString(16);if(h.length<2){h='0'+h;}codecstring+=h;}track.codec=codecstring;}break;}// PPS
case 8:push=true;track.pps=[unit.data];break;// AUD
case 9:push=true;track.audFound=true;if(VideoSample){this.pushAccessUnit(VideoSample,track);}VideoSample=this.VideoSample=this.createVideoSample(false,pes.pts,pes.dts,'');break;// Filler Data
case 12:push=true;break;default:push=false;if(VideoSample){VideoSample.debug+='unknown NAL '+unit.type+' ';}break;}if(VideoSample&&push){const units=VideoSample.units;units.push(unit);}});// if last PES packet, push samples
if(last&&VideoSample){this.pushAccessUnit(VideoSample,track);this.VideoSample=null;}}parseAVCNALu(track,array){const len=array.byteLength;let state=track.naluState||0;const lastState=state;const units=[];let i=0;let value;let overflow;let unitType;let lastUnitStart=-1;let lastUnitType=0;// logger.log('PES:' + Hex.hexDump(array));
if(state===-1){// special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet
lastUnitStart=0;// NALu type is value read from offset 0
lastUnitType=array[0]&0x1f;state=0;i=1;}while(i<len){value=array[i++];// optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case
if(!state){state=value?0:1;continue;}if(state===1){state=value?0:2;continue;}// here we have state either equal to 2 or 3
if(!value){state=3;}else if(value===1){overflow=i-state-1;if(lastUnitStart>=0){const unit={data:array.subarray(lastUnitStart,overflow),type:lastUnitType};// logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);
units.push(unit);}else {// lastUnitStart is undefined => this is the first start code found in this PES packet
// first check if start code delimiter is overlapping between 2 PES packets,
// ie it started in last packet (lastState not zero)
// and ended at the beginning of this PES packet (i <= 4 - lastState)
const lastUnit=this.getLastNalUnit(track.samples);if(lastUnit){if(lastState&&i<=4-lastState){// start delimiter overlapping between PES packets
// strip start delimiter bytes from the end of last NAL unit
// check if lastUnit had a state different from zero
if(lastUnit.state){// strip last bytes
lastUnit.data=lastUnit.data.subarray(0,lastUnit.data.byteLength-lastState);}}// If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.
if(overflow>0){// logger.log('first NALU found with overflow:' + overflow);
lastUnit.data=appendUint8Array(lastUnit.data,array.subarray(0,overflow));lastUnit.state=0;}}}// check if we can read unit type
if(i<len){unitType=array[i]&0x1f;// logger.log('find NALU @ offset:' + i + ',type:' + unitType);
lastUnitStart=i;lastUnitType=unitType;state=0;}else {// not enough byte to read unit type. let's read it on next PES parsing
state=-1;}}else {state=0;}}if(lastUnitStart>=0&&state>=0){const unit={data:array.subarray(lastUnitStart,len),type:lastUnitType,state:state};units.push(unit);// logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);
}// no NALu found
if(units.length===0){// append pes.data to previous NAL unit
const lastUnit=this.getLastNalUnit(track.samples);if(lastUnit){lastUnit.data=appendUint8Array(lastUnit.data,array);}}track.naluState=state;return units;}}/**
 * SAMPLE-AES decrypter
 */class SampleAesDecrypter{constructor(observer,config,keyData){this.keyData=void 0;this.decrypter=void 0;this.keyData=keyData;this.decrypter=new Decrypter(config,{removePKCS7Padding:false});}decryptBuffer(encryptedData){return this.decrypter.decrypt(encryptedData,this.keyData.key.buffer,this.keyData.iv.buffer);}// AAC - encrypt all full 16 bytes blocks starting from offset 16
decryptAacSample(samples,sampleIndex,callback){const curUnit=samples[sampleIndex].unit;if(curUnit.length<=16){// No encrypted portion in this sample (first 16 bytes is not
// encrypted, see https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/HLS_Sample_Encryption/Encryption/Encryption.html),
return;}const encryptedData=curUnit.subarray(16,curUnit.length-curUnit.length%16);const encryptedBuffer=encryptedData.buffer.slice(encryptedData.byteOffset,encryptedData.byteOffset+encryptedData.length);this.decryptBuffer(encryptedBuffer).then(decryptedBuffer=>{const decryptedData=new Uint8Array(decryptedBuffer);curUnit.set(decryptedData,16);if(!this.decrypter.isSync()){this.decryptAacSamples(samples,sampleIndex+1,callback);}});}decryptAacSamples(samples,sampleIndex,callback){for(;;sampleIndex++){if(sampleIndex>=samples.length){callback();return;}if(samples[sampleIndex].unit.length<32){continue;}this.decryptAacSample(samples,sampleIndex,callback);if(!this.decrypter.isSync()){return;}}}// AVC - encrypt one 16 bytes block out of ten, starting from offset 32
getAvcEncryptedData(decodedData){const encryptedDataLen=Math.floor((decodedData.length-48)/160)*16+16;const encryptedData=new Int8Array(encryptedDataLen);let outputPos=0;for(let inputPos=32;inputPos<decodedData.length-16;inputPos+=160,outputPos+=16){encryptedData.set(decodedData.subarray(inputPos,inputPos+16),outputPos);}return encryptedData;}getAvcDecryptedUnit(decodedData,decryptedData){const uint8DecryptedData=new Uint8Array(decryptedData);let inputPos=0;for(let outputPos=32;outputPos<decodedData.length-16;outputPos+=160,inputPos+=16){decodedData.set(uint8DecryptedData.subarray(inputPos,inputPos+16),outputPos);}return decodedData;}decryptAvcSample(samples,sampleIndex,unitIndex,callback,curUnit){const decodedData=discardEPB(curUnit.data);const encryptedData=this.getAvcEncryptedData(decodedData);this.decryptBuffer(encryptedData.buffer).then(decryptedBuffer=>{curUnit.data=this.getAvcDecryptedUnit(decodedData,decryptedBuffer);if(!this.decrypter.isSync()){this.decryptAvcSamples(samples,sampleIndex,unitIndex+1,callback);}});}decryptAvcSamples(samples,sampleIndex,unitIndex,callback){if(samples instanceof Uint8Array){throw new Error('Cannot decrypt samples of type Uint8Array');}for(;;sampleIndex++,unitIndex=0){if(sampleIndex>=samples.length){callback();return;}const curUnits=samples[sampleIndex].units;for(;;unitIndex++){if(unitIndex>=curUnits.length){break;}const curUnit=curUnits[unitIndex];if(curUnit.data.length<=48||curUnit.type!==1&&curUnit.type!==5){continue;}this.decryptAvcSample(samples,sampleIndex,unitIndex,callback,curUnit);if(!this.decrypter.isSync()){return;}}}}}const PACKET_LENGTH=188;class TSDemuxer{constructor(observer,config,typeSupported){this.observer=void 0;this.config=void 0;this.typeSupported=void 0;this.sampleAes=null;this.pmtParsed=false;this.audioCodec=void 0;this.videoCodec=void 0;this._duration=0;this._pmtId=-1;this._videoTrack=void 0;this._audioTrack=void 0;this._id3Track=void 0;this._txtTrack=void 0;this.aacOverFlow=null;this.remainderData=null;this.videoParser=void 0;this.observer=observer;this.config=config;this.typeSupported=typeSupported;this.videoParser=new AvcVideoParser();}static probe(data){const syncOffset=TSDemuxer.syncOffset(data);if(syncOffset>0){logger$2.warn(`MPEG2-TS detected but first sync word found @ offset ${syncOffset}`);}return syncOffset!==-1;}static syncOffset(data){const length=data.length;let scanwindow=Math.min(PACKET_LENGTH*5,length-PACKET_LENGTH)+1;let i=0;while(i<scanwindow){// a TS init segment should contain at least 2 TS packets: PAT and PMT, each starting with 0x47
let foundPat=false;let packetStart=-1;let tsPackets=0;for(let j=i;j<length;j+=PACKET_LENGTH){if(data[j]===0x47&&(length-j===PACKET_LENGTH||data[j+PACKET_LENGTH]===0x47)){tsPackets++;if(packetStart===-1){packetStart=j;// First sync word found at offset, increase scan length (#5251)
if(packetStart!==0){scanwindow=Math.min(packetStart+PACKET_LENGTH*99,data.length-PACKET_LENGTH)+1;}}if(!foundPat){foundPat=parsePID(data,j)===0;}// Sync word found at 0 with 3 packets, or found at offset least 2 packets up to scanwindow (#5501)
if(foundPat&&tsPackets>1&&(packetStart===0&&tsPackets>2||j+PACKET_LENGTH>scanwindow)){return packetStart;}}else if(tsPackets){// Exit if sync word found, but does not contain contiguous packets
return -1;}else {break;}}i++;}return -1;}/**
   * Creates a track model internal to demuxer used to drive remuxing input
   */static createTrack(type,duration){return {container:type==='video'||type==='audio'?'video/mp2t':undefined,type,id:RemuxerTrackIdConfig[type],pid:-1,inputTimeScale:90000,sequenceNumber:0,samples:[],dropped:0,duration:type==='audio'?duration:undefined};}/**
   * Initializes a new init segment on the demuxer/remuxer interface. Needed for discontinuities/track-switches (or at stream start)
   * Resets all internal track instances of the demuxer.
   */resetInitSegment(initSegment,audioCodec,videoCodec,trackDuration){this.pmtParsed=false;this._pmtId=-1;this._videoTrack=TSDemuxer.createTrack('video');this._audioTrack=TSDemuxer.createTrack('audio',trackDuration);this._id3Track=TSDemuxer.createTrack('id3');this._txtTrack=TSDemuxer.createTrack('text');this._audioTrack.segmentCodec='aac';// flush any partial content
this.aacOverFlow=null;this.remainderData=null;this.audioCodec=audioCodec;this.videoCodec=videoCodec;this._duration=trackDuration;}resetTimeStamp(){}resetContiguity(){const{_audioTrack,_videoTrack,_id3Track}=this;if(_audioTrack){_audioTrack.pesData=null;}if(_videoTrack){_videoTrack.pesData=null;}if(_id3Track){_id3Track.pesData=null;}this.aacOverFlow=null;this.remainderData=null;}demux(data,timeOffset,isSampleAes=false,flush=false){if(!isSampleAes){this.sampleAes=null;}let pes;const videoTrack=this._videoTrack;const audioTrack=this._audioTrack;const id3Track=this._id3Track;const textTrack=this._txtTrack;let videoPid=videoTrack.pid;let videoData=videoTrack.pesData;let audioPid=audioTrack.pid;let id3Pid=id3Track.pid;let audioData=audioTrack.pesData;let id3Data=id3Track.pesData;let unknownPID=null;let pmtParsed=this.pmtParsed;let pmtId=this._pmtId;let len=data.length;if(this.remainderData){data=appendUint8Array(this.remainderData,data);len=data.length;this.remainderData=null;}if(len<PACKET_LENGTH&&!flush){this.remainderData=data;return {audioTrack,videoTrack,id3Track,textTrack};}const syncOffset=Math.max(0,TSDemuxer.syncOffset(data));len-=(len-syncOffset)%PACKET_LENGTH;if(len<data.byteLength&&!flush){this.remainderData=new Uint8Array(data.buffer,len,data.buffer.byteLength-len);}// loop through TS packets
let tsPacketErrors=0;for(let start=syncOffset;start<len;start+=PACKET_LENGTH){if(data[start]===0x47){const stt=!!(data[start+1]&0x40);const pid=parsePID(data,start);const atf=(data[start+3]&0x30)>>4;// if an adaption field is present, its length is specified by the fifth byte of the TS packet header.
let offset;if(atf>1){offset=start+5+data[start+4];// continue if there is only adaptation field
if(offset===start+PACKET_LENGTH){continue;}}else {offset=start+4;}switch(pid){case videoPid:if(stt){if(videoData&&(pes=parsePES(videoData))){this.videoParser.parseAVCPES(videoTrack,textTrack,pes,false,this._duration);}videoData={data:[],size:0};}if(videoData){videoData.data.push(data.subarray(offset,start+PACKET_LENGTH));videoData.size+=start+PACKET_LENGTH-offset;}break;case audioPid:if(stt){if(audioData&&(pes=parsePES(audioData))){switch(audioTrack.segmentCodec){case'aac':this.parseAACPES(audioTrack,pes);break;case'mp3':this.parseMPEGPES(audioTrack,pes);break;case'ac3':{this.parseAC3PES(audioTrack,pes);}break;}}audioData={data:[],size:0};}if(audioData){audioData.data.push(data.subarray(offset,start+PACKET_LENGTH));audioData.size+=start+PACKET_LENGTH-offset;}break;case id3Pid:if(stt){if(id3Data&&(pes=parsePES(id3Data))){this.parseID3PES(id3Track,pes);}id3Data={data:[],size:0};}if(id3Data){id3Data.data.push(data.subarray(offset,start+PACKET_LENGTH));id3Data.size+=start+PACKET_LENGTH-offset;}break;case 0:if(stt){offset+=data[offset]+1;}pmtId=this._pmtId=parsePAT(data,offset);// logger.log('PMT PID:'  + this._pmtId);
break;case pmtId:{if(stt){offset+=data[offset]+1;}const parsedPIDs=parsePMT(data,offset,this.typeSupported,isSampleAes,this.observer);// only update track id if track PID found while parsing PMT
// this is to avoid resetting the PID to -1 in case
// track PID transiently disappears from the stream
// this could happen in case of transient missing audio samples for example
// NOTE this is only the PID of the track as found in TS,
// but we are not using this for MP4 track IDs.
videoPid=parsedPIDs.videoPid;if(videoPid>0){videoTrack.pid=videoPid;videoTrack.segmentCodec=parsedPIDs.segmentVideoCodec;}audioPid=parsedPIDs.audioPid;if(audioPid>0){audioTrack.pid=audioPid;audioTrack.segmentCodec=parsedPIDs.segmentAudioCodec;}id3Pid=parsedPIDs.id3Pid;if(id3Pid>0){id3Track.pid=id3Pid;}if(unknownPID!==null&&!pmtParsed){logger$2.warn(`MPEG-TS PMT found at ${start} after unknown PID '${unknownPID}'. Backtracking to sync byte @${syncOffset} to parse all TS packets.`);unknownPID=null;// we set it to -188, the += 188 in the for loop will reset start to 0
start=syncOffset-188;}pmtParsed=this.pmtParsed=true;break;}case 0x11:case 0x1fff:break;default:unknownPID=pid;break;}}else {tsPacketErrors++;}}if(tsPacketErrors>0){emitParsingError(this.observer,new Error(`Found ${tsPacketErrors} TS packet/s that do not start with 0x47`));}videoTrack.pesData=videoData;audioTrack.pesData=audioData;id3Track.pesData=id3Data;const demuxResult={audioTrack,videoTrack,id3Track,textTrack};if(flush){this.extractRemainingSamples(demuxResult);}return demuxResult;}flush(){const{remainderData}=this;this.remainderData=null;let result;if(remainderData){result=this.demux(remainderData,-1,false,true);}else {result={videoTrack:this._videoTrack,audioTrack:this._audioTrack,id3Track:this._id3Track,textTrack:this._txtTrack};}this.extractRemainingSamples(result);if(this.sampleAes){return this.decrypt(result,this.sampleAes);}return result;}extractRemainingSamples(demuxResult){const{audioTrack,videoTrack,id3Track,textTrack}=demuxResult;const videoData=videoTrack.pesData;const audioData=audioTrack.pesData;const id3Data=id3Track.pesData;// try to parse last PES packets
let pes;if(videoData&&(pes=parsePES(videoData))){this.videoParser.parseAVCPES(videoTrack,textTrack,pes,true,this._duration);videoTrack.pesData=null;}else {// either avcData null or PES truncated, keep it for next frag parsing
videoTrack.pesData=videoData;}if(audioData&&(pes=parsePES(audioData))){switch(audioTrack.segmentCodec){case'aac':this.parseAACPES(audioTrack,pes);break;case'mp3':this.parseMPEGPES(audioTrack,pes);break;case'ac3':{this.parseAC3PES(audioTrack,pes);}break;}audioTrack.pesData=null;}else {if(audioData!=null&&audioData.size){logger$2.log('last AAC PES packet truncated,might overlap between fragments');}// either audioData null or PES truncated, keep it for next frag parsing
audioTrack.pesData=audioData;}if(id3Data&&(pes=parsePES(id3Data))){this.parseID3PES(id3Track,pes);id3Track.pesData=null;}else {// either id3Data null or PES truncated, keep it for next frag parsing
id3Track.pesData=id3Data;}}demuxSampleAes(data,keyData,timeOffset){const demuxResult=this.demux(data,timeOffset,true,!this.config.progressive);const sampleAes=this.sampleAes=new SampleAesDecrypter(this.observer,this.config,keyData);return this.decrypt(demuxResult,sampleAes);}decrypt(demuxResult,sampleAes){return new Promise(resolve=>{const{audioTrack,videoTrack}=demuxResult;if(audioTrack.samples&&audioTrack.segmentCodec==='aac'){sampleAes.decryptAacSamples(audioTrack.samples,0,()=>{if(videoTrack.samples){sampleAes.decryptAvcSamples(videoTrack.samples,0,0,()=>{resolve(demuxResult);});}else {resolve(demuxResult);}});}else if(videoTrack.samples){sampleAes.decryptAvcSamples(videoTrack.samples,0,0,()=>{resolve(demuxResult);});}});}destroy(){this._duration=0;}parseAACPES(track,pes){let startOffset=0;const aacOverFlow=this.aacOverFlow;let data=pes.data;if(aacOverFlow){this.aacOverFlow=null;const frameMissingBytes=aacOverFlow.missing;const sampleLength=aacOverFlow.sample.unit.byteLength;// logger.log(`AAC: append overflowing ${sampleLength} bytes to beginning of new PES`);
if(frameMissingBytes===-1){data=appendUint8Array(aacOverFlow.sample.unit,data);}else {const frameOverflowBytes=sampleLength-frameMissingBytes;aacOverFlow.sample.unit.set(data.subarray(0,frameMissingBytes),frameOverflowBytes);track.samples.push(aacOverFlow.sample);startOffset=aacOverFlow.missing;}}// look for ADTS header (0xFFFx)
let offset;let len;for(offset=startOffset,len=data.length;offset<len-1;offset++){if(isHeader$1(data,offset)){break;}}// if ADTS header does not start straight from the beginning of the PES payload, raise an error
if(offset!==startOffset){let reason;const recoverable=offset<len-1;if(recoverable){reason=`AAC PES did not start with ADTS header,offset:${offset}`;}else {reason='No ADTS header found in AAC PES';}emitParsingError(this.observer,new Error(reason),recoverable);if(!recoverable){return;}}initTrackConfig(track,this.observer,data,offset,this.audioCodec);let pts;if(pes.pts!==undefined){pts=pes.pts;}else if(aacOverFlow){// if last AAC frame is overflowing, we should ensure timestamps are contiguous:
// first sample PTS should be equal to last sample PTS + frameDuration
const frameDuration=getFrameDuration(track.samplerate);pts=aacOverFlow.sample.pts+frameDuration;}else {logger$2.warn('[tsdemuxer]: AAC PES unknown PTS');return;}// scan for aac samples
let frameIndex=0;let frame;while(offset<len){frame=appendFrame$2(track,data,offset,pts,frameIndex);offset+=frame.length;if(!frame.missing){frameIndex++;for(;offset<len-1;offset++){if(isHeader$1(data,offset)){break;}}}else {this.aacOverFlow=frame;break;}}}parseMPEGPES(track,pes){const data=pes.data;const length=data.length;let frameIndex=0;let offset=0;const pts=pes.pts;if(pts===undefined){logger$2.warn('[tsdemuxer]: MPEG PES unknown PTS');return;}while(offset<length){if(isHeader(data,offset)){const frame=appendFrame$1(track,data,offset,pts,frameIndex);if(frame){offset+=frame.length;frameIndex++;}else {// logger.log('Unable to parse Mpeg audio frame');
break;}}else {// nothing found, keep looking
offset++;}}}parseAC3PES(track,pes){{const data=pes.data;const pts=pes.pts;if(pts===undefined){logger$2.warn('[tsdemuxer]: AC3 PES unknown PTS');return;}const length=data.length;let frameIndex=0;let offset=0;let parsed;while(offset<length&&(parsed=appendFrame(track,data,offset,pts,frameIndex++))>0){offset+=parsed;}}}parseID3PES(id3Track,pes){if(pes.pts===undefined){logger$2.warn('[tsdemuxer]: ID3 PES unknown PTS');return;}const id3Sample=_extends({},pes,{type:this._videoTrack?MetadataSchema.emsg:MetadataSchema.audioId3,duration:Number.POSITIVE_INFINITY});id3Track.samples.push(id3Sample);}}function parsePID(data,offset){// pid is a 13-bit field starting at the last bit of TS[1]
return ((data[offset+1]&0x1f)<<8)+data[offset+2];}function parsePAT(data,offset){// skip the PSI header and parse the first PMT entry
return (data[offset+10]&0x1f)<<8|data[offset+11];}function parsePMT(data,offset,typeSupported,isSampleAes,observer){const result={audioPid:-1,videoPid:-1,id3Pid:-1,segmentVideoCodec:'avc',segmentAudioCodec:'aac'};const sectionLength=(data[offset+1]&0x0f)<<8|data[offset+2];const tableEnd=offset+3+sectionLength-4;// to determine where the table is, we have to figure out how
// long the program info descriptors are
const programInfoLength=(data[offset+10]&0x0f)<<8|data[offset+11];// advance the offset to the first entry in the mapping table
offset+=12+programInfoLength;while(offset<tableEnd){const pid=parsePID(data,offset);const esInfoLength=(data[offset+3]&0x0f)<<8|data[offset+4];switch(data[offset]){case 0xcf:// SAMPLE-AES AAC
if(!isSampleAes){logEncryptedSamplesFoundInUnencryptedStream('ADTS AAC');break;}/* falls through */case 0x0f:// ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)
// logger.log('AAC PID:'  + pid);
if(result.audioPid===-1){result.audioPid=pid;}break;// Packetized metadata (ID3)
case 0x15:// logger.log('ID3 PID:'  + pid);
if(result.id3Pid===-1){result.id3Pid=pid;}break;case 0xdb:// SAMPLE-AES AVC
if(!isSampleAes){logEncryptedSamplesFoundInUnencryptedStream('H.264');break;}/* falls through */case 0x1b:// ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)
// logger.log('AVC PID:'  + pid);
if(result.videoPid===-1){result.videoPid=pid;result.segmentVideoCodec='avc';}break;// ISO/IEC 11172-3 (MPEG-1 audio)
// or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)
case 0x03:case 0x04:// logger.log('MPEG PID:'  + pid);
if(!typeSupported.mpeg&&!typeSupported.mp3){logger$2.log('MPEG audio found, not supported in this browser');}else if(result.audioPid===-1){result.audioPid=pid;result.segmentAudioCodec='mp3';}break;case 0xc1:// SAMPLE-AES AC3
if(!isSampleAes){logEncryptedSamplesFoundInUnencryptedStream('AC-3');break;}/* falls through */case 0x81:{if(!typeSupported.ac3){logger$2.log('AC-3 audio found, not supported in this browser');}else if(result.audioPid===-1){result.audioPid=pid;result.segmentAudioCodec='ac3';}}break;case 0x06:// stream_type 6 can mean a lot of different things in case of DVB.
// We need to look at the descriptors. Right now, we're only interested
// in AC-3 audio, so we do the descriptor parsing only when we don't have
// an audio PID yet.
if(result.audioPid===-1&&esInfoLength>0){let parsePos=offset+5;let remaining=esInfoLength;while(remaining>2){const descriptorId=data[parsePos];switch(descriptorId){case 0x6a:// DVB Descriptor for AC-3
{if(typeSupported.ac3!==true){logger$2.log('AC-3 audio found, not supported in this browser for now');}else {result.audioPid=pid;result.segmentAudioCodec='ac3';}}break;}const descriptorLen=data[parsePos+1]+2;parsePos+=descriptorLen;remaining-=descriptorLen;}}break;case 0xc2:// SAMPLE-AES EC3
/* falls through */case 0x87:emitParsingError(observer,new Error('Unsupported EC-3 in M2TS found'));return result;case 0x24:emitParsingError(observer,new Error('Unsupported HEVC in M2TS found'));return result;}// move to the next table entry
// skip past the elementary stream descriptors, if present
offset+=esInfoLength+5;}return result;}function emitParsingError(observer,error,levelRetry){logger$2.warn(`parsing error: ${error.message}`);observer.emit(Events.ERROR,Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.FRAG_PARSING_ERROR,fatal:false,levelRetry,error,reason:error.message});}function logEncryptedSamplesFoundInUnencryptedStream(type){logger$2.log(`${type} with AES-128-CBC encryption found in unencrypted stream`);}function parsePES(stream){let i=0;let frag;let pesLen;let pesHdrLen;let pesPts;let pesDts;const data=stream.data;// safety check
if(!stream||stream.size===0){return null;}// we might need up to 19 bytes to read PES header
// if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes
// usually only one merge is needed (and this is rare ...)
while(data[0].length<19&&data.length>1){data[0]=appendUint8Array(data[0],data[1]);data.splice(1,1);}// retrieve PTS/DTS from first fragment
frag=data[0];const pesPrefix=(frag[0]<<16)+(frag[1]<<8)+frag[2];if(pesPrefix===1){pesLen=(frag[4]<<8)+frag[5];// if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated
// minus 6 : PES header size
if(pesLen&&pesLen>stream.size-6){return null;}const pesFlags=frag[7];if(pesFlags&0xc0){/* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
          as PTS / DTS is 33 bit we cannot use bitwise operator in JS,
          as Bitwise operators treat their operands as a sequence of 32 bits */pesPts=(frag[9]&0x0e)*536870912+// 1 << 29
(frag[10]&0xff)*4194304+// 1 << 22
(frag[11]&0xfe)*16384+// 1 << 14
(frag[12]&0xff)*128+// 1 << 7
(frag[13]&0xfe)/2;if(pesFlags&0x40){pesDts=(frag[14]&0x0e)*536870912+// 1 << 29
(frag[15]&0xff)*4194304+// 1 << 22
(frag[16]&0xfe)*16384+// 1 << 14
(frag[17]&0xff)*128+// 1 << 7
(frag[18]&0xfe)/2;if(pesPts-pesDts>60*90000){logger$2.warn(`${Math.round((pesPts-pesDts)/90000)}s delta between PTS and DTS, align them`);pesPts=pesDts;}}else {pesDts=pesPts;}}pesHdrLen=frag[8];// 9 bytes : 6 bytes for PES header + 3 bytes for PES extension
let payloadStartOffset=pesHdrLen+9;if(stream.size<=payloadStartOffset){return null;}stream.size-=payloadStartOffset;// reassemble PES packet
const pesData=new Uint8Array(stream.size);for(let j=0,dataLen=data.length;j<dataLen;j++){frag=data[j];let len=frag.byteLength;if(payloadStartOffset){if(payloadStartOffset>len){// trim full frag if PES header bigger than frag
payloadStartOffset-=len;continue;}else {// trim partial frag if PES header smaller than frag
frag=frag.subarray(payloadStartOffset);len-=payloadStartOffset;payloadStartOffset=0;}}pesData.set(frag,i);i+=len;}if(pesLen){// payload size : remove PES header + PES extension
pesLen-=pesHdrLen+3;}return {data:pesData,pts:pesPts,dts:pesDts,len:pesLen};}return null;}/**
 * MP3 demuxer
 */class MP3Demuxer extends BaseAudioDemuxer{resetInitSegment(initSegment,audioCodec,videoCodec,trackDuration){super.resetInitSegment(initSegment,audioCodec,videoCodec,trackDuration);this._audioTrack={container:'audio/mpeg',type:'audio',id:2,pid:-1,sequenceNumber:0,segmentCodec:'mp3',samples:[],manifestCodec:audioCodec,duration:trackDuration,inputTimeScale:90000,dropped:0};}static probe(data){if(!data){return false;}// check if data contains ID3 timestamp and MPEG sync word
// Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1
// Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)
// More info http://www.mp3-tech.org/programmer/frame_header.html
const id3Data=getID3Data(data,0);let offset=(id3Data==null?void 0:id3Data.length)||0;// Check for ac-3|ec-3 sync bytes and return false if present
if(id3Data&&data[offset]===0x0b&&data[offset+1]===0x77&&getTimeStamp(id3Data)!==undefined&&// check the bsid to confirm ac-3 or ec-3 (not mp3)
getAudioBSID(data,offset)<=16){return false;}for(let length=data.length;offset<length;offset++){if(probe(data,offset)){logger$2.log('MPEG Audio sync word found !');return true;}}return false;}canParse(data,offset){return canParse(data,offset);}appendFrame(track,data,offset){if(this.basePTS===null){return;}return appendFrame$1(track,data,offset,this.basePTS,this.frameIndex);}}/**
 *  AAC helper
 */class AAC{static getSilentFrame(codec,channelCount){switch(codec){case'mp4a.40.2':if(channelCount===1){return new Uint8Array([0x00,0xc8,0x00,0x80,0x23,0x80]);}else if(channelCount===2){return new Uint8Array([0x21,0x00,0x49,0x90,0x02,0x19,0x00,0x23,0x80]);}else if(channelCount===3){return new Uint8Array([0x00,0xc8,0x00,0x80,0x20,0x84,0x01,0x26,0x40,0x08,0x64,0x00,0x8e]);}else if(channelCount===4){return new Uint8Array([0x00,0xc8,0x00,0x80,0x20,0x84,0x01,0x26,0x40,0x08,0x64,0x00,0x80,0x2c,0x80,0x08,0x02,0x38]);}else if(channelCount===5){return new Uint8Array([0x00,0xc8,0x00,0x80,0x20,0x84,0x01,0x26,0x40,0x08,0x64,0x00,0x82,0x30,0x04,0x99,0x00,0x21,0x90,0x02,0x38]);}else if(channelCount===6){return new Uint8Array([0x00,0xc8,0x00,0x80,0x20,0x84,0x01,0x26,0x40,0x08,0x64,0x00,0x82,0x30,0x04,0x99,0x00,0x21,0x90,0x02,0x00,0xb2,0x00,0x20,0x08,0xe0]);}break;// handle HE-AAC below (mp4a.40.5 / mp4a.40.29)
default:if(channelCount===1){// ffmpeg -y -f lavfi -i "aevalsrc=0:d=0.05" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
return new Uint8Array([0x1,0x40,0x22,0x80,0xa3,0x4e,0xe6,0x80,0xba,0x8,0x0,0x0,0x0,0x1c,0x6,0xf1,0xc1,0xa,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5e]);}else if(channelCount===2){// ffmpeg -y -f lavfi -i "aevalsrc=0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
return new Uint8Array([0x1,0x40,0x22,0x80,0xa3,0x5e,0xe6,0x80,0xba,0x8,0x0,0x0,0x0,0x0,0x95,0x0,0x6,0xf1,0xa1,0xa,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5e]);}else if(channelCount===3){// ffmpeg -y -f lavfi -i "aevalsrc=0|0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
return new Uint8Array([0x1,0x40,0x22,0x80,0xa3,0x5e,0xe6,0x80,0xba,0x8,0x0,0x0,0x0,0x0,0x95,0x0,0x6,0xf1,0xa1,0xa,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5e]);}break;}return undefined;}}/**
 * Generate MP4 Box
 */const UINT32_MAX=Math.pow(2,32)-1;class MP4{static init(){MP4.types={avc1:[],// codingname
avcC:[],btrt:[],dinf:[],dref:[],esds:[],ftyp:[],hdlr:[],mdat:[],mdhd:[],mdia:[],mfhd:[],minf:[],moof:[],moov:[],mp4a:[],'.mp3':[],dac3:[],'ac-3':[],mvex:[],mvhd:[],pasp:[],sdtp:[],stbl:[],stco:[],stsc:[],stsd:[],stsz:[],stts:[],tfdt:[],tfhd:[],traf:[],trak:[],trun:[],trex:[],tkhd:[],vmhd:[],smhd:[]};let i;for(i in MP4.types){if(MP4.types.hasOwnProperty(i)){MP4.types[i]=[i.charCodeAt(0),i.charCodeAt(1),i.charCodeAt(2),i.charCodeAt(3)];}}const videoHdlr=new Uint8Array([0x00,// version 0
0x00,0x00,0x00,// flags
0x00,0x00,0x00,0x00,// pre_defined
0x76,0x69,0x64,0x65,// handler_type: 'vide'
0x00,0x00,0x00,0x00,// reserved
0x00,0x00,0x00,0x00,// reserved
0x00,0x00,0x00,0x00,// reserved
0x56,0x69,0x64,0x65,0x6f,0x48,0x61,0x6e,0x64,0x6c,0x65,0x72,0x00// name: 'VideoHandler'
]);const audioHdlr=new Uint8Array([0x00,// version 0
0x00,0x00,0x00,// flags
0x00,0x00,0x00,0x00,// pre_defined
0x73,0x6f,0x75,0x6e,// handler_type: 'soun'
0x00,0x00,0x00,0x00,// reserved
0x00,0x00,0x00,0x00,// reserved
0x00,0x00,0x00,0x00,// reserved
0x53,0x6f,0x75,0x6e,0x64,0x48,0x61,0x6e,0x64,0x6c,0x65,0x72,0x00// name: 'SoundHandler'
]);MP4.HDLR_TYPES={video:videoHdlr,audio:audioHdlr};const dref=new Uint8Array([0x00,// version 0
0x00,0x00,0x00,// flags
0x00,0x00,0x00,0x01,// entry_count
0x00,0x00,0x00,0x0c,// entry_size
0x75,0x72,0x6c,0x20,// 'url' type
0x00,// version 0
0x00,0x00,0x01// entry_flags
]);const stco=new Uint8Array([0x00,// version
0x00,0x00,0x00,// flags
0x00,0x00,0x00,0x00// entry_count
]);MP4.STTS=MP4.STSC=MP4.STCO=stco;MP4.STSZ=new Uint8Array([0x00,// version
0x00,0x00,0x00,// flags
0x00,0x00,0x00,0x00,// sample_size
0x00,0x00,0x00,0x00// sample_count
]);MP4.VMHD=new Uint8Array([0x00,// version
0x00,0x00,0x01,// flags
0x00,0x00,// graphicsmode
0x00,0x00,0x00,0x00,0x00,0x00// opcolor
]);MP4.SMHD=new Uint8Array([0x00,// version
0x00,0x00,0x00,// flags
0x00,0x00,// balance
0x00,0x00// reserved
]);MP4.STSD=new Uint8Array([0x00,// version 0
0x00,0x00,0x00,// flags
0x00,0x00,0x00,0x01]);// entry_count
const majorBrand=new Uint8Array([105,115,111,109]);// isom
const avc1Brand=new Uint8Array([97,118,99,49]);// avc1
const minorVersion=new Uint8Array([0,0,0,1]);MP4.FTYP=MP4.box(MP4.types.ftyp,majorBrand,minorVersion,majorBrand,avc1Brand);MP4.DINF=MP4.box(MP4.types.dinf,MP4.box(MP4.types.dref,dref));}static box(type,...payload){let size=8;let i=payload.length;const len=i;// calculate the total size we need to allocate
while(i--){size+=payload[i].byteLength;}const result=new Uint8Array(size);result[0]=size>>24&0xff;result[1]=size>>16&0xff;result[2]=size>>8&0xff;result[3]=size&0xff;result.set(type,4);// copy the payload into the result
for(i=0,size=8;i<len;i++){// copy payload[i] array @ offset size
result.set(payload[i],size);size+=payload[i].byteLength;}return result;}static hdlr(type){return MP4.box(MP4.types.hdlr,MP4.HDLR_TYPES[type]);}static mdat(data){return MP4.box(MP4.types.mdat,data);}static mdhd(timescale,duration){duration*=timescale;const upperWordDuration=Math.floor(duration/(UINT32_MAX+1));const lowerWordDuration=Math.floor(duration%(UINT32_MAX+1));return MP4.box(MP4.types.mdhd,new Uint8Array([0x01,// version 1
0x00,0x00,0x00,// flags
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,// creation_time
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,// modification_time
timescale>>24&0xff,timescale>>16&0xff,timescale>>8&0xff,timescale&0xff,// timescale
upperWordDuration>>24,upperWordDuration>>16&0xff,upperWordDuration>>8&0xff,upperWordDuration&0xff,lowerWordDuration>>24,lowerWordDuration>>16&0xff,lowerWordDuration>>8&0xff,lowerWordDuration&0xff,0x55,0xc4,// 'und' language (undetermined)
0x00,0x00]));}static mdia(track){return MP4.box(MP4.types.mdia,MP4.mdhd(track.timescale,track.duration),MP4.hdlr(track.type),MP4.minf(track));}static mfhd(sequenceNumber){return MP4.box(MP4.types.mfhd,new Uint8Array([0x00,0x00,0x00,0x00,// flags
sequenceNumber>>24,sequenceNumber>>16&0xff,sequenceNumber>>8&0xff,sequenceNumber&0xff// sequence_number
]));}static minf(track){if(track.type==='audio'){return MP4.box(MP4.types.minf,MP4.box(MP4.types.smhd,MP4.SMHD),MP4.DINF,MP4.stbl(track));}else {return MP4.box(MP4.types.minf,MP4.box(MP4.types.vmhd,MP4.VMHD),MP4.DINF,MP4.stbl(track));}}static moof(sn,baseMediaDecodeTime,track){return MP4.box(MP4.types.moof,MP4.mfhd(sn),MP4.traf(track,baseMediaDecodeTime));}static moov(tracks){let i=tracks.length;const boxes=[];while(i--){boxes[i]=MP4.trak(tracks[i]);}return MP4.box.apply(null,[MP4.types.moov,MP4.mvhd(tracks[0].timescale,tracks[0].duration)].concat(boxes).concat(MP4.mvex(tracks)));}static mvex(tracks){let i=tracks.length;const boxes=[];while(i--){boxes[i]=MP4.trex(tracks[i]);}return MP4.box.apply(null,[MP4.types.mvex,...boxes]);}static mvhd(timescale,duration){duration*=timescale;const upperWordDuration=Math.floor(duration/(UINT32_MAX+1));const lowerWordDuration=Math.floor(duration%(UINT32_MAX+1));const bytes=new Uint8Array([0x01,// version 1
0x00,0x00,0x00,// flags
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,// creation_time
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,// modification_time
timescale>>24&0xff,timescale>>16&0xff,timescale>>8&0xff,timescale&0xff,// timescale
upperWordDuration>>24,upperWordDuration>>16&0xff,upperWordDuration>>8&0xff,upperWordDuration&0xff,lowerWordDuration>>24,lowerWordDuration>>16&0xff,lowerWordDuration>>8&0xff,lowerWordDuration&0xff,0x00,0x01,0x00,0x00,// 1.0 rate
0x01,0x00,// 1.0 volume
0x00,0x00,// reserved
0x00,0x00,0x00,0x00,// reserved
0x00,0x00,0x00,0x00,// reserved
0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,// transformation: unity matrix
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// pre_defined
0xff,0xff,0xff,0xff// next_track_ID
]);return MP4.box(MP4.types.mvhd,bytes);}static sdtp(track){const samples=track.samples||[];const bytes=new Uint8Array(4+samples.length);let i;let flags;// leave the full box header (4 bytes) all zero
// write the sample table
for(i=0;i<samples.length;i++){flags=samples[i].flags;bytes[i+4]=flags.dependsOn<<4|flags.isDependedOn<<2|flags.hasRedundancy;}return MP4.box(MP4.types.sdtp,bytes);}static stbl(track){return MP4.box(MP4.types.stbl,MP4.stsd(track),MP4.box(MP4.types.stts,MP4.STTS),MP4.box(MP4.types.stsc,MP4.STSC),MP4.box(MP4.types.stsz,MP4.STSZ),MP4.box(MP4.types.stco,MP4.STCO));}static avc1(track){let sps=[];let pps=[];let i;let data;let len;// assemble the SPSs
for(i=0;i<track.sps.length;i++){data=track.sps[i];len=data.byteLength;sps.push(len>>>8&0xff);sps.push(len&0xff);// SPS
sps=sps.concat(Array.prototype.slice.call(data));}// assemble the PPSs
for(i=0;i<track.pps.length;i++){data=track.pps[i];len=data.byteLength;pps.push(len>>>8&0xff);pps.push(len&0xff);pps=pps.concat(Array.prototype.slice.call(data));}const avcc=MP4.box(MP4.types.avcC,new Uint8Array([0x01,// version
sps[3],// profile
sps[4],// profile compat
sps[5],// level
0xfc|3,// lengthSizeMinusOne, hard-coded to 4 bytes
0xe0|track.sps.length// 3bit reserved (111) + numOfSequenceParameterSets
].concat(sps).concat([track.pps.length// numOfPictureParameterSets
]).concat(pps)));// "PPS"
const width=track.width;const height=track.height;const hSpacing=track.pixelRatio[0];const vSpacing=track.pixelRatio[1];return MP4.box(MP4.types.avc1,new Uint8Array([0x00,0x00,0x00,// reserved
0x00,0x00,0x00,// reserved
0x00,0x01,// data_reference_index
0x00,0x00,// pre_defined
0x00,0x00,// reserved
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// pre_defined
width>>8&0xff,width&0xff,// width
height>>8&0xff,height&0xff,// height
0x00,0x48,0x00,0x00,// horizresolution
0x00,0x48,0x00,0x00,// vertresolution
0x00,0x00,0x00,0x00,// reserved
0x00,0x01,// frame_count
0x12,0x64,0x61,0x69,0x6c,// dailymotion/hls.js
0x79,0x6d,0x6f,0x74,0x69,0x6f,0x6e,0x2f,0x68,0x6c,0x73,0x2e,0x6a,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// compressorname
0x00,0x18,// depth = 24
0x11,0x11]),// pre_defined = -1
avcc,MP4.box(MP4.types.btrt,new Uint8Array([0x00,0x1c,0x9c,0x80,// bufferSizeDB
0x00,0x2d,0xc6,0xc0,// maxBitrate
0x00,0x2d,0xc6,0xc0])),// avgBitrate
MP4.box(MP4.types.pasp,new Uint8Array([hSpacing>>24,// hSpacing
hSpacing>>16&0xff,hSpacing>>8&0xff,hSpacing&0xff,vSpacing>>24,// vSpacing
vSpacing>>16&0xff,vSpacing>>8&0xff,vSpacing&0xff])));}static esds(track){const configlen=track.config.length;return new Uint8Array([0x00,// version 0
0x00,0x00,0x00,// flags
0x03,// descriptor_type
0x17+configlen,// length
0x00,0x01,// es_id
0x00,// stream_priority
0x04,// descriptor_type
0x0f+configlen,// length
0x40,// codec : mpeg4_audio
0x15,// stream_type
0x00,0x00,0x00,// buffer_size
0x00,0x00,0x00,0x00,// maxBitrate
0x00,0x00,0x00,0x00,// avgBitrate
0x05// descriptor_type
].concat([configlen]).concat(track.config).concat([0x06,0x01,0x02]));// GASpecificConfig)); // length + audio config descriptor
}static audioStsd(track){const samplerate=track.samplerate;return new Uint8Array([0x00,0x00,0x00,// reserved
0x00,0x00,0x00,// reserved
0x00,0x01,// data_reference_index
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// reserved
0x00,track.channelCount,// channelcount
0x00,0x10,// sampleSize:16bits
0x00,0x00,0x00,0x00,// reserved2
samplerate>>8&0xff,samplerate&0xff,//
0x00,0x00]);}static mp4a(track){return MP4.box(MP4.types.mp4a,MP4.audioStsd(track),MP4.box(MP4.types.esds,MP4.esds(track)));}static mp3(track){return MP4.box(MP4.types['.mp3'],MP4.audioStsd(track));}static ac3(track){return MP4.box(MP4.types['ac-3'],MP4.audioStsd(track),MP4.box(MP4.types.dac3,track.config));}static stsd(track){if(track.type==='audio'){if(track.segmentCodec==='mp3'&&track.codec==='mp3'){return MP4.box(MP4.types.stsd,MP4.STSD,MP4.mp3(track));}if(track.segmentCodec==='ac3'){return MP4.box(MP4.types.stsd,MP4.STSD,MP4.ac3(track));}return MP4.box(MP4.types.stsd,MP4.STSD,MP4.mp4a(track));}else {return MP4.box(MP4.types.stsd,MP4.STSD,MP4.avc1(track));}}static tkhd(track){const id=track.id;const duration=track.duration*track.timescale;const width=track.width;const height=track.height;const upperWordDuration=Math.floor(duration/(UINT32_MAX+1));const lowerWordDuration=Math.floor(duration%(UINT32_MAX+1));return MP4.box(MP4.types.tkhd,new Uint8Array([0x01,// version 1
0x00,0x00,0x07,// flags
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,// creation_time
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,// modification_time
id>>24&0xff,id>>16&0xff,id>>8&0xff,id&0xff,// track_ID
0x00,0x00,0x00,0x00,// reserved
upperWordDuration>>24,upperWordDuration>>16&0xff,upperWordDuration>>8&0xff,upperWordDuration&0xff,lowerWordDuration>>24,lowerWordDuration>>16&0xff,lowerWordDuration>>8&0xff,lowerWordDuration&0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// reserved
0x00,0x00,// layer
0x00,0x00,// alternate_group
0x00,0x00,// non-audio track volume
0x00,0x00,// reserved
0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,// transformation: unity matrix
width>>8&0xff,width&0xff,0x00,0x00,// width
height>>8&0xff,height&0xff,0x00,0x00// height
]));}static traf(track,baseMediaDecodeTime){const sampleDependencyTable=MP4.sdtp(track);const id=track.id;const upperWordBaseMediaDecodeTime=Math.floor(baseMediaDecodeTime/(UINT32_MAX+1));const lowerWordBaseMediaDecodeTime=Math.floor(baseMediaDecodeTime%(UINT32_MAX+1));return MP4.box(MP4.types.traf,MP4.box(MP4.types.tfhd,new Uint8Array([0x00,// version 0
0x00,0x00,0x00,// flags
id>>24,id>>16&0xff,id>>8&0xff,id&0xff// track_ID
])),MP4.box(MP4.types.tfdt,new Uint8Array([0x01,// version 1
0x00,0x00,0x00,// flags
upperWordBaseMediaDecodeTime>>24,upperWordBaseMediaDecodeTime>>16&0xff,upperWordBaseMediaDecodeTime>>8&0xff,upperWordBaseMediaDecodeTime&0xff,lowerWordBaseMediaDecodeTime>>24,lowerWordBaseMediaDecodeTime>>16&0xff,lowerWordBaseMediaDecodeTime>>8&0xff,lowerWordBaseMediaDecodeTime&0xff])),MP4.trun(track,sampleDependencyTable.length+16+// tfhd
20+// tfdt
8+// traf header
16+// mfhd
8+// moof header
8),// mdat header
sampleDependencyTable);}/**
   * Generate a track box.
   * @param track a track definition
   */static trak(track){track.duration=track.duration||0xffffffff;return MP4.box(MP4.types.trak,MP4.tkhd(track),MP4.mdia(track));}static trex(track){const id=track.id;return MP4.box(MP4.types.trex,new Uint8Array([0x00,// version 0
0x00,0x00,0x00,// flags
id>>24,id>>16&0xff,id>>8&0xff,id&0xff,// track_ID
0x00,0x00,0x00,0x01,// default_sample_description_index
0x00,0x00,0x00,0x00,// default_sample_duration
0x00,0x00,0x00,0x00,// default_sample_size
0x00,0x01,0x00,0x01// default_sample_flags
]));}static trun(track,offset){const samples=track.samples||[];const len=samples.length;const arraylen=12+16*len;const array=new Uint8Array(arraylen);let i;let sample;let duration;let size;let flags;let cts;offset+=8+arraylen;array.set([track.type==='video'?0x01:0x00,// version 1 for video with signed-int sample_composition_time_offset
0x00,0x0f,0x01,// flags
len>>>24&0xff,len>>>16&0xff,len>>>8&0xff,len&0xff,// sample_count
offset>>>24&0xff,offset>>>16&0xff,offset>>>8&0xff,offset&0xff// data_offset
],0);for(i=0;i<len;i++){sample=samples[i];duration=sample.duration;size=sample.size;flags=sample.flags;cts=sample.cts;array.set([duration>>>24&0xff,duration>>>16&0xff,duration>>>8&0xff,duration&0xff,// sample_duration
size>>>24&0xff,size>>>16&0xff,size>>>8&0xff,size&0xff,// sample_size
flags.isLeading<<2|flags.dependsOn,flags.isDependedOn<<6|flags.hasRedundancy<<4|flags.paddingValue<<1|flags.isNonSync,flags.degradPrio&0xf0<<8,flags.degradPrio&0x0f,// sample_flags
cts>>>24&0xff,cts>>>16&0xff,cts>>>8&0xff,cts&0xff// sample_composition_time_offset
],12+16*i);}return MP4.box(MP4.types.trun,array);}static initSegment(tracks){if(!MP4.types){MP4.init();}const movie=MP4.moov(tracks);const result=appendUint8Array(MP4.FTYP,movie);return result;}}MP4.types=void 0;MP4.HDLR_TYPES=void 0;MP4.STTS=void 0;MP4.STSC=void 0;MP4.STCO=void 0;MP4.STSZ=void 0;MP4.VMHD=void 0;MP4.SMHD=void 0;MP4.STSD=void 0;MP4.FTYP=void 0;MP4.DINF=void 0;const MPEG_TS_CLOCK_FREQ_HZ=90000;function toTimescaleFromBase(baseTime,destScale,srcBase=1,round=false){const result=baseTime*destScale*srcBase;// equivalent to `(value * scale) / (1 / base)`
return round?Math.round(result):result;}function toTimescaleFromScale(baseTime,destScale,srcScale=1,round=false){return toTimescaleFromBase(baseTime,destScale,1/srcScale,round);}function toMsFromMpegTsClock(baseTime,round=false){return toTimescaleFromBase(baseTime,1000,1/MPEG_TS_CLOCK_FREQ_HZ,round);}function toMpegTsClockFromTimescale(baseTime,srcScale=1){return toTimescaleFromBase(baseTime,MPEG_TS_CLOCK_FREQ_HZ,1/srcScale);}const MAX_SILENT_FRAME_DURATION=10*1000;// 10 seconds
const AAC_SAMPLES_PER_FRAME=1024;const MPEG_AUDIO_SAMPLE_PER_FRAME=1152;const AC3_SAMPLES_PER_FRAME=1536;let chromeVersion=null;let safariWebkitVersion=null;class MP4Remuxer{constructor(observer,config,typeSupported,vendor=''){this.observer=void 0;this.config=void 0;this.typeSupported=void 0;this.ISGenerated=false;this._initPTS=null;this._initDTS=null;this.nextAvcDts=null;this.nextAudioPts=null;this.videoSampleDuration=null;this.isAudioContiguous=false;this.isVideoContiguous=false;this.videoTrackConfig=void 0;this.observer=observer;this.config=config;this.typeSupported=typeSupported;this.ISGenerated=false;if(chromeVersion===null){const userAgent=navigator.userAgent||'';const result=userAgent.match(/Chrome\/(\d+)/i);chromeVersion=result?parseInt(result[1]):0;}if(safariWebkitVersion===null){const result=navigator.userAgent.match(/Safari\/(\d+)/i);safariWebkitVersion=result?parseInt(result[1]):0;}}destroy(){// @ts-ignore
this.config=this.videoTrackConfig=this._initPTS=this._initDTS=null;}resetTimeStamp(defaultTimeStamp){logger$2.log('[mp4-remuxer]: initPTS & initDTS reset');this._initPTS=this._initDTS=defaultTimeStamp;}resetNextTimestamp(){logger$2.log('[mp4-remuxer]: reset next timestamp');this.isVideoContiguous=false;this.isAudioContiguous=false;}resetInitSegment(){logger$2.log('[mp4-remuxer]: ISGenerated flag reset');this.ISGenerated=false;this.videoTrackConfig=undefined;}getVideoStartPts(videoSamples){// Get the minimum PTS value relative to the first sample's PTS, normalized for 33-bit wrapping
let rolloverDetected=false;const firstPts=videoSamples[0].pts;const startPTS=videoSamples.reduce((minPTS,sample)=>{let pts=sample.pts;let delta=pts-minPTS;if(delta<-4294967296){// 2^32, see PTSNormalize for reasoning, but we're hitting a rollover here, and we don't want that to impact the timeOffset calculation
rolloverDetected=true;pts=normalizePts(pts,firstPts);delta=pts-minPTS;}if(delta>0){return minPTS;}return pts;},firstPts);if(rolloverDetected){logger$2.debug('PTS rollover detected');}return startPTS;}remux(audioTrack,videoTrack,id3Track,textTrack,timeOffset,accurateTimeOffset,flush,playlistType){let video;let audio;let initSegment;let text;let id3;let independent;let audioTimeOffset=timeOffset;let videoTimeOffset=timeOffset;// If we're remuxing audio and video progressively, wait until we've received enough samples for each track before proceeding.
// This is done to synchronize the audio and video streams. We know if the current segment will have samples if the "pid"
// parameter is greater than -1. The pid is set when the PMT is parsed, which contains the tracks list.
// However, if the initSegment has already been generated, or we've reached the end of a segment (flush),
// then we can remux one track without waiting for the other.
const hasAudio=audioTrack.pid>-1;const hasVideo=videoTrack.pid>-1;const length=videoTrack.samples.length;const enoughAudioSamples=audioTrack.samples.length>0;const enoughVideoSamples=flush&&length>0||length>1;const canRemuxAvc=(!hasAudio||enoughAudioSamples)&&(!hasVideo||enoughVideoSamples)||this.ISGenerated||flush;if(canRemuxAvc){if(this.ISGenerated){var _videoTrack$pixelRati,_config$pixelRatio,_videoTrack$pixelRati2,_config$pixelRatio2;const config=this.videoTrackConfig;if(config&&(videoTrack.width!==config.width||videoTrack.height!==config.height||((_videoTrack$pixelRati=videoTrack.pixelRatio)==null?void 0:_videoTrack$pixelRati[0])!==((_config$pixelRatio=config.pixelRatio)==null?void 0:_config$pixelRatio[0])||((_videoTrack$pixelRati2=videoTrack.pixelRatio)==null?void 0:_videoTrack$pixelRati2[1])!==((_config$pixelRatio2=config.pixelRatio)==null?void 0:_config$pixelRatio2[1]))){this.resetInitSegment();}}else {initSegment=this.generateIS(audioTrack,videoTrack,timeOffset,accurateTimeOffset);}const isVideoContiguous=this.isVideoContiguous;let firstKeyFrameIndex=-1;let firstKeyFramePTS;if(enoughVideoSamples){firstKeyFrameIndex=findKeyframeIndex(videoTrack.samples);if(!isVideoContiguous&&this.config.forceKeyFrameOnDiscontinuity){independent=true;if(firstKeyFrameIndex>0){logger$2.warn(`[mp4-remuxer]: Dropped ${firstKeyFrameIndex} out of ${length} video samples due to a missing keyframe`);const startPTS=this.getVideoStartPts(videoTrack.samples);videoTrack.samples=videoTrack.samples.slice(firstKeyFrameIndex);videoTrack.dropped+=firstKeyFrameIndex;videoTimeOffset+=(videoTrack.samples[0].pts-startPTS)/videoTrack.inputTimeScale;firstKeyFramePTS=videoTimeOffset;}else if(firstKeyFrameIndex===-1){logger$2.warn(`[mp4-remuxer]: No keyframe found out of ${length} video samples`);independent=false;}}}if(this.ISGenerated){if(enoughAudioSamples&&enoughVideoSamples){// timeOffset is expected to be the offset of the first timestamp of this fragment (first DTS)
// if first audio DTS is not aligned with first video DTS then we need to take that into account
// when providing timeOffset to remuxAudio / remuxVideo. if we don't do that, there might be a permanent / small
// drift between audio and video streams
const startPTS=this.getVideoStartPts(videoTrack.samples);const tsDelta=normalizePts(audioTrack.samples[0].pts,startPTS)-startPTS;const audiovideoTimestampDelta=tsDelta/videoTrack.inputTimeScale;audioTimeOffset+=Math.max(0,audiovideoTimestampDelta);videoTimeOffset+=Math.max(0,-audiovideoTimestampDelta);}// Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is calculated in remuxAudio.
if(enoughAudioSamples){// if initSegment was generated without audio samples, regenerate it again
if(!audioTrack.samplerate){logger$2.warn('[mp4-remuxer]: regenerate InitSegment as audio detected');initSegment=this.generateIS(audioTrack,videoTrack,timeOffset,accurateTimeOffset);}audio=this.remuxAudio(audioTrack,audioTimeOffset,this.isAudioContiguous,accurateTimeOffset,hasVideo||enoughVideoSamples||playlistType===PlaylistLevelType.AUDIO?videoTimeOffset:undefined);if(enoughVideoSamples){const audioTrackLength=audio?audio.endPTS-audio.startPTS:0;// if initSegment was generated without video samples, regenerate it again
if(!videoTrack.inputTimeScale){logger$2.warn('[mp4-remuxer]: regenerate InitSegment as video detected');initSegment=this.generateIS(audioTrack,videoTrack,timeOffset,accurateTimeOffset);}video=this.remuxVideo(videoTrack,videoTimeOffset,isVideoContiguous,audioTrackLength);}}else if(enoughVideoSamples){video=this.remuxVideo(videoTrack,videoTimeOffset,isVideoContiguous,0);}if(video){video.firstKeyFrame=firstKeyFrameIndex;video.independent=firstKeyFrameIndex!==-1;video.firstKeyFramePTS=firstKeyFramePTS;}}}// Allow ID3 and text to remux, even if more audio/video samples are required
if(this.ISGenerated&&this._initPTS&&this._initDTS){if(id3Track.samples.length){id3=flushTextTrackMetadataCueSamples(id3Track,timeOffset,this._initPTS,this._initDTS);}if(textTrack.samples.length){text=flushTextTrackUserdataCueSamples(textTrack,timeOffset,this._initPTS);}}return {audio,video,initSegment,independent,text,id3};}generateIS(audioTrack,videoTrack,timeOffset,accurateTimeOffset){const audioSamples=audioTrack.samples;const videoSamples=videoTrack.samples;const typeSupported=this.typeSupported;const tracks={};const _initPTS=this._initPTS;let computePTSDTS=!_initPTS||accurateTimeOffset;let container='audio/mp4';let initPTS;let initDTS;let timescale;if(computePTSDTS){initPTS=initDTS=Infinity;}if(audioTrack.config&&audioSamples.length){// let's use audio sampling rate as MP4 time scale.
// rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)
// using audio sampling rate here helps having an integer MP4 frame duration
// this avoids potential rounding issue and AV sync issue
audioTrack.timescale=audioTrack.samplerate;switch(audioTrack.segmentCodec){case'mp3':if(typeSupported.mpeg){// Chrome and Safari
container='audio/mpeg';audioTrack.codec='';}else if(typeSupported.mp3){// Firefox
audioTrack.codec='mp3';}break;case'ac3':audioTrack.codec='ac-3';break;}tracks.audio={id:'audio',container:container,codec:audioTrack.codec,initSegment:audioTrack.segmentCodec==='mp3'&&typeSupported.mpeg?new Uint8Array(0):MP4.initSegment([audioTrack]),metadata:{channelCount:audioTrack.channelCount}};if(computePTSDTS){timescale=audioTrack.inputTimeScale;if(!_initPTS||timescale!==_initPTS.timescale){// remember first PTS of this demuxing context. for audio, PTS = DTS
initPTS=initDTS=audioSamples[0].pts-Math.round(timescale*timeOffset);}else {computePTSDTS=false;}}}if(videoTrack.sps&&videoTrack.pps&&videoSamples.length){// let's use input time scale as MP4 video timescale
// we use input time scale straight away to avoid rounding issues on frame duration / cts computation
videoTrack.timescale=videoTrack.inputTimeScale;tracks.video={id:'main',container:'video/mp4',codec:videoTrack.codec,initSegment:MP4.initSegment([videoTrack]),metadata:{width:videoTrack.width,height:videoTrack.height}};if(computePTSDTS){timescale=videoTrack.inputTimeScale;if(!_initPTS||timescale!==_initPTS.timescale){const startPTS=this.getVideoStartPts(videoSamples);const startOffset=Math.round(timescale*timeOffset);initDTS=Math.min(initDTS,normalizePts(videoSamples[0].dts,startPTS)-startOffset);initPTS=Math.min(initPTS,startPTS-startOffset);}else {computePTSDTS=false;}}this.videoTrackConfig={width:videoTrack.width,height:videoTrack.height,pixelRatio:videoTrack.pixelRatio};}if(Object.keys(tracks).length){this.ISGenerated=true;if(computePTSDTS){this._initPTS={baseTime:initPTS,timescale:timescale};this._initDTS={baseTime:initDTS,timescale:timescale};}else {initPTS=timescale=undefined;}return {tracks,initPTS,timescale};}}remuxVideo(track,timeOffset,contiguous,audioTrackLength){const timeScale=track.inputTimeScale;const inputSamples=track.samples;const outputSamples=[];const nbSamples=inputSamples.length;const initPTS=this._initPTS;let nextAvcDts=this.nextAvcDts;let offset=8;let mp4SampleDuration=this.videoSampleDuration;let firstDTS;let lastDTS;let minPTS=Number.POSITIVE_INFINITY;let maxPTS=Number.NEGATIVE_INFINITY;let sortSamples=false;// if parsed fragment is contiguous with last one, let's use last DTS value as reference
if(!contiguous||nextAvcDts===null){const pts=timeOffset*timeScale;const cts=inputSamples[0].pts-normalizePts(inputSamples[0].dts,inputSamples[0].pts);if(chromeVersion&&nextAvcDts!==null&&Math.abs(pts-cts-nextAvcDts)<15000){// treat as contigous to adjust samples that would otherwise produce video buffer gaps in Chrome
contiguous=true;}else {// if not contiguous, let's use target timeOffset
nextAvcDts=pts-cts;}}// PTS is coded on 33bits, and can loop from -2^32 to 2^32
// PTSNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value
const initTime=initPTS.baseTime*timeScale/initPTS.timescale;for(let i=0;i<nbSamples;i++){const sample=inputSamples[i];sample.pts=normalizePts(sample.pts-initTime,nextAvcDts);sample.dts=normalizePts(sample.dts-initTime,nextAvcDts);if(sample.dts<inputSamples[i>0?i-1:i].dts){sortSamples=true;}}// sort video samples by DTS then PTS then demux id order
if(sortSamples){inputSamples.sort(function(a,b){const deltadts=a.dts-b.dts;const deltapts=a.pts-b.pts;return deltadts||deltapts;});}// Get first/last DTS
firstDTS=inputSamples[0].dts;lastDTS=inputSamples[inputSamples.length-1].dts;// Sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS
// set this constant duration as being the avg delta between consecutive DTS.
const inputDuration=lastDTS-firstDTS;const averageSampleDuration=inputDuration?Math.round(inputDuration/(nbSamples-1)):mp4SampleDuration||track.inputTimeScale/30;// if fragment are contiguous, detect hole/overlapping between fragments
if(contiguous){// check timestamp continuity across consecutive fragments (this is to remove inter-fragment gap/hole)
const delta=firstDTS-nextAvcDts;const foundHole=delta>averageSampleDuration;const foundOverlap=delta<-1;if(foundHole||foundOverlap){if(foundHole){logger$2.warn(`AVC: ${toMsFromMpegTsClock(delta,true)} ms (${delta}dts) hole between fragments detected at ${timeOffset.toFixed(3)}`);}else {logger$2.warn(`AVC: ${toMsFromMpegTsClock(-delta,true)} ms (${delta}dts) overlapping between fragments detected at ${timeOffset.toFixed(3)}`);}if(!foundOverlap||nextAvcDts>=inputSamples[0].pts||chromeVersion){firstDTS=nextAvcDts;const firstPTS=inputSamples[0].pts-delta;if(foundHole){inputSamples[0].dts=firstDTS;inputSamples[0].pts=firstPTS;}else {for(let i=0;i<inputSamples.length;i++){if(inputSamples[i].dts>firstPTS){break;}inputSamples[i].dts-=delta;inputSamples[i].pts-=delta;}}logger$2.log(`Video: Initial PTS/DTS adjusted: ${toMsFromMpegTsClock(firstPTS,true)}/${toMsFromMpegTsClock(firstDTS,true)}, delta: ${toMsFromMpegTsClock(delta,true)} ms`);}}}firstDTS=Math.max(0,firstDTS);let nbNalu=0;let naluLen=0;let dtsStep=firstDTS;for(let i=0;i<nbSamples;i++){// compute total/avc sample length and nb of NAL units
const sample=inputSamples[i];const units=sample.units;const nbUnits=units.length;let sampleLen=0;for(let j=0;j<nbUnits;j++){sampleLen+=units[j].data.length;}naluLen+=sampleLen;nbNalu+=nbUnits;sample.length=sampleLen;// ensure sample monotonic DTS
if(sample.dts<dtsStep){sample.dts=dtsStep;dtsStep+=averageSampleDuration/4|0||1;}else {dtsStep=sample.dts;}minPTS=Math.min(sample.pts,minPTS);maxPTS=Math.max(sample.pts,maxPTS);}lastDTS=inputSamples[nbSamples-1].dts;/* concatenate the video data and construct the mdat in place
      (need 8 more bytes to fill length and mpdat type) */const mdatSize=naluLen+4*nbNalu+8;let mdat;try{mdat=new Uint8Array(mdatSize);}catch(err){this.observer.emit(Events.ERROR,Events.ERROR,{type:ErrorTypes.MUX_ERROR,details:ErrorDetails.REMUX_ALLOC_ERROR,fatal:false,error:err,bytes:mdatSize,reason:`fail allocating video mdat ${mdatSize}`});return;}const view=new DataView(mdat.buffer);view.setUint32(0,mdatSize);mdat.set(MP4.types.mdat,4);let stretchedLastFrame=false;let minDtsDelta=Number.POSITIVE_INFINITY;let minPtsDelta=Number.POSITIVE_INFINITY;let maxDtsDelta=Number.NEGATIVE_INFINITY;let maxPtsDelta=Number.NEGATIVE_INFINITY;for(let i=0;i<nbSamples;i++){const VideoSample=inputSamples[i];const VideoSampleUnits=VideoSample.units;let mp4SampleLength=0;// convert NALU bitstream to MP4 format (prepend NALU with size field)
for(let j=0,nbUnits=VideoSampleUnits.length;j<nbUnits;j++){const unit=VideoSampleUnits[j];const unitData=unit.data;const unitDataLen=unit.data.byteLength;view.setUint32(offset,unitDataLen);offset+=4;mdat.set(unitData,offset);offset+=unitDataLen;mp4SampleLength+=4+unitDataLen;}// expected sample duration is the Decoding Timestamp diff of consecutive samples
let ptsDelta;if(i<nbSamples-1){mp4SampleDuration=inputSamples[i+1].dts-VideoSample.dts;ptsDelta=inputSamples[i+1].pts-VideoSample.pts;}else {const config=this.config;const lastFrameDuration=i>0?VideoSample.dts-inputSamples[i-1].dts:averageSampleDuration;ptsDelta=i>0?VideoSample.pts-inputSamples[i-1].pts:averageSampleDuration;if(config.stretchShortVideoTrack&&this.nextAudioPts!==null){// In some cases, a segment's audio track duration may exceed the video track duration.
// Since we've already remuxed audio, and we know how long the audio track is, we look to
// see if the delta to the next segment is longer than maxBufferHole.
// If so, playback would potentially get stuck, so we artificially inflate
// the duration of the last frame to minimize any potential gap between segments.
const gapTolerance=Math.floor(config.maxBufferHole*timeScale);const deltaToFrameEnd=(audioTrackLength?minPTS+audioTrackLength*timeScale:this.nextAudioPts)-VideoSample.pts;if(deltaToFrameEnd>gapTolerance){// We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video
// frame overlap. maxBufferHole should be >> lastFrameDuration anyway.
mp4SampleDuration=deltaToFrameEnd-lastFrameDuration;if(mp4SampleDuration<0){mp4SampleDuration=lastFrameDuration;}else {stretchedLastFrame=true;}logger$2.log(`[mp4-remuxer]: It is approximately ${deltaToFrameEnd/90} ms to the next segment; using duration ${mp4SampleDuration/90} ms for the last video frame.`);}else {mp4SampleDuration=lastFrameDuration;}}else {mp4SampleDuration=lastFrameDuration;}}const compositionTimeOffset=Math.round(VideoSample.pts-VideoSample.dts);minDtsDelta=Math.min(minDtsDelta,mp4SampleDuration);maxDtsDelta=Math.max(maxDtsDelta,mp4SampleDuration);minPtsDelta=Math.min(minPtsDelta,ptsDelta);maxPtsDelta=Math.max(maxPtsDelta,ptsDelta);outputSamples.push(new Mp4Sample(VideoSample.key,mp4SampleDuration,mp4SampleLength,compositionTimeOffset));}if(outputSamples.length){if(chromeVersion){if(chromeVersion<70){// Chrome workaround, mark first sample as being a Random Access Point (keyframe) to avoid sourcebuffer append issue
// https://code.google.com/p/chromium/issues/detail?id=229412
const flags=outputSamples[0].flags;flags.dependsOn=2;flags.isNonSync=0;}}else if(safariWebkitVersion){// Fix for "CNN special report, with CC" in test-streams (Safari browser only)
// Ignore DTS when frame durations are irregular. Safari MSE does not handle this leading to gaps.
if(maxPtsDelta-minPtsDelta<maxDtsDelta-minDtsDelta&&averageSampleDuration/maxDtsDelta<0.025&&outputSamples[0].cts===0){logger$2.warn('Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.');let dts=firstDTS;for(let i=0,len=outputSamples.length;i<len;i++){const nextDts=dts+outputSamples[i].duration;const pts=dts+outputSamples[i].cts;if(i<len-1){const nextPts=nextDts+outputSamples[i+1].cts;outputSamples[i].duration=nextPts-pts;}else {outputSamples[i].duration=i?outputSamples[i-1].duration:averageSampleDuration;}outputSamples[i].cts=0;dts=nextDts;}}}}// next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)
mp4SampleDuration=stretchedLastFrame||!mp4SampleDuration?averageSampleDuration:mp4SampleDuration;this.nextAvcDts=nextAvcDts=lastDTS+mp4SampleDuration;this.videoSampleDuration=mp4SampleDuration;this.isVideoContiguous=true;const moof=MP4.moof(track.sequenceNumber++,firstDTS,_extends({},track,{samples:outputSamples}));const type='video';const data={data1:moof,data2:mdat,startPTS:minPTS/timeScale,endPTS:(maxPTS+mp4SampleDuration)/timeScale,startDTS:firstDTS/timeScale,endDTS:nextAvcDts/timeScale,type,hasAudio:false,hasVideo:true,nb:outputSamples.length,dropped:track.dropped};track.samples=[];track.dropped=0;return data;}getSamplesPerFrame(track){switch(track.segmentCodec){case'mp3':return MPEG_AUDIO_SAMPLE_PER_FRAME;case'ac3':return AC3_SAMPLES_PER_FRAME;default:return AAC_SAMPLES_PER_FRAME;}}remuxAudio(track,timeOffset,contiguous,accurateTimeOffset,videoTimeOffset){const inputTimeScale=track.inputTimeScale;const mp4timeScale=track.samplerate?track.samplerate:inputTimeScale;const scaleFactor=inputTimeScale/mp4timeScale;const mp4SampleDuration=this.getSamplesPerFrame(track);const inputSampleDuration=mp4SampleDuration*scaleFactor;const initPTS=this._initPTS;const rawMPEG=track.segmentCodec==='mp3'&&this.typeSupported.mpeg;const outputSamples=[];const alignedWithVideo=videoTimeOffset!==undefined;let inputSamples=track.samples;let offset=rawMPEG?0:8;let nextAudioPts=this.nextAudioPts||-1;// window.audioSamples ? window.audioSamples.push(inputSamples.map(s => s.pts)) : (window.audioSamples = [inputSamples.map(s => s.pts)]);
// for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),
// for sake of clarity:
// consecutive fragments are frags with
//  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR
//  - less than 20 audio frames distance
// contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)
// this helps ensuring audio continuity
// and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame
const timeOffsetMpegTS=timeOffset*inputTimeScale;const initTime=initPTS.baseTime*inputTimeScale/initPTS.timescale;this.isAudioContiguous=contiguous=contiguous||inputSamples.length&&nextAudioPts>0&&(accurateTimeOffset&&Math.abs(timeOffsetMpegTS-nextAudioPts)<9000||Math.abs(normalizePts(inputSamples[0].pts-initTime,timeOffsetMpegTS)-nextAudioPts)<20*inputSampleDuration);// compute normalized PTS
inputSamples.forEach(function(sample){sample.pts=normalizePts(sample.pts-initTime,timeOffsetMpegTS);});if(!contiguous||nextAudioPts<0){// filter out sample with negative PTS that are not playable anyway
// if we don't remove these negative samples, they will shift all audio samples forward.
// leading to audio overlap between current / next fragment
inputSamples=inputSamples.filter(sample=>sample.pts>=0);// in case all samples have negative PTS, and have been filtered out, return now
if(!inputSamples.length){return;}if(videoTimeOffset===0){// Set the start to 0 to match video so that start gaps larger than inputSampleDuration are filled with silence
nextAudioPts=0;}else if(accurateTimeOffset&&!alignedWithVideo){// When not seeking, not live, and LevelDetails.PTSKnown, use fragment start as predicted next audio PTS
nextAudioPts=Math.max(0,timeOffsetMpegTS);}else {// if frags are not contiguous and if we cant trust time offset, let's use first sample PTS as next audio PTS
nextAudioPts=inputSamples[0].pts;}}// If the audio track is missing samples, the frames seem to get "left-shifted" within the
// resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.
// In an effort to prevent this from happening, we inject frames here where there are gaps.
// When possible, we inject a silent frame; when that's not possible, we duplicate the last
// frame.
if(track.segmentCodec==='aac'){const maxAudioFramesDrift=this.config.maxAudioFramesDrift;for(let i=0,nextPts=nextAudioPts;i<inputSamples.length;i++){// First, let's see how far off this frame is from where we expect it to be
const sample=inputSamples[i];const pts=sample.pts;const delta=pts-nextPts;const duration=Math.abs(1000*delta/inputTimeScale);// When remuxing with video, if we're overlapping by more than a duration, drop this sample to stay in sync
if(delta<=-maxAudioFramesDrift*inputSampleDuration&&alignedWithVideo){if(i===0){logger$2.warn(`Audio frame @ ${(pts/inputTimeScale).toFixed(3)}s overlaps nextAudioPts by ${Math.round(1000*delta/inputTimeScale)} ms.`);this.nextAudioPts=nextAudioPts=nextPts=pts;}}// eslint-disable-line brace-style
// Insert missing frames if:
// 1: We're more than maxAudioFramesDrift frame away
// 2: Not more than MAX_SILENT_FRAME_DURATION away
// 3: currentTime (aka nextPtsNorm) is not 0
// 4: remuxing with video (videoTimeOffset !== undefined)
else if(delta>=maxAudioFramesDrift*inputSampleDuration&&duration<MAX_SILENT_FRAME_DURATION&&alignedWithVideo){let missing=Math.round(delta/inputSampleDuration);// Adjust nextPts so that silent samples are aligned with media pts. This will prevent media samples from
// later being shifted if nextPts is based on timeOffset and delta is not a multiple of inputSampleDuration.
nextPts=pts-missing*inputSampleDuration;if(nextPts<0){missing--;nextPts+=inputSampleDuration;}if(i===0){this.nextAudioPts=nextAudioPts=nextPts;}logger$2.warn(`[mp4-remuxer]: Injecting ${missing} audio frame @ ${(nextPts/inputTimeScale).toFixed(3)}s due to ${Math.round(1000*delta/inputTimeScale)} ms gap.`);for(let j=0;j<missing;j++){const newStamp=Math.max(nextPts,0);let fillFrame=AAC.getSilentFrame(track.manifestCodec||track.codec,track.channelCount);if(!fillFrame){logger$2.log('[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead.');fillFrame=sample.unit.subarray();}inputSamples.splice(i,0,{unit:fillFrame,pts:newStamp});nextPts+=inputSampleDuration;i++;}}sample.pts=nextPts;nextPts+=inputSampleDuration;}}let firstPTS=null;let lastPTS=null;let mdat;let mdatSize=0;let sampleLength=inputSamples.length;while(sampleLength--){mdatSize+=inputSamples[sampleLength].unit.byteLength;}for(let j=0,_nbSamples=inputSamples.length;j<_nbSamples;j++){const audioSample=inputSamples[j];const unit=audioSample.unit;let pts=audioSample.pts;if(lastPTS!==null){// If we have more than one sample, set the duration of the sample to the "real" duration; the PTS diff with
// the previous sample
const prevSample=outputSamples[j-1];prevSample.duration=Math.round((pts-lastPTS)/scaleFactor);}else {if(contiguous&&track.segmentCodec==='aac'){// set PTS/DTS to expected PTS/DTS
pts=nextAudioPts;}// remember first PTS of our audioSamples
firstPTS=pts;if(mdatSize>0){/* concatenate the audio data and construct the mdat in place
            (need 8 more bytes to fill length and mdat type) */mdatSize+=offset;try{mdat=new Uint8Array(mdatSize);}catch(err){this.observer.emit(Events.ERROR,Events.ERROR,{type:ErrorTypes.MUX_ERROR,details:ErrorDetails.REMUX_ALLOC_ERROR,fatal:false,error:err,bytes:mdatSize,reason:`fail allocating audio mdat ${mdatSize}`});return;}if(!rawMPEG){const view=new DataView(mdat.buffer);view.setUint32(0,mdatSize);mdat.set(MP4.types.mdat,4);}}else {// no audio samples
return;}}mdat.set(unit,offset);const unitLen=unit.byteLength;offset+=unitLen;// Default the sample's duration to the computed mp4SampleDuration, which will either be 1024 for AAC or 1152 for MPEG
// In the case that we have 1 sample, this will be the duration. If we have more than one sample, the duration
// becomes the PTS diff with the previous sample
outputSamples.push(new Mp4Sample(true,mp4SampleDuration,unitLen,0));lastPTS=pts;}// We could end up with no audio samples if all input samples were overlapping with the previously remuxed ones
const nbSamples=outputSamples.length;if(!nbSamples){return;}// The next audio sample PTS should be equal to last sample PTS + duration
const lastSample=outputSamples[outputSamples.length-1];this.nextAudioPts=nextAudioPts=lastPTS+scaleFactor*lastSample.duration;// Set the track samples from inputSamples to outputSamples before remuxing
const moof=rawMPEG?new Uint8Array(0):MP4.moof(track.sequenceNumber++,firstPTS/scaleFactor,_extends({},track,{samples:outputSamples}));// Clear the track samples. This also clears the samples array in the demuxer, since the reference is shared
track.samples=[];const start=firstPTS/inputTimeScale;const end=nextAudioPts/inputTimeScale;const type='audio';const audioData={data1:moof,data2:mdat,startPTS:start,endPTS:end,startDTS:start,endDTS:end,type,hasAudio:true,hasVideo:false,nb:nbSamples};this.isAudioContiguous=true;return audioData;}remuxEmptyAudio(track,timeOffset,contiguous,videoData){const inputTimeScale=track.inputTimeScale;const mp4timeScale=track.samplerate?track.samplerate:inputTimeScale;const scaleFactor=inputTimeScale/mp4timeScale;const nextAudioPts=this.nextAudioPts;// sync with video's timestamp
const initDTS=this._initDTS;const init90kHz=initDTS.baseTime*90000/initDTS.timescale;const startDTS=(nextAudioPts!==null?nextAudioPts:videoData.startDTS*inputTimeScale)+init90kHz;const endDTS=videoData.endDTS*inputTimeScale+init90kHz;// one sample's duration value
const frameDuration=scaleFactor*AAC_SAMPLES_PER_FRAME;// samples count of this segment's duration
const nbSamples=Math.ceil((endDTS-startDTS)/frameDuration);// silent frame
const silentFrame=AAC.getSilentFrame(track.manifestCodec||track.codec,track.channelCount);logger$2.warn('[mp4-remuxer]: remux empty Audio');// Can't remux if we can't generate a silent frame...
if(!silentFrame){logger$2.trace('[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec');return;}const samples=[];for(let i=0;i<nbSamples;i++){const stamp=startDTS+i*frameDuration;samples.push({unit:silentFrame,pts:stamp,dts:stamp});}track.samples=samples;return this.remuxAudio(track,timeOffset,contiguous,false);}}function normalizePts(value,reference){let offset;if(reference===null){return value;}if(reference<value){// - 2^33
offset=-8589934592;}else {// + 2^33
offset=8589934592;}/* PTS is 33bit (from 0 to 2^33 -1)
    if diff between value and reference is bigger than half of the amplitude (2^32) then it means that
    PTS looping occured. fill the gap */while(Math.abs(value-reference)>4294967296){value+=offset;}return value;}function findKeyframeIndex(samples){for(let i=0;i<samples.length;i++){if(samples[i].key){return i;}}return -1;}function flushTextTrackMetadataCueSamples(track,timeOffset,initPTS,initDTS){const length=track.samples.length;if(!length){return;}const inputTimeScale=track.inputTimeScale;for(let index=0;index<length;index++){const sample=track.samples[index];// setting id3 pts, dts to relative time
// using this._initPTS and this._initDTS to calculate relative time
sample.pts=normalizePts(sample.pts-initPTS.baseTime*inputTimeScale/initPTS.timescale,timeOffset*inputTimeScale)/inputTimeScale;sample.dts=normalizePts(sample.dts-initDTS.baseTime*inputTimeScale/initDTS.timescale,timeOffset*inputTimeScale)/inputTimeScale;}const samples=track.samples;track.samples=[];return {samples};}function flushTextTrackUserdataCueSamples(track,timeOffset,initPTS){const length=track.samples.length;if(!length){return;}const inputTimeScale=track.inputTimeScale;for(let index=0;index<length;index++){const sample=track.samples[index];// setting text pts, dts to relative time
// using this._initPTS and this._initDTS to calculate relative time
sample.pts=normalizePts(sample.pts-initPTS.baseTime*inputTimeScale/initPTS.timescale,timeOffset*inputTimeScale)/inputTimeScale;}track.samples.sort((a,b)=>a.pts-b.pts);const samples=track.samples;track.samples=[];return {samples};}class Mp4Sample{constructor(isKeyframe,duration,size,cts){this.size=void 0;this.duration=void 0;this.cts=void 0;this.flags=void 0;this.duration=duration;this.size=size;this.cts=cts;this.flags={isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:isKeyframe?2:1,isNonSync:isKeyframe?0:1};}}class PassThroughRemuxer{constructor(){this.emitInitSegment=false;this.audioCodec=void 0;this.videoCodec=void 0;this.initData=void 0;this.initPTS=null;this.initTracks=void 0;this.lastEndTime=null;}destroy(){}resetTimeStamp(defaultInitPTS){this.initPTS=defaultInitPTS;this.lastEndTime=null;}resetNextTimestamp(){this.lastEndTime=null;}resetInitSegment(initSegment,audioCodec,videoCodec,decryptdata){this.audioCodec=audioCodec;this.videoCodec=videoCodec;this.generateInitSegment(patchEncyptionData(initSegment,decryptdata));this.emitInitSegment=true;}generateInitSegment(initSegment){let{audioCodec,videoCodec}=this;if(!(initSegment!=null&&initSegment.byteLength)){this.initTracks=undefined;this.initData=undefined;return;}const initData=this.initData=parseInitSegment(initSegment);// Get codec from initSegment or fallback to default
if(initData.audio){audioCodec=getParsedTrackCodec(initData.audio,ElementaryStreamTypes.AUDIO);}if(initData.video){videoCodec=getParsedTrackCodec(initData.video,ElementaryStreamTypes.VIDEO);}const tracks={};if(initData.audio&&initData.video){tracks.audiovideo={container:'video/mp4',codec:audioCodec+','+videoCodec,initSegment,id:'main'};}else if(initData.audio){tracks.audio={container:'audio/mp4',codec:audioCodec,initSegment,id:'audio'};}else if(initData.video){tracks.video={container:'video/mp4',codec:videoCodec,initSegment,id:'main'};}else {logger$2.warn('[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes.');}this.initTracks=tracks;}remux(audioTrack,videoTrack,id3Track,textTrack,timeOffset,accurateTimeOffset){var _initData,_initData2;let{initPTS,lastEndTime}=this;const result={audio:undefined,video:undefined,text:textTrack,id3:id3Track,initSegment:undefined};// If we haven't yet set a lastEndDTS, or it was reset, set it to the provided timeOffset. We want to use the
// lastEndDTS over timeOffset whenever possible; during progressive playback, the media source will not update
// the media duration (which is what timeOffset is provided as) before we need to process the next chunk.
if(!isFiniteNumber(lastEndTime)){lastEndTime=this.lastEndTime=timeOffset||0;}// The binary segment data is added to the videoTrack in the mp4demuxer. We don't check to see if the data is only
// audio or video (or both); adding it to video was an arbitrary choice.
const data=videoTrack.samples;if(!(data!=null&&data.length)){return result;}const initSegment={initPTS:undefined,timescale:1};let initData=this.initData;if(!((_initData=initData)!=null&&_initData.length)){this.generateInitSegment(data);initData=this.initData;}if(!((_initData2=initData)!=null&&_initData2.length)){// We can't remux if the initSegment could not be generated
logger$2.warn('[passthrough-remuxer.ts]: Failed to generate initSegment.');return result;}if(this.emitInitSegment){initSegment.tracks=this.initTracks;this.emitInitSegment=false;}const duration=getDuration(data,initData);const startDTS=getStartDTS(initData,data);const decodeTime=startDTS===null?timeOffset:startDTS;if(isInvalidInitPts(initPTS,decodeTime,timeOffset,duration)||initSegment.timescale!==initPTS.timescale&&accurateTimeOffset){initSegment.initPTS=decodeTime-timeOffset;if(initPTS&&initPTS.timescale===1){logger$2.warn(`Adjusting initPTS by ${initSegment.initPTS-initPTS.baseTime}`);}this.initPTS=initPTS={baseTime:initSegment.initPTS,timescale:1};}const startTime=audioTrack?decodeTime-initPTS.baseTime/initPTS.timescale:lastEndTime;const endTime=startTime+duration;offsetStartDTS(initData,data,initPTS.baseTime/initPTS.timescale);if(duration>0){this.lastEndTime=endTime;}else {logger$2.warn('Duration parsed from mp4 should be greater than zero');this.resetNextTimestamp();}const hasAudio=!!initData.audio;const hasVideo=!!initData.video;let type='';if(hasAudio){type+='audio';}if(hasVideo){type+='video';}const track={data1:data,startPTS:startTime,startDTS:startTime,endPTS:endTime,endDTS:endTime,type,hasAudio,hasVideo,nb:1,dropped:0};result.audio=track.type==='audio'?track:undefined;result.video=track.type!=='audio'?track:undefined;result.initSegment=initSegment;result.id3=flushTextTrackMetadataCueSamples(id3Track,timeOffset,initPTS,initPTS);if(textTrack.samples.length){result.text=flushTextTrackUserdataCueSamples(textTrack,timeOffset,initPTS);}return result;}}function isInvalidInitPts(initPTS,startDTS,timeOffset,duration){if(initPTS===null){return true;}// InitPTS is invalid when distance from program would be more than segment duration or a minimum of one second
const minDuration=Math.max(duration,1);const startTime=startDTS-initPTS.baseTime/initPTS.timescale;return Math.abs(startTime-timeOffset)>minDuration;}function getParsedTrackCodec(track,type){const parsedCodec=track==null?void 0:track.codec;if(parsedCodec&&parsedCodec.length>4){return parsedCodec;}if(type===ElementaryStreamTypes.AUDIO){if(parsedCodec==='ec-3'||parsedCodec==='ac-3'||parsedCodec==='alac'){return parsedCodec;}if(parsedCodec==='fLaC'||parsedCodec==='Opus'){// Opting not to get `preferManagedMediaSource` from player config for isSupported() check for simplicity
const preferManagedMediaSource=false;return getCodecCompatibleName(parsedCodec,preferManagedMediaSource);}const result='mp4a.40.5';logger$2.info(`Parsed audio codec "${parsedCodec}" or audio object type not handled. Using "${result}"`);return result;}// Provide defaults based on codec type
// This allows for some playback of some fmp4 playlists without CODECS defined in manifest
logger$2.warn(`Unhandled video codec "${parsedCodec}"`);if(parsedCodec==='hvc1'||parsedCodec==='hev1'){return 'hvc1.1.6.L120.90';}if(parsedCodec==='av01'){return 'av01.0.04M.08';}return 'avc1.42e01e';}let now;// performance.now() not available on WebWorker, at least on Safari Desktop
try{now=self.performance.now.bind(self.performance);}catch(err){logger$2.debug('Unable to use Performance API on this environment');now=optionalSelf==null?void 0:optionalSelf.Date.now;}const muxConfig=[{demux:MP4Demuxer,remux:PassThroughRemuxer},{demux:TSDemuxer,remux:MP4Remuxer},{demux:AACDemuxer,remux:MP4Remuxer},{demux:MP3Demuxer,remux:MP4Remuxer}];{muxConfig.splice(2,0,{demux:AC3Demuxer,remux:MP4Remuxer});}class Transmuxer{constructor(observer,typeSupported,config,vendor,id){this.async=false;this.observer=void 0;this.typeSupported=void 0;this.config=void 0;this.vendor=void 0;this.id=void 0;this.demuxer=void 0;this.remuxer=void 0;this.decrypter=void 0;this.probe=void 0;this.decryptionPromise=null;this.transmuxConfig=void 0;this.currentTransmuxState=void 0;this.observer=observer;this.typeSupported=typeSupported;this.config=config;this.vendor=vendor;this.id=id;}configure(transmuxConfig){this.transmuxConfig=transmuxConfig;if(this.decrypter){this.decrypter.reset();}}push(data,decryptdata,chunkMeta,state){const stats=chunkMeta.transmuxing;stats.executeStart=now();let uintData=new Uint8Array(data);const{currentTransmuxState,transmuxConfig}=this;if(state){this.currentTransmuxState=state;}const{contiguous,discontinuity,trackSwitch,accurateTimeOffset,timeOffset,initSegmentChange}=state||currentTransmuxState;const{audioCodec,videoCodec,defaultInitPts,duration,initSegmentData}=transmuxConfig;const keyData=getEncryptionType(uintData,decryptdata);if(keyData&&keyData.method==='AES-128'){const decrypter=this.getDecrypter();// Software decryption is synchronous; webCrypto is not
if(decrypter.isSync()){// Software decryption is progressive. Progressive decryption may not return a result on each call. Any cached
// data is handled in the flush() call
let decryptedData=decrypter.softwareDecrypt(uintData,keyData.key.buffer,keyData.iv.buffer);// For Low-Latency HLS Parts, decrypt in place, since part parsing is expected on push progress
const loadingParts=chunkMeta.part>-1;if(loadingParts){decryptedData=decrypter.flush();}if(!decryptedData){stats.executeEnd=now();return emptyResult(chunkMeta);}uintData=new Uint8Array(decryptedData);}else {this.decryptionPromise=decrypter.webCryptoDecrypt(uintData,keyData.key.buffer,keyData.iv.buffer).then(decryptedData=>{// Calling push here is important; if flush() is called while this is still resolving, this ensures that
// the decrypted data has been transmuxed
const result=this.push(decryptedData,null,chunkMeta);this.decryptionPromise=null;return result;});return this.decryptionPromise;}}const resetMuxers=this.needsProbing(discontinuity,trackSwitch);if(resetMuxers){const error=this.configureTransmuxer(uintData);if(error){logger$2.warn(`[transmuxer] ${error.message}`);this.observer.emit(Events.ERROR,Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.FRAG_PARSING_ERROR,fatal:false,error,reason:error.message});stats.executeEnd=now();return emptyResult(chunkMeta);}}if(discontinuity||trackSwitch||initSegmentChange||resetMuxers){this.resetInitSegment(initSegmentData,audioCodec,videoCodec,duration,decryptdata);}if(discontinuity||initSegmentChange||resetMuxers){this.resetInitialTimestamp(defaultInitPts);}if(!contiguous){this.resetContiguity();}const result=this.transmux(uintData,keyData,timeOffset,accurateTimeOffset,chunkMeta);const currentState=this.currentTransmuxState;currentState.contiguous=true;currentState.discontinuity=false;currentState.trackSwitch=false;stats.executeEnd=now();return result;}// Due to data caching, flush calls can produce more than one TransmuxerResult (hence the Array type)
flush(chunkMeta){const stats=chunkMeta.transmuxing;stats.executeStart=now();const{decrypter,currentTransmuxState,decryptionPromise}=this;if(decryptionPromise){// Upon resolution, the decryption promise calls push() and returns its TransmuxerResult up the stack. Therefore
// only flushing is required for async decryption
return decryptionPromise.then(()=>{return this.flush(chunkMeta);});}const transmuxResults=[];const{timeOffset}=currentTransmuxState;if(decrypter){// The decrypter may have data cached, which needs to be demuxed. In this case we'll have two TransmuxResults
// This happens in the case that we receive only 1 push call for a segment (either for non-progressive downloads,
// or for progressive downloads with small segments)
const decryptedData=decrypter.flush();if(decryptedData){// Push always returns a TransmuxerResult if decryptdata is null
transmuxResults.push(this.push(decryptedData,null,chunkMeta));}}const{demuxer,remuxer}=this;if(!demuxer||!remuxer){// If probing failed, then Hls.js has been given content its not able to handle
stats.executeEnd=now();return [emptyResult(chunkMeta)];}const demuxResultOrPromise=demuxer.flush(timeOffset);if(isPromise(demuxResultOrPromise)){// Decrypt final SAMPLE-AES samples
return demuxResultOrPromise.then(demuxResult=>{this.flushRemux(transmuxResults,demuxResult,chunkMeta);return transmuxResults;});}this.flushRemux(transmuxResults,demuxResultOrPromise,chunkMeta);return transmuxResults;}flushRemux(transmuxResults,demuxResult,chunkMeta){const{audioTrack,videoTrack,id3Track,textTrack}=demuxResult;const{accurateTimeOffset,timeOffset}=this.currentTransmuxState;logger$2.log(`[transmuxer.ts]: Flushed fragment ${chunkMeta.sn}${chunkMeta.part>-1?' p: '+chunkMeta.part:''} of level ${chunkMeta.level}`);const remuxResult=this.remuxer.remux(audioTrack,videoTrack,id3Track,textTrack,timeOffset,accurateTimeOffset,true,this.id);transmuxResults.push({remuxResult,chunkMeta});chunkMeta.transmuxing.executeEnd=now();}resetInitialTimestamp(defaultInitPts){const{demuxer,remuxer}=this;if(!demuxer||!remuxer){return;}demuxer.resetTimeStamp(defaultInitPts);remuxer.resetTimeStamp(defaultInitPts);}resetContiguity(){const{demuxer,remuxer}=this;if(!demuxer||!remuxer){return;}demuxer.resetContiguity();remuxer.resetNextTimestamp();}resetInitSegment(initSegmentData,audioCodec,videoCodec,trackDuration,decryptdata){const{demuxer,remuxer}=this;if(!demuxer||!remuxer){return;}demuxer.resetInitSegment(initSegmentData,audioCodec,videoCodec,trackDuration);remuxer.resetInitSegment(initSegmentData,audioCodec,videoCodec,decryptdata);}destroy(){if(this.demuxer){this.demuxer.destroy();this.demuxer=undefined;}if(this.remuxer){this.remuxer.destroy();this.remuxer=undefined;}}transmux(data,keyData,timeOffset,accurateTimeOffset,chunkMeta){let result;if(keyData&&keyData.method==='SAMPLE-AES'){result=this.transmuxSampleAes(data,keyData,timeOffset,accurateTimeOffset,chunkMeta);}else {result=this.transmuxUnencrypted(data,timeOffset,accurateTimeOffset,chunkMeta);}return result;}transmuxUnencrypted(data,timeOffset,accurateTimeOffset,chunkMeta){const{audioTrack,videoTrack,id3Track,textTrack}=this.demuxer.demux(data,timeOffset,false,!this.config.progressive);const remuxResult=this.remuxer.remux(audioTrack,videoTrack,id3Track,textTrack,timeOffset,accurateTimeOffset,false,this.id);return {remuxResult,chunkMeta};}transmuxSampleAes(data,decryptData,timeOffset,accurateTimeOffset,chunkMeta){return this.demuxer.demuxSampleAes(data,decryptData,timeOffset).then(demuxResult=>{const remuxResult=this.remuxer.remux(demuxResult.audioTrack,demuxResult.videoTrack,demuxResult.id3Track,demuxResult.textTrack,timeOffset,accurateTimeOffset,false,this.id);return {remuxResult,chunkMeta};});}configureTransmuxer(data){const{config,observer,typeSupported,vendor}=this;// probe for content type
let mux;for(let i=0,len=muxConfig.length;i<len;i++){var _muxConfig$i$demux;if((_muxConfig$i$demux=muxConfig[i].demux)!=null&&_muxConfig$i$demux.probe(data)){mux=muxConfig[i];break;}}if(!mux){return new Error('Failed to find demuxer by probing fragment data');}// so let's check that current remuxer and demuxer are still valid
const demuxer=this.demuxer;const remuxer=this.remuxer;const Remuxer=mux.remux;const Demuxer=mux.demux;if(!remuxer||!(remuxer instanceof Remuxer)){this.remuxer=new Remuxer(observer,config,typeSupported,vendor);}if(!demuxer||!(demuxer instanceof Demuxer)){this.demuxer=new Demuxer(observer,config,typeSupported);this.probe=Demuxer.probe;}}needsProbing(discontinuity,trackSwitch){// in case of continuity change, or track switch
// we might switch from content type (AAC container to TS container, or TS to fmp4 for example)
return !this.demuxer||!this.remuxer||discontinuity||trackSwitch;}getDecrypter(){let decrypter=this.decrypter;if(!decrypter){decrypter=this.decrypter=new Decrypter(this.config);}return decrypter;}}function getEncryptionType(data,decryptData){let encryptionType=null;if(data.byteLength>0&&(decryptData==null?void 0:decryptData.key)!=null&&decryptData.iv!==null&&decryptData.method!=null){encryptionType=decryptData;}return encryptionType;}const emptyResult=chunkMeta=>({remuxResult:{},chunkMeta});function isPromise(p){return 'then'in p&&p.then instanceof Function;}class TransmuxConfig{constructor(audioCodec,videoCodec,initSegmentData,duration,defaultInitPts){this.audioCodec=void 0;this.videoCodec=void 0;this.initSegmentData=void 0;this.duration=void 0;this.defaultInitPts=void 0;this.audioCodec=audioCodec;this.videoCodec=videoCodec;this.initSegmentData=initSegmentData;this.duration=duration;this.defaultInitPts=defaultInitPts||null;}}class TransmuxState{constructor(discontinuity,contiguous,accurateTimeOffset,trackSwitch,timeOffset,initSegmentChange){this.discontinuity=void 0;this.contiguous=void 0;this.accurateTimeOffset=void 0;this.trackSwitch=void 0;this.timeOffset=void 0;this.initSegmentChange=void 0;this.discontinuity=discontinuity;this.contiguous=contiguous;this.accurateTimeOffset=accurateTimeOffset;this.trackSwitch=trackSwitch;this.timeOffset=timeOffset;this.initSegmentChange=initSegmentChange;}}var eventemitter3={exports:{}};(function(module){var has=Object.prototype.hasOwnProperty,prefix='~';/**
	 * Constructor to create a storage for our `EE` objects.
	 * An `Events` instance is a plain object whose properties are event names.
	 *
	 * @constructor
	 * @private
	 */function Events(){}//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if(Object.create){Events.prototype=Object.create(null);//
// This hack is needed because the `__proto__` property is still inherited in
// some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
//
if(!new Events().__proto__)prefix=false;}/**
	 * Representation of a single event listener.
	 *
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	 * @constructor
	 * @private
	 */function EE(fn,context,once){this.fn=fn;this.context=context;this.once=once||false;}/**
	 * Add a listener for a given event.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} once Specify if the listener is a one-time listener.
	 * @returns {EventEmitter}
	 * @private
	 */function addListener(emitter,event,fn,context,once){if(typeof fn!=='function'){throw new TypeError('The listener must be a function');}var listener=new EE(fn,context||emitter,once),evt=prefix?prefix+event:event;if(!emitter._events[evt])emitter._events[evt]=listener,emitter._eventsCount++;else if(!emitter._events[evt].fn)emitter._events[evt].push(listener);else emitter._events[evt]=[emitter._events[evt],listener];return emitter;}/**
	 * Clear event by name.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} evt The Event name.
	 * @private
	 */function clearEvent(emitter,evt){if(--emitter._eventsCount===0)emitter._events=new Events();else delete emitter._events[evt];}/**
	 * Minimal `EventEmitter` interface that is molded against the Node.js
	 * `EventEmitter` interface.
	 *
	 * @constructor
	 * @public
	 */function EventEmitter(){this._events=new Events();this._eventsCount=0;}/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @public
	 */EventEmitter.prototype.eventNames=function eventNames(){var names=[],events,name;if(this._eventsCount===0)return names;for(name in events=this._events){if(has.call(events,name))names.push(prefix?name.slice(1):name);}if(Object.getOwnPropertySymbols){return names.concat(Object.getOwnPropertySymbols(events));}return names;};/**
	 * Return the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Array} The registered listeners.
	 * @public
	 */EventEmitter.prototype.listeners=function listeners(event){var evt=prefix?prefix+event:event,handlers=this._events[evt];if(!handlers)return [];if(handlers.fn)return [handlers.fn];for(var i=0,l=handlers.length,ee=new Array(l);i<l;i++){ee[i]=handlers[i].fn;}return ee;};/**
	 * Return the number of listeners listening to a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Number} The number of listeners.
	 * @public
	 */EventEmitter.prototype.listenerCount=function listenerCount(event){var evt=prefix?prefix+event:event,listeners=this._events[evt];if(!listeners)return 0;if(listeners.fn)return 1;return listeners.length;};/**
	 * Calls each of the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Boolean} `true` if the event had listeners, else `false`.
	 * @public
	 */EventEmitter.prototype.emit=function emit(event,a1,a2,a3,a4,a5){var evt=prefix?prefix+event:event;if(!this._events[evt])return false;var listeners=this._events[evt],len=arguments.length,args,i;if(listeners.fn){if(listeners.once)this.removeListener(event,listeners.fn,undefined,true);switch(len){case 1:return listeners.fn.call(listeners.context),true;case 2:return listeners.fn.call(listeners.context,a1),true;case 3:return listeners.fn.call(listeners.context,a1,a2),true;case 4:return listeners.fn.call(listeners.context,a1,a2,a3),true;case 5:return listeners.fn.call(listeners.context,a1,a2,a3,a4),true;case 6:return listeners.fn.call(listeners.context,a1,a2,a3,a4,a5),true;}for(i=1,args=new Array(len-1);i<len;i++){args[i-1]=arguments[i];}listeners.fn.apply(listeners.context,args);}else {var length=listeners.length,j;for(i=0;i<length;i++){if(listeners[i].once)this.removeListener(event,listeners[i].fn,undefined,true);switch(len){case 1:listeners[i].fn.call(listeners[i].context);break;case 2:listeners[i].fn.call(listeners[i].context,a1);break;case 3:listeners[i].fn.call(listeners[i].context,a1,a2);break;case 4:listeners[i].fn.call(listeners[i].context,a1,a2,a3);break;default:if(!args)for(j=1,args=new Array(len-1);j<len;j++){args[j-1]=arguments[j];}listeners[i].fn.apply(listeners[i].context,args);}}}return true;};/**
	 * Add a listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */EventEmitter.prototype.on=function on(event,fn,context){return addListener(this,event,fn,context,false);};/**
	 * Add a one-time listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */EventEmitter.prototype.once=function once(event,fn,context){return addListener(this,event,fn,context,true);};/**
	 * Remove the listeners of a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn Only remove the listeners that match this function.
	 * @param {*} context Only remove the listeners that have this context.
	 * @param {Boolean} once Only remove one-time listeners.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */EventEmitter.prototype.removeListener=function removeListener(event,fn,context,once){var evt=prefix?prefix+event:event;if(!this._events[evt])return this;if(!fn){clearEvent(this,evt);return this;}var listeners=this._events[evt];if(listeners.fn){if(listeners.fn===fn&&(!once||listeners.once)&&(!context||listeners.context===context)){clearEvent(this,evt);}}else {for(var i=0,events=[],length=listeners.length;i<length;i++){if(listeners[i].fn!==fn||once&&!listeners[i].once||context&&listeners[i].context!==context){events.push(listeners[i]);}}//
// Reset the array, or remove it completely if we have no more listeners.
//
if(events.length)this._events[evt]=events.length===1?events[0]:events;else clearEvent(this,evt);}return this;};/**
	 * Remove all listeners, or those of the specified event.
	 *
	 * @param {(String|Symbol)} [event] The event name.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */EventEmitter.prototype.removeAllListeners=function removeAllListeners(event){var evt;if(event){evt=prefix?prefix+event:event;if(this._events[evt])clearEvent(this,evt);}else {this._events=new Events();this._eventsCount=0;}return this;};//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off=EventEmitter.prototype.removeListener;EventEmitter.prototype.addListener=EventEmitter.prototype.on;//
// Expose the prefix.
//
EventEmitter.prefixed=prefix;//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter=EventEmitter;//
// Expose the module.
//
{module.exports=EventEmitter;}})(eventemitter3);var eventemitter3Exports=eventemitter3.exports;var EventEmitter=/*@__PURE__*/getDefaultExportFromCjs(eventemitter3Exports);class TransmuxerInterface{constructor(hls,id,onTransmuxComplete,onFlush){this.error=null;this.hls=void 0;this.id=void 0;this.observer=void 0;this.frag=null;this.part=null;this.useWorker=void 0;this.workerContext=null;this.onwmsg=void 0;this.transmuxer=null;this.onTransmuxComplete=void 0;this.onFlush=void 0;const config=hls.config;this.hls=hls;this.id=id;this.useWorker=!!config.enableWorker;this.onTransmuxComplete=onTransmuxComplete;this.onFlush=onFlush;const forwardMessage=(ev,data)=>{data=data||{};data.frag=this.frag;data.id=this.id;if(ev===Events.ERROR){this.error=data.error;}this.hls.trigger(ev,data);};// forward events to main thread
this.observer=new EventEmitter();this.observer.on(Events.FRAG_DECRYPTED,forwardMessage);this.observer.on(Events.ERROR,forwardMessage);const MediaSource=getMediaSource(config.preferManagedMediaSource)||{isTypeSupported:()=>false};const m2tsTypeSupported={mpeg:MediaSource.isTypeSupported('audio/mpeg'),mp3:MediaSource.isTypeSupported('audio/mp4; codecs="mp3"'),ac3:MediaSource.isTypeSupported('audio/mp4; codecs="ac-3"')};if(this.useWorker&&typeof Worker!=='undefined'){const canCreateWorker=config.workerPath||hasUMDWorker();if(canCreateWorker){try{if(config.workerPath){logger$2.log(`loading Web Worker ${config.workerPath} for "${id}"`);this.workerContext=loadWorker(config.workerPath);}else {logger$2.log(`injecting Web Worker for "${id}"`);this.workerContext=injectWorker();}this.onwmsg=event=>this.onWorkerMessage(event);const{worker}=this.workerContext;worker.addEventListener('message',this.onwmsg);worker.onerror=event=>{const error=new Error(`${event.message}  (${event.filename}:${event.lineno})`);config.enableWorker=false;logger$2.warn(`Error in "${id}" Web Worker, fallback to inline`);this.hls.trigger(Events.ERROR,{type:ErrorTypes.OTHER_ERROR,details:ErrorDetails.INTERNAL_EXCEPTION,fatal:false,event:'demuxerWorker',error});};worker.postMessage({cmd:'init',typeSupported:m2tsTypeSupported,vendor:'',id:id,config:JSON.stringify(config)});}catch(err){logger$2.warn(`Error setting up "${id}" Web Worker, fallback to inline`,err);this.resetWorker();this.error=null;this.transmuxer=new Transmuxer(this.observer,m2tsTypeSupported,config,'',id);}return;}}this.transmuxer=new Transmuxer(this.observer,m2tsTypeSupported,config,'',id);}resetWorker(){if(this.workerContext){const{worker,objectURL}=this.workerContext;if(objectURL){// revoke the Object URL that was used to create transmuxer worker, so as not to leak it
self.URL.revokeObjectURL(objectURL);}worker.removeEventListener('message',this.onwmsg);worker.onerror=null;worker.terminate();this.workerContext=null;}}destroy(){if(this.workerContext){this.resetWorker();this.onwmsg=undefined;}else {const transmuxer=this.transmuxer;if(transmuxer){transmuxer.destroy();this.transmuxer=null;}}const observer=this.observer;if(observer){observer.removeAllListeners();}this.frag=null;// @ts-ignore
this.observer=null;// @ts-ignore
this.hls=null;}push(data,initSegmentData,audioCodec,videoCodec,frag,part,duration,accurateTimeOffset,chunkMeta,defaultInitPTS){var _frag$initSegment,_lastFrag$initSegment;chunkMeta.transmuxing.start=self.performance.now();const{transmuxer}=this;const timeOffset=part?part.start:frag.start;// TODO: push "clear-lead" decrypt data for unencrypted fragments in streams with encrypted ones
const decryptdata=frag.decryptdata;const lastFrag=this.frag;const discontinuity=!(lastFrag&&frag.cc===lastFrag.cc);const trackSwitch=!(lastFrag&&chunkMeta.level===lastFrag.level);const snDiff=lastFrag?chunkMeta.sn-lastFrag.sn:-1;const partDiff=this.part?chunkMeta.part-this.part.index:-1;const progressive=snDiff===0&&chunkMeta.id>1&&chunkMeta.id===(lastFrag==null?void 0:lastFrag.stats.chunkCount);const contiguous=!trackSwitch&&(snDiff===1||snDiff===0&&(partDiff===1||progressive&&partDiff<=0));const now=self.performance.now();if(trackSwitch||snDiff||frag.stats.parsing.start===0){frag.stats.parsing.start=now;}if(part&&(partDiff||!contiguous)){part.stats.parsing.start=now;}const initSegmentChange=!(lastFrag&&((_frag$initSegment=frag.initSegment)==null?void 0:_frag$initSegment.url)===((_lastFrag$initSegment=lastFrag.initSegment)==null?void 0:_lastFrag$initSegment.url));const state=new TransmuxState(discontinuity,contiguous,accurateTimeOffset,trackSwitch,timeOffset,initSegmentChange);if(!contiguous||discontinuity||initSegmentChange){logger$2.log(`[transmuxer-interface, ${frag.type}]: Starting new transmux session for sn: ${chunkMeta.sn} p: ${chunkMeta.part} level: ${chunkMeta.level} id: ${chunkMeta.id}
        discontinuity: ${discontinuity}
        trackSwitch: ${trackSwitch}
        contiguous: ${contiguous}
        accurateTimeOffset: ${accurateTimeOffset}
        timeOffset: ${timeOffset}
        initSegmentChange: ${initSegmentChange}`);const config=new TransmuxConfig(audioCodec,videoCodec,initSegmentData,duration,defaultInitPTS);this.configureTransmuxer(config);}this.frag=frag;this.part=part;// Frags with sn of 'initSegment' are not transmuxed
if(this.workerContext){// post fragment payload as transferable objects for ArrayBuffer (no copy)
this.workerContext.worker.postMessage({cmd:'demux',data,decryptdata,chunkMeta,state},data instanceof ArrayBuffer?[data]:[]);}else if(transmuxer){const transmuxResult=transmuxer.push(data,decryptdata,chunkMeta,state);if(isPromise(transmuxResult)){transmuxer.async=true;transmuxResult.then(data=>{this.handleTransmuxComplete(data);}).catch(error=>{this.transmuxerError(error,chunkMeta,'transmuxer-interface push error');});}else {transmuxer.async=false;this.handleTransmuxComplete(transmuxResult);}}}flush(chunkMeta){chunkMeta.transmuxing.start=self.performance.now();const{transmuxer}=this;if(this.workerContext){this.workerContext.worker.postMessage({cmd:'flush',chunkMeta});}else if(transmuxer){let transmuxResult=transmuxer.flush(chunkMeta);const asyncFlush=isPromise(transmuxResult);if(asyncFlush||transmuxer.async){if(!isPromise(transmuxResult)){transmuxResult=Promise.resolve(transmuxResult);}transmuxResult.then(data=>{this.handleFlushResult(data,chunkMeta);}).catch(error=>{this.transmuxerError(error,chunkMeta,'transmuxer-interface flush error');});}else {this.handleFlushResult(transmuxResult,chunkMeta);}}}transmuxerError(error,chunkMeta,reason){if(!this.hls){return;}this.error=error;this.hls.trigger(Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.FRAG_PARSING_ERROR,chunkMeta,frag:this.frag||undefined,fatal:false,error,err:error,reason});}handleFlushResult(results,chunkMeta){results.forEach(result=>{this.handleTransmuxComplete(result);});this.onFlush(chunkMeta);}onWorkerMessage(event){const data=event.data;if(!(data!=null&&data.event)){logger$2.warn(`worker message received with no ${data?'event name':'data'}`);return;}const hls=this.hls;if(!this.hls){return;}switch(data.event){case'init':{var _this$workerContext;const objectURL=(_this$workerContext=this.workerContext)==null?void 0:_this$workerContext.objectURL;if(objectURL){// revoke the Object URL that was used to create transmuxer worker, so as not to leak it
self.URL.revokeObjectURL(objectURL);}break;}case'transmuxComplete':{this.handleTransmuxComplete(data.data);break;}case'flush':{this.onFlush(data.data);break;}// pass logs from the worker thread to the main logger
case'workerLog':if(logger$2[data.data.logType]){logger$2[data.data.logType](data.data.message);}break;default:{data.data=data.data||{};data.data.frag=this.frag;data.data.id=this.id;hls.trigger(data.event,data.data);break;}}}configureTransmuxer(config){const{transmuxer}=this;if(this.workerContext){this.workerContext.worker.postMessage({cmd:'configure',config});}else if(transmuxer){transmuxer.configure(config);}}handleTransmuxComplete(result){result.chunkMeta.transmuxing.end=self.performance.now();this.onTransmuxComplete(result);}}const TICK_INTERVAL$2=100;// how often to tick in ms
class AudioStreamController extends BaseStreamController{constructor(hls,fragmentTracker,keyLoader){super(hls,fragmentTracker,keyLoader,'[audio-stream-controller]',PlaylistLevelType.AUDIO);this.videoBuffer=null;this.videoTrackCC=-1;this.waitingVideoCC=-1;this.bufferedTrack=null;this.switchingTrack=null;this.trackId=-1;this.waitingData=null;this.mainDetails=null;this.flushing=false;this.bufferFlushed=false;this.cachedTrackLoadedData=null;this._registerListeners();}onHandlerDestroying(){this._unregisterListeners();super.onHandlerDestroying();this.mainDetails=null;this.bufferedTrack=null;this.switchingTrack=null;}_registerListeners(){const{hls}=this;hls.on(Events.MEDIA_ATTACHED,this.onMediaAttached,this);hls.on(Events.MEDIA_DETACHING,this.onMediaDetaching,this);hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.on(Events.LEVEL_LOADED,this.onLevelLoaded,this);hls.on(Events.AUDIO_TRACKS_UPDATED,this.onAudioTracksUpdated,this);hls.on(Events.AUDIO_TRACK_SWITCHING,this.onAudioTrackSwitching,this);hls.on(Events.AUDIO_TRACK_LOADED,this.onAudioTrackLoaded,this);hls.on(Events.ERROR,this.onError,this);hls.on(Events.BUFFER_RESET,this.onBufferReset,this);hls.on(Events.BUFFER_CREATED,this.onBufferCreated,this);hls.on(Events.BUFFER_FLUSHING,this.onBufferFlushing,this);hls.on(Events.BUFFER_FLUSHED,this.onBufferFlushed,this);hls.on(Events.INIT_PTS_FOUND,this.onInitPtsFound,this);hls.on(Events.FRAG_BUFFERED,this.onFragBuffered,this);}_unregisterListeners(){const{hls}=this;hls.off(Events.MEDIA_ATTACHED,this.onMediaAttached,this);hls.off(Events.MEDIA_DETACHING,this.onMediaDetaching,this);hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.off(Events.LEVEL_LOADED,this.onLevelLoaded,this);hls.off(Events.AUDIO_TRACKS_UPDATED,this.onAudioTracksUpdated,this);hls.off(Events.AUDIO_TRACK_SWITCHING,this.onAudioTrackSwitching,this);hls.off(Events.AUDIO_TRACK_LOADED,this.onAudioTrackLoaded,this);hls.off(Events.ERROR,this.onError,this);hls.off(Events.BUFFER_RESET,this.onBufferReset,this);hls.off(Events.BUFFER_CREATED,this.onBufferCreated,this);hls.off(Events.BUFFER_FLUSHING,this.onBufferFlushing,this);hls.off(Events.BUFFER_FLUSHED,this.onBufferFlushed,this);hls.off(Events.INIT_PTS_FOUND,this.onInitPtsFound,this);hls.off(Events.FRAG_BUFFERED,this.onFragBuffered,this);}// INIT_PTS_FOUND is triggered when the video track parsed in the stream-controller has a new PTS value
onInitPtsFound(event,{frag,id,initPTS,timescale}){// Always update the new INIT PTS
// Can change due level switch
if(id==='main'){const cc=frag.cc;this.initPTS[frag.cc]={baseTime:initPTS,timescale};this.log(`InitPTS for cc: ${cc} found from main: ${initPTS}`);this.videoTrackCC=cc;// If we are waiting, tick immediately to unblock audio fragment transmuxing
if(this.state===State.WAITING_INIT_PTS){this.tick();}}}startLoad(startPosition){if(!this.levels){this.startPosition=startPosition;this.state=State.STOPPED;return;}const lastCurrentTime=this.lastCurrentTime;this.stopLoad();this.setInterval(TICK_INTERVAL$2);if(lastCurrentTime>0&&startPosition===-1){this.log(`Override startPosition with lastCurrentTime @${lastCurrentTime.toFixed(3)}`);startPosition=lastCurrentTime;this.state=State.IDLE;}else {this.loadedmetadata=false;this.state=State.WAITING_TRACK;}this.nextLoadPosition=this.startPosition=this.lastCurrentTime=startPosition;this.tick();}doTick(){switch(this.state){case State.IDLE:this.doTickIdle();break;case State.WAITING_TRACK:{var _levels$trackId;const{levels,trackId}=this;const details=levels==null?void 0:(_levels$trackId=levels[trackId])==null?void 0:_levels$trackId.details;if(details){if(this.waitForCdnTuneIn(details)){break;}this.state=State.WAITING_INIT_PTS;}break;}case State.FRAG_LOADING_WAITING_RETRY:{var _this$media;const now=performance.now();const retryDate=this.retryDate;// if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading
if(!retryDate||now>=retryDate||(_this$media=this.media)!=null&&_this$media.seeking){const{levels,trackId}=this;this.log('RetryDate reached, switch back to IDLE state');this.resetStartWhenNotLoaded((levels==null?void 0:levels[trackId])||null);this.state=State.IDLE;}break;}case State.WAITING_INIT_PTS:{// Ensure we don't get stuck in the WAITING_INIT_PTS state if the waiting frag CC doesn't match any initPTS
const waitingData=this.waitingData;if(waitingData){const{frag,part,cache,complete}=waitingData;if(this.initPTS[frag.cc]!==undefined){this.waitingData=null;this.waitingVideoCC=-1;this.state=State.FRAG_LOADING;const payload=cache.flush();const data={frag,part,payload,networkDetails:null};this._handleFragmentLoadProgress(data);if(complete){super._handleFragmentLoadComplete(data);}}else if(this.videoTrackCC!==this.waitingVideoCC){// Drop waiting fragment if videoTrackCC has changed since waitingFragment was set and initPTS was not found
this.log(`Waiting fragment cc (${frag.cc}) cancelled because video is at cc ${this.videoTrackCC}`);this.clearWaitingFragment();}else {// Drop waiting fragment if an earlier fragment is needed
const pos=this.getLoadPosition();const bufferInfo=BufferHelper.bufferInfo(this.mediaBuffer,pos,this.config.maxBufferHole);const waitingFragmentAtPosition=fragmentWithinToleranceTest(bufferInfo.end,this.config.maxFragLookUpTolerance,frag);if(waitingFragmentAtPosition<0){this.log(`Waiting fragment cc (${frag.cc}) @ ${frag.start} cancelled because another fragment at ${bufferInfo.end} is needed`);this.clearWaitingFragment();}}}else {this.state=State.IDLE;}}}this.onTickEnd();}clearWaitingFragment(){const waitingData=this.waitingData;if(waitingData){this.fragmentTracker.removeFragment(waitingData.frag);this.waitingData=null;this.waitingVideoCC=-1;this.state=State.IDLE;}}resetLoadingState(){this.clearWaitingFragment();super.resetLoadingState();}onTickEnd(){const{media}=this;if(!(media!=null&&media.readyState)){// Exit early if we don't have media or if the media hasn't buffered anything yet (readyState 0)
return;}this.lastCurrentTime=media.currentTime;}doTickIdle(){const{hls,levels,media,trackId}=this;const config=hls.config;// 1. if buffering is suspended
// 2. if video not attached AND
//    start fragment already requested OR start frag prefetch not enabled
// 3. if tracks or track not loaded and selected
// then exit loop
// => if media not attached but start frag prefetch is enabled and start frag not requested yet, we will not exit loop
if(!this.buffering||!media&&(this.startFragRequested||!config.startFragPrefetch)||!(levels!=null&&levels[trackId])){return;}const levelInfo=levels[trackId];const trackDetails=levelInfo.details;if(!trackDetails||trackDetails.live&&this.levelLastLoaded!==levelInfo||this.waitForCdnTuneIn(trackDetails)){this.state=State.WAITING_TRACK;return;}const bufferable=this.mediaBuffer?this.mediaBuffer:this.media;if(this.bufferFlushed&&bufferable){this.bufferFlushed=false;this.afterBufferFlushed(bufferable,ElementaryStreamTypes.AUDIO,PlaylistLevelType.AUDIO);}const bufferInfo=this.getFwdBufferInfo(bufferable,PlaylistLevelType.AUDIO);if(bufferInfo===null){return;}if(!this.switchingTrack&&this._streamEnded(bufferInfo,trackDetails)){hls.trigger(Events.BUFFER_EOS,{type:'audio'});this.state=State.ENDED;return;}const mainBufferInfo=this.getFwdBufferInfo(this.videoBuffer?this.videoBuffer:this.media,PlaylistLevelType.MAIN);const bufferLen=bufferInfo.len;const maxBufLen=this.getMaxBufferLength(mainBufferInfo==null?void 0:mainBufferInfo.len);const fragments=trackDetails.fragments;const start=fragments[0].start;const loadPosition=this.getLoadPosition();const targetBufferTime=this.flushing?loadPosition:bufferInfo.end;if(this.switchingTrack&&media){const pos=loadPosition;// if currentTime (pos) is less than alt audio playlist start time, it means that alt audio is ahead of currentTime
if(trackDetails.PTSKnown&&pos<start){// if everything is buffered from pos to start or if audio buffer upfront, let's seek to start
if(bufferInfo.end>start||bufferInfo.nextStart){this.log('Alt audio track ahead of main track, seek to start of alt audio track');media.currentTime=start+0.05;}}}// if buffer length is less than maxBufLen, or near the end, find a fragment to load
if(bufferLen>=maxBufLen&&!this.switchingTrack&&targetBufferTime<fragments[fragments.length-1].start){return;}let frag=this.getNextFragment(targetBufferTime,trackDetails);let atGap=false;// Avoid loop loading by using nextLoadPosition set for backtracking and skipping consecutive GAP tags
if(frag&&this.isLoopLoading(frag,targetBufferTime)){atGap=!!frag.gap;frag=this.getNextFragmentLoopLoading(frag,trackDetails,bufferInfo,PlaylistLevelType.MAIN,maxBufLen);}if(!frag){this.bufferFlushed=true;return;}// Buffer audio up to one target duration ahead of main buffer
const atBufferSyncLimit=mainBufferInfo&&frag.start>mainBufferInfo.end+trackDetails.targetduration;if(atBufferSyncLimit||// Or wait for main buffer after buffing some audio
!(mainBufferInfo!=null&&mainBufferInfo.len)&&bufferInfo.len){// Check fragment-tracker for main fragments since GAP segments do not show up in bufferInfo
const mainFrag=this.getAppendedFrag(frag.start,PlaylistLevelType.MAIN);if(mainFrag===null){return;}// Bridge gaps in main buffer
atGap||(atGap=!!mainFrag.gap||!!atBufferSyncLimit&&mainBufferInfo.len===0);if(atBufferSyncLimit&&!atGap||atGap&&bufferInfo.nextStart&&bufferInfo.nextStart<mainFrag.end){return;}}this.loadFragment(frag,levelInfo,targetBufferTime);}getMaxBufferLength(mainBufferLength){const maxConfigBuffer=super.getMaxBufferLength();if(!mainBufferLength){return maxConfigBuffer;}return Math.min(Math.max(maxConfigBuffer,mainBufferLength),this.config.maxMaxBufferLength);}onMediaDetaching(){this.videoBuffer=null;this.bufferFlushed=this.flushing=false;super.onMediaDetaching();}onAudioTracksUpdated(event,{audioTracks}){// Reset tranxmuxer is essential for large context switches (Content Steering)
this.resetTransmuxer();this.levels=audioTracks.map(mediaPlaylist=>new Level(mediaPlaylist));}onAudioTrackSwitching(event,data){// if any URL found on new audio track, it is an alternate audio track
const altAudio=!!data.url;this.trackId=data.id;const{fragCurrent}=this;if(fragCurrent){fragCurrent.abortRequests();this.removeUnbufferedFrags(fragCurrent.start);}this.resetLoadingState();// destroy useless transmuxer when switching audio to main
if(!altAudio){this.resetTransmuxer();}else {// switching to audio track, start timer if not already started
this.setInterval(TICK_INTERVAL$2);}// should we switch tracks ?
if(altAudio){this.switchingTrack=data;// main audio track are handled by stream-controller, just do something if switching to alt audio track
this.state=State.IDLE;this.flushAudioIfNeeded(data);}else {this.switchingTrack=null;this.bufferedTrack=data;this.state=State.STOPPED;}this.tick();}onManifestLoading(){this.fragmentTracker.removeAllFragments();this.startPosition=this.lastCurrentTime=0;this.bufferFlushed=this.flushing=false;this.levels=this.mainDetails=this.waitingData=this.bufferedTrack=this.cachedTrackLoadedData=this.switchingTrack=null;this.startFragRequested=false;this.trackId=this.videoTrackCC=this.waitingVideoCC=-1;}onLevelLoaded(event,data){this.mainDetails=data.details;if(this.cachedTrackLoadedData!==null){this.hls.trigger(Events.AUDIO_TRACK_LOADED,this.cachedTrackLoadedData);this.cachedTrackLoadedData=null;}}onAudioTrackLoaded(event,data){var _track$details;if(this.mainDetails==null){this.cachedTrackLoadedData=data;return;}const{levels}=this;const{details:newDetails,id:trackId}=data;if(!levels){this.warn(`Audio tracks were reset while loading level ${trackId}`);return;}this.log(`Audio track ${trackId} loaded [${newDetails.startSN},${newDetails.endSN}]${newDetails.lastPartSn?`[part-${newDetails.lastPartSn}-${newDetails.lastPartIndex}]`:''},duration:${newDetails.totalduration}`);const track=levels[trackId];let sliding=0;if(newDetails.live||(_track$details=track.details)!=null&&_track$details.live){this.checkLiveUpdate(newDetails);const mainDetails=this.mainDetails;if(newDetails.deltaUpdateFailed||!mainDetails){return;}if(!track.details&&newDetails.hasProgramDateTime&&mainDetails.hasProgramDateTime){// Make sure our audio rendition is aligned with the "main" rendition, using
// pdt as our reference times.
alignMediaPlaylistByPDT(newDetails,mainDetails);sliding=newDetails.fragments[0].start;}else {var _this$levelLastLoaded;sliding=this.alignPlaylists(newDetails,track.details,(_this$levelLastLoaded=this.levelLastLoaded)==null?void 0:_this$levelLastLoaded.details);}}track.details=newDetails;this.levelLastLoaded=track;// compute start position if we are aligned with the main playlist
if(!this.startFragRequested&&(this.mainDetails||!newDetails.live)){this.setStartPosition(this.mainDetails||newDetails,sliding);}// only switch back to IDLE state if we were waiting for track to start downloading a new fragment
if(this.state===State.WAITING_TRACK&&!this.waitForCdnTuneIn(newDetails)){this.state=State.IDLE;}// trigger handler right now
this.tick();}_handleFragmentLoadProgress(data){var _frag$initSegment;const{frag,part,payload}=data;const{config,trackId,levels}=this;if(!levels){this.warn(`Audio tracks were reset while fragment load was in progress. Fragment ${frag.sn} of level ${frag.level} will not be buffered`);return;}const track=levels[trackId];if(!track){this.warn('Audio track is undefined on fragment load progress');return;}const details=track.details;if(!details){this.warn('Audio track details undefined on fragment load progress');this.removeUnbufferedFrags(frag.start);return;}const audioCodec=config.defaultAudioCodec||track.audioCodec||'mp4a.40.2';let transmuxer=this.transmuxer;if(!transmuxer){transmuxer=this.transmuxer=new TransmuxerInterface(this.hls,PlaylistLevelType.AUDIO,this._handleTransmuxComplete.bind(this),this._handleTransmuxerFlush.bind(this));}// Check if we have video initPTS
// If not we need to wait for it
const initPTS=this.initPTS[frag.cc];const initSegmentData=(_frag$initSegment=frag.initSegment)==null?void 0:_frag$initSegment.data;if(initPTS!==undefined){// this.log(`Transmuxing ${sn} of [${details.startSN} ,${details.endSN}],track ${trackId}`);
// time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)
const accurateTimeOffset=false;// details.PTSKnown || !details.live;
const partIndex=part?part.index:-1;const partial=partIndex!==-1;const chunkMeta=new ChunkMetadata(frag.level,frag.sn,frag.stats.chunkCount,payload.byteLength,partIndex,partial);transmuxer.push(payload,initSegmentData,audioCodec,'',frag,part,details.totalduration,accurateTimeOffset,chunkMeta,initPTS);}else {this.log(`Unknown video PTS for cc ${frag.cc}, waiting for video PTS before demuxing audio frag ${frag.sn} of [${details.startSN} ,${details.endSN}],track ${trackId}`);const{cache}=this.waitingData=this.waitingData||{frag,part,cache:new ChunkCache(),complete:false};cache.push(new Uint8Array(payload));this.waitingVideoCC=this.videoTrackCC;this.state=State.WAITING_INIT_PTS;}}_handleFragmentLoadComplete(fragLoadedData){if(this.waitingData){this.waitingData.complete=true;return;}super._handleFragmentLoadComplete(fragLoadedData);}onBufferReset(/* event: Events.BUFFER_RESET */){// reset reference to sourcebuffers
this.mediaBuffer=this.videoBuffer=null;this.loadedmetadata=false;}onBufferCreated(event,data){const audioTrack=data.tracks.audio;if(audioTrack){this.mediaBuffer=audioTrack.buffer||null;}if(data.tracks.video){this.videoBuffer=data.tracks.video.buffer||null;}}onFragBuffered(event,data){const{frag,part}=data;if(frag.type!==PlaylistLevelType.AUDIO){if(!this.loadedmetadata&&frag.type===PlaylistLevelType.MAIN){const bufferable=this.videoBuffer||this.media;if(bufferable){const bufferedTimeRanges=BufferHelper.getBuffered(bufferable);if(bufferedTimeRanges.length){this.loadedmetadata=true;}}}return;}if(this.fragContextChanged(frag)){// If a level switch was requested while a fragment was buffering, it will emit the FRAG_BUFFERED event upon completion
// Avoid setting state back to IDLE or concluding the audio switch; otherwise, the switched-to track will not buffer
this.warn(`Fragment ${frag.sn}${part?' p: '+part.index:''} of level ${frag.level} finished buffering, but was aborted. state: ${this.state}, audioSwitch: ${this.switchingTrack?this.switchingTrack.name:'false'}`);return;}if(frag.sn!=='initSegment'){this.fragPrevious=frag;const track=this.switchingTrack;if(track){this.bufferedTrack=track;this.switchingTrack=null;this.hls.trigger(Events.AUDIO_TRACK_SWITCHED,_objectSpread2({},track));}}this.fragBufferedComplete(frag,part);}onError(event,data){var _data$context;if(data.fatal){this.state=State.ERROR;return;}switch(data.details){case ErrorDetails.FRAG_GAP:case ErrorDetails.FRAG_PARSING_ERROR:case ErrorDetails.FRAG_DECRYPT_ERROR:case ErrorDetails.FRAG_LOAD_ERROR:case ErrorDetails.FRAG_LOAD_TIMEOUT:case ErrorDetails.KEY_LOAD_ERROR:case ErrorDetails.KEY_LOAD_TIMEOUT:this.onFragmentOrKeyLoadError(PlaylistLevelType.AUDIO,data);break;case ErrorDetails.AUDIO_TRACK_LOAD_ERROR:case ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:case ErrorDetails.LEVEL_PARSING_ERROR:// in case of non fatal error while loading track, if not retrying to load track, switch back to IDLE
if(!data.levelRetry&&this.state===State.WAITING_TRACK&&((_data$context=data.context)==null?void 0:_data$context.type)===PlaylistContextType.AUDIO_TRACK){this.state=State.IDLE;}break;case ErrorDetails.BUFFER_APPEND_ERROR:case ErrorDetails.BUFFER_FULL_ERROR:if(!data.parent||data.parent!=='audio'){return;}if(data.details===ErrorDetails.BUFFER_APPEND_ERROR){this.resetLoadingState();return;}if(this.reduceLengthAndFlushBuffer(data)){this.bufferedTrack=null;super.flushMainBuffer(0,Number.POSITIVE_INFINITY,'audio');}break;case ErrorDetails.INTERNAL_EXCEPTION:this.recoverWorkerError(data);break;}}onBufferFlushing(event,{type}){if(type!==ElementaryStreamTypes.VIDEO){this.flushing=true;}}onBufferFlushed(event,{type}){if(type!==ElementaryStreamTypes.VIDEO){this.flushing=false;this.bufferFlushed=true;if(this.state===State.ENDED){this.state=State.IDLE;}const mediaBuffer=this.mediaBuffer||this.media;if(mediaBuffer){this.afterBufferFlushed(mediaBuffer,type,PlaylistLevelType.AUDIO);this.tick();}}}_handleTransmuxComplete(transmuxResult){var _id3$samples;const id='audio';const{hls}=this;const{remuxResult,chunkMeta}=transmuxResult;const context=this.getCurrentContext(chunkMeta);if(!context){this.resetWhenMissingContext(chunkMeta);return;}const{frag,part,level}=context;const{details}=level;const{audio,text,id3,initSegment}=remuxResult;// Check if the current fragment has been aborted. We check this by first seeing if we're still playing the current level.
// If we are, subsequently check if the currently loading fragment (fragCurrent) has changed.
if(this.fragContextChanged(frag)||!details){this.fragmentTracker.removeFragment(frag);return;}this.state=State.PARSING;if(this.switchingTrack&&audio){this.completeAudioSwitch(this.switchingTrack);}if(initSegment!=null&&initSegment.tracks){const mapFragment=frag.initSegment||frag;this._bufferInitSegment(level,initSegment.tracks,mapFragment,chunkMeta);hls.trigger(Events.FRAG_PARSING_INIT_SEGMENT,{frag:mapFragment,id,tracks:initSegment.tracks});// Only flush audio from old audio tracks when PTS is known on new audio track
}if(audio){const{startPTS,endPTS,startDTS,endDTS}=audio;if(part){part.elementaryStreams[ElementaryStreamTypes.AUDIO]={startPTS,endPTS,startDTS,endDTS};}frag.setElementaryStreamInfo(ElementaryStreamTypes.AUDIO,startPTS,endPTS,startDTS,endDTS);this.bufferFragmentData(audio,frag,part,chunkMeta);}if(id3!=null&&(_id3$samples=id3.samples)!=null&&_id3$samples.length){const emittedID3=_extends({id,frag,details},id3);hls.trigger(Events.FRAG_PARSING_METADATA,emittedID3);}if(text){const emittedText=_extends({id,frag,details},text);hls.trigger(Events.FRAG_PARSING_USERDATA,emittedText);}}_bufferInitSegment(currentLevel,tracks,frag,chunkMeta){if(this.state!==State.PARSING){return;}// delete any video track found on audio transmuxer
if(tracks.video){delete tracks.video;}// include levelCodec in audio and video tracks
const track=tracks.audio;if(!track){return;}track.id='audio';const variantAudioCodecs=currentLevel.audioCodec;this.log(`Init audio buffer, container:${track.container}, codecs[level/parsed]=[${variantAudioCodecs}/${track.codec}]`);// SourceBuffer will use track.levelCodec if defined
if(variantAudioCodecs&&variantAudioCodecs.split(',').length===1){track.levelCodec=variantAudioCodecs;}this.hls.trigger(Events.BUFFER_CODECS,tracks);const initSegment=track.initSegment;if(initSegment!=null&&initSegment.byteLength){const segment={type:'audio',frag,part:null,chunkMeta,parent:frag.type,data:initSegment};this.hls.trigger(Events.BUFFER_APPENDING,segment);}// trigger handler right now
this.tickImmediate();}loadFragment(frag,track,targetBufferTime){// only load if fragment is not loaded or if in audio switch
const fragState=this.fragmentTracker.getState(frag);this.fragCurrent=frag;// we force a frag loading in audio switch as fragment tracker might not have evicted previous frags in case of quick audio switch
if(this.switchingTrack||fragState===FragmentState.NOT_LOADED||fragState===FragmentState.PARTIAL){var _track$details2;if(frag.sn==='initSegment'){this._loadInitSegment(frag,track);}else if((_track$details2=track.details)!=null&&_track$details2.live&&!this.initPTS[frag.cc]){this.log(`Waiting for video PTS in continuity counter ${frag.cc} of live stream before loading audio fragment ${frag.sn} of level ${this.trackId}`);this.state=State.WAITING_INIT_PTS;const mainDetails=this.mainDetails;if(mainDetails&&mainDetails.fragments[0].start!==track.details.fragments[0].start){alignMediaPlaylistByPDT(track.details,mainDetails);}}else {this.startFragRequested=true;super.loadFragment(frag,track,targetBufferTime);}}else {this.clearTrackerIfNeeded(frag);}}flushAudioIfNeeded(switchingTrack){if(this.media&&this.bufferedTrack){const{name,lang,assocLang,characteristics,audioCodec,channels}=this.bufferedTrack;if(!matchesOption({name,lang,assocLang,characteristics,audioCodec,channels},switchingTrack,audioMatchPredicate)){this.log('Switching audio track : flushing all audio');super.flushMainBuffer(0,Number.POSITIVE_INFINITY,'audio');this.bufferedTrack=null;}}}completeAudioSwitch(switchingTrack){const{hls}=this;this.flushAudioIfNeeded(switchingTrack);this.bufferedTrack=switchingTrack;this.switchingTrack=null;hls.trigger(Events.AUDIO_TRACK_SWITCHED,_objectSpread2({},switchingTrack));}}function subtitleOptionsIdentical(trackList1,trackList2){if(trackList1.length!==trackList2.length){return false;}for(let i=0;i<trackList1.length;i++){if(!mediaAttributesIdentical(trackList1[i].attrs,trackList2[i].attrs)){return false;}}return true;}function mediaAttributesIdentical(attrs1,attrs2,customAttributes){// Media options with the same rendition ID must be bit identical
const stableRenditionId=attrs1['STABLE-RENDITION-ID'];if(stableRenditionId&&!customAttributes){return stableRenditionId===attrs2['STABLE-RENDITION-ID'];}// When rendition ID is not present, compare attributes
return !(customAttributes||['LANGUAGE','NAME','CHARACTERISTICS','AUTOSELECT','DEFAULT','FORCED','ASSOC-LANGUAGE']).some(subtitleAttribute=>attrs1[subtitleAttribute]!==attrs2[subtitleAttribute]);}function subtitleTrackMatchesTextTrack(subtitleTrack,textTrack){return textTrack.label.toLowerCase()===subtitleTrack.name.toLowerCase()&&(!textTrack.language||textTrack.language.toLowerCase()===(subtitleTrack.lang||'').toLowerCase());}class AudioTrackController extends BasePlaylistController{constructor(hls){super(hls,'[audio-track-controller]');this.tracks=[];this.groupIds=null;this.tracksInGroup=[];this.trackId=-1;this.currentTrack=null;this.selectDefaultTrack=true;this.registerListeners();}registerListeners(){const{hls}=this;hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.on(Events.MANIFEST_PARSED,this.onManifestParsed,this);hls.on(Events.LEVEL_LOADING,this.onLevelLoading,this);hls.on(Events.LEVEL_SWITCHING,this.onLevelSwitching,this);hls.on(Events.AUDIO_TRACK_LOADED,this.onAudioTrackLoaded,this);hls.on(Events.ERROR,this.onError,this);}unregisterListeners(){const{hls}=this;hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.off(Events.MANIFEST_PARSED,this.onManifestParsed,this);hls.off(Events.LEVEL_LOADING,this.onLevelLoading,this);hls.off(Events.LEVEL_SWITCHING,this.onLevelSwitching,this);hls.off(Events.AUDIO_TRACK_LOADED,this.onAudioTrackLoaded,this);hls.off(Events.ERROR,this.onError,this);}destroy(){this.unregisterListeners();this.tracks.length=0;this.tracksInGroup.length=0;this.currentTrack=null;super.destroy();}onManifestLoading(){this.tracks=[];this.tracksInGroup=[];this.groupIds=null;this.currentTrack=null;this.trackId=-1;this.selectDefaultTrack=true;}onManifestParsed(event,data){this.tracks=data.audioTracks||[];}onAudioTrackLoaded(event,data){const{id,groupId,details}=data;const trackInActiveGroup=this.tracksInGroup[id];if(!trackInActiveGroup||trackInActiveGroup.groupId!==groupId){this.warn(`Audio track with id:${id} and group:${groupId} not found in active group ${trackInActiveGroup==null?void 0:trackInActiveGroup.groupId}`);return;}const curDetails=trackInActiveGroup.details;trackInActiveGroup.details=data.details;this.log(`Audio track ${id} "${trackInActiveGroup.name}" lang:${trackInActiveGroup.lang} group:${groupId} loaded [${details.startSN}-${details.endSN}]`);if(id===this.trackId){this.playlistLoaded(id,data,curDetails);}}onLevelLoading(event,data){this.switchLevel(data.level);}onLevelSwitching(event,data){this.switchLevel(data.level);}switchLevel(levelIndex){const levelInfo=this.hls.levels[levelIndex];if(!levelInfo){return;}const audioGroups=levelInfo.audioGroups||null;const currentGroups=this.groupIds;let currentTrack=this.currentTrack;if(!audioGroups||(currentGroups==null?void 0:currentGroups.length)!==(audioGroups==null?void 0:audioGroups.length)||audioGroups!=null&&audioGroups.some(groupId=>(currentGroups==null?void 0:currentGroups.indexOf(groupId))===-1)){this.groupIds=audioGroups;this.trackId=-1;this.currentTrack=null;const audioTracks=this.tracks.filter(track=>!audioGroups||audioGroups.indexOf(track.groupId)!==-1);if(audioTracks.length){// Disable selectDefaultTrack if there are no default tracks
if(this.selectDefaultTrack&&!audioTracks.some(track=>track.default)){this.selectDefaultTrack=false;}// track.id should match hls.audioTracks index
audioTracks.forEach((track,i)=>{track.id=i;});}else if(!currentTrack&&!this.tracksInGroup.length){// Do not dispatch AUDIO_TRACKS_UPDATED when there were and are no tracks
return;}this.tracksInGroup=audioTracks;// Find preferred track
const audioPreference=this.hls.config.audioPreference;if(!currentTrack&&audioPreference){const groupIndex=findMatchingOption(audioPreference,audioTracks,audioMatchPredicate);if(groupIndex>-1){currentTrack=audioTracks[groupIndex];}else {const allIndex=findMatchingOption(audioPreference,this.tracks);currentTrack=this.tracks[allIndex];}}// Select initial track
let trackId=this.findTrackId(currentTrack);if(trackId===-1&&currentTrack){trackId=this.findTrackId(null);}// Dispatch events and load track if needed
const audioTracksUpdated={audioTracks};this.log(`Updating audio tracks, ${audioTracks.length} track(s) found in group(s): ${audioGroups==null?void 0:audioGroups.join(',')}`);this.hls.trigger(Events.AUDIO_TRACKS_UPDATED,audioTracksUpdated);const selectedTrackId=this.trackId;if(trackId!==-1&&selectedTrackId===-1){this.setAudioTrack(trackId);}else if(audioTracks.length&&selectedTrackId===-1){var _this$groupIds;const error=new Error(`No audio track selected for current audio group-ID(s): ${(_this$groupIds=this.groupIds)==null?void 0:_this$groupIds.join(',')} track count: ${audioTracks.length}`);this.warn(error.message);this.hls.trigger(Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.AUDIO_TRACK_LOAD_ERROR,fatal:true,error});}}else if(this.shouldReloadPlaylist(currentTrack)){// Retry playlist loading if no playlist is or has been loaded yet
this.setAudioTrack(this.trackId);}}onError(event,data){if(data.fatal||!data.context){return;}if(data.context.type===PlaylistContextType.AUDIO_TRACK&&data.context.id===this.trackId&&(!this.groupIds||this.groupIds.indexOf(data.context.groupId)!==-1)){this.requestScheduled=-1;this.checkRetry(data);}}get allAudioTracks(){return this.tracks;}get audioTracks(){return this.tracksInGroup;}get audioTrack(){return this.trackId;}set audioTrack(newId){// If audio track is selected from API then don't choose from the manifest default track
this.selectDefaultTrack=false;this.setAudioTrack(newId);}setAudioOption(audioOption){const hls=this.hls;hls.config.audioPreference=audioOption;if(audioOption){const allAudioTracks=this.allAudioTracks;this.selectDefaultTrack=false;if(allAudioTracks.length){// First see if current option matches (no switch op)
const currentTrack=this.currentTrack;if(currentTrack&&matchesOption(audioOption,currentTrack,audioMatchPredicate)){return currentTrack;}// Find option in available tracks (tracksInGroup)
const groupIndex=findMatchingOption(audioOption,this.tracksInGroup,audioMatchPredicate);if(groupIndex>-1){const track=this.tracksInGroup[groupIndex];this.setAudioTrack(groupIndex);return track;}else if(currentTrack){// Find option in nearest level audio group
let searchIndex=hls.loadLevel;if(searchIndex===-1){searchIndex=hls.firstAutoLevel;}const switchIndex=findClosestLevelWithAudioGroup(audioOption,hls.levels,allAudioTracks,searchIndex,audioMatchPredicate);if(switchIndex===-1){// could not find matching variant
return null;}// and switch level to acheive the audio group switch
hls.nextLoadLevel=switchIndex;}if(audioOption.channels||audioOption.audioCodec){// Could not find a match with codec / channels predicate
// Find a match without channels or codec
const withoutCodecAndChannelsMatch=findMatchingOption(audioOption,allAudioTracks);if(withoutCodecAndChannelsMatch>-1){return allAudioTracks[withoutCodecAndChannelsMatch];}}}}return null;}setAudioTrack(newId){const tracks=this.tracksInGroup;// check if level idx is valid
if(newId<0||newId>=tracks.length){this.warn(`Invalid audio track id: ${newId}`);return;}// stopping live reloading timer if any
this.clearTimer();this.selectDefaultTrack=false;const lastTrack=this.currentTrack;const track=tracks[newId];const trackLoaded=track.details&&!track.details.live;if(newId===this.trackId&&track===lastTrack&&trackLoaded){return;}this.log(`Switching to audio-track ${newId} "${track.name}" lang:${track.lang} group:${track.groupId} channels:${track.channels}`);this.trackId=newId;this.currentTrack=track;this.hls.trigger(Events.AUDIO_TRACK_SWITCHING,_objectSpread2({},track));// Do not reload track unless live
if(trackLoaded){return;}const hlsUrlParameters=this.switchParams(track.url,lastTrack==null?void 0:lastTrack.details,track.details);this.loadPlaylist(hlsUrlParameters);}findTrackId(currentTrack){const audioTracks=this.tracksInGroup;for(let i=0;i<audioTracks.length;i++){const track=audioTracks[i];if(this.selectDefaultTrack&&!track.default){continue;}if(!currentTrack||matchesOption(currentTrack,track,audioMatchPredicate)){return i;}}if(currentTrack){const{name,lang,assocLang,characteristics,audioCodec,channels}=currentTrack;for(let i=0;i<audioTracks.length;i++){const track=audioTracks[i];if(matchesOption({name,lang,assocLang,characteristics,audioCodec,channels},track,audioMatchPredicate)){return i;}}for(let i=0;i<audioTracks.length;i++){const track=audioTracks[i];if(mediaAttributesIdentical(currentTrack.attrs,track.attrs,['LANGUAGE','ASSOC-LANGUAGE','CHARACTERISTICS'])){return i;}}for(let i=0;i<audioTracks.length;i++){const track=audioTracks[i];if(mediaAttributesIdentical(currentTrack.attrs,track.attrs,['LANGUAGE'])){return i;}}}return -1;}loadPlaylist(hlsUrlParameters){const audioTrack=this.currentTrack;if(this.shouldLoadPlaylist(audioTrack)&&audioTrack){super.loadPlaylist();const id=audioTrack.id;const groupId=audioTrack.groupId;let url=audioTrack.url;if(hlsUrlParameters){try{url=hlsUrlParameters.addDirectives(url);}catch(error){this.warn(`Could not construct new URL with HLS Delivery Directives: ${error}`);}}// track not retrieved yet, or live playlist we need to (re)load it
this.log(`loading audio-track playlist ${id} "${audioTrack.name}" lang:${audioTrack.lang} group:${groupId}`);this.clearTimer();this.hls.trigger(Events.AUDIO_TRACK_LOADING,{url,id,groupId,deliveryDirectives:hlsUrlParameters||null});}}}const TICK_INTERVAL$1=500;// how often to tick in ms
class SubtitleStreamController extends BaseStreamController{constructor(hls,fragmentTracker,keyLoader){super(hls,fragmentTracker,keyLoader,'[subtitle-stream-controller]',PlaylistLevelType.SUBTITLE);this.currentTrackId=-1;this.tracksBuffered=[];this.mainDetails=null;this._registerListeners();}onHandlerDestroying(){this._unregisterListeners();super.onHandlerDestroying();this.mainDetails=null;}_registerListeners(){const{hls}=this;hls.on(Events.MEDIA_ATTACHED,this.onMediaAttached,this);hls.on(Events.MEDIA_DETACHING,this.onMediaDetaching,this);hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.on(Events.LEVEL_LOADED,this.onLevelLoaded,this);hls.on(Events.ERROR,this.onError,this);hls.on(Events.SUBTITLE_TRACKS_UPDATED,this.onSubtitleTracksUpdated,this);hls.on(Events.SUBTITLE_TRACK_SWITCH,this.onSubtitleTrackSwitch,this);hls.on(Events.SUBTITLE_TRACK_LOADED,this.onSubtitleTrackLoaded,this);hls.on(Events.SUBTITLE_FRAG_PROCESSED,this.onSubtitleFragProcessed,this);hls.on(Events.BUFFER_FLUSHING,this.onBufferFlushing,this);hls.on(Events.FRAG_BUFFERED,this.onFragBuffered,this);}_unregisterListeners(){const{hls}=this;hls.off(Events.MEDIA_ATTACHED,this.onMediaAttached,this);hls.off(Events.MEDIA_DETACHING,this.onMediaDetaching,this);hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.off(Events.LEVEL_LOADED,this.onLevelLoaded,this);hls.off(Events.ERROR,this.onError,this);hls.off(Events.SUBTITLE_TRACKS_UPDATED,this.onSubtitleTracksUpdated,this);hls.off(Events.SUBTITLE_TRACK_SWITCH,this.onSubtitleTrackSwitch,this);hls.off(Events.SUBTITLE_TRACK_LOADED,this.onSubtitleTrackLoaded,this);hls.off(Events.SUBTITLE_FRAG_PROCESSED,this.onSubtitleFragProcessed,this);hls.off(Events.BUFFER_FLUSHING,this.onBufferFlushing,this);hls.off(Events.FRAG_BUFFERED,this.onFragBuffered,this);}startLoad(startPosition){this.stopLoad();this.state=State.IDLE;this.setInterval(TICK_INTERVAL$1);this.nextLoadPosition=this.startPosition=this.lastCurrentTime=startPosition;this.tick();}onManifestLoading(){this.mainDetails=null;this.fragmentTracker.removeAllFragments();}onMediaDetaching(){this.tracksBuffered=[];super.onMediaDetaching();}onLevelLoaded(event,data){this.mainDetails=data.details;}onSubtitleFragProcessed(event,data){const{frag,success}=data;this.fragPrevious=frag;this.state=State.IDLE;if(!success){return;}const buffered=this.tracksBuffered[this.currentTrackId];if(!buffered){return;}// Create/update a buffered array matching the interface used by BufferHelper.bufferedInfo
// so we can re-use the logic used to detect how much has been buffered
let timeRange;const fragStart=frag.start;for(let i=0;i<buffered.length;i++){if(fragStart>=buffered[i].start&&fragStart<=buffered[i].end){timeRange=buffered[i];break;}}const fragEnd=frag.start+frag.duration;if(timeRange){timeRange.end=fragEnd;}else {timeRange={start:fragStart,end:fragEnd};buffered.push(timeRange);}this.fragmentTracker.fragBuffered(frag);this.fragBufferedComplete(frag,null);}onBufferFlushing(event,data){const{startOffset,endOffset}=data;if(startOffset===0&&endOffset!==Number.POSITIVE_INFINITY){const endOffsetSubtitles=endOffset-1;if(endOffsetSubtitles<=0){return;}data.endOffsetSubtitles=Math.max(0,endOffsetSubtitles);this.tracksBuffered.forEach(buffered=>{for(let i=0;i<buffered.length;){if(buffered[i].end<=endOffsetSubtitles){buffered.shift();continue;}else if(buffered[i].start<endOffsetSubtitles){buffered[i].start=endOffsetSubtitles;}else {break;}i++;}});this.fragmentTracker.removeFragmentsInRange(startOffset,endOffsetSubtitles,PlaylistLevelType.SUBTITLE);}}onFragBuffered(event,data){if(!this.loadedmetadata&&data.frag.type===PlaylistLevelType.MAIN){var _this$media;if((_this$media=this.media)!=null&&_this$media.buffered.length){this.loadedmetadata=true;}}}// If something goes wrong, proceed to next frag, if we were processing one.
onError(event,data){const frag=data.frag;if((frag==null?void 0:frag.type)===PlaylistLevelType.SUBTITLE){if(data.details===ErrorDetails.FRAG_GAP){this.fragmentTracker.fragBuffered(frag,true);}if(this.fragCurrent){this.fragCurrent.abortRequests();}if(this.state!==State.STOPPED){this.state=State.IDLE;}}}// Got all new subtitle levels.
onSubtitleTracksUpdated(event,{subtitleTracks}){if(this.levels&&subtitleOptionsIdentical(this.levels,subtitleTracks)){this.levels=subtitleTracks.map(mediaPlaylist=>new Level(mediaPlaylist));return;}this.tracksBuffered=[];this.levels=subtitleTracks.map(mediaPlaylist=>{const level=new Level(mediaPlaylist);this.tracksBuffered[level.id]=[];return level;});this.fragmentTracker.removeFragmentsInRange(0,Number.POSITIVE_INFINITY,PlaylistLevelType.SUBTITLE);this.fragPrevious=null;this.mediaBuffer=null;}onSubtitleTrackSwitch(event,data){var _this$levels;this.currentTrackId=data.id;if(!((_this$levels=this.levels)!=null&&_this$levels.length)||this.currentTrackId===-1){this.clearInterval();return;}// Check if track has the necessary details to load fragments
const currentTrack=this.levels[this.currentTrackId];if(currentTrack!=null&&currentTrack.details){this.mediaBuffer=this.mediaBufferTimeRanges;}else {this.mediaBuffer=null;}if(currentTrack){this.setInterval(TICK_INTERVAL$1);}}// Got a new set of subtitle fragments.
onSubtitleTrackLoaded(event,data){var _track$details;const{currentTrackId,levels}=this;const{details:newDetails,id:trackId}=data;if(!levels){this.warn(`Subtitle tracks were reset while loading level ${trackId}`);return;}const track=levels[trackId];if(trackId>=levels.length||!track){return;}this.log(`Subtitle track ${trackId} loaded [${newDetails.startSN},${newDetails.endSN}]${newDetails.lastPartSn?`[part-${newDetails.lastPartSn}-${newDetails.lastPartIndex}]`:''},duration:${newDetails.totalduration}`);this.mediaBuffer=this.mediaBufferTimeRanges;let sliding=0;if(newDetails.live||(_track$details=track.details)!=null&&_track$details.live){const mainDetails=this.mainDetails;if(newDetails.deltaUpdateFailed||!mainDetails){return;}const mainSlidingStartFragment=mainDetails.fragments[0];if(!track.details){if(newDetails.hasProgramDateTime&&mainDetails.hasProgramDateTime){alignMediaPlaylistByPDT(newDetails,mainDetails);sliding=newDetails.fragments[0].start;}else if(mainSlidingStartFragment){// line up live playlist with main so that fragments in range are loaded
sliding=mainSlidingStartFragment.start;addSliding(newDetails,sliding);}}else {var _this$levelLastLoaded;sliding=this.alignPlaylists(newDetails,track.details,(_this$levelLastLoaded=this.levelLastLoaded)==null?void 0:_this$levelLastLoaded.details);if(sliding===0&&mainSlidingStartFragment){// realign with main when there is no overlap with last refresh
sliding=mainSlidingStartFragment.start;addSliding(newDetails,sliding);}}}track.details=newDetails;this.levelLastLoaded=track;if(trackId!==currentTrackId){return;}if(!this.startFragRequested&&(this.mainDetails||!newDetails.live)){this.setStartPosition(this.mainDetails||newDetails,sliding);}// trigger handler right now
this.tick();// If playlist is misaligned because of bad PDT or drift, delete details to resync with main on reload
if(newDetails.live&&!this.fragCurrent&&this.media&&this.state===State.IDLE){const foundFrag=findFragmentByPTS(null,newDetails.fragments,this.media.currentTime,0);if(!foundFrag){this.warn('Subtitle playlist not aligned with playback');track.details=undefined;}}}_handleFragmentLoadComplete(fragLoadedData){const{frag,payload}=fragLoadedData;const decryptData=frag.decryptdata;const hls=this.hls;if(this.fragContextChanged(frag)){return;}// check to see if the payload needs to be decrypted
if(payload&&payload.byteLength>0&&decryptData!=null&&decryptData.key&&decryptData.iv&&decryptData.method==='AES-128'){const startTime=performance.now();// decrypt the subtitles
this.decrypter.decrypt(new Uint8Array(payload),decryptData.key.buffer,decryptData.iv.buffer).catch(err=>{hls.trigger(Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.FRAG_DECRYPT_ERROR,fatal:false,error:err,reason:err.message,frag});throw err;}).then(decryptedData=>{const endTime=performance.now();hls.trigger(Events.FRAG_DECRYPTED,{frag,payload:decryptedData,stats:{tstart:startTime,tdecrypt:endTime}});}).catch(err=>{this.warn(`${err.name}: ${err.message}`);this.state=State.IDLE;});}}doTick(){if(!this.media){this.state=State.IDLE;return;}if(this.state===State.IDLE){const{currentTrackId,levels}=this;const track=levels==null?void 0:levels[currentTrackId];if(!track||!levels.length||!track.details){return;}const{config}=this;const currentTime=this.getLoadPosition();const bufferedInfo=BufferHelper.bufferedInfo(this.tracksBuffered[this.currentTrackId]||[],currentTime,config.maxBufferHole);const{end:targetBufferTime,len:bufferLen}=bufferedInfo;const mainBufferInfo=this.getFwdBufferInfo(this.media,PlaylistLevelType.MAIN);const trackDetails=track.details;const maxBufLen=this.getMaxBufferLength(mainBufferInfo==null?void 0:mainBufferInfo.len)+trackDetails.levelTargetDuration;if(bufferLen>maxBufLen){return;}const fragments=trackDetails.fragments;const fragLen=fragments.length;const end=trackDetails.edge;let foundFrag=null;const fragPrevious=this.fragPrevious;if(targetBufferTime<end){const tolerance=config.maxFragLookUpTolerance;const lookupTolerance=targetBufferTime>end-tolerance?0:tolerance;foundFrag=findFragmentByPTS(fragPrevious,fragments,Math.max(fragments[0].start,targetBufferTime),lookupTolerance);if(!foundFrag&&fragPrevious&&fragPrevious.start<fragments[0].start){foundFrag=fragments[0];}}else {foundFrag=fragments[fragLen-1];}if(!foundFrag){return;}foundFrag=this.mapToInitFragWhenRequired(foundFrag);if(foundFrag.sn!=='initSegment'){// Load earlier fragment in same discontinuity to make up for misaligned playlists and cues that extend beyond end of segment
const curSNIdx=foundFrag.sn-trackDetails.startSN;const prevFrag=fragments[curSNIdx-1];if(prevFrag&&prevFrag.cc===foundFrag.cc&&this.fragmentTracker.getState(prevFrag)===FragmentState.NOT_LOADED){foundFrag=prevFrag;}}if(this.fragmentTracker.getState(foundFrag)===FragmentState.NOT_LOADED){// only load if fragment is not loaded
this.loadFragment(foundFrag,track,targetBufferTime);}}}getMaxBufferLength(mainBufferLength){const maxConfigBuffer=super.getMaxBufferLength();if(!mainBufferLength){return maxConfigBuffer;}return Math.max(maxConfigBuffer,mainBufferLength);}loadFragment(frag,level,targetBufferTime){this.fragCurrent=frag;if(frag.sn==='initSegment'){this._loadInitSegment(frag,level);}else {this.startFragRequested=true;super.loadFragment(frag,level,targetBufferTime);}}get mediaBufferTimeRanges(){return new BufferableInstance(this.tracksBuffered[this.currentTrackId]||[]);}}class BufferableInstance{constructor(timeranges){this.buffered=void 0;const getRange=(name,index,length)=>{index=index>>>0;if(index>length-1){throw new DOMException(`Failed to execute '${name}' on 'TimeRanges': The index provided (${index}) is greater than the maximum bound (${length})`);}return timeranges[index][name];};this.buffered={get length(){return timeranges.length;},end(index){return getRange('end',index,timeranges.length);},start(index){return getRange('start',index,timeranges.length);}};}}class SubtitleTrackController extends BasePlaylistController{constructor(hls){super(hls,'[subtitle-track-controller]');this.media=null;this.tracks=[];this.groupIds=null;this.tracksInGroup=[];this.trackId=-1;this.currentTrack=null;this.selectDefaultTrack=true;this.queuedDefaultTrack=-1;this.asyncPollTrackChange=()=>this.pollTrackChange(0);this.useTextTrackPolling=false;this.subtitlePollingInterval=-1;this._subtitleDisplay=true;this.onTextTracksChanged=()=>{if(!this.useTextTrackPolling){self.clearInterval(this.subtitlePollingInterval);}// Media is undefined when switching streams via loadSource()
if(!this.media||!this.hls.config.renderTextTracksNatively){return;}let textTrack=null;const tracks=filterSubtitleTracks(this.media.textTracks);for(let i=0;i<tracks.length;i++){if(tracks[i].mode==='hidden'){// Do not break in case there is a following track with showing.
textTrack=tracks[i];}else if(tracks[i].mode==='showing'){textTrack=tracks[i];break;}}// Find internal track index for TextTrack
const trackId=this.findTrackForTextTrack(textTrack);if(this.subtitleTrack!==trackId){this.setSubtitleTrack(trackId);}};this.registerListeners();}destroy(){this.unregisterListeners();this.tracks.length=0;this.tracksInGroup.length=0;this.currentTrack=null;this.onTextTracksChanged=this.asyncPollTrackChange=null;super.destroy();}get subtitleDisplay(){return this._subtitleDisplay;}set subtitleDisplay(value){this._subtitleDisplay=value;if(this.trackId>-1){this.toggleTrackModes();}}registerListeners(){const{hls}=this;hls.on(Events.MEDIA_ATTACHED,this.onMediaAttached,this);hls.on(Events.MEDIA_DETACHING,this.onMediaDetaching,this);hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.on(Events.MANIFEST_PARSED,this.onManifestParsed,this);hls.on(Events.LEVEL_LOADING,this.onLevelLoading,this);hls.on(Events.LEVEL_SWITCHING,this.onLevelSwitching,this);hls.on(Events.SUBTITLE_TRACK_LOADED,this.onSubtitleTrackLoaded,this);hls.on(Events.ERROR,this.onError,this);}unregisterListeners(){const{hls}=this;hls.off(Events.MEDIA_ATTACHED,this.onMediaAttached,this);hls.off(Events.MEDIA_DETACHING,this.onMediaDetaching,this);hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.off(Events.MANIFEST_PARSED,this.onManifestParsed,this);hls.off(Events.LEVEL_LOADING,this.onLevelLoading,this);hls.off(Events.LEVEL_SWITCHING,this.onLevelSwitching,this);hls.off(Events.SUBTITLE_TRACK_LOADED,this.onSubtitleTrackLoaded,this);hls.off(Events.ERROR,this.onError,this);}// Listen for subtitle track change, then extract the current track ID.
onMediaAttached(event,data){this.media=data.media;if(!this.media){return;}if(this.queuedDefaultTrack>-1){this.subtitleTrack=this.queuedDefaultTrack;this.queuedDefaultTrack=-1;}this.useTextTrackPolling=!(this.media.textTracks&&'onchange'in this.media.textTracks);if(this.useTextTrackPolling){this.pollTrackChange(500);}else {this.media.textTracks.addEventListener('change',this.asyncPollTrackChange);}}pollTrackChange(timeout){self.clearInterval(this.subtitlePollingInterval);this.subtitlePollingInterval=self.setInterval(this.onTextTracksChanged,timeout);}onMediaDetaching(){if(!this.media){return;}self.clearInterval(this.subtitlePollingInterval);if(!this.useTextTrackPolling){this.media.textTracks.removeEventListener('change',this.asyncPollTrackChange);}if(this.trackId>-1){this.queuedDefaultTrack=this.trackId;}const textTracks=filterSubtitleTracks(this.media.textTracks);// Clear loaded cues on media detachment from tracks
textTracks.forEach(track=>{clearCurrentCues(track);});// Disable all subtitle tracks before detachment so when reattached only tracks in that content are enabled.
this.subtitleTrack=-1;this.media=null;}onManifestLoading(){this.tracks=[];this.groupIds=null;this.tracksInGroup=[];this.trackId=-1;this.currentTrack=null;this.selectDefaultTrack=true;}// Fired whenever a new manifest is loaded.
onManifestParsed(event,data){this.tracks=data.subtitleTracks;}onSubtitleTrackLoaded(event,data){const{id,groupId,details}=data;const trackInActiveGroup=this.tracksInGroup[id];if(!trackInActiveGroup||trackInActiveGroup.groupId!==groupId){this.warn(`Subtitle track with id:${id} and group:${groupId} not found in active group ${trackInActiveGroup==null?void 0:trackInActiveGroup.groupId}`);return;}const curDetails=trackInActiveGroup.details;trackInActiveGroup.details=data.details;this.log(`Subtitle track ${id} "${trackInActiveGroup.name}" lang:${trackInActiveGroup.lang} group:${groupId} loaded [${details.startSN}-${details.endSN}]`);if(id===this.trackId){this.playlistLoaded(id,data,curDetails);}}onLevelLoading(event,data){this.switchLevel(data.level);}onLevelSwitching(event,data){this.switchLevel(data.level);}switchLevel(levelIndex){const levelInfo=this.hls.levels[levelIndex];if(!levelInfo){return;}const subtitleGroups=levelInfo.subtitleGroups||null;const currentGroups=this.groupIds;let currentTrack=this.currentTrack;if(!subtitleGroups||(currentGroups==null?void 0:currentGroups.length)!==(subtitleGroups==null?void 0:subtitleGroups.length)||subtitleGroups!=null&&subtitleGroups.some(groupId=>(currentGroups==null?void 0:currentGroups.indexOf(groupId))===-1)){this.groupIds=subtitleGroups;this.trackId=-1;this.currentTrack=null;const subtitleTracks=this.tracks.filter(track=>!subtitleGroups||subtitleGroups.indexOf(track.groupId)!==-1);if(subtitleTracks.length){// Disable selectDefaultTrack if there are no default tracks
if(this.selectDefaultTrack&&!subtitleTracks.some(track=>track.default)){this.selectDefaultTrack=false;}// track.id should match hls.audioTracks index
subtitleTracks.forEach((track,i)=>{track.id=i;});}else if(!currentTrack&&!this.tracksInGroup.length){// Do not dispatch SUBTITLE_TRACKS_UPDATED when there were and are no tracks
return;}this.tracksInGroup=subtitleTracks;// Find preferred track
const subtitlePreference=this.hls.config.subtitlePreference;if(!currentTrack&&subtitlePreference){this.selectDefaultTrack=false;const groupIndex=findMatchingOption(subtitlePreference,subtitleTracks);if(groupIndex>-1){currentTrack=subtitleTracks[groupIndex];}else {const allIndex=findMatchingOption(subtitlePreference,this.tracks);currentTrack=this.tracks[allIndex];}}// Select initial track
let trackId=this.findTrackId(currentTrack);if(trackId===-1&&currentTrack){trackId=this.findTrackId(null);}// Dispatch events and load track if needed
const subtitleTracksUpdated={subtitleTracks};this.log(`Updating subtitle tracks, ${subtitleTracks.length} track(s) found in "${subtitleGroups==null?void 0:subtitleGroups.join(',')}" group-id`);this.hls.trigger(Events.SUBTITLE_TRACKS_UPDATED,subtitleTracksUpdated);if(trackId!==-1&&this.trackId===-1){this.setSubtitleTrack(trackId);}}else if(this.shouldReloadPlaylist(currentTrack)){// Retry playlist loading if no playlist is or has been loaded yet
this.setSubtitleTrack(this.trackId);}}findTrackId(currentTrack){const tracks=this.tracksInGroup;const selectDefault=this.selectDefaultTrack;for(let i=0;i<tracks.length;i++){const track=tracks[i];if(selectDefault&&!track.default||!selectDefault&&!currentTrack){continue;}if(!currentTrack||matchesOption(track,currentTrack)){return i;}}if(currentTrack){for(let i=0;i<tracks.length;i++){const track=tracks[i];if(mediaAttributesIdentical(currentTrack.attrs,track.attrs,['LANGUAGE','ASSOC-LANGUAGE','CHARACTERISTICS'])){return i;}}for(let i=0;i<tracks.length;i++){const track=tracks[i];if(mediaAttributesIdentical(currentTrack.attrs,track.attrs,['LANGUAGE'])){return i;}}}return -1;}findTrackForTextTrack(textTrack){if(textTrack){const tracks=this.tracksInGroup;for(let i=0;i<tracks.length;i++){const track=tracks[i];if(subtitleTrackMatchesTextTrack(track,textTrack)){return i;}}}return -1;}onError(event,data){if(data.fatal||!data.context){return;}if(data.context.type===PlaylistContextType.SUBTITLE_TRACK&&data.context.id===this.trackId&&(!this.groupIds||this.groupIds.indexOf(data.context.groupId)!==-1)){this.checkRetry(data);}}get allSubtitleTracks(){return this.tracks;}/** get alternate subtitle tracks list from playlist **/get subtitleTracks(){return this.tracksInGroup;}/** get/set index of the selected subtitle track (based on index in subtitle track lists) **/get subtitleTrack(){return this.trackId;}set subtitleTrack(newId){this.selectDefaultTrack=false;this.setSubtitleTrack(newId);}setSubtitleOption(subtitleOption){this.hls.config.subtitlePreference=subtitleOption;if(subtitleOption){const allSubtitleTracks=this.allSubtitleTracks;this.selectDefaultTrack=false;if(allSubtitleTracks.length){// First see if current option matches (no switch op)
const currentTrack=this.currentTrack;if(currentTrack&&matchesOption(subtitleOption,currentTrack)){return currentTrack;}// Find option in current group
const groupIndex=findMatchingOption(subtitleOption,this.tracksInGroup);if(groupIndex>-1){const track=this.tracksInGroup[groupIndex];this.setSubtitleTrack(groupIndex);return track;}else if(currentTrack){// If this is not the initial selection return null
// option should have matched one in active group
return null;}else {// Find the option in all tracks for initial selection
const allIndex=findMatchingOption(subtitleOption,allSubtitleTracks);if(allIndex>-1){return allSubtitleTracks[allIndex];}}}}return null;}loadPlaylist(hlsUrlParameters){super.loadPlaylist();const currentTrack=this.currentTrack;if(this.shouldLoadPlaylist(currentTrack)&&currentTrack){const id=currentTrack.id;const groupId=currentTrack.groupId;let url=currentTrack.url;if(hlsUrlParameters){try{url=hlsUrlParameters.addDirectives(url);}catch(error){this.warn(`Could not construct new URL with HLS Delivery Directives: ${error}`);}}this.log(`Loading subtitle playlist for id ${id}`);this.hls.trigger(Events.SUBTITLE_TRACK_LOADING,{url,id,groupId,deliveryDirectives:hlsUrlParameters||null});}}/**
   * Disables the old subtitleTrack and sets current mode on the next subtitleTrack.
   * This operates on the DOM textTracks.
   * A value of -1 will disable all subtitle tracks.
   */toggleTrackModes(){const{media}=this;if(!media){return;}const textTracks=filterSubtitleTracks(media.textTracks);const currentTrack=this.currentTrack;let nextTrack;if(currentTrack){nextTrack=textTracks.filter(textTrack=>subtitleTrackMatchesTextTrack(currentTrack,textTrack))[0];if(!nextTrack){this.warn(`Unable to find subtitle TextTrack with name "${currentTrack.name}" and language "${currentTrack.lang}"`);}}[].slice.call(textTracks).forEach(track=>{if(track.mode!=='disabled'&&track!==nextTrack){track.mode='disabled';}});if(nextTrack){const mode=this.subtitleDisplay?'showing':'hidden';if(nextTrack.mode!==mode){nextTrack.mode=mode;}}}/**
   * This method is responsible for validating the subtitle index and periodically reloading if live.
   * Dispatches the SUBTITLE_TRACK_SWITCH event, which instructs the subtitle-stream-controller to load the selected track.
   */setSubtitleTrack(newId){const tracks=this.tracksInGroup;// setting this.subtitleTrack will trigger internal logic
// if media has not been attached yet, it will fail
// we keep a reference to the default track id
// and we'll set subtitleTrack when onMediaAttached is triggered
if(!this.media){this.queuedDefaultTrack=newId;return;}// exit if track id as already set or invalid
if(newId<-1||newId>=tracks.length||!isFiniteNumber(newId)){this.warn(`Invalid subtitle track id: ${newId}`);return;}// stopping live reloading timer if any
this.clearTimer();this.selectDefaultTrack=false;const lastTrack=this.currentTrack;const track=tracks[newId]||null;this.trackId=newId;this.currentTrack=track;this.toggleTrackModes();if(!track){// switch to -1
this.hls.trigger(Events.SUBTITLE_TRACK_SWITCH,{id:newId});return;}const trackLoaded=!!track.details&&!track.details.live;if(newId===this.trackId&&track===lastTrack&&trackLoaded){return;}this.log(`Switching to subtitle-track ${newId}`+(track?` "${track.name}" lang:${track.lang} group:${track.groupId}`:''));const{id,groupId='',name,type,url}=track;this.hls.trigger(Events.SUBTITLE_TRACK_SWITCH,{id,groupId,name,type,url});const hlsUrlParameters=this.switchParams(track.url,lastTrack==null?void 0:lastTrack.details,track.details);this.loadPlaylist(hlsUrlParameters);}}class BufferOperationQueue{constructor(sourceBufferReference){this.buffers=void 0;this.queues={video:[],audio:[],audiovideo:[]};this.buffers=sourceBufferReference;}append(operation,type,pending){const queue=this.queues[type];queue.push(operation);if(queue.length===1&&!pending){this.executeNext(type);}}insertAbort(operation,type){const queue=this.queues[type];queue.unshift(operation);this.executeNext(type);}appendBlocker(type){let execute;const promise=new Promise(resolve=>{execute=resolve;});const operation={execute,onStart:()=>{},onComplete:()=>{},onError:()=>{}};this.append(operation,type);return promise;}executeNext(type){const queue=this.queues[type];if(queue.length){const operation=queue[0];try{// Operations are expected to result in an 'updateend' event being fired. If not, the queue will lock. Operations
// which do not end with this event must call _onSBUpdateEnd manually
operation.execute();}catch(error){logger$2.warn(`[buffer-operation-queue]: Exception executing "${type}" SourceBuffer operation: ${error}`);operation.onError(error);// Only shift the current operation off, otherwise the updateend handler will do this for us
const sb=this.buffers[type];if(!(sb!=null&&sb.updating)){this.shiftAndExecuteNext(type);}}}}shiftAndExecuteNext(type){this.queues[type].shift();this.executeNext(type);}current(type){return this.queues[type][0];}}const VIDEO_CODEC_PROFILE_REPLACE=/(avc[1234]|hvc1|hev1|dvh[1e]|vp09|av01)(?:\.[^.,]+)+/;class BufferController{constructor(hls){// The level details used to determine duration, target-duration and live
this.details=null;// cache the self generated object url to detect hijack of video tag
this._objectUrl=null;// A queue of buffer operations which require the SourceBuffer to not be updating upon execution
this.operationQueue=void 0;// References to event listeners for each SourceBuffer, so that they can be referenced for event removal
this.listeners=void 0;this.hls=void 0;// The number of BUFFER_CODEC events received before any sourceBuffers are created
this.bufferCodecEventsExpected=0;// The total number of BUFFER_CODEC events received
this._bufferCodecEventsTotal=0;// A reference to the attached media element
this.media=null;// A reference to the active media source
this.mediaSource=null;// Last MP3 audio chunk appended
this.lastMpegAudioChunk=null;this.appendSource=void 0;// counters
this.appendErrors={audio:0,video:0,audiovideo:0};this.tracks={};this.pendingTracks={};this.sourceBuffer=void 0;this.log=void 0;this.warn=void 0;this.error=void 0;this._onEndStreaming=event=>{if(!this.hls){return;}this.hls.pauseBuffering();};this._onStartStreaming=event=>{if(!this.hls){return;}this.hls.resumeBuffering();};// Keep as arrow functions so that we can directly reference these functions directly as event listeners
this._onMediaSourceOpen=()=>{const{media,mediaSource}=this;this.log('Media source opened');if(media){media.removeEventListener('emptied',this._onMediaEmptied);this.updateMediaElementDuration();this.hls.trigger(Events.MEDIA_ATTACHED,{media,mediaSource:mediaSource});}if(mediaSource){// once received, don't listen anymore to sourceopen event
mediaSource.removeEventListener('sourceopen',this._onMediaSourceOpen);}this.checkPendingTracks();};this._onMediaSourceClose=()=>{this.log('Media source closed');};this._onMediaSourceEnded=()=>{this.log('Media source ended');};this._onMediaEmptied=()=>{const{mediaSrc,_objectUrl}=this;if(mediaSrc!==_objectUrl){logger$2.error(`Media element src was set while attaching MediaSource (${_objectUrl} > ${mediaSrc})`);}};this.hls=hls;const logPrefix='[buffer-controller]';this.appendSource=isManagedMediaSource(getMediaSource(hls.config.preferManagedMediaSource));this.log=logger$2.log.bind(logger$2,logPrefix);this.warn=logger$2.warn.bind(logger$2,logPrefix);this.error=logger$2.error.bind(logger$2,logPrefix);this._initSourceBuffer();this.registerListeners();}hasSourceTypes(){return this.getSourceBufferTypes().length>0||Object.keys(this.pendingTracks).length>0;}destroy(){this.unregisterListeners();this.details=null;this.lastMpegAudioChunk=null;// @ts-ignore
this.hls=null;}registerListeners(){const{hls}=this;hls.on(Events.MEDIA_ATTACHING,this.onMediaAttaching,this);hls.on(Events.MEDIA_DETACHING,this.onMediaDetaching,this);hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.on(Events.MANIFEST_PARSED,this.onManifestParsed,this);hls.on(Events.BUFFER_RESET,this.onBufferReset,this);hls.on(Events.BUFFER_APPENDING,this.onBufferAppending,this);hls.on(Events.BUFFER_CODECS,this.onBufferCodecs,this);hls.on(Events.BUFFER_EOS,this.onBufferEos,this);hls.on(Events.BUFFER_FLUSHING,this.onBufferFlushing,this);hls.on(Events.LEVEL_UPDATED,this.onLevelUpdated,this);hls.on(Events.FRAG_PARSED,this.onFragParsed,this);hls.on(Events.FRAG_CHANGED,this.onFragChanged,this);}unregisterListeners(){const{hls}=this;hls.off(Events.MEDIA_ATTACHING,this.onMediaAttaching,this);hls.off(Events.MEDIA_DETACHING,this.onMediaDetaching,this);hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.off(Events.MANIFEST_PARSED,this.onManifestParsed,this);hls.off(Events.BUFFER_RESET,this.onBufferReset,this);hls.off(Events.BUFFER_APPENDING,this.onBufferAppending,this);hls.off(Events.BUFFER_CODECS,this.onBufferCodecs,this);hls.off(Events.BUFFER_EOS,this.onBufferEos,this);hls.off(Events.BUFFER_FLUSHING,this.onBufferFlushing,this);hls.off(Events.LEVEL_UPDATED,this.onLevelUpdated,this);hls.off(Events.FRAG_PARSED,this.onFragParsed,this);hls.off(Events.FRAG_CHANGED,this.onFragChanged,this);}_initSourceBuffer(){this.sourceBuffer={};this.operationQueue=new BufferOperationQueue(this.sourceBuffer);this.listeners={audio:[],video:[],audiovideo:[]};this.appendErrors={audio:0,video:0,audiovideo:0};this.lastMpegAudioChunk=null;}onManifestLoading(){this.bufferCodecEventsExpected=this._bufferCodecEventsTotal=0;this.details=null;}onManifestParsed(event,data){// in case of alt audio 2 BUFFER_CODECS events will be triggered, one per stream controller
// sourcebuffers will be created all at once when the expected nb of tracks will be reached
// in case alt audio is not used, only one BUFFER_CODEC event will be fired from main stream controller
// it will contain the expected nb of source buffers, no need to compute it
let codecEvents=2;if(data.audio&&!data.video||!data.altAudio||!true){codecEvents=1;}this.bufferCodecEventsExpected=this._bufferCodecEventsTotal=codecEvents;this.log(`${this.bufferCodecEventsExpected} bufferCodec event(s) expected`);}onMediaAttaching(event,data){const media=this.media=data.media;const MediaSource=getMediaSource(this.appendSource);if(media&&MediaSource){var _ms$constructor;const ms=this.mediaSource=new MediaSource();this.log(`created media source: ${(_ms$constructor=ms.constructor)==null?void 0:_ms$constructor.name}`);// MediaSource listeners are arrow functions with a lexical scope, and do not need to be bound
ms.addEventListener('sourceopen',this._onMediaSourceOpen);ms.addEventListener('sourceended',this._onMediaSourceEnded);ms.addEventListener('sourceclose',this._onMediaSourceClose);if(this.appendSource){ms.addEventListener('startstreaming',this._onStartStreaming);ms.addEventListener('endstreaming',this._onEndStreaming);}// cache the locally generated object url
const objectUrl=this._objectUrl=self.URL.createObjectURL(ms);// link video and media Source
if(this.appendSource){try{media.removeAttribute('src');// ManagedMediaSource will not open without disableRemotePlayback set to false or source alternatives
const MMS=self.ManagedMediaSource;media.disableRemotePlayback=media.disableRemotePlayback||MMS&&ms instanceof MMS;removeSourceChildren(media);addSource(media,objectUrl);media.load();}catch(error){media.src=objectUrl;}}else {media.src=objectUrl;}media.addEventListener('emptied',this._onMediaEmptied);}}onMediaDetaching(){const{media,mediaSource,_objectUrl}=this;if(mediaSource){this.log('media source detaching');if(mediaSource.readyState==='open'){try{// endOfStream could trigger exception if any sourcebuffer is in updating state
// we don't really care about checking sourcebuffer state here,
// as we are anyway detaching the MediaSource
// let's just avoid this exception to propagate
mediaSource.endOfStream();}catch(err){this.warn(`onMediaDetaching: ${err.message} while calling endOfStream`);}}// Clean up the SourceBuffers by invoking onBufferReset
this.onBufferReset();mediaSource.removeEventListener('sourceopen',this._onMediaSourceOpen);mediaSource.removeEventListener('sourceended',this._onMediaSourceEnded);mediaSource.removeEventListener('sourceclose',this._onMediaSourceClose);if(this.appendSource){mediaSource.removeEventListener('startstreaming',this._onStartStreaming);mediaSource.removeEventListener('endstreaming',this._onEndStreaming);}// Detach properly the MediaSource from the HTMLMediaElement as
// suggested in https://github.com/w3c/media-source/issues/53.
if(media){media.removeEventListener('emptied',this._onMediaEmptied);if(_objectUrl){self.URL.revokeObjectURL(_objectUrl);}// clean up video tag src only if it's our own url. some external libraries might
// hijack the video tag and change its 'src' without destroying the Hls instance first
if(this.mediaSrc===_objectUrl){media.removeAttribute('src');if(this.appendSource){removeSourceChildren(media);}media.load();}else {this.warn('media|source.src was changed by a third party - skip cleanup');}}this.mediaSource=null;this.media=null;this._objectUrl=null;this.bufferCodecEventsExpected=this._bufferCodecEventsTotal;this.pendingTracks={};this.tracks={};}this.hls.trigger(Events.MEDIA_DETACHED,undefined);}onBufferReset(){this.getSourceBufferTypes().forEach(type=>{this.resetBuffer(type);});this._initSourceBuffer();this.hls.resumeBuffering();}resetBuffer(type){const sb=this.sourceBuffer[type];try{if(sb){var _this$mediaSource;this.removeBufferListeners(type);// Synchronously remove the SB from the map before the next call in order to prevent an async function from
// accessing it
this.sourceBuffer[type]=undefined;if((_this$mediaSource=this.mediaSource)!=null&&_this$mediaSource.sourceBuffers.length){this.mediaSource.removeSourceBuffer(sb);}}}catch(err){this.warn(`onBufferReset ${type}`,err);}}onBufferCodecs(event,data){const sourceBufferCount=this.getSourceBufferTypes().length;const trackNames=Object.keys(data);trackNames.forEach(trackName=>{if(sourceBufferCount){// check if SourceBuffer codec needs to change
const track=this.tracks[trackName];if(track&&typeof track.buffer.changeType==='function'){var _trackCodec;const{id,codec,levelCodec,container,metadata}=data[trackName];const currentCodecFull=pickMostCompleteCodecName(track.codec,track.levelCodec);const currentCodec=currentCodecFull==null?void 0:currentCodecFull.replace(VIDEO_CODEC_PROFILE_REPLACE,'$1');let trackCodec=pickMostCompleteCodecName(codec,levelCodec);const nextCodec=(_trackCodec=trackCodec)==null?void 0:_trackCodec.replace(VIDEO_CODEC_PROFILE_REPLACE,'$1');if(trackCodec&&currentCodec!==nextCodec){if(trackName.slice(0,5)==='audio'){trackCodec=getCodecCompatibleName(trackCodec,this.appendSource);}const mimeType=`${container};codecs=${trackCodec}`;this.appendChangeType(trackName,mimeType);this.log(`switching codec ${currentCodecFull} to ${trackCodec}`);this.tracks[trackName]={buffer:track.buffer,codec,container,levelCodec,metadata,id};}}}else {// if source buffer(s) not created yet, appended buffer tracks in this.pendingTracks
this.pendingTracks[trackName]=data[trackName];}});// if sourcebuffers already created, do nothing ...
if(sourceBufferCount){return;}const bufferCodecEventsExpected=Math.max(this.bufferCodecEventsExpected-1,0);if(this.bufferCodecEventsExpected!==bufferCodecEventsExpected){this.log(`${bufferCodecEventsExpected} bufferCodec event(s) expected ${trackNames.join(',')}`);this.bufferCodecEventsExpected=bufferCodecEventsExpected;}if(this.mediaSource&&this.mediaSource.readyState==='open'){this.checkPendingTracks();}}appendChangeType(type,mimeType){const{operationQueue}=this;const operation={execute:()=>{const sb=this.sourceBuffer[type];if(sb){this.log(`changing ${type} sourceBuffer type to ${mimeType}`);sb.changeType(mimeType);}operationQueue.shiftAndExecuteNext(type);},onStart:()=>{},onComplete:()=>{},onError:error=>{this.warn(`Failed to change ${type} SourceBuffer type`,error);}};operationQueue.append(operation,type,!!this.pendingTracks[type]);}onBufferAppending(event,eventData){const{hls,operationQueue,tracks}=this;const{data,type,frag,part,chunkMeta}=eventData;const chunkStats=chunkMeta.buffering[type];const bufferAppendingStart=self.performance.now();chunkStats.start=bufferAppendingStart;const fragBuffering=frag.stats.buffering;const partBuffering=part?part.stats.buffering:null;if(fragBuffering.start===0){fragBuffering.start=bufferAppendingStart;}if(partBuffering&&partBuffering.start===0){partBuffering.start=bufferAppendingStart;}// TODO: Only update timestampOffset when audio/mpeg fragment or part is not contiguous with previously appended
// Adjusting `SourceBuffer.timestampOffset` (desired point in the timeline where the next frames should be appended)
// in Chrome browser when we detect MPEG audio container and time delta between level PTS and `SourceBuffer.timestampOffset`
// is greater than 100ms (this is enough to handle seek for VOD or level change for LIVE videos).
// More info here: https://github.com/video-dev/hls.js/issues/332#issuecomment-257986486
const audioTrack=tracks.audio;let checkTimestampOffset=false;if(type==='audio'&&(audioTrack==null?void 0:audioTrack.container)==='audio/mpeg'){checkTimestampOffset=!this.lastMpegAudioChunk||chunkMeta.id===1||this.lastMpegAudioChunk.sn!==chunkMeta.sn;this.lastMpegAudioChunk=chunkMeta;}const fragStart=frag.start;const operation={execute:()=>{chunkStats.executeStart=self.performance.now();if(checkTimestampOffset){const sb=this.sourceBuffer[type];if(sb){const delta=fragStart-sb.timestampOffset;if(Math.abs(delta)>=0.1){this.log(`Updating audio SourceBuffer timestampOffset to ${fragStart} (delta: ${delta}) sn: ${frag.sn})`);sb.timestampOffset=fragStart;}}}this.appendExecutor(data,type);},onStart:()=>{// logger.debug(`[buffer-controller]: ${type} SourceBuffer updatestart`);
},onComplete:()=>{// logger.debug(`[buffer-controller]: ${type} SourceBuffer updateend`);
const end=self.performance.now();chunkStats.executeEnd=chunkStats.end=end;if(fragBuffering.first===0){fragBuffering.first=end;}if(partBuffering&&partBuffering.first===0){partBuffering.first=end;}const{sourceBuffer}=this;const timeRanges={};for(const type in sourceBuffer){timeRanges[type]=BufferHelper.getBuffered(sourceBuffer[type]);}this.appendErrors[type]=0;if(type==='audio'||type==='video'){this.appendErrors.audiovideo=0;}else {this.appendErrors.audio=0;this.appendErrors.video=0;}this.hls.trigger(Events.BUFFER_APPENDED,{type,frag,part,chunkMeta,parent:frag.type,timeRanges});},onError:error=>{// in case any error occured while appending, put back segment in segments table
const event={type:ErrorTypes.MEDIA_ERROR,parent:frag.type,details:ErrorDetails.BUFFER_APPEND_ERROR,sourceBufferName:type,frag,part,chunkMeta,error,err:error,fatal:false};if(error.code===DOMException.QUOTA_EXCEEDED_ERR){// QuotaExceededError: http://www.w3.org/TR/html5/infrastructure.html#quotaexceedederror
// let's stop appending any segments, and report BUFFER_FULL_ERROR error
event.details=ErrorDetails.BUFFER_FULL_ERROR;}else {const appendErrorCount=++this.appendErrors[type];event.details=ErrorDetails.BUFFER_APPEND_ERROR;/* with UHD content, we could get loop of quota exceeded error until
            browser is able to evict some data from sourcebuffer. Retrying can help recover.
          */this.warn(`Failed ${appendErrorCount}/${hls.config.appendErrorMaxRetry} times to append segment in "${type}" sourceBuffer`);if(appendErrorCount>=hls.config.appendErrorMaxRetry){event.fatal=true;}}hls.trigger(Events.ERROR,event);}};operationQueue.append(operation,type,!!this.pendingTracks[type]);}onBufferFlushing(event,data){const{operationQueue}=this;const flushOperation=type=>({execute:this.removeExecutor.bind(this,type,data.startOffset,data.endOffset),onStart:()=>{// logger.debug(`[buffer-controller]: Started flushing ${data.startOffset} -> ${data.endOffset} for ${type} Source Buffer`);
},onComplete:()=>{// logger.debug(`[buffer-controller]: Finished flushing ${data.startOffset} -> ${data.endOffset} for ${type} Source Buffer`);
this.hls.trigger(Events.BUFFER_FLUSHED,{type});},onError:error=>{this.warn(`Failed to remove from ${type} SourceBuffer`,error);}});if(data.type){operationQueue.append(flushOperation(data.type),data.type);}else {this.getSourceBufferTypes().forEach(type=>{operationQueue.append(flushOperation(type),type);});}}onFragParsed(event,data){const{frag,part}=data;const buffersAppendedTo=[];const elementaryStreams=part?part.elementaryStreams:frag.elementaryStreams;if(elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO]){buffersAppendedTo.push('audiovideo');}else {if(elementaryStreams[ElementaryStreamTypes.AUDIO]){buffersAppendedTo.push('audio');}if(elementaryStreams[ElementaryStreamTypes.VIDEO]){buffersAppendedTo.push('video');}}const onUnblocked=()=>{const now=self.performance.now();frag.stats.buffering.end=now;if(part){part.stats.buffering.end=now;}const stats=part?part.stats:frag.stats;this.hls.trigger(Events.FRAG_BUFFERED,{frag,part,stats,id:frag.type});};if(buffersAppendedTo.length===0){this.warn(`Fragments must have at least one ElementaryStreamType set. type: ${frag.type} level: ${frag.level} sn: ${frag.sn}`);}this.blockBuffers(onUnblocked,buffersAppendedTo);}onFragChanged(event,data){this.trimBuffers();}// on BUFFER_EOS mark matching sourcebuffer(s) as ended and trigger checkEos()
// an undefined data.type will mark all buffers as EOS.
onBufferEos(event,data){const ended=this.getSourceBufferTypes().reduce((acc,type)=>{const sb=this.sourceBuffer[type];if(sb&&(!data.type||data.type===type)){sb.ending=true;if(!sb.ended){sb.ended=true;this.log(`${type} sourceBuffer now EOS`);}}return acc&&!!(!sb||sb.ended);},true);if(ended){this.log(`Queueing mediaSource.endOfStream()`);this.blockBuffers(()=>{this.getSourceBufferTypes().forEach(type=>{const sb=this.sourceBuffer[type];if(sb){sb.ending=false;}});const{mediaSource}=this;if(!mediaSource||mediaSource.readyState!=='open'){if(mediaSource){this.log(`Could not call mediaSource.endOfStream(). mediaSource.readyState: ${mediaSource.readyState}`);}return;}this.log(`Calling mediaSource.endOfStream()`);// Allow this to throw and be caught by the enqueueing function
mediaSource.endOfStream();});}}onLevelUpdated(event,{details}){if(!details.fragments.length){return;}this.details=details;if(this.getSourceBufferTypes().length){this.blockBuffers(this.updateMediaElementDuration.bind(this));}else {this.updateMediaElementDuration();}}trimBuffers(){const{hls,details,media}=this;if(!media||details===null){return;}const sourceBufferTypes=this.getSourceBufferTypes();if(!sourceBufferTypes.length){return;}const config=hls.config;const currentTime=media.currentTime;const targetDuration=details.levelTargetDuration;// Support for deprecated liveBackBufferLength
const backBufferLength=details.live&&config.liveBackBufferLength!==null?config.liveBackBufferLength:config.backBufferLength;if(isFiniteNumber(backBufferLength)&&backBufferLength>0){const maxBackBufferLength=Math.max(backBufferLength,targetDuration);const targetBackBufferPosition=Math.floor(currentTime/targetDuration)*targetDuration-maxBackBufferLength;this.flushBackBuffer(currentTime,targetDuration,targetBackBufferPosition);}if(isFiniteNumber(config.frontBufferFlushThreshold)&&config.frontBufferFlushThreshold>0){const frontBufferLength=Math.max(config.maxBufferLength,config.frontBufferFlushThreshold);const maxFrontBufferLength=Math.max(frontBufferLength,targetDuration);const targetFrontBufferPosition=Math.floor(currentTime/targetDuration)*targetDuration+maxFrontBufferLength;this.flushFrontBuffer(currentTime,targetDuration,targetFrontBufferPosition);}}flushBackBuffer(currentTime,targetDuration,targetBackBufferPosition){const{details,sourceBuffer}=this;const sourceBufferTypes=this.getSourceBufferTypes();sourceBufferTypes.forEach(type=>{const sb=sourceBuffer[type];if(sb){const buffered=BufferHelper.getBuffered(sb);// when target buffer start exceeds actual buffer start
if(buffered.length>0&&targetBackBufferPosition>buffered.start(0)){this.hls.trigger(Events.BACK_BUFFER_REACHED,{bufferEnd:targetBackBufferPosition});// Support for deprecated event:
if(details!=null&&details.live){this.hls.trigger(Events.LIVE_BACK_BUFFER_REACHED,{bufferEnd:targetBackBufferPosition});}else if(sb.ended&&buffered.end(buffered.length-1)-currentTime<targetDuration*2){this.log(`Cannot flush ${type} back buffer while SourceBuffer is in ended state`);return;}this.hls.trigger(Events.BUFFER_FLUSHING,{startOffset:0,endOffset:targetBackBufferPosition,type});}}});}flushFrontBuffer(currentTime,targetDuration,targetFrontBufferPosition){const{sourceBuffer}=this;const sourceBufferTypes=this.getSourceBufferTypes();sourceBufferTypes.forEach(type=>{const sb=sourceBuffer[type];if(sb){const buffered=BufferHelper.getBuffered(sb);const numBufferedRanges=buffered.length;// The buffer is either empty or contiguous
if(numBufferedRanges<2){return;}const bufferStart=buffered.start(numBufferedRanges-1);const bufferEnd=buffered.end(numBufferedRanges-1);// No flush if we can tolerate the current buffer length or the current buffer range we would flush is contiguous with current position
if(targetFrontBufferPosition>bufferStart||currentTime>=bufferStart&&currentTime<=bufferEnd){return;}else if(sb.ended&&currentTime-bufferEnd<2*targetDuration){this.log(`Cannot flush ${type} front buffer while SourceBuffer is in ended state`);return;}this.hls.trigger(Events.BUFFER_FLUSHING,{startOffset:bufferStart,endOffset:Infinity,type});}});}/**
   * Update Media Source duration to current level duration or override to Infinity if configuration parameter
   * 'liveDurationInfinity` is set to `true`
   * More details: https://github.com/video-dev/hls.js/issues/355
   */updateMediaElementDuration(){if(!this.details||!this.media||!this.mediaSource||this.mediaSource.readyState!=='open'){return;}const{details,hls,media,mediaSource}=this;const levelDuration=details.fragments[0].start+details.totalduration;const mediaDuration=media.duration;const msDuration=isFiniteNumber(mediaSource.duration)?mediaSource.duration:0;if(details.live&&hls.config.liveDurationInfinity){// Override duration to Infinity
mediaSource.duration=Infinity;this.updateSeekableRange(details);}else if(levelDuration>msDuration&&levelDuration>mediaDuration||!isFiniteNumber(mediaDuration)){// levelDuration was the last value we set.
// not using mediaSource.duration as the browser may tweak this value
// only update Media Source duration if its value increase, this is to avoid
// flushing already buffered portion when switching between quality level
this.log(`Updating Media Source duration to ${levelDuration.toFixed(3)}`);mediaSource.duration=levelDuration;}}updateSeekableRange(levelDetails){const mediaSource=this.mediaSource;const fragments=levelDetails.fragments;const len=fragments.length;if(len&&levelDetails.live&&mediaSource!=null&&mediaSource.setLiveSeekableRange){const start=Math.max(0,fragments[0].start);const end=Math.max(start,start+levelDetails.totalduration);this.log(`Media Source duration is set to ${mediaSource.duration}. Setting seekable range to ${start}-${end}.`);mediaSource.setLiveSeekableRange(start,end);}}checkPendingTracks(){const{bufferCodecEventsExpected,operationQueue,pendingTracks}=this;// Check if we've received all of the expected bufferCodec events. When none remain, create all the sourceBuffers at once.
// This is important because the MSE spec allows implementations to throw QuotaExceededErrors if creating new sourceBuffers after
// data has been appended to existing ones.
// 2 tracks is the max (one for audio, one for video). If we've reach this max go ahead and create the buffers.
const pendingTracksCount=Object.keys(pendingTracks).length;if(pendingTracksCount&&(!bufferCodecEventsExpected||pendingTracksCount===2||'audiovideo'in pendingTracks)){// ok, let's create them now !
this.createSourceBuffers(pendingTracks);this.pendingTracks={};// append any pending segments now !
const buffers=this.getSourceBufferTypes();if(buffers.length){this.hls.trigger(Events.BUFFER_CREATED,{tracks:this.tracks});buffers.forEach(type=>{operationQueue.executeNext(type);});}else {const error=new Error('could not create source buffer for media codec(s)');this.hls.trigger(Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.BUFFER_INCOMPATIBLE_CODECS_ERROR,fatal:true,error,reason:error.message});}}}createSourceBuffers(tracks){const{sourceBuffer,mediaSource}=this;if(!mediaSource){throw Error('createSourceBuffers called when mediaSource was null');}for(const trackName in tracks){if(!sourceBuffer[trackName]){var _track$levelCodec;const track=tracks[trackName];if(!track){throw Error(`source buffer exists for track ${trackName}, however track does not`);}// use levelCodec as first priority unless it contains multiple comma-separated codec values
let codec=((_track$levelCodec=track.levelCodec)==null?void 0:_track$levelCodec.indexOf(','))===-1?track.levelCodec:track.codec;if(codec){if(trackName.slice(0,5)==='audio'){codec=getCodecCompatibleName(codec,this.appendSource);}}const mimeType=`${track.container};codecs=${codec}`;this.log(`creating sourceBuffer(${mimeType})`);try{const sb=sourceBuffer[trackName]=mediaSource.addSourceBuffer(mimeType);const sbName=trackName;this.addBufferListener(sbName,'updatestart',this._onSBUpdateStart);this.addBufferListener(sbName,'updateend',this._onSBUpdateEnd);this.addBufferListener(sbName,'error',this._onSBUpdateError);// ManagedSourceBuffer bufferedchange event
if(this.appendSource){this.addBufferListener(sbName,'bufferedchange',(type,event)=>{// If media was ejected check for a change. Added ranges are redundant with changes on 'updateend' event.
const removedRanges=event.removedRanges;if(removedRanges!=null&&removedRanges.length){this.hls.trigger(Events.BUFFER_FLUSHED,{type:trackName});}});}this.tracks[trackName]={buffer:sb,codec:codec,container:track.container,levelCodec:track.levelCodec,metadata:track.metadata,id:track.id};}catch(err){this.error(`error while trying to add sourceBuffer: ${err.message}`);this.hls.trigger(Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.BUFFER_ADD_CODEC_ERROR,fatal:false,error:err,sourceBufferName:trackName,mimeType:mimeType});}}}}get mediaSrc(){var _this$media,_this$media$querySele;const media=((_this$media=this.media)==null?void 0:(_this$media$querySele=_this$media.querySelector)==null?void 0:_this$media$querySele.call(_this$media,'source'))||this.media;return media==null?void 0:media.src;}_onSBUpdateStart(type){const{operationQueue}=this;const operation=operationQueue.current(type);operation.onStart();}_onSBUpdateEnd(type){var _this$mediaSource2;if(((_this$mediaSource2=this.mediaSource)==null?void 0:_this$mediaSource2.readyState)==='closed'){this.resetBuffer(type);return;}const{operationQueue}=this;const operation=operationQueue.current(type);operation.onComplete();operationQueue.shiftAndExecuteNext(type);}_onSBUpdateError(type,event){var _this$mediaSource3;const error=new Error(`${type} SourceBuffer error. MediaSource readyState: ${(_this$mediaSource3=this.mediaSource)==null?void 0:_this$mediaSource3.readyState}`);this.error(`${error}`,event);// according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error
// SourceBuffer errors are not necessarily fatal; if so, the HTMLMediaElement will fire an error event
this.hls.trigger(Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.BUFFER_APPENDING_ERROR,sourceBufferName:type,error,fatal:false});// updateend is always fired after error, so we'll allow that to shift the current operation off of the queue
const operation=this.operationQueue.current(type);if(operation){operation.onError(error);}}// This method must result in an updateend event; if remove is not called, _onSBUpdateEnd must be called manually
removeExecutor(type,startOffset,endOffset){const{media,mediaSource,operationQueue,sourceBuffer}=this;const sb=sourceBuffer[type];if(!media||!mediaSource||!sb){this.warn(`Attempting to remove from the ${type} SourceBuffer, but it does not exist`);operationQueue.shiftAndExecuteNext(type);return;}const mediaDuration=isFiniteNumber(media.duration)?media.duration:Infinity;const msDuration=isFiniteNumber(mediaSource.duration)?mediaSource.duration:Infinity;const removeStart=Math.max(0,startOffset);const removeEnd=Math.min(endOffset,mediaDuration,msDuration);if(removeEnd>removeStart&&(!sb.ending||sb.ended)){sb.ended=false;this.log(`Removing [${removeStart},${removeEnd}] from the ${type} SourceBuffer`);sb.remove(removeStart,removeEnd);}else {// Cycle the queue
operationQueue.shiftAndExecuteNext(type);}}// This method must result in an updateend event; if append is not called, _onSBUpdateEnd must be called manually
appendExecutor(data,type){const sb=this.sourceBuffer[type];if(!sb){if(!this.pendingTracks[type]){throw new Error(`Attempting to append to the ${type} SourceBuffer, but it does not exist`);}return;}sb.ended=false;sb.appendBuffer(data);}// Enqueues an operation to each SourceBuffer queue which, upon execution, resolves a promise. When all promises
// resolve, the onUnblocked function is executed. Functions calling this method do not need to unblock the queue
// upon completion, since we already do it here
blockBuffers(onUnblocked,buffers=this.getSourceBufferTypes()){if(!buffers.length){this.log('Blocking operation requested, but no SourceBuffers exist');Promise.resolve().then(onUnblocked);return;}const{operationQueue}=this;// logger.debug(`[buffer-controller]: Blocking ${buffers} SourceBuffer`);
const blockingOperations=buffers.map(type=>operationQueue.appendBlocker(type));Promise.all(blockingOperations).then(()=>{// logger.debug(`[buffer-controller]: Blocking operation resolved; unblocking ${buffers} SourceBuffer`);
onUnblocked();buffers.forEach(type=>{const sb=this.sourceBuffer[type];// Only cycle the queue if the SB is not updating. There's a bug in Chrome which sets the SB updating flag to
// true when changing the MediaSource duration (https://bugs.chromium.org/p/chromium/issues/detail?id=959359&can=2&q=mediasource%20duration)
// While this is a workaround, it's probably useful to have around
if(!(sb!=null&&sb.updating)){operationQueue.shiftAndExecuteNext(type);}});});}getSourceBufferTypes(){return Object.keys(this.sourceBuffer);}addBufferListener(type,event,fn){const buffer=this.sourceBuffer[type];if(!buffer){return;}const listener=fn.bind(this,type);this.listeners[type].push({event,listener});buffer.addEventListener(event,listener);}removeBufferListeners(type){const buffer=this.sourceBuffer[type];if(!buffer){return;}this.listeners[type].forEach(l=>{buffer.removeEventListener(l.event,l.listener);});}}function removeSourceChildren(node){const sourceChildren=node.querySelectorAll('source');[].slice.call(sourceChildren).forEach(source=>{node.removeChild(source);});}function addSource(media,url){const source=self.document.createElement('source');source.type='video/mp4';source.src=url;media.appendChild(source);}/**
 *
 * This code was ported from the dash.js project at:
 *   https://github.com/Dash-Industry-Forum/dash.js/blob/development/externals/cea608-parser.js
 *   https://github.com/Dash-Industry-Forum/dash.js/commit/8269b26a761e0853bb21d78780ed945144ecdd4d#diff-71bc295a2d6b6b7093a1d3290d53a4b2
 *
 * The original copyright appears below:
 *
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2015-2016, DASH Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  1. Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  2. Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *//**
 *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes
 */const specialCea608CharsCodes={0x2a:0xe1,// lowercase a, acute accent
0x5c:0xe9,// lowercase e, acute accent
0x5e:0xed,// lowercase i, acute accent
0x5f:0xf3,// lowercase o, acute accent
0x60:0xfa,// lowercase u, acute accent
0x7b:0xe7,// lowercase c with cedilla
0x7c:0xf7,// division symbol
0x7d:0xd1,// uppercase N tilde
0x7e:0xf1,// lowercase n tilde
0x7f:0x2588,// Full block
// THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
// THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F
// THIS MEANS THAT \x50 MUST BE ADDED TO THE VALUES
0x80:0xae,// Registered symbol (R)
0x81:0xb0,// degree sign
0x82:0xbd,// 1/2 symbol
0x83:0xbf,// Inverted (open) question mark
0x84:0x2122,// Trademark symbol (TM)
0x85:0xa2,// Cents symbol
0x86:0xa3,// Pounds sterling
0x87:0x266a,// Music 8'th note
0x88:0xe0,// lowercase a, grave accent
0x89:0x20,// transparent space (regular)
0x8a:0xe8,// lowercase e, grave accent
0x8b:0xe2,// lowercase a, circumflex accent
0x8c:0xea,// lowercase e, circumflex accent
0x8d:0xee,// lowercase i, circumflex accent
0x8e:0xf4,// lowercase o, circumflex accent
0x8f:0xfb,// lowercase u, circumflex accent
// THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
// THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F
0x90:0xc1,// capital letter A with acute
0x91:0xc9,// capital letter E with acute
0x92:0xd3,// capital letter O with acute
0x93:0xda,// capital letter U with acute
0x94:0xdc,// capital letter U with diaresis
0x95:0xfc,// lowercase letter U with diaeresis
0x96:0x2018,// opening single quote
0x97:0xa1,// inverted exclamation mark
0x98:0x2a,// asterisk
0x99:0x2019,// closing single quote
0x9a:0x2501,// box drawings heavy horizontal
0x9b:0xa9,// copyright sign
0x9c:0x2120,// Service mark
0x9d:0x2022,// (round) bullet
0x9e:0x201c,// Left double quotation mark
0x9f:0x201d,// Right double quotation mark
0xa0:0xc0,// uppercase A, grave accent
0xa1:0xc2,// uppercase A, circumflex
0xa2:0xc7,// uppercase C with cedilla
0xa3:0xc8,// uppercase E, grave accent
0xa4:0xca,// uppercase E, circumflex
0xa5:0xcb,// capital letter E with diaresis
0xa6:0xeb,// lowercase letter e with diaresis
0xa7:0xce,// uppercase I, circumflex
0xa8:0xcf,// uppercase I, with diaresis
0xa9:0xef,// lowercase i, with diaresis
0xaa:0xd4,// uppercase O, circumflex
0xab:0xd9,// uppercase U, grave accent
0xac:0xf9,// lowercase u, grave accent
0xad:0xdb,// uppercase U, circumflex
0xae:0xab,// left-pointing double angle quotation mark
0xaf:0xbb,// right-pointing double angle quotation mark
// THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
// THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F
0xb0:0xc3,// Uppercase A, tilde
0xb1:0xe3,// Lowercase a, tilde
0xb2:0xcd,// Uppercase I, acute accent
0xb3:0xcc,// Uppercase I, grave accent
0xb4:0xec,// Lowercase i, grave accent
0xb5:0xd2,// Uppercase O, grave accent
0xb6:0xf2,// Lowercase o, grave accent
0xb7:0xd5,// Uppercase O, tilde
0xb8:0xf5,// Lowercase o, tilde
0xb9:0x7b,// Open curly brace
0xba:0x7d,// Closing curly brace
0xbb:0x5c,// Backslash
0xbc:0x5e,// Caret
0xbd:0x5f,// Underscore
0xbe:0x7c,// Pipe (vertical line)
0xbf:0x223c,// Tilde operator
0xc0:0xc4,// Uppercase A, umlaut
0xc1:0xe4,// Lowercase A, umlaut
0xc2:0xd6,// Uppercase O, umlaut
0xc3:0xf6,// Lowercase o, umlaut
0xc4:0xdf,// Esszett (sharp S)
0xc5:0xa5,// Yen symbol
0xc6:0xa4,// Generic currency sign
0xc7:0x2503,// Box drawings heavy vertical
0xc8:0xc5,// Uppercase A, ring
0xc9:0xe5,// Lowercase A, ring
0xca:0xd8,// Uppercase O, stroke
0xcb:0xf8,// Lowercase o, strok
0xcc:0x250f,// Box drawings heavy down and right
0xcd:0x2513,// Box drawings heavy down and left
0xce:0x2517,// Box drawings heavy up and right
0xcf:0x251b// Box drawings heavy up and left
};/**
 * Utils
 */const getCharForByte=byte=>String.fromCharCode(specialCea608CharsCodes[byte]||byte);const NR_ROWS=15;const NR_COLS=100;// Tables to look up row from PAC data
const rowsLowCh1={0x11:1,0x12:3,0x15:5,0x16:7,0x17:9,0x10:11,0x13:12,0x14:14};const rowsHighCh1={0x11:2,0x12:4,0x15:6,0x16:8,0x17:10,0x13:13,0x14:15};const rowsLowCh2={0x19:1,0x1a:3,0x1d:5,0x1e:7,0x1f:9,0x18:11,0x1b:12,0x1c:14};const rowsHighCh2={0x19:2,0x1a:4,0x1d:6,0x1e:8,0x1f:10,0x1b:13,0x1c:15};const backgroundColors=['white','green','blue','cyan','red','yellow','magenta','black','transparent'];class CaptionsLogger{constructor(){this.time=null;this.verboseLevel=0;}log(severity,msg){if(this.verboseLevel>=severity){const m=typeof msg==='function'?msg():msg;logger$2.log(`${this.time} [${severity}] ${m}`);}}}const numArrayToHexArray=function numArrayToHexArray(numArray){const hexArray=[];for(let j=0;j<numArray.length;j++){hexArray.push(numArray[j].toString(16));}return hexArray;};class PenState{constructor(){this.foreground='white';this.underline=false;this.italics=false;this.background='black';this.flash=false;}reset(){this.foreground='white';this.underline=false;this.italics=false;this.background='black';this.flash=false;}setStyles(styles){const attribs=['foreground','underline','italics','background','flash'];for(let i=0;i<attribs.length;i++){const style=attribs[i];if(styles.hasOwnProperty(style)){this[style]=styles[style];}}}isDefault(){return this.foreground==='white'&&!this.underline&&!this.italics&&this.background==='black'&&!this.flash;}equals(other){return this.foreground===other.foreground&&this.underline===other.underline&&this.italics===other.italics&&this.background===other.background&&this.flash===other.flash;}copy(newPenState){this.foreground=newPenState.foreground;this.underline=newPenState.underline;this.italics=newPenState.italics;this.background=newPenState.background;this.flash=newPenState.flash;}toString(){return 'color='+this.foreground+', underline='+this.underline+', italics='+this.italics+', background='+this.background+', flash='+this.flash;}}/**
 * Unicode character with styling and background.
 * @constructor
 */class StyledUnicodeChar{constructor(){this.uchar=' ';this.penState=new PenState();}reset(){this.uchar=' ';this.penState.reset();}setChar(uchar,newPenState){this.uchar=uchar;this.penState.copy(newPenState);}setPenState(newPenState){this.penState.copy(newPenState);}equals(other){return this.uchar===other.uchar&&this.penState.equals(other.penState);}copy(newChar){this.uchar=newChar.uchar;this.penState.copy(newChar.penState);}isEmpty(){return this.uchar===' '&&this.penState.isDefault();}}/**
 * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.
 * @constructor
 */class Row{constructor(logger){this.chars=[];this.pos=0;this.currPenState=new PenState();this.cueStartTime=null;this.logger=void 0;for(let i=0;i<NR_COLS;i++){this.chars.push(new StyledUnicodeChar());}this.logger=logger;}equals(other){for(let i=0;i<NR_COLS;i++){if(!this.chars[i].equals(other.chars[i])){return false;}}return true;}copy(other){for(let i=0;i<NR_COLS;i++){this.chars[i].copy(other.chars[i]);}}isEmpty(){let empty=true;for(let i=0;i<NR_COLS;i++){if(!this.chars[i].isEmpty()){empty=false;break;}}return empty;}/**
   *  Set the cursor to a valid column.
   */setCursor(absPos){if(this.pos!==absPos){this.pos=absPos;}if(this.pos<0){this.logger.log(3,'Negative cursor position '+this.pos);this.pos=0;}else if(this.pos>NR_COLS){this.logger.log(3,'Too large cursor position '+this.pos);this.pos=NR_COLS;}}/**
   * Move the cursor relative to current position.
   */moveCursor(relPos){const newPos=this.pos+relPos;if(relPos>1){for(let i=this.pos+1;i<newPos+1;i++){this.chars[i].setPenState(this.currPenState);}}this.setCursor(newPos);}/**
   * Backspace, move one step back and clear character.
   */backSpace(){this.moveCursor(-1);this.chars[this.pos].setChar(' ',this.currPenState);}insertChar(byte){if(byte>=0x90){// Extended char
this.backSpace();}const char=getCharForByte(byte);if(this.pos>=NR_COLS){this.logger.log(0,()=>'Cannot insert '+byte.toString(16)+' ('+char+') at position '+this.pos+'. Skipping it!');return;}this.chars[this.pos].setChar(char,this.currPenState);this.moveCursor(1);}clearFromPos(startPos){let i;for(i=startPos;i<NR_COLS;i++){this.chars[i].reset();}}clear(){this.clearFromPos(0);this.pos=0;this.currPenState.reset();}clearToEndOfRow(){this.clearFromPos(this.pos);}getTextString(){const chars=[];let empty=true;for(let i=0;i<NR_COLS;i++){const char=this.chars[i].uchar;if(char!==' '){empty=false;}chars.push(char);}if(empty){return '';}else {return chars.join('');}}setPenStyles(styles){this.currPenState.setStyles(styles);const currChar=this.chars[this.pos];currChar.setPenState(this.currPenState);}}/**
 * Keep a CEA-608 screen of 32x15 styled characters
 * @constructor
 */class CaptionScreen{constructor(logger){this.rows=[];this.currRow=NR_ROWS-1;this.nrRollUpRows=null;this.lastOutputScreen=null;this.logger=void 0;for(let i=0;i<NR_ROWS;i++){this.rows.push(new Row(logger));}this.logger=logger;}reset(){for(let i=0;i<NR_ROWS;i++){this.rows[i].clear();}this.currRow=NR_ROWS-1;}equals(other){let equal=true;for(let i=0;i<NR_ROWS;i++){if(!this.rows[i].equals(other.rows[i])){equal=false;break;}}return equal;}copy(other){for(let i=0;i<NR_ROWS;i++){this.rows[i].copy(other.rows[i]);}}isEmpty(){let empty=true;for(let i=0;i<NR_ROWS;i++){if(!this.rows[i].isEmpty()){empty=false;break;}}return empty;}backSpace(){const row=this.rows[this.currRow];row.backSpace();}clearToEndOfRow(){const row=this.rows[this.currRow];row.clearToEndOfRow();}/**
   * Insert a character (without styling) in the current row.
   */insertChar(char){const row=this.rows[this.currRow];row.insertChar(char);}setPen(styles){const row=this.rows[this.currRow];row.setPenStyles(styles);}moveCursor(relPos){const row=this.rows[this.currRow];row.moveCursor(relPos);}setCursor(absPos){this.logger.log(2,'setCursor: '+absPos);const row=this.rows[this.currRow];row.setCursor(absPos);}setPAC(pacData){this.logger.log(2,()=>'pacData = '+JSON.stringify(pacData));let newRow=pacData.row-1;if(this.nrRollUpRows&&newRow<this.nrRollUpRows-1){newRow=this.nrRollUpRows-1;}// Make sure this only affects Roll-up Captions by checking this.nrRollUpRows
if(this.nrRollUpRows&&this.currRow!==newRow){// clear all rows first
for(let i=0;i<NR_ROWS;i++){this.rows[i].clear();}// Copy this.nrRollUpRows rows from lastOutputScreen and place it in the newRow location
// topRowIndex - the start of rows to copy (inclusive index)
const topRowIndex=this.currRow+1-this.nrRollUpRows;// We only copy if the last position was already shown.
// We use the cueStartTime value to check this.
const lastOutputScreen=this.lastOutputScreen;if(lastOutputScreen){const prevLineTime=lastOutputScreen.rows[topRowIndex].cueStartTime;const time=this.logger.time;if(prevLineTime!==null&&time!==null&&prevLineTime<time){for(let i=0;i<this.nrRollUpRows;i++){this.rows[newRow-this.nrRollUpRows+i+1].copy(lastOutputScreen.rows[topRowIndex+i]);}}}}this.currRow=newRow;const row=this.rows[this.currRow];if(pacData.indent!==null){const indent=pacData.indent;const prevPos=Math.max(indent-1,0);row.setCursor(pacData.indent);pacData.color=row.chars[prevPos].penState.foreground;}const styles={foreground:pacData.color,underline:pacData.underline,italics:pacData.italics,background:'black',flash:false};this.setPen(styles);}/**
   * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).
   */setBkgData(bkgData){this.logger.log(2,()=>'bkgData = '+JSON.stringify(bkgData));this.backSpace();this.setPen(bkgData);this.insertChar(0x20);// Space
}setRollUpRows(nrRows){this.nrRollUpRows=nrRows;}rollUp(){if(this.nrRollUpRows===null){this.logger.log(3,'roll_up but nrRollUpRows not set yet');return;// Not properly setup
}this.logger.log(1,()=>this.getDisplayText());const topRowIndex=this.currRow+1-this.nrRollUpRows;const topRow=this.rows.splice(topRowIndex,1)[0];topRow.clear();this.rows.splice(this.currRow,0,topRow);this.logger.log(2,'Rolling up');// this.logger.log(VerboseLevel.TEXT, this.get_display_text())
}/**
   * Get all non-empty rows with as unicode text.
   */getDisplayText(asOneRow){asOneRow=asOneRow||false;const displayText=[];let text='';let rowNr=-1;for(let i=0;i<NR_ROWS;i++){const rowText=this.rows[i].getTextString();if(rowText){rowNr=i+1;if(asOneRow){displayText.push('Row '+rowNr+": '"+rowText+"'");}else {displayText.push(rowText.trim());}}}if(displayText.length>0){if(asOneRow){text='['+displayText.join(' | ')+']';}else {text=displayText.join('\n');}}return text;}getTextAndFormat(){return this.rows;}}// var modes = ['MODE_ROLL-UP', 'MODE_POP-ON', 'MODE_PAINT-ON', 'MODE_TEXT'];
class Cea608Channel{constructor(channelNumber,outputFilter,logger){this.chNr=void 0;this.outputFilter=void 0;this.mode=void 0;this.verbose=void 0;this.displayedMemory=void 0;this.nonDisplayedMemory=void 0;this.lastOutputScreen=void 0;this.currRollUpRow=void 0;this.writeScreen=void 0;this.cueStartTime=void 0;this.logger=void 0;this.chNr=channelNumber;this.outputFilter=outputFilter;this.mode=null;this.verbose=0;this.displayedMemory=new CaptionScreen(logger);this.nonDisplayedMemory=new CaptionScreen(logger);this.lastOutputScreen=new CaptionScreen(logger);this.currRollUpRow=this.displayedMemory.rows[NR_ROWS-1];this.writeScreen=this.displayedMemory;this.mode=null;this.cueStartTime=null;// Keeps track of where a cue started.
this.logger=logger;}reset(){this.mode=null;this.displayedMemory.reset();this.nonDisplayedMemory.reset();this.lastOutputScreen.reset();this.outputFilter.reset();this.currRollUpRow=this.displayedMemory.rows[NR_ROWS-1];this.writeScreen=this.displayedMemory;this.mode=null;this.cueStartTime=null;}getHandler(){return this.outputFilter;}setHandler(newHandler){this.outputFilter=newHandler;}setPAC(pacData){this.writeScreen.setPAC(pacData);}setBkgData(bkgData){this.writeScreen.setBkgData(bkgData);}setMode(newMode){if(newMode===this.mode){return;}this.mode=newMode;this.logger.log(2,()=>'MODE='+newMode);if(this.mode==='MODE_POP-ON'){this.writeScreen=this.nonDisplayedMemory;}else {this.writeScreen=this.displayedMemory;this.writeScreen.reset();}if(this.mode!=='MODE_ROLL-UP'){this.displayedMemory.nrRollUpRows=null;this.nonDisplayedMemory.nrRollUpRows=null;}this.mode=newMode;}insertChars(chars){for(let i=0;i<chars.length;i++){this.writeScreen.insertChar(chars[i]);}const screen=this.writeScreen===this.displayedMemory?'DISP':'NON_DISP';this.logger.log(2,()=>screen+': '+this.writeScreen.getDisplayText(true));if(this.mode==='MODE_PAINT-ON'||this.mode==='MODE_ROLL-UP'){this.logger.log(1,()=>'DISPLAYED: '+this.displayedMemory.getDisplayText(true));this.outputDataUpdate();}}ccRCL(){// Resume Caption Loading (switch mode to Pop On)
this.logger.log(2,'RCL - Resume Caption Loading');this.setMode('MODE_POP-ON');}ccBS(){// BackSpace
this.logger.log(2,'BS - BackSpace');if(this.mode==='MODE_TEXT'){return;}this.writeScreen.backSpace();if(this.writeScreen===this.displayedMemory){this.outputDataUpdate();}}ccAOF(){// Reserved (formerly Alarm Off)
}ccAON(){// Reserved (formerly Alarm On)
}ccDER(){// Delete to End of Row
this.logger.log(2,'DER- Delete to End of Row');this.writeScreen.clearToEndOfRow();this.outputDataUpdate();}ccRU(nrRows){// Roll-Up Captions-2,3,or 4 Rows
this.logger.log(2,'RU('+nrRows+') - Roll Up');this.writeScreen=this.displayedMemory;this.setMode('MODE_ROLL-UP');this.writeScreen.setRollUpRows(nrRows);}ccFON(){// Flash On
this.logger.log(2,'FON - Flash On');this.writeScreen.setPen({flash:true});}ccRDC(){// Resume Direct Captioning (switch mode to PaintOn)
this.logger.log(2,'RDC - Resume Direct Captioning');this.setMode('MODE_PAINT-ON');}ccTR(){// Text Restart in text mode (not supported, however)
this.logger.log(2,'TR');this.setMode('MODE_TEXT');}ccRTD(){// Resume Text Display in Text mode (not supported, however)
this.logger.log(2,'RTD');this.setMode('MODE_TEXT');}ccEDM(){// Erase Displayed Memory
this.logger.log(2,'EDM - Erase Displayed Memory');this.displayedMemory.reset();this.outputDataUpdate(true);}ccCR(){// Carriage Return
this.logger.log(2,'CR - Carriage Return');this.writeScreen.rollUp();this.outputDataUpdate(true);}ccENM(){// Erase Non-Displayed Memory
this.logger.log(2,'ENM - Erase Non-displayed Memory');this.nonDisplayedMemory.reset();}ccEOC(){// End of Caption (Flip Memories)
this.logger.log(2,'EOC - End Of Caption');if(this.mode==='MODE_POP-ON'){const tmp=this.displayedMemory;this.displayedMemory=this.nonDisplayedMemory;this.nonDisplayedMemory=tmp;this.writeScreen=this.nonDisplayedMemory;this.logger.log(1,()=>'DISP: '+this.displayedMemory.getDisplayText());}this.outputDataUpdate(true);}ccTO(nrCols){// Tab Offset 1,2, or 3 columns
this.logger.log(2,'TO('+nrCols+') - Tab Offset');this.writeScreen.moveCursor(nrCols);}ccMIDROW(secondByte){// Parse MIDROW command
const styles={flash:false};styles.underline=secondByte%2===1;styles.italics=secondByte>=0x2e;if(!styles.italics){const colorIndex=Math.floor(secondByte/2)-0x10;const colors=['white','green','blue','cyan','red','yellow','magenta'];styles.foreground=colors[colorIndex];}else {styles.foreground='white';}this.logger.log(2,'MIDROW: '+JSON.stringify(styles));this.writeScreen.setPen(styles);}outputDataUpdate(dispatch=false){const time=this.logger.time;if(time===null){return;}if(this.outputFilter){if(this.cueStartTime===null&&!this.displayedMemory.isEmpty()){// Start of a new cue
this.cueStartTime=time;}else {if(!this.displayedMemory.equals(this.lastOutputScreen)){this.outputFilter.newCue(this.cueStartTime,time,this.lastOutputScreen);if(dispatch&&this.outputFilter.dispatchCue){this.outputFilter.dispatchCue();}this.cueStartTime=this.displayedMemory.isEmpty()?null:time;}}this.lastOutputScreen.copy(this.displayedMemory);}}cueSplitAtTime(t){if(this.outputFilter){if(!this.displayedMemory.isEmpty()){if(this.outputFilter.newCue){this.outputFilter.newCue(this.cueStartTime,t,this.displayedMemory);}this.cueStartTime=t;}}}}// Will be 1 or 2 when parsing captions
class Cea608Parser{constructor(field,out1,out2){this.channels=void 0;this.currentChannel=0;this.cmdHistory=createCmdHistory();this.logger=void 0;const logger=this.logger=new CaptionsLogger();this.channels=[null,new Cea608Channel(field,out1,logger),new Cea608Channel(field+1,out2,logger)];}getHandler(channel){return this.channels[channel].getHandler();}setHandler(channel,newHandler){this.channels[channel].setHandler(newHandler);}/**
   * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.
   */addData(time,byteList){this.logger.time=time;for(let i=0;i<byteList.length;i+=2){const a=byteList[i]&0x7f;const b=byteList[i+1]&0x7f;let cmdFound=false;let charsFound=null;if(a===0&&b===0){continue;}else {this.logger.log(3,()=>'['+numArrayToHexArray([byteList[i],byteList[i+1]])+'] -> ('+numArrayToHexArray([a,b])+')');}const cmdHistory=this.cmdHistory;const isControlCode=a>=0x10&&a<=0x1f;if(isControlCode){// Skip redundant control codes
if(hasCmdRepeated(a,b,cmdHistory)){setLastCmd(null,null,cmdHistory);this.logger.log(3,()=>'Repeated command ('+numArrayToHexArray([a,b])+') is dropped');continue;}setLastCmd(a,b,this.cmdHistory);cmdFound=this.parseCmd(a,b);if(!cmdFound){cmdFound=this.parseMidrow(a,b);}if(!cmdFound){cmdFound=this.parsePAC(a,b);}if(!cmdFound){cmdFound=this.parseBackgroundAttributes(a,b);}}else {setLastCmd(null,null,cmdHistory);}if(!cmdFound){charsFound=this.parseChars(a,b);if(charsFound){const currChNr=this.currentChannel;if(currChNr&&currChNr>0){const channel=this.channels[currChNr];channel.insertChars(charsFound);}else {this.logger.log(2,'No channel found yet. TEXT-MODE?');}}}if(!cmdFound&&!charsFound){this.logger.log(2,()=>"Couldn't parse cleaned data "+numArrayToHexArray([a,b])+' orig: '+numArrayToHexArray([byteList[i],byteList[i+1]]));}}}/**
   * Parse Command.
   * @returns True if a command was found
   */parseCmd(a,b){const cond1=(a===0x14||a===0x1c||a===0x15||a===0x1d)&&b>=0x20&&b<=0x2f;const cond2=(a===0x17||a===0x1f)&&b>=0x21&&b<=0x23;if(!(cond1||cond2)){return false;}const chNr=a===0x14||a===0x15||a===0x17?1:2;const channel=this.channels[chNr];if(a===0x14||a===0x15||a===0x1c||a===0x1d){if(b===0x20){channel.ccRCL();}else if(b===0x21){channel.ccBS();}else if(b===0x22){channel.ccAOF();}else if(b===0x23){channel.ccAON();}else if(b===0x24){channel.ccDER();}else if(b===0x25){channel.ccRU(2);}else if(b===0x26){channel.ccRU(3);}else if(b===0x27){channel.ccRU(4);}else if(b===0x28){channel.ccFON();}else if(b===0x29){channel.ccRDC();}else if(b===0x2a){channel.ccTR();}else if(b===0x2b){channel.ccRTD();}else if(b===0x2c){channel.ccEDM();}else if(b===0x2d){channel.ccCR();}else if(b===0x2e){channel.ccENM();}else if(b===0x2f){channel.ccEOC();}}else {// a == 0x17 || a == 0x1F
channel.ccTO(b-0x20);}this.currentChannel=chNr;return true;}/**
   * Parse midrow styling command
   */parseMidrow(a,b){let chNr=0;if((a===0x11||a===0x19)&&b>=0x20&&b<=0x2f){if(a===0x11){chNr=1;}else {chNr=2;}if(chNr!==this.currentChannel){this.logger.log(0,'Mismatch channel in midrow parsing');return false;}const channel=this.channels[chNr];if(!channel){return false;}channel.ccMIDROW(b);this.logger.log(3,()=>'MIDROW ('+numArrayToHexArray([a,b])+')');return true;}return false;}/**
   * Parse Preable Access Codes (Table 53).
   * @returns {Boolean} Tells if PAC found
   */parsePAC(a,b){let row;const case1=(a>=0x11&&a<=0x17||a>=0x19&&a<=0x1f)&&b>=0x40&&b<=0x7f;const case2=(a===0x10||a===0x18)&&b>=0x40&&b<=0x5f;if(!(case1||case2)){return false;}const chNr=a<=0x17?1:2;if(b>=0x40&&b<=0x5f){row=chNr===1?rowsLowCh1[a]:rowsLowCh2[a];}else {// 0x60 <= b <= 0x7F
row=chNr===1?rowsHighCh1[a]:rowsHighCh2[a];}const channel=this.channels[chNr];if(!channel){return false;}channel.setPAC(this.interpretPAC(row,b));this.currentChannel=chNr;return true;}/**
   * Interpret the second byte of the pac, and return the information.
   * @returns pacData with style parameters
   */interpretPAC(row,byte){let pacIndex;const pacData={color:null,italics:false,indent:null,underline:false,row:row};if(byte>0x5f){pacIndex=byte-0x60;}else {pacIndex=byte-0x40;}pacData.underline=(pacIndex&1)===1;if(pacIndex<=0xd){pacData.color=['white','green','blue','cyan','red','yellow','magenta','white'][Math.floor(pacIndex/2)];}else if(pacIndex<=0xf){pacData.italics=true;pacData.color='white';}else {pacData.indent=Math.floor((pacIndex-0x10)/2)*4;}return pacData;// Note that row has zero offset. The spec uses 1.
}/**
   * Parse characters.
   * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.
   */parseChars(a,b){let channelNr;let charCodes=null;let charCode1=null;if(a>=0x19){channelNr=2;charCode1=a-8;}else {channelNr=1;charCode1=a;}if(charCode1>=0x11&&charCode1<=0x13){// Special character
let oneCode;if(charCode1===0x11){oneCode=b+0x50;}else if(charCode1===0x12){oneCode=b+0x70;}else {oneCode=b+0x90;}this.logger.log(2,()=>"Special char '"+getCharForByte(oneCode)+"' in channel "+channelNr);charCodes=[oneCode];}else if(a>=0x20&&a<=0x7f){charCodes=b===0?[a]:[a,b];}if(charCodes){this.logger.log(3,()=>'Char codes =  '+numArrayToHexArray(charCodes).join(','));}return charCodes;}/**
   * Parse extended background attributes as well as new foreground color black.
   * @returns True if background attributes are found
   */parseBackgroundAttributes(a,b){const case1=(a===0x10||a===0x18)&&b>=0x20&&b<=0x2f;const case2=(a===0x17||a===0x1f)&&b>=0x2d&&b<=0x2f;if(!(case1||case2)){return false;}let index;const bkgData={};if(a===0x10||a===0x18){index=Math.floor((b-0x20)/2);bkgData.background=backgroundColors[index];if(b%2===1){bkgData.background=bkgData.background+'_semi';}}else if(b===0x2d){bkgData.background='transparent';}else {bkgData.foreground='black';if(b===0x2f){bkgData.underline=true;}}const chNr=a<=0x17?1:2;const channel=this.channels[chNr];channel.setBkgData(bkgData);return true;}/**
   * Reset state of parser and its channels.
   */reset(){for(let i=0;i<Object.keys(this.channels).length;i++){const channel=this.channels[i];if(channel){channel.reset();}}setLastCmd(null,null,this.cmdHistory);}/**
   * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.
   */cueSplitAtTime(t){for(let i=0;i<this.channels.length;i++){const channel=this.channels[i];if(channel){channel.cueSplitAtTime(t);}}}}function setLastCmd(a,b,cmdHistory){cmdHistory.a=a;cmdHistory.b=b;}function hasCmdRepeated(a,b,cmdHistory){return cmdHistory.a===a&&cmdHistory.b===b;}function createCmdHistory(){return {a:null,b:null};}class OutputFilter{constructor(timelineController,trackName){this.timelineController=void 0;this.cueRanges=[];this.trackName=void 0;this.startTime=null;this.endTime=null;this.screen=null;this.timelineController=timelineController;this.trackName=trackName;}dispatchCue(){if(this.startTime===null){return;}this.timelineController.addCues(this.trackName,this.startTime,this.endTime,this.screen,this.cueRanges);this.startTime=null;}newCue(startTime,endTime,screen){if(this.startTime===null||this.startTime>startTime){this.startTime=startTime;}this.endTime=endTime;this.screen=screen;this.timelineController.createCaptionsTrack(this.trackName);}reset(){this.cueRanges=[];this.startTime=null;}}/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var VTTCue=function(){if(optionalSelf!=null&&optionalSelf.VTTCue){return self.VTTCue;}const AllowedDirections=['','lr','rl'];const AllowedAlignments=['start','middle','end','left','right'];function isAllowedValue(allowed,value){if(typeof value!=='string'){return false;}// necessary for assuring the generic conforms to the Array interface
if(!Array.isArray(allowed)){return false;}// reset the type so that the next narrowing works well
const lcValue=value.toLowerCase();// use the allow list to narrow the type to a specific subset of strings
if(~allowed.indexOf(lcValue)){return lcValue;}return false;}function findDirectionSetting(value){return isAllowedValue(AllowedDirections,value);}function findAlignSetting(value){return isAllowedValue(AllowedAlignments,value);}function extend(obj,...rest){let i=1;for(;i<arguments.length;i++){const cobj=arguments[i];for(const p in cobj){obj[p]=cobj[p];}}return obj;}function VTTCue(startTime,endTime,text){const cue=this;const baseObj={enumerable:true};/**
     * Shim implementation specific properties. These properties are not in
     * the spec.
     */// Lets us know when the VTTCue's data has changed in such a way that we need
// to recompute its display state. This lets us compute its display state
// lazily.
cue.hasBeenReset=false;/**
     * VTTCue and TextTrackCue properties
     * http://dev.w3.org/html5/webvtt/#vttcue-interface
     */let _id='';let _pauseOnExit=false;let _startTime=startTime;let _endTime=endTime;let _text=text;let _region=null;let _vertical='';let _snapToLines=true;let _line='auto';let _lineAlign='start';let _position=50;let _positionAlign='middle';let _size=50;let _align='middle';Object.defineProperty(cue,'id',extend({},baseObj,{get:function(){return _id;},set:function(value){_id=''+value;}}));Object.defineProperty(cue,'pauseOnExit',extend({},baseObj,{get:function(){return _pauseOnExit;},set:function(value){_pauseOnExit=!!value;}}));Object.defineProperty(cue,'startTime',extend({},baseObj,{get:function(){return _startTime;},set:function(value){if(typeof value!=='number'){throw new TypeError('Start time must be set to a number.');}_startTime=value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'endTime',extend({},baseObj,{get:function(){return _endTime;},set:function(value){if(typeof value!=='number'){throw new TypeError('End time must be set to a number.');}_endTime=value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'text',extend({},baseObj,{get:function(){return _text;},set:function(value){_text=''+value;this.hasBeenReset=true;}}));// todo: implement VTTRegion polyfill?
Object.defineProperty(cue,'region',extend({},baseObj,{get:function(){return _region;},set:function(value){_region=value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'vertical',extend({},baseObj,{get:function(){return _vertical;},set:function(value){const setting=findDirectionSetting(value);// Have to check for false because the setting an be an empty string.
if(setting===false){throw new SyntaxError('An invalid or illegal string was specified.');}_vertical=setting;this.hasBeenReset=true;}}));Object.defineProperty(cue,'snapToLines',extend({},baseObj,{get:function(){return _snapToLines;},set:function(value){_snapToLines=!!value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'line',extend({},baseObj,{get:function(){return _line;},set:function(value){if(typeof value!=='number'&&value!=='auto'){throw new SyntaxError('An invalid number or illegal string was specified.');}_line=value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'lineAlign',extend({},baseObj,{get:function(){return _lineAlign;},set:function(value){const setting=findAlignSetting(value);if(!setting){throw new SyntaxError('An invalid or illegal string was specified.');}_lineAlign=setting;this.hasBeenReset=true;}}));Object.defineProperty(cue,'position',extend({},baseObj,{get:function(){return _position;},set:function(value){if(value<0||value>100){throw new Error('Position must be between 0 and 100.');}_position=value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'positionAlign',extend({},baseObj,{get:function(){return _positionAlign;},set:function(value){const setting=findAlignSetting(value);if(!setting){throw new SyntaxError('An invalid or illegal string was specified.');}_positionAlign=setting;this.hasBeenReset=true;}}));Object.defineProperty(cue,'size',extend({},baseObj,{get:function(){return _size;},set:function(value){if(value<0||value>100){throw new Error('Size must be between 0 and 100.');}_size=value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'align',extend({},baseObj,{get:function(){return _align;},set:function(value){const setting=findAlignSetting(value);if(!setting){throw new SyntaxError('An invalid or illegal string was specified.');}_align=setting;this.hasBeenReset=true;}}));/**
     * Other <track> spec defined properties
     */// http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
cue.displayState=undefined;}/**
   * VTTCue methods
   */VTTCue.prototype.getCueAsHTML=function(){// Assume WebVTT.convertCueToDOMTree is on the global.
const WebVTT=self.WebVTT;return WebVTT.convertCueToDOMTree(self,this.text);};// this is a polyfill hack
return VTTCue;}();/*
 * Source: https://github.com/mozilla/vtt.js/blob/master/dist/vtt.js
 */class StringDecoder{// eslint-disable-next-line @typescript-eslint/no-unused-vars
decode(data,options){if(!data){return '';}if(typeof data!=='string'){throw new Error('Error - expected string data.');}return decodeURIComponent(encodeURIComponent(data));}}// Try to parse input as a time stamp.
function parseTimeStamp(input){function computeSeconds(h,m,s,f){return (h|0)*3600+(m|0)*60+(s|0)+parseFloat(f||0);}const m=input.match(/^(?:(\d+):)?(\d{2}):(\d{2})(\.\d+)?/);if(!m){return null;}if(parseFloat(m[2])>59){// Timestamp takes the form of [hours]:[minutes].[milliseconds]
// First position is hours as it's over 59.
return computeSeconds(m[2],m[3],0,m[4]);}// Timestamp takes the form of [hours (optional)]:[minutes]:[seconds].[milliseconds]
return computeSeconds(m[1],m[2],m[3],m[4]);}// A settings object holds key/value pairs and will ignore anything but the first
// assignment to a specific key.
class Settings{constructor(){this.values=Object.create(null);}// Only accept the first assignment to any key.
set(k,v){if(!this.get(k)&&v!==''){this.values[k]=v;}}// Return the value for a key, or a default value.
// If 'defaultKey' is passed then 'dflt' is assumed to be an object with
// a number of possible default values as properties where 'defaultKey' is
// the key of the property that will be chosen; otherwise it's assumed to be
// a single value.
get(k,dflt,defaultKey){if(defaultKey){return this.has(k)?this.values[k]:dflt[defaultKey];}return this.has(k)?this.values[k]:dflt;}// Check whether we have a value for a key.
has(k){return k in this.values;}// Accept a setting if its one of the given alternatives.
alt(k,v,a){for(let n=0;n<a.length;++n){if(v===a[n]){this.set(k,v);break;}}}// Accept a setting if its a valid (signed) integer.
integer(k,v){if(/^-?\d+$/.test(v)){// integer
this.set(k,parseInt(v,10));}}// Accept a setting if its a valid percentage.
percent(k,v){if(/^([\d]{1,3})(\.[\d]*)?%$/.test(v)){const percent=parseFloat(v);if(percent>=0&&percent<=100){this.set(k,percent);return true;}}return false;}}// Helper function to parse input into groups separated by 'groupDelim', and
// interpret each group as a key/value pair separated by 'keyValueDelim'.
function parseOptions(input,callback,keyValueDelim,groupDelim){const groups=groupDelim?input.split(groupDelim):[input];for(const i in groups){if(typeof groups[i]!=='string'){continue;}const kv=groups[i].split(keyValueDelim);if(kv.length!==2){continue;}const k=kv[0];const v=kv[1];callback(k,v);}}const defaults=new VTTCue(0,0,'');// 'middle' was changed to 'center' in the spec: https://github.com/w3c/webvtt/pull/244
//  Safari doesn't yet support this change, but FF and Chrome do.
const center=defaults.align==='middle'?'middle':'center';function parseCue(input,cue,regionList){// Remember the original input if we need to throw an error.
const oInput=input;// 4.1 WebVTT timestamp
function consumeTimeStamp(){const ts=parseTimeStamp(input);if(ts===null){throw new Error('Malformed timestamp: '+oInput);}// Remove time stamp from input.
input=input.replace(/^[^\sa-zA-Z-]+/,'');return ts;}// 4.4.2 WebVTT cue settings
function consumeCueSettings(input,cue){const settings=new Settings();parseOptions(input,function(k,v){let vals;switch(k){case'region':// Find the last region we parsed with the same region id.
for(let i=regionList.length-1;i>=0;i--){if(regionList[i].id===v){settings.set(k,regionList[i].region);break;}}break;case'vertical':settings.alt(k,v,['rl','lr']);break;case'line':vals=v.split(',');settings.integer(k,vals[0]);if(settings.percent(k,vals[0])){settings.set('snapToLines',false);}settings.alt(k,vals[0],['auto']);if(vals.length===2){settings.alt('lineAlign',vals[1],['start',center,'end']);}break;case'position':vals=v.split(',');settings.percent(k,vals[0]);if(vals.length===2){settings.alt('positionAlign',vals[1],['start',center,'end','line-left','line-right','auto']);}break;case'size':settings.percent(k,v);break;case'align':settings.alt(k,v,['start',center,'end','left','right']);break;}},/:/,/\s/);// Apply default values for any missing fields.
cue.region=settings.get('region',null);cue.vertical=settings.get('vertical','');let line=settings.get('line','auto');if(line==='auto'&&defaults.line===-1){// set numeric line number for Safari
line=-1;}cue.line=line;cue.lineAlign=settings.get('lineAlign','start');cue.snapToLines=settings.get('snapToLines',true);cue.size=settings.get('size',100);cue.align=settings.get('align',center);let position=settings.get('position','auto');if(position==='auto'&&defaults.position===50){// set numeric position for Safari
position=cue.align==='start'||cue.align==='left'?0:cue.align==='end'||cue.align==='right'?100:50;}cue.position=position;}function skipWhitespace(){input=input.replace(/^\s+/,'');}// 4.1 WebVTT cue timings.
skipWhitespace();cue.startTime=consumeTimeStamp();// (1) collect cue start time
skipWhitespace();if(input.slice(0,3)!=='-->'){// (3) next characters must match '-->'
throw new Error("Malformed time stamp (time stamps must be separated by '-->'): "+oInput);}input=input.slice(3);skipWhitespace();cue.endTime=consumeTimeStamp();// (5) collect cue end time
// 4.1 WebVTT cue settings list.
skipWhitespace();consumeCueSettings(input,cue);}function fixLineBreaks(input){return input.replace(/<br(?: \/)?>/gi,'\n');}class VTTParser{constructor(){this.state='INITIAL';this.buffer='';this.decoder=new StringDecoder();this.regionList=[];this.cue=null;this.oncue=void 0;this.onparsingerror=void 0;this.onflush=void 0;}parse(data){const _this=this;// If there is no data then we won't decode it, but will just try to parse
// whatever is in buffer already. This may occur in circumstances, for
// example when flush() is called.
if(data){// Try to decode the data that we received.
_this.buffer+=_this.decoder.decode(data,{stream:true});}function collectNextLine(){let buffer=_this.buffer;let pos=0;buffer=fixLineBreaks(buffer);while(pos<buffer.length&&buffer[pos]!=='\r'&&buffer[pos]!=='\n'){++pos;}const line=buffer.slice(0,pos);// Advance the buffer early in case we fail below.
if(buffer[pos]==='\r'){++pos;}if(buffer[pos]==='\n'){++pos;}_this.buffer=buffer.slice(pos);return line;}// 3.2 WebVTT metadata header syntax
function parseHeader(input){parseOptions(input,function(k,v){// switch (k) {
// case 'region':
// 3.3 WebVTT region metadata header syntax
// console.log('parse region', v);
// parseRegion(v);
// break;
// }
},/:/);}// 5.1 WebVTT file parsing.
try{let line='';if(_this.state==='INITIAL'){// We can't start parsing until we have the first line.
if(!/\r\n|\n/.test(_this.buffer)){return this;}line=collectNextLine();// strip of UTF-8 BOM if any
// https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8
const m=line.match(/^(ï»¿)?WEBVTT([ \t].*)?$/);if(!(m!=null&&m[0])){throw new Error('Malformed WebVTT signature.');}_this.state='HEADER';}let alreadyCollectedLine=false;while(_this.buffer){// We can't parse a line until we have the full line.
if(!/\r\n|\n/.test(_this.buffer)){return this;}if(!alreadyCollectedLine){line=collectNextLine();}else {alreadyCollectedLine=false;}switch(_this.state){case'HEADER':// 13-18 - Allow a header (metadata) under the WEBVTT line.
if(/:/.test(line)){parseHeader(line);}else if(!line){// An empty line terminates the header and starts the body (cues).
_this.state='ID';}continue;case'NOTE':// Ignore NOTE blocks.
if(!line){_this.state='ID';}continue;case'ID':// Check for the start of NOTE blocks.
if(/^NOTE($|[ \t])/.test(line)){_this.state='NOTE';break;}// 19-29 - Allow any number of line terminators, then initialize new cue values.
if(!line){continue;}_this.cue=new VTTCue(0,0,'');_this.state='CUE';// 30-39 - Check if self line contains an optional identifier or timing data.
if(line.indexOf('-->')===-1){_this.cue.id=line;continue;}// Process line as start of a cue.
/* falls through */case'CUE':// 40 - Collect cue timings and settings.
if(!_this.cue){_this.state='BADCUE';continue;}try{parseCue(line,_this.cue,_this.regionList);}catch(e){// In case of an error ignore rest of the cue.
_this.cue=null;_this.state='BADCUE';continue;}_this.state='CUETEXT';continue;case'CUETEXT':{const hasSubstring=line.indexOf('-->')!==-1;// 34 - If we have an empty line then report the cue.
// 35 - If we have the special substring '-->' then report the cue,
// but do not collect the line as we need to process the current
// one as a new cue.
if(!line||hasSubstring&&(alreadyCollectedLine=true)){// We are done parsing self cue.
if(_this.oncue&&_this.cue){_this.oncue(_this.cue);}_this.cue=null;_this.state='ID';continue;}if(_this.cue===null){continue;}if(_this.cue.text){_this.cue.text+='\n';}_this.cue.text+=line;}continue;case'BADCUE':// 54-62 - Collect and discard the remaining cue.
if(!line){_this.state='ID';}}}}catch(e){// If we are currently parsing a cue, report what we have.
if(_this.state==='CUETEXT'&&_this.cue&&_this.oncue){_this.oncue(_this.cue);}_this.cue=null;// Enter BADWEBVTT state if header was not parsed correctly otherwise
// another exception occurred so enter BADCUE state.
_this.state=_this.state==='INITIAL'?'BADWEBVTT':'BADCUE';}return this;}flush(){const _this=this;try{// Finish decoding the stream.
// _this.buffer += _this.decoder.decode();
// Synthesize the end of the current cue or region.
if(_this.cue||_this.state==='HEADER'){_this.buffer+='\n\n';_this.parse();}// If we've flushed, parsed, and we're still on the INITIAL state then
// that means we don't have enough of the stream to parse the first
// line.
if(_this.state==='INITIAL'||_this.state==='BADWEBVTT'){throw new Error('Malformed WebVTT signature.');}}catch(e){if(_this.onparsingerror){_this.onparsingerror(e);}}if(_this.onflush){_this.onflush();}return this;}}const LINEBREAKS=/\r\n|\n\r|\n|\r/g;// String.prototype.startsWith is not supported in IE11
const startsWith=function startsWith(inputString,searchString,position=0){return inputString.slice(position,position+searchString.length)===searchString;};const cueString2millis=function cueString2millis(timeString){let ts=parseInt(timeString.slice(-3));const secs=parseInt(timeString.slice(-6,-4));const mins=parseInt(timeString.slice(-9,-7));const hours=timeString.length>9?parseInt(timeString.substring(0,timeString.indexOf(':'))):0;if(!isFiniteNumber(ts)||!isFiniteNumber(secs)||!isFiniteNumber(mins)||!isFiniteNumber(hours)){throw Error(`Malformed X-TIMESTAMP-MAP: Local:${timeString}`);}ts+=1000*secs;ts+=60*1000*mins;ts+=60*60*1000*hours;return ts;};// From https://github.com/darkskyapp/string-hash
const hash=function hash(text){let _hash=5381;let i=text.length;while(i){_hash=_hash*33^text.charCodeAt(--i);}return (_hash>>>0).toString();};// Create a unique hash id for a cue based on start/end times and text.
// This helps timeline-controller to avoid showing repeated captions.
function generateCueId(startTime,endTime,text){return hash(startTime.toString())+hash(endTime.toString())+hash(text);}const calculateOffset=function calculateOffset(vttCCs,cc,presentationTime){let currCC=vttCCs[cc];let prevCC=vttCCs[currCC.prevCC];// This is the first discontinuity or cues have been processed since the last discontinuity
// Offset = current discontinuity time
if(!prevCC||!prevCC.new&&currCC.new){vttCCs.ccOffset=vttCCs.presentationOffset=currCC.start;currCC.new=false;return;}// There have been discontinuities since cues were last parsed.
// Offset = time elapsed
while((_prevCC=prevCC)!=null&&_prevCC.new){var _prevCC;vttCCs.ccOffset+=currCC.start-prevCC.start;currCC.new=false;currCC=prevCC;prevCC=vttCCs[currCC.prevCC];}vttCCs.presentationOffset=presentationTime;};function parseWebVTT(vttByteArray,initPTS,vttCCs,cc,timeOffset,callBack,errorCallBack){const parser=new VTTParser();// Convert byteArray into string, replacing any somewhat exotic linefeeds with "\n", then split on that character.
// Uint8Array.prototype.reduce is not implemented in IE11
const vttLines=utf8ArrayToStr(new Uint8Array(vttByteArray)).trim().replace(LINEBREAKS,'\n').split('\n');const cues=[];const init90kHz=initPTS?toMpegTsClockFromTimescale(initPTS.baseTime,initPTS.timescale):0;let cueTime='00:00.000';let timestampMapMPEGTS=0;let timestampMapLOCAL=0;let parsingError;let inHeader=true;parser.oncue=function(cue){// Adjust cue timing; clamp cues to start no earlier than - and drop cues that don't end after - 0 on timeline.
const currCC=vttCCs[cc];let cueOffset=vttCCs.ccOffset;// Calculate subtitle PTS offset
const webVttMpegTsMapOffset=(timestampMapMPEGTS-init90kHz)/90000;// Update offsets for new discontinuities
if(currCC!=null&&currCC.new){if(timestampMapLOCAL!==undefined){// When local time is provided, offset = discontinuity start time - local time
cueOffset=vttCCs.ccOffset=currCC.start;}else {calculateOffset(vttCCs,cc,webVttMpegTsMapOffset);}}if(webVttMpegTsMapOffset){if(!initPTS){parsingError=new Error('Missing initPTS for VTT MPEGTS');return;}// If we have MPEGTS, offset = presentation time + discontinuity offset
cueOffset=webVttMpegTsMapOffset-vttCCs.presentationOffset;}const duration=cue.endTime-cue.startTime;const startTime=normalizePts((cue.startTime+cueOffset-timestampMapLOCAL)*90000,timeOffset*90000)/90000;cue.startTime=Math.max(startTime,0);cue.endTime=Math.max(startTime+duration,0);//trim trailing webvtt block whitespaces
const text=cue.text.trim();// Fix encoding of special characters
cue.text=decodeURIComponent(encodeURIComponent(text));// If the cue was not assigned an id from the VTT file (line above the content), create one.
if(!cue.id){cue.id=generateCueId(cue.startTime,cue.endTime,text);}if(cue.endTime>0){cues.push(cue);}};parser.onparsingerror=function(error){parsingError=error;};parser.onflush=function(){if(parsingError){errorCallBack(parsingError);return;}callBack(cues);};// Go through contents line by line.
vttLines.forEach(line=>{if(inHeader){// Look for X-TIMESTAMP-MAP in header.
if(startsWith(line,'X-TIMESTAMP-MAP=')){// Once found, no more are allowed anyway, so stop searching.
inHeader=false;// Extract LOCAL and MPEGTS.
line.slice(16).split(',').forEach(timestamp=>{if(startsWith(timestamp,'LOCAL:')){cueTime=timestamp.slice(6);}else if(startsWith(timestamp,'MPEGTS:')){timestampMapMPEGTS=parseInt(timestamp.slice(7));}});try{// Convert cue time to seconds
timestampMapLOCAL=cueString2millis(cueTime)/1000;}catch(error){parsingError=error;}// Return without parsing X-TIMESTAMP-MAP line.
return;}else if(line===''){inHeader=false;}}// Parse line by default.
parser.parse(line+'\n');});parser.flush();}const IMSC1_CODEC='stpp.ttml.im1t';// Time format: h:m:s:frames(.subframes)
const HMSF_REGEX=/^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/;// Time format: hours, minutes, seconds, milliseconds, frames, ticks
const TIME_UNIT_REGEX=/^(\d*(?:\.\d*)?)(h|m|s|ms|f|t)$/;const textAlignToLineAlign={left:'start',center:'center',right:'end',start:'start',end:'end'};function parseIMSC1(payload,initPTS,callBack,errorCallBack){const results=findBox(new Uint8Array(payload),['mdat']);if(results.length===0){errorCallBack(new Error('Could not parse IMSC1 mdat'));return;}const ttmlList=results.map(mdat=>utf8ArrayToStr(mdat));const syncTime=toTimescaleFromScale(initPTS.baseTime,1,initPTS.timescale);try{ttmlList.forEach(ttml=>callBack(parseTTML(ttml,syncTime)));}catch(error){errorCallBack(error);}}function parseTTML(ttml,syncTime){const parser=new DOMParser();const xmlDoc=parser.parseFromString(ttml,'text/xml');const tt=xmlDoc.getElementsByTagName('tt')[0];if(!tt){throw new Error('Invalid ttml');}const defaultRateInfo={frameRate:30,subFrameRate:1,frameRateMultiplier:0,tickRate:0};const rateInfo=Object.keys(defaultRateInfo).reduce((result,key)=>{result[key]=tt.getAttribute(`ttp:${key}`)||defaultRateInfo[key];return result;},{});const trim=tt.getAttribute('xml:space')!=='preserve';const styleElements=collectionToDictionary(getElementCollection(tt,'styling','style'));const regionElements=collectionToDictionary(getElementCollection(tt,'layout','region'));const cueElements=getElementCollection(tt,'body','[begin]');return [].map.call(cueElements,cueElement=>{const cueText=getTextContent(cueElement,trim);if(!cueText||!cueElement.hasAttribute('begin')){return null;}const startTime=parseTtmlTime(cueElement.getAttribute('begin'),rateInfo);const duration=parseTtmlTime(cueElement.getAttribute('dur'),rateInfo);let endTime=parseTtmlTime(cueElement.getAttribute('end'),rateInfo);if(startTime===null){throw timestampParsingError(cueElement);}if(endTime===null){if(duration===null){throw timestampParsingError(cueElement);}endTime=startTime+duration;}const cue=new VTTCue(startTime-syncTime,endTime-syncTime,cueText);cue.id=generateCueId(cue.startTime,cue.endTime,cue.text);const region=regionElements[cueElement.getAttribute('region')];const style=styleElements[cueElement.getAttribute('style')];// Apply styles to cue
const styles=getTtmlStyles(region,style,styleElements);const{textAlign}=styles;if(textAlign){// cue.positionAlign not settable in FF~2016
const lineAlign=textAlignToLineAlign[textAlign];if(lineAlign){cue.lineAlign=lineAlign;}cue.align=textAlign;}_extends(cue,styles);return cue;}).filter(cue=>cue!==null);}function getElementCollection(fromElement,parentName,childName){const parent=fromElement.getElementsByTagName(parentName)[0];if(parent){return [].slice.call(parent.querySelectorAll(childName));}return [];}function collectionToDictionary(elementsWithId){return elementsWithId.reduce((dict,element)=>{const id=element.getAttribute('xml:id');if(id){dict[id]=element;}return dict;},{});}function getTextContent(element,trim){return [].slice.call(element.childNodes).reduce((str,node,i)=>{var _node$childNodes;if(node.nodeName==='br'&&i){return str+'\n';}if((_node$childNodes=node.childNodes)!=null&&_node$childNodes.length){return getTextContent(node,trim);}else if(trim){return str+node.textContent.trim().replace(/\s+/g,' ');}return str+node.textContent;},'');}function getTtmlStyles(region,style,styleElements){const ttsNs='http://www.w3.org/ns/ttml#styling';let regionStyle=null;const styleAttributes=['displayAlign','textAlign','color','backgroundColor','fontSize','fontFamily'// 'fontWeight',
// 'lineHeight',
// 'wrapOption',
// 'fontStyle',
// 'direction',
// 'writingMode'
];const regionStyleName=region!=null&&region.hasAttribute('style')?region.getAttribute('style'):null;if(regionStyleName&&styleElements.hasOwnProperty(regionStyleName)){regionStyle=styleElements[regionStyleName];}return styleAttributes.reduce((styles,name)=>{const value=getAttributeNS(style,ttsNs,name)||getAttributeNS(region,ttsNs,name)||getAttributeNS(regionStyle,ttsNs,name);if(value){styles[name]=value;}return styles;},{});}function getAttributeNS(element,ns,name){if(!element){return null;}return element.hasAttributeNS(ns,name)?element.getAttributeNS(ns,name):null;}function timestampParsingError(node){return new Error(`Could not parse ttml timestamp ${node}`);}function parseTtmlTime(timeAttributeValue,rateInfo){if(!timeAttributeValue){return null;}let seconds=parseTimeStamp(timeAttributeValue);if(seconds===null){if(HMSF_REGEX.test(timeAttributeValue)){seconds=parseHoursMinutesSecondsFrames(timeAttributeValue,rateInfo);}else if(TIME_UNIT_REGEX.test(timeAttributeValue)){seconds=parseTimeUnits(timeAttributeValue,rateInfo);}}return seconds;}function parseHoursMinutesSecondsFrames(timeAttributeValue,rateInfo){const m=HMSF_REGEX.exec(timeAttributeValue);const frames=(m[4]|0)+(m[5]|0)/rateInfo.subFrameRate;return (m[1]|0)*3600+(m[2]|0)*60+(m[3]|0)+frames/rateInfo.frameRate;}function parseTimeUnits(timeAttributeValue,rateInfo){const m=TIME_UNIT_REGEX.exec(timeAttributeValue);const value=Number(m[1]);const unit=m[2];switch(unit){case'h':return value*3600;case'm':return value*60;case'ms':return value*1000;case'f':return value/rateInfo.frameRate;case't':return value/rateInfo.tickRate;}return value;}class TimelineController{constructor(hls){this.hls=void 0;this.media=null;this.config=void 0;this.enabled=true;this.Cues=void 0;this.textTracks=[];this.tracks=[];this.initPTS=[];this.unparsedVttFrags=[];this.captionsTracks={};this.nonNativeCaptionsTracks={};this.cea608Parser1=void 0;this.cea608Parser2=void 0;this.lastCc=-1;// Last video (CEA-608) fragment CC
this.lastSn=-1;// Last video (CEA-608) fragment MSN
this.lastPartIndex=-1;// Last video (CEA-608) fragment Part Index
this.prevCC=-1;// Last subtitle fragment CC
this.vttCCs=newVTTCCs();this.captionsProperties=void 0;this.hls=hls;this.config=hls.config;this.Cues=hls.config.cueHandler;this.captionsProperties={textTrack1:{label:this.config.captionsTextTrack1Label,languageCode:this.config.captionsTextTrack1LanguageCode},textTrack2:{label:this.config.captionsTextTrack2Label,languageCode:this.config.captionsTextTrack2LanguageCode},textTrack3:{label:this.config.captionsTextTrack3Label,languageCode:this.config.captionsTextTrack3LanguageCode},textTrack4:{label:this.config.captionsTextTrack4Label,languageCode:this.config.captionsTextTrack4LanguageCode}};hls.on(Events.MEDIA_ATTACHING,this.onMediaAttaching,this);hls.on(Events.MEDIA_DETACHING,this.onMediaDetaching,this);hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.on(Events.MANIFEST_LOADED,this.onManifestLoaded,this);hls.on(Events.SUBTITLE_TRACKS_UPDATED,this.onSubtitleTracksUpdated,this);hls.on(Events.FRAG_LOADING,this.onFragLoading,this);hls.on(Events.FRAG_LOADED,this.onFragLoaded,this);hls.on(Events.FRAG_PARSING_USERDATA,this.onFragParsingUserdata,this);hls.on(Events.FRAG_DECRYPTED,this.onFragDecrypted,this);hls.on(Events.INIT_PTS_FOUND,this.onInitPtsFound,this);hls.on(Events.SUBTITLE_TRACKS_CLEARED,this.onSubtitleTracksCleared,this);hls.on(Events.BUFFER_FLUSHING,this.onBufferFlushing,this);}destroy(){const{hls}=this;hls.off(Events.MEDIA_ATTACHING,this.onMediaAttaching,this);hls.off(Events.MEDIA_DETACHING,this.onMediaDetaching,this);hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.off(Events.MANIFEST_LOADED,this.onManifestLoaded,this);hls.off(Events.SUBTITLE_TRACKS_UPDATED,this.onSubtitleTracksUpdated,this);hls.off(Events.FRAG_LOADING,this.onFragLoading,this);hls.off(Events.FRAG_LOADED,this.onFragLoaded,this);hls.off(Events.FRAG_PARSING_USERDATA,this.onFragParsingUserdata,this);hls.off(Events.FRAG_DECRYPTED,this.onFragDecrypted,this);hls.off(Events.INIT_PTS_FOUND,this.onInitPtsFound,this);hls.off(Events.SUBTITLE_TRACKS_CLEARED,this.onSubtitleTracksCleared,this);hls.off(Events.BUFFER_FLUSHING,this.onBufferFlushing,this);// @ts-ignore
this.hls=this.config=null;this.cea608Parser1=this.cea608Parser2=undefined;}initCea608Parsers(){if(this.config.enableCEA708Captions&&(!this.cea608Parser1||!this.cea608Parser2)){const channel1=new OutputFilter(this,'textTrack1');const channel2=new OutputFilter(this,'textTrack2');const channel3=new OutputFilter(this,'textTrack3');const channel4=new OutputFilter(this,'textTrack4');this.cea608Parser1=new Cea608Parser(1,channel1,channel2);this.cea608Parser2=new Cea608Parser(3,channel3,channel4);}}addCues(trackName,startTime,endTime,screen,cueRanges){// skip cues which overlap more than 50% with previously parsed time ranges
let merged=false;for(let i=cueRanges.length;i--;){const cueRange=cueRanges[i];const overlap=intersection(cueRange[0],cueRange[1],startTime,endTime);if(overlap>=0){cueRange[0]=Math.min(cueRange[0],startTime);cueRange[1]=Math.max(cueRange[1],endTime);merged=true;if(overlap/(endTime-startTime)>0.5){return;}}}if(!merged){cueRanges.push([startTime,endTime]);}if(this.config.renderTextTracksNatively){const track=this.captionsTracks[trackName];this.Cues.newCue(track,startTime,endTime,screen);}else {const cues=this.Cues.newCue(null,startTime,endTime,screen);this.hls.trigger(Events.CUES_PARSED,{type:'captions',cues,track:trackName});}}// Triggered when an initial PTS is found; used for synchronisation of WebVTT.
onInitPtsFound(event,{frag,id,initPTS,timescale}){const{unparsedVttFrags}=this;if(id==='main'){this.initPTS[frag.cc]={baseTime:initPTS,timescale};}// Due to asynchronous processing, initial PTS may arrive later than the first VTT fragments are loaded.
// Parse any unparsed fragments upon receiving the initial PTS.
if(unparsedVttFrags.length){this.unparsedVttFrags=[];unparsedVttFrags.forEach(frag=>{this.onFragLoaded(Events.FRAG_LOADED,frag);});}}getExistingTrack(label,language){const{media}=this;if(media){for(let i=0;i<media.textTracks.length;i++){const textTrack=media.textTracks[i];if(canReuseVttTextTrack(textTrack,{name:label,lang:language,attrs:{}})){return textTrack;}}}return null;}createCaptionsTrack(trackName){if(this.config.renderTextTracksNatively){this.createNativeTrack(trackName);}else {this.createNonNativeTrack(trackName);}}createNativeTrack(trackName){if(this.captionsTracks[trackName]){return;}const{captionsProperties,captionsTracks,media}=this;const{label,languageCode}=captionsProperties[trackName];// Enable reuse of existing text track.
const existingTrack=this.getExistingTrack(label,languageCode);if(!existingTrack){const textTrack=this.createTextTrack('captions',label,languageCode);if(textTrack){// Set a special property on the track so we know it's managed by Hls.js
textTrack[trackName]=true;captionsTracks[trackName]=textTrack;}}else {captionsTracks[trackName]=existingTrack;clearCurrentCues(captionsTracks[trackName]);sendAddTrackEvent(captionsTracks[trackName],media);}}createNonNativeTrack(trackName){if(this.nonNativeCaptionsTracks[trackName]){return;}// Create a list of a single track for the provider to consume
const trackProperties=this.captionsProperties[trackName];if(!trackProperties){return;}const label=trackProperties.label;const track={_id:trackName,label,kind:'captions',default:trackProperties.media?!!trackProperties.media.default:false,closedCaptions:trackProperties.media};this.nonNativeCaptionsTracks[trackName]=track;this.hls.trigger(Events.NON_NATIVE_TEXT_TRACKS_FOUND,{tracks:[track]});}createTextTrack(kind,label,lang){const media=this.media;if(!media){return;}return media.addTextTrack(kind,label,lang);}onMediaAttaching(event,data){this.media=data.media;this._cleanTracks();}onMediaDetaching(){const{captionsTracks}=this;Object.keys(captionsTracks).forEach(trackName=>{clearCurrentCues(captionsTracks[trackName]);delete captionsTracks[trackName];});this.nonNativeCaptionsTracks={};}onManifestLoading(){// Detect discontinuity in video fragment (CEA-608) parsing
this.lastCc=-1;this.lastSn=-1;this.lastPartIndex=-1;// Detect discontinuity in subtitle manifests
this.prevCC=-1;this.vttCCs=newVTTCCs();// Reset tracks
this._cleanTracks();this.tracks=[];this.captionsTracks={};this.nonNativeCaptionsTracks={};this.textTracks=[];this.unparsedVttFrags=[];this.initPTS=[];if(this.cea608Parser1&&this.cea608Parser2){this.cea608Parser1.reset();this.cea608Parser2.reset();}}_cleanTracks(){// clear outdated subtitles
const{media}=this;if(!media){return;}const textTracks=media.textTracks;if(textTracks){for(let i=0;i<textTracks.length;i++){clearCurrentCues(textTracks[i]);}}}onSubtitleTracksUpdated(event,data){const tracks=data.subtitleTracks||[];const hasIMSC1=tracks.some(track=>track.textCodec===IMSC1_CODEC);if(this.config.enableWebVTT||hasIMSC1&&this.config.enableIMSC1){const listIsIdentical=subtitleOptionsIdentical(this.tracks,tracks);if(listIsIdentical){this.tracks=tracks;return;}this.textTracks=[];this.tracks=tracks;if(this.config.renderTextTracksNatively){const media=this.media;const inUseTracks=media?filterSubtitleTracks(media.textTracks):null;this.tracks.forEach((track,index)=>{// Reuse tracks with the same label and lang, but do not reuse 608/708 tracks
let textTrack;if(inUseTracks){let inUseTrack=null;for(let i=0;i<inUseTracks.length;i++){if(inUseTracks[i]&&canReuseVttTextTrack(inUseTracks[i],track)){inUseTrack=inUseTracks[i];inUseTracks[i]=null;break;}}if(inUseTrack){textTrack=inUseTrack;}}if(textTrack){clearCurrentCues(textTrack);}else {const textTrackKind=captionsOrSubtitlesFromCharacteristics(track);textTrack=this.createTextTrack(textTrackKind,track.name,track.lang);if(textTrack){textTrack.mode='disabled';}}if(textTrack){this.textTracks.push(textTrack);}});// Warn when video element has captions or subtitle TextTracks carried over from another source
if(inUseTracks!=null&&inUseTracks.length){const unusedTextTracks=inUseTracks.filter(t=>t!==null).map(t=>t.label);if(unusedTextTracks.length){logger$2.warn(`Media element contains unused subtitle tracks: ${unusedTextTracks.join(', ')}. Replace media element for each source to clear TextTracks and captions menu.`);}}}else if(this.tracks.length){// Create a list of tracks for the provider to consume
const tracksList=this.tracks.map(track=>{return {label:track.name,kind:track.type.toLowerCase(),default:track.default,subtitleTrack:track};});this.hls.trigger(Events.NON_NATIVE_TEXT_TRACKS_FOUND,{tracks:tracksList});}}}onManifestLoaded(event,data){if(this.config.enableCEA708Captions&&data.captions){data.captions.forEach(captionsTrack=>{const instreamIdMatch=/(?:CC|SERVICE)([1-4])/.exec(captionsTrack.instreamId);if(!instreamIdMatch){return;}const trackName=`textTrack${instreamIdMatch[1]}`;const trackProperties=this.captionsProperties[trackName];if(!trackProperties){return;}trackProperties.label=captionsTrack.name;if(captionsTrack.lang){// optional attribute
trackProperties.languageCode=captionsTrack.lang;}trackProperties.media=captionsTrack;});}}closedCaptionsForLevel(frag){const level=this.hls.levels[frag.level];return level==null?void 0:level.attrs['CLOSED-CAPTIONS'];}onFragLoading(event,data){// if this frag isn't contiguous, clear the parser so cues with bad start/end times aren't added to the textTrack
if(this.enabled&&data.frag.type===PlaylistLevelType.MAIN){var _data$part$index,_data$part;const{cea608Parser1,cea608Parser2,lastSn}=this;const{cc,sn}=data.frag;const partIndex=(_data$part$index=(_data$part=data.part)==null?void 0:_data$part.index)!=null?_data$part$index:-1;if(cea608Parser1&&cea608Parser2){if(sn!==lastSn+1||sn===lastSn&&partIndex!==this.lastPartIndex+1||cc!==this.lastCc){cea608Parser1.reset();cea608Parser2.reset();}}this.lastCc=cc;this.lastSn=sn;this.lastPartIndex=partIndex;}}onFragLoaded(event,data){const{frag,payload}=data;if(frag.type===PlaylistLevelType.SUBTITLE){// If fragment is subtitle type, parse as WebVTT.
if(payload.byteLength){const decryptData=frag.decryptdata;// fragment after decryption has a stats object
const decrypted='stats'in data;// If the subtitles are not encrypted, parse VTTs now. Otherwise, we need to wait.
if(decryptData==null||!decryptData.encrypted||decrypted){const trackPlaylistMedia=this.tracks[frag.level];const vttCCs=this.vttCCs;if(!vttCCs[frag.cc]){vttCCs[frag.cc]={start:frag.start,prevCC:this.prevCC,new:true};this.prevCC=frag.cc;}if(trackPlaylistMedia&&trackPlaylistMedia.textCodec===IMSC1_CODEC){this._parseIMSC1(frag,payload);}else {this._parseVTTs(data);}}}else {// In case there is no payload, finish unsuccessfully.
this.hls.trigger(Events.SUBTITLE_FRAG_PROCESSED,{success:false,frag,error:new Error('Empty subtitle payload')});}}}_parseIMSC1(frag,payload){const hls=this.hls;parseIMSC1(payload,this.initPTS[frag.cc],cues=>{this._appendCues(cues,frag.level);hls.trigger(Events.SUBTITLE_FRAG_PROCESSED,{success:true,frag:frag});},error=>{logger$2.log(`Failed to parse IMSC1: ${error}`);hls.trigger(Events.SUBTITLE_FRAG_PROCESSED,{success:false,frag:frag,error});});}_parseVTTs(data){var _frag$initSegment;const{frag,payload}=data;// We need an initial synchronisation PTS. Store fragments as long as none has arrived
const{initPTS,unparsedVttFrags}=this;const maxAvCC=initPTS.length-1;if(!initPTS[frag.cc]&&maxAvCC===-1){unparsedVttFrags.push(data);return;}const hls=this.hls;// Parse the WebVTT file contents.
const payloadWebVTT=(_frag$initSegment=frag.initSegment)!=null&&_frag$initSegment.data?appendUint8Array(frag.initSegment.data,new Uint8Array(payload)):payload;parseWebVTT(payloadWebVTT,this.initPTS[frag.cc],this.vttCCs,frag.cc,frag.start,cues=>{this._appendCues(cues,frag.level);hls.trigger(Events.SUBTITLE_FRAG_PROCESSED,{success:true,frag:frag});},error=>{const missingInitPTS=error.message==='Missing initPTS for VTT MPEGTS';if(missingInitPTS){unparsedVttFrags.push(data);}else {this._fallbackToIMSC1(frag,payload);}// Something went wrong while parsing. Trigger event with success false.
logger$2.log(`Failed to parse VTT cue: ${error}`);if(missingInitPTS&&maxAvCC>frag.cc){return;}hls.trigger(Events.SUBTITLE_FRAG_PROCESSED,{success:false,frag:frag,error});});}_fallbackToIMSC1(frag,payload){// If textCodec is unknown, try parsing as IMSC1. Set textCodec based on the result
const trackPlaylistMedia=this.tracks[frag.level];if(!trackPlaylistMedia.textCodec){parseIMSC1(payload,this.initPTS[frag.cc],()=>{trackPlaylistMedia.textCodec=IMSC1_CODEC;this._parseIMSC1(frag,payload);},()=>{trackPlaylistMedia.textCodec='wvtt';});}}_appendCues(cues,fragLevel){const hls=this.hls;if(this.config.renderTextTracksNatively){const textTrack=this.textTracks[fragLevel];// WebVTTParser.parse is an async method and if the currently selected text track mode is set to "disabled"
// before parsing is done then don't try to access currentTrack.cues.getCueById as cues will be null
// and trying to access getCueById method of cues will throw an exception
// Because we check if the mode is disabled, we can force check `cues` below. They can't be null.
if(!textTrack||textTrack.mode==='disabled'){return;}cues.forEach(cue=>addCueToTrack(textTrack,cue));}else {const currentTrack=this.tracks[fragLevel];if(!currentTrack){return;}const track=currentTrack.default?'default':'subtitles'+fragLevel;hls.trigger(Events.CUES_PARSED,{type:'subtitles',cues,track});}}onFragDecrypted(event,data){const{frag}=data;if(frag.type===PlaylistLevelType.SUBTITLE){this.onFragLoaded(Events.FRAG_LOADED,data);}}onSubtitleTracksCleared(){this.tracks=[];this.captionsTracks={};}onFragParsingUserdata(event,data){this.initCea608Parsers();const{cea608Parser1,cea608Parser2}=this;if(!this.enabled||!cea608Parser1||!cea608Parser2){return;}const{frag,samples}=data;if(frag.type===PlaylistLevelType.MAIN&&this.closedCaptionsForLevel(frag)==='NONE'){return;}// If the event contains captions (found in the bytes property), push all bytes into the parser immediately
// It will create the proper timestamps based on the PTS value
for(let i=0;i<samples.length;i++){const ccBytes=samples[i].bytes;if(ccBytes){const ccdatas=this.extractCea608Data(ccBytes);cea608Parser1.addData(samples[i].pts,ccdatas[0]);cea608Parser2.addData(samples[i].pts,ccdatas[1]);}}}onBufferFlushing(event,{startOffset,endOffset,endOffsetSubtitles,type}){const{media}=this;if(!media||media.currentTime<endOffset){return;}// Clear 608 caption cues from the captions TextTracks when the video back buffer is flushed
// Forward cues are never removed because we can loose streamed 608 content from recent fragments
if(!type||type==='video'){const{captionsTracks}=this;Object.keys(captionsTracks).forEach(trackName=>removeCuesInRange(captionsTracks[trackName],startOffset,endOffset));}if(this.config.renderTextTracksNatively){// Clear VTT/IMSC1 subtitle cues from the subtitle TextTracks when the back buffer is flushed
if(startOffset===0&&endOffsetSubtitles!==undefined){const{textTracks}=this;Object.keys(textTracks).forEach(trackName=>removeCuesInRange(textTracks[trackName],startOffset,endOffsetSubtitles));}}}extractCea608Data(byteArray){const actualCCBytes=[[],[]];const count=byteArray[0]&0x1f;let position=2;for(let j=0;j<count;j++){const tmpByte=byteArray[position++];const ccbyte1=0x7f&byteArray[position++];const ccbyte2=0x7f&byteArray[position++];if(ccbyte1===0&&ccbyte2===0){continue;}const ccValid=(0x04&tmpByte)!==0;// Support all four channels
if(ccValid){const ccType=0x03&tmpByte;if(0x00/* CEA608 field1*/===ccType||0x01/* CEA608 field2*/===ccType){// Exclude CEA708 CC data.
actualCCBytes[ccType].push(ccbyte1);actualCCBytes[ccType].push(ccbyte2);}}}return actualCCBytes;}}function captionsOrSubtitlesFromCharacteristics(track){if(track.characteristics){if(/transcribes-spoken-dialog/gi.test(track.characteristics)&&/describes-music-and-sound/gi.test(track.characteristics)){return 'captions';}}return 'subtitles';}function canReuseVttTextTrack(inUseTrack,manifestTrack){return !!inUseTrack&&inUseTrack.kind===captionsOrSubtitlesFromCharacteristics(manifestTrack)&&subtitleTrackMatchesTextTrack(manifestTrack,inUseTrack);}function intersection(x1,x2,y1,y2){return Math.min(x2,y2)-Math.max(x1,y1);}function newVTTCCs(){return {ccOffset:0,presentationOffset:0,0:{start:0,prevCC:-1,new:true}};}class CapLevelController{constructor(hls){this.hls=void 0;this.autoLevelCapping=void 0;this.firstLevel=void 0;this.media=void 0;this.restrictedLevels=void 0;this.timer=void 0;this.clientRect=void 0;this.streamController=void 0;this.hls=hls;this.autoLevelCapping=Number.POSITIVE_INFINITY;this.firstLevel=-1;this.media=null;this.restrictedLevels=[];this.timer=undefined;this.clientRect=null;this.registerListeners();}setStreamController(streamController){this.streamController=streamController;}destroy(){if(this.hls){this.unregisterListener();}if(this.timer){this.stopCapping();}this.media=null;this.clientRect=null;// @ts-ignore
this.hls=this.streamController=null;}registerListeners(){const{hls}=this;hls.on(Events.FPS_DROP_LEVEL_CAPPING,this.onFpsDropLevelCapping,this);hls.on(Events.MEDIA_ATTACHING,this.onMediaAttaching,this);hls.on(Events.MANIFEST_PARSED,this.onManifestParsed,this);hls.on(Events.LEVELS_UPDATED,this.onLevelsUpdated,this);hls.on(Events.BUFFER_CODECS,this.onBufferCodecs,this);hls.on(Events.MEDIA_DETACHING,this.onMediaDetaching,this);}unregisterListener(){const{hls}=this;hls.off(Events.FPS_DROP_LEVEL_CAPPING,this.onFpsDropLevelCapping,this);hls.off(Events.MEDIA_ATTACHING,this.onMediaAttaching,this);hls.off(Events.MANIFEST_PARSED,this.onManifestParsed,this);hls.off(Events.LEVELS_UPDATED,this.onLevelsUpdated,this);hls.off(Events.BUFFER_CODECS,this.onBufferCodecs,this);hls.off(Events.MEDIA_DETACHING,this.onMediaDetaching,this);}onFpsDropLevelCapping(event,data){// Don't add a restricted level more than once
const level=this.hls.levels[data.droppedLevel];if(this.isLevelAllowed(level)){this.restrictedLevels.push({bitrate:level.bitrate,height:level.height,width:level.width});}}onMediaAttaching(event,data){this.media=data.media instanceof HTMLVideoElement?data.media:null;this.clientRect=null;if(this.timer&&this.hls.levels.length){this.detectPlayerSize();}}onManifestParsed(event,data){const hls=this.hls;this.restrictedLevels=[];this.firstLevel=data.firstLevel;if(hls.config.capLevelToPlayerSize&&data.video){// Start capping immediately if the manifest has signaled video codecs
this.startCapping();}}onLevelsUpdated(event,data){if(this.timer&&isFiniteNumber(this.autoLevelCapping)){this.detectPlayerSize();}}// Only activate capping when playing a video stream; otherwise, multi-bitrate audio-only streams will be restricted
// to the first level
onBufferCodecs(event,data){const hls=this.hls;if(hls.config.capLevelToPlayerSize&&data.video){// If the manifest did not signal a video codec capping has been deferred until we're certain video is present
this.startCapping();}}onMediaDetaching(){this.stopCapping();}detectPlayerSize(){if(this.media){if(this.mediaHeight<=0||this.mediaWidth<=0){this.clientRect=null;return;}const levels=this.hls.levels;if(levels.length){const hls=this.hls;const maxLevel=this.getMaxLevel(levels.length-1);if(maxLevel!==this.autoLevelCapping){logger$2.log(`Setting autoLevelCapping to ${maxLevel}: ${levels[maxLevel].height}p@${levels[maxLevel].bitrate} for media ${this.mediaWidth}x${this.mediaHeight}`);}hls.autoLevelCapping=maxLevel;if(hls.autoLevelCapping>this.autoLevelCapping&&this.streamController){// if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch
// usually happen when the user go to the fullscreen mode.
this.streamController.nextLevelSwitch();}this.autoLevelCapping=hls.autoLevelCapping;}}}/*
   * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)
   */getMaxLevel(capLevelIndex){const levels=this.hls.levels;if(!levels.length){return -1;}const validLevels=levels.filter((level,index)=>this.isLevelAllowed(level)&&index<=capLevelIndex);this.clientRect=null;return CapLevelController.getMaxLevelByMediaSize(validLevels,this.mediaWidth,this.mediaHeight);}startCapping(){if(this.timer){// Don't reset capping if started twice; this can happen if the manifest signals a video codec
return;}this.autoLevelCapping=Number.POSITIVE_INFINITY;self.clearInterval(this.timer);this.timer=self.setInterval(this.detectPlayerSize.bind(this),1000);this.detectPlayerSize();}stopCapping(){this.restrictedLevels=[];this.firstLevel=-1;this.autoLevelCapping=Number.POSITIVE_INFINITY;if(this.timer){self.clearInterval(this.timer);this.timer=undefined;}}getDimensions(){if(this.clientRect){return this.clientRect;}const media=this.media;const boundsRect={width:0,height:0};if(media){const clientRect=media.getBoundingClientRect();boundsRect.width=clientRect.width;boundsRect.height=clientRect.height;if(!boundsRect.width&&!boundsRect.height){// When the media element has no width or height (equivalent to not being in the DOM),
// then use its width and height attributes (media.width, media.height)
boundsRect.width=clientRect.right-clientRect.left||media.width||0;boundsRect.height=clientRect.bottom-clientRect.top||media.height||0;}}this.clientRect=boundsRect;return boundsRect;}get mediaWidth(){return this.getDimensions().width*this.contentScaleFactor;}get mediaHeight(){return this.getDimensions().height*this.contentScaleFactor;}get contentScaleFactor(){let pixelRatio=1;if(!this.hls.config.ignoreDevicePixelRatio){try{pixelRatio=self.devicePixelRatio;}catch(e){/* no-op */}}return pixelRatio;}isLevelAllowed(level){const restrictedLevels=this.restrictedLevels;return !restrictedLevels.some(restrictedLevel=>{return level.bitrate===restrictedLevel.bitrate&&level.width===restrictedLevel.width&&level.height===restrictedLevel.height;});}static getMaxLevelByMediaSize(levels,width,height){if(!(levels!=null&&levels.length)){return -1;}// Levels can have the same dimensions but differing bandwidths - since levels are ordered, we can look to the next
// to determine whether we've chosen the greatest bandwidth for the media's dimensions
const atGreatestBandwidth=(curLevel,nextLevel)=>{if(!nextLevel){return true;}return curLevel.width!==nextLevel.width||curLevel.height!==nextLevel.height;};// If we run through the loop without breaking, the media's dimensions are greater than every level, so default to
// the max level
let maxLevelIndex=levels.length-1;// Prevent changes in aspect-ratio from causing capping to toggle back and forth
const squareSize=Math.max(width,height);for(let i=0;i<levels.length;i+=1){const level=levels[i];if((level.width>=squareSize||level.height>=squareSize)&&atGreatestBandwidth(level,levels[i+1])){maxLevelIndex=i;break;}}return maxLevelIndex;}}class FPSController{constructor(hls){this.hls=void 0;this.isVideoPlaybackQualityAvailable=false;this.timer=void 0;this.media=null;this.lastTime=void 0;this.lastDroppedFrames=0;this.lastDecodedFrames=0;// stream controller must be provided as a dependency!
this.streamController=void 0;this.hls=hls;this.registerListeners();}setStreamController(streamController){this.streamController=streamController;}registerListeners(){this.hls.on(Events.MEDIA_ATTACHING,this.onMediaAttaching,this);}unregisterListeners(){this.hls.off(Events.MEDIA_ATTACHING,this.onMediaAttaching,this);}destroy(){if(this.timer){clearInterval(this.timer);}this.unregisterListeners();this.isVideoPlaybackQualityAvailable=false;this.media=null;}onMediaAttaching(event,data){const config=this.hls.config;if(config.capLevelOnFPSDrop){const media=data.media instanceof self.HTMLVideoElement?data.media:null;this.media=media;if(media&&typeof media.getVideoPlaybackQuality==='function'){this.isVideoPlaybackQualityAvailable=true;}self.clearInterval(this.timer);this.timer=self.setInterval(this.checkFPSInterval.bind(this),config.fpsDroppedMonitoringPeriod);}}checkFPS(video,decodedFrames,droppedFrames){const currentTime=performance.now();if(decodedFrames){if(this.lastTime){const currentPeriod=currentTime-this.lastTime;const currentDropped=droppedFrames-this.lastDroppedFrames;const currentDecoded=decodedFrames-this.lastDecodedFrames;const droppedFPS=1000*currentDropped/currentPeriod;const hls=this.hls;hls.trigger(Events.FPS_DROP,{currentDropped:currentDropped,currentDecoded:currentDecoded,totalDroppedFrames:droppedFrames});if(droppedFPS>0){// logger.log('checkFPS : droppedFPS/decodedFPS:' + droppedFPS/(1000 * currentDecoded / currentPeriod));
if(currentDropped>hls.config.fpsDroppedMonitoringThreshold*currentDecoded){let currentLevel=hls.currentLevel;logger$2.warn('drop FPS ratio greater than max allowed value for currentLevel: '+currentLevel);if(currentLevel>0&&(hls.autoLevelCapping===-1||hls.autoLevelCapping>=currentLevel)){currentLevel=currentLevel-1;hls.trigger(Events.FPS_DROP_LEVEL_CAPPING,{level:currentLevel,droppedLevel:hls.currentLevel});hls.autoLevelCapping=currentLevel;this.streamController.nextLevelSwitch();}}}}this.lastTime=currentTime;this.lastDroppedFrames=droppedFrames;this.lastDecodedFrames=decodedFrames;}}checkFPSInterval(){const video=this.media;if(video){if(this.isVideoPlaybackQualityAvailable){const videoPlaybackQuality=video.getVideoPlaybackQuality();this.checkFPS(video,videoPlaybackQuality.totalVideoFrames,videoPlaybackQuality.droppedVideoFrames);}else {// HTMLVideoElement doesn't include the webkit types
this.checkFPS(video,video.webkitDecodedFrameCount,video.webkitDroppedFrameCount);}}}}const LOGGER_PREFIX='[eme]';/**
 * Controller to deal with encrypted media extensions (EME)
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Encrypted_Media_Extensions_API
 *
 * @class
 * @constructor
 */class EMEController{constructor(hls){this.hls=void 0;this.config=void 0;this.media=null;this.keyFormatPromise=null;this.keySystemAccessPromises={};this._requestLicenseFailureCount=0;this.mediaKeySessions=[];this.keyIdToKeySessionPromise={};this.setMediaKeysQueue=EMEController.CDMCleanupPromise?[EMEController.CDMCleanupPromise]:[];this.debug=logger$2.debug.bind(logger$2,LOGGER_PREFIX);this.log=logger$2.log.bind(logger$2,LOGGER_PREFIX);this.warn=logger$2.warn.bind(logger$2,LOGGER_PREFIX);this.error=logger$2.error.bind(logger$2,LOGGER_PREFIX);this.onMediaEncrypted=event=>{const{initDataType,initData}=event;const logMessage=`"${event.type}" event: init data type: "${initDataType}"`;this.debug(logMessage);// Ignore event when initData is null
if(initData===null){return;}if(!this.keyFormatPromise){let keySystems=Object.keys(this.keySystemAccessPromises);if(!keySystems.length){keySystems=getKeySystemsForConfig(this.config);}const keyFormats=keySystems.map(keySystemDomainToKeySystemFormat).filter(k=>!!k);this.keyFormatPromise=this.getKeyFormatPromise(keyFormats);}this.keyFormatPromise.then(keySystemFormat=>{const keySystem=keySystemFormatToKeySystemDomain(keySystemFormat);let keyId;let keySystemDomain;if(initDataType==='sinf'){if(keySystem!==KeySystems.FAIRPLAY){this.warn(`Ignoring unexpected "${event.type}" event with init data type: "${initDataType}" for selected key-system ${keySystem}`);return;}// Match sinf keyId to playlist skd://keyId=
const json=bin2str(new Uint8Array(initData));try{const sinf=base64Decode$1(JSON.parse(json).sinf);const tenc=parseSinf(sinf);if(!tenc){throw new Error(`'schm' box missing or not cbcs/cenc with schi > tenc`);}keyId=tenc.subarray(8,24);keySystemDomain=KeySystems.FAIRPLAY;}catch(error){this.warn(`${logMessage} Failed to parse sinf: ${error}`);return;}}else {if(keySystem!==KeySystems.WIDEVINE&&keySystem!==KeySystems.PLAYREADY){this.warn(`Ignoring unexpected "${event.type}" event with init data type: "${initDataType}" for selected key-system ${keySystem}`);return;}// Support Widevine/PlayReady clear-lead key-session creation (otherwise depend on playlist keys)
const psshResults=parseMultiPssh(initData);const psshInfos=psshResults.filter(pssh=>!!pssh.systemId&&keySystemIdToKeySystemDomain(pssh.systemId)===keySystem);if(psshInfos.length>1){this.warn(`${logMessage} Using first of ${psshInfos.length} pssh found for selected key-system ${keySystem}`);}const psshInfo=psshInfos[0];if(!psshInfo){if(psshResults.length===0||psshResults.some(pssh=>!pssh.systemId)){this.warn(`${logMessage} contains incomplete or invalid pssh data`);}else {this.log(`ignoring ${logMessage} for ${psshResults.map(pssh=>keySystemIdToKeySystemDomain(pssh.systemId)).join(',')} pssh data in favor of playlist keys`);}return;}keySystemDomain=keySystemIdToKeySystemDomain(psshInfo.systemId);if(psshInfo.version===0&&psshInfo.data){if(keySystemDomain===KeySystems.WIDEVINE){const offset=psshInfo.data.length-22;keyId=psshInfo.data.subarray(offset,offset+16);}else if(keySystemDomain===KeySystems.PLAYREADY){keyId=parsePlayReadyWRM(psshInfo.data);}}}if(!keySystemDomain||!keyId){this.log(`Unable to handle ${logMessage} with key-system ${keySystem}`);return;}const keyIdHex=Hex.hexDump(keyId);const{keyIdToKeySessionPromise,mediaKeySessions}=this;let keySessionContextPromise=keyIdToKeySessionPromise[keyIdHex];for(let i=0;i<mediaKeySessions.length;i++){// Match playlist key
const keyContext=mediaKeySessions[i];const decryptdata=keyContext.decryptdata;if(!decryptdata.keyId){continue;}const oldKeyIdHex=Hex.hexDump(decryptdata.keyId);if(keyIdHex===oldKeyIdHex||decryptdata.uri.replace(/-/g,'').indexOf(keyIdHex)!==-1){keySessionContextPromise=keyIdToKeySessionPromise[oldKeyIdHex];if(decryptdata.pssh){break;}delete keyIdToKeySessionPromise[oldKeyIdHex];decryptdata.pssh=new Uint8Array(initData);decryptdata.keyId=keyId;keySessionContextPromise=keyIdToKeySessionPromise[keyIdHex]=keySessionContextPromise.then(()=>{return this.generateRequestWithPreferredKeySession(keyContext,initDataType,initData,'encrypted-event-key-match');});keySessionContextPromise.catch(error=>this.handleError(error));break;}}if(!keySessionContextPromise){if(keySystemDomain!==keySystem){this.log(`Ignoring "${logMessage}" with ${keySystemDomain} init data for selected key-system ${keySystem}`);return;}// "Clear-lead" (misc key not encountered in playlist)
keySessionContextPromise=keyIdToKeySessionPromise[keyIdHex]=this.getKeySystemSelectionPromise([keySystemDomain]).then(({keySystem,mediaKeys})=>{var _keySystemToKeySystem;this.throwIfDestroyed();const decryptdata=new LevelKey('ISO-23001-7',keyIdHex,(_keySystemToKeySystem=keySystemDomainToKeySystemFormat(keySystem))!=null?_keySystemToKeySystem:'');decryptdata.pssh=new Uint8Array(initData);decryptdata.keyId=keyId;return this.attemptSetMediaKeys(keySystem,mediaKeys).then(()=>{this.throwIfDestroyed();const keySessionContext=this.createMediaKeySessionContext({decryptdata,keySystem,mediaKeys});return this.generateRequestWithPreferredKeySession(keySessionContext,initDataType,initData,'encrypted-event-no-match');});});keySessionContextPromise.catch(error=>this.handleError(error));}});};this.onWaitingForKey=event=>{this.log(`"${event.type}" event`);};this.hls=hls;this.config=hls.config;this.registerListeners();}destroy(){this.unregisterListeners();this.onMediaDetached();// Remove any references that could be held in config options or callbacks
const config=this.config;config.requestMediaKeySystemAccessFunc=null;config.licenseXhrSetup=config.licenseResponseCallback=undefined;config.drmSystems=config.drmSystemOptions={};// @ts-ignore
this.hls=this.config=this.keyIdToKeySessionPromise=null;// @ts-ignore
this.onMediaEncrypted=this.onWaitingForKey=null;}registerListeners(){this.hls.on(Events.MEDIA_ATTACHED,this.onMediaAttached,this);this.hls.on(Events.MEDIA_DETACHED,this.onMediaDetached,this);this.hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);this.hls.on(Events.MANIFEST_LOADED,this.onManifestLoaded,this);}unregisterListeners(){this.hls.off(Events.MEDIA_ATTACHED,this.onMediaAttached,this);this.hls.off(Events.MEDIA_DETACHED,this.onMediaDetached,this);this.hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);this.hls.off(Events.MANIFEST_LOADED,this.onManifestLoaded,this);}getLicenseServerUrl(keySystem){const{drmSystems,widevineLicenseUrl}=this.config;const keySystemConfiguration=drmSystems[keySystem];if(keySystemConfiguration){return keySystemConfiguration.licenseUrl;}// For backward compatibility
if(keySystem===KeySystems.WIDEVINE&&widevineLicenseUrl){return widevineLicenseUrl;}}getLicenseServerUrlOrThrow(keySystem){const url=this.getLicenseServerUrl(keySystem);if(url===undefined){throw new Error(`no license server URL configured for key-system "${keySystem}"`);}return url;}getServerCertificateUrl(keySystem){const{drmSystems}=this.config;const keySystemConfiguration=drmSystems[keySystem];if(keySystemConfiguration){return keySystemConfiguration.serverCertificateUrl;}else {this.log(`No Server Certificate in config.drmSystems["${keySystem}"]`);}}attemptKeySystemAccess(keySystemsToAttempt){const levels=this.hls.levels;const uniqueCodec=(value,i,a)=>!!value&&a.indexOf(value)===i;const audioCodecs=levels.map(level=>level.audioCodec).filter(uniqueCodec);const videoCodecs=levels.map(level=>level.videoCodec).filter(uniqueCodec);if(audioCodecs.length+videoCodecs.length===0){videoCodecs.push('avc1.42e01e');}return new Promise((resolve,reject)=>{const attempt=keySystems=>{const keySystem=keySystems.shift();this.getMediaKeysPromise(keySystem,audioCodecs,videoCodecs).then(mediaKeys=>resolve({keySystem,mediaKeys})).catch(error=>{if(keySystems.length){attempt(keySystems);}else if(error instanceof EMEKeyError){reject(error);}else {reject(new EMEKeyError({type:ErrorTypes.KEY_SYSTEM_ERROR,details:ErrorDetails.KEY_SYSTEM_NO_ACCESS,error,fatal:true},error.message));}});};attempt(keySystemsToAttempt);});}requestMediaKeySystemAccess(keySystem,supportedConfigurations){const{requestMediaKeySystemAccessFunc}=this.config;if(!(typeof requestMediaKeySystemAccessFunc==='function')){let errMessage=`Configured requestMediaKeySystemAccess is not a function ${requestMediaKeySystemAccessFunc}`;if(requestMediaKeySystemAccess===null&&self.location.protocol==='http:'){errMessage=`navigator.requestMediaKeySystemAccess is not available over insecure protocol ${location.protocol}`;}return Promise.reject(new Error(errMessage));}return requestMediaKeySystemAccessFunc(keySystem,supportedConfigurations);}getMediaKeysPromise(keySystem,audioCodecs,videoCodecs){// This can throw, but is caught in event handler callpath
const mediaKeySystemConfigs=getSupportedMediaKeySystemConfigurations(keySystem,audioCodecs,videoCodecs,this.config.drmSystemOptions);const keySystemAccessPromises=this.keySystemAccessPromises[keySystem];let keySystemAccess=keySystemAccessPromises==null?void 0:keySystemAccessPromises.keySystemAccess;if(!keySystemAccess){this.log(`Requesting encrypted media "${keySystem}" key-system access with config: ${JSON.stringify(mediaKeySystemConfigs)}`);keySystemAccess=this.requestMediaKeySystemAccess(keySystem,mediaKeySystemConfigs);const _keySystemAccessPromises=this.keySystemAccessPromises[keySystem]={keySystemAccess};keySystemAccess.catch(error=>{this.log(`Failed to obtain access to key-system "${keySystem}": ${error}`);});return keySystemAccess.then(mediaKeySystemAccess=>{this.log(`Access for key-system "${mediaKeySystemAccess.keySystem}" obtained`);const certificateRequest=this.fetchServerCertificate(keySystem);this.log(`Create media-keys for "${keySystem}"`);_keySystemAccessPromises.mediaKeys=mediaKeySystemAccess.createMediaKeys().then(mediaKeys=>{this.log(`Media-keys created for "${keySystem}"`);return certificateRequest.then(certificate=>{if(certificate){return this.setMediaKeysServerCertificate(mediaKeys,keySystem,certificate);}return mediaKeys;});});_keySystemAccessPromises.mediaKeys.catch(error=>{this.error(`Failed to create media-keys for "${keySystem}"}: ${error}`);});return _keySystemAccessPromises.mediaKeys;});}return keySystemAccess.then(()=>keySystemAccessPromises.mediaKeys);}createMediaKeySessionContext({decryptdata,keySystem,mediaKeys}){this.log(`Creating key-system session "${keySystem}" keyId: ${Hex.hexDump(decryptdata.keyId||[])}`);const mediaKeysSession=mediaKeys.createSession();const mediaKeySessionContext={decryptdata,keySystem,mediaKeys,mediaKeysSession,keyStatus:'status-pending'};this.mediaKeySessions.push(mediaKeySessionContext);return mediaKeySessionContext;}renewKeySession(mediaKeySessionContext){const decryptdata=mediaKeySessionContext.decryptdata;if(decryptdata.pssh){const keySessionContext=this.createMediaKeySessionContext(mediaKeySessionContext);const keyId=this.getKeyIdString(decryptdata);const scheme='cenc';this.keyIdToKeySessionPromise[keyId]=this.generateRequestWithPreferredKeySession(keySessionContext,scheme,decryptdata.pssh,'expired');}else {this.warn(`Could not renew expired session. Missing pssh initData.`);}this.removeSession(mediaKeySessionContext);}getKeyIdString(decryptdata){if(!decryptdata){throw new Error('Could not read keyId of undefined decryptdata');}if(decryptdata.keyId===null){throw new Error('keyId is null');}return Hex.hexDump(decryptdata.keyId);}updateKeySession(mediaKeySessionContext,data){var _mediaKeySessionConte;const keySession=mediaKeySessionContext.mediaKeysSession;this.log(`Updating key-session "${keySession.sessionId}" for keyID ${Hex.hexDump(((_mediaKeySessionConte=mediaKeySessionContext.decryptdata)==null?void 0:_mediaKeySessionConte.keyId)||[])}
      } (data length: ${data?data.byteLength:data})`);return keySession.update(data);}selectKeySystemFormat(frag){const keyFormats=Object.keys(frag.levelkeys||{});if(!this.keyFormatPromise){this.log(`Selecting key-system from fragment (sn: ${frag.sn} ${frag.type}: ${frag.level}) key formats ${keyFormats.join(', ')}`);this.keyFormatPromise=this.getKeyFormatPromise(keyFormats);}return this.keyFormatPromise;}getKeyFormatPromise(keyFormats){return new Promise((resolve,reject)=>{const keySystemsInConfig=getKeySystemsForConfig(this.config);const keySystemsToAttempt=keyFormats.map(keySystemFormatToKeySystemDomain).filter(value=>!!value&&keySystemsInConfig.indexOf(value)!==-1);return this.getKeySystemSelectionPromise(keySystemsToAttempt).then(({keySystem})=>{const keySystemFormat=keySystemDomainToKeySystemFormat(keySystem);if(keySystemFormat){resolve(keySystemFormat);}else {reject(new Error(`Unable to find format for key-system "${keySystem}"`));}}).catch(reject);});}loadKey(data){const decryptdata=data.keyInfo.decryptdata;const keyId=this.getKeyIdString(decryptdata);const keyDetails=`(keyId: ${keyId} format: "${decryptdata.keyFormat}" method: ${decryptdata.method} uri: ${decryptdata.uri})`;this.log(`Starting session for key ${keyDetails}`);let keySessionContextPromise=this.keyIdToKeySessionPromise[keyId];if(!keySessionContextPromise){keySessionContextPromise=this.keyIdToKeySessionPromise[keyId]=this.getKeySystemForKeyPromise(decryptdata).then(({keySystem,mediaKeys})=>{this.throwIfDestroyed();this.log(`Handle encrypted media sn: ${data.frag.sn} ${data.frag.type}: ${data.frag.level} using key ${keyDetails}`);return this.attemptSetMediaKeys(keySystem,mediaKeys).then(()=>{this.throwIfDestroyed();const keySessionContext=this.createMediaKeySessionContext({keySystem,mediaKeys,decryptdata});const scheme='cenc';return this.generateRequestWithPreferredKeySession(keySessionContext,scheme,decryptdata.pssh,'playlist-key');});});keySessionContextPromise.catch(error=>this.handleError(error));}return keySessionContextPromise;}throwIfDestroyed(message='Invalid state'){if(!this.hls){throw new Error('invalid state');}}handleError(error){if(!this.hls){return;}this.error(error.message);if(error instanceof EMEKeyError){this.hls.trigger(Events.ERROR,error.data);}else {this.hls.trigger(Events.ERROR,{type:ErrorTypes.KEY_SYSTEM_ERROR,details:ErrorDetails.KEY_SYSTEM_NO_KEYS,error,fatal:true});}}getKeySystemForKeyPromise(decryptdata){const keyId=this.getKeyIdString(decryptdata);const mediaKeySessionContext=this.keyIdToKeySessionPromise[keyId];if(!mediaKeySessionContext){const keySystem=keySystemFormatToKeySystemDomain(decryptdata.keyFormat);const keySystemsToAttempt=keySystem?[keySystem]:getKeySystemsForConfig(this.config);return this.attemptKeySystemAccess(keySystemsToAttempt);}return mediaKeySessionContext;}getKeySystemSelectionPromise(keySystemsToAttempt){if(!keySystemsToAttempt.length){keySystemsToAttempt=getKeySystemsForConfig(this.config);}if(keySystemsToAttempt.length===0){throw new EMEKeyError({type:ErrorTypes.KEY_SYSTEM_ERROR,details:ErrorDetails.KEY_SYSTEM_NO_CONFIGURED_LICENSE,fatal:true},`Missing key-system license configuration options ${JSON.stringify({drmSystems:this.config.drmSystems})}`);}return this.attemptKeySystemAccess(keySystemsToAttempt);}attemptSetMediaKeys(keySystem,mediaKeys){const queue=this.setMediaKeysQueue.slice();this.log(`Setting media-keys for "${keySystem}"`);// Only one setMediaKeys() can run at one time, and multiple setMediaKeys() operations
// can be queued for execution for multiple key sessions.
const setMediaKeysPromise=Promise.all(queue).then(()=>{if(!this.media){throw new Error('Attempted to set mediaKeys without media element attached');}return this.media.setMediaKeys(mediaKeys);});this.setMediaKeysQueue.push(setMediaKeysPromise);return setMediaKeysPromise.then(()=>{this.log(`Media-keys set for "${keySystem}"`);queue.push(setMediaKeysPromise);this.setMediaKeysQueue=this.setMediaKeysQueue.filter(p=>queue.indexOf(p)===-1);});}generateRequestWithPreferredKeySession(context,initDataType,initData,reason){var _this$config$drmSyste,_this$config$drmSyste2;const generateRequestFilter=(_this$config$drmSyste=this.config.drmSystems)==null?void 0:(_this$config$drmSyste2=_this$config$drmSyste[context.keySystem])==null?void 0:_this$config$drmSyste2.generateRequest;if(generateRequestFilter){try{const mappedInitData=generateRequestFilter.call(this.hls,initDataType,initData,context);if(!mappedInitData){throw new Error('Invalid response from configured generateRequest filter');}initDataType=mappedInitData.initDataType;initData=context.decryptdata.pssh=mappedInitData.initData?new Uint8Array(mappedInitData.initData):null;}catch(error){var _this$hls;this.warn(error.message);if((_this$hls=this.hls)!=null&&_this$hls.config.debug){throw error;}}}if(initData===null){this.log(`Skipping key-session request for "${reason}" (no initData)`);return Promise.resolve(context);}const keyId=this.getKeyIdString(context.decryptdata);this.log(`Generating key-session request for "${reason}": ${keyId} (init data type: ${initDataType} length: ${initData?initData.byteLength:null})`);const licenseStatus=new EventEmitter();const onmessage=context._onmessage=event=>{const keySession=context.mediaKeysSession;if(!keySession){licenseStatus.emit('error',new Error('invalid state'));return;}const{messageType,message}=event;this.log(`"${messageType}" message event for session "${keySession.sessionId}" message size: ${message.byteLength}`);if(messageType==='license-request'||messageType==='license-renewal'){this.renewLicense(context,message).catch(error=>{this.handleError(error);licenseStatus.emit('error',error);});}else if(messageType==='license-release'){if(context.keySystem===KeySystems.FAIRPLAY){this.updateKeySession(context,strToUtf8array('acknowledged'));this.removeSession(context);}}else {this.warn(`unhandled media key message type "${messageType}"`);}};const onkeystatuseschange=context._onkeystatuseschange=event=>{const keySession=context.mediaKeysSession;if(!keySession){licenseStatus.emit('error',new Error('invalid state'));return;}this.onKeyStatusChange(context);const keyStatus=context.keyStatus;licenseStatus.emit('keyStatus',keyStatus);if(keyStatus==='expired'){this.warn(`${context.keySystem} expired for key ${keyId}`);this.renewKeySession(context);}};context.mediaKeysSession.addEventListener('message',onmessage);context.mediaKeysSession.addEventListener('keystatuseschange',onkeystatuseschange);const keyUsablePromise=new Promise((resolve,reject)=>{licenseStatus.on('error',reject);licenseStatus.on('keyStatus',keyStatus=>{if(keyStatus.startsWith('usable')){resolve();}else if(keyStatus==='output-restricted'){reject(new EMEKeyError({type:ErrorTypes.KEY_SYSTEM_ERROR,details:ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED,fatal:false},'HDCP level output restricted'));}else if(keyStatus==='internal-error'){reject(new EMEKeyError({type:ErrorTypes.KEY_SYSTEM_ERROR,details:ErrorDetails.KEY_SYSTEM_STATUS_INTERNAL_ERROR,fatal:true},`key status changed to "${keyStatus}"`));}else if(keyStatus==='expired'){reject(new Error('key expired while generating request'));}else {this.warn(`unhandled key status change "${keyStatus}"`);}});});return context.mediaKeysSession.generateRequest(initDataType,initData).then(()=>{var _context$mediaKeysSes;this.log(`Request generated for key-session "${(_context$mediaKeysSes=context.mediaKeysSession)==null?void 0:_context$mediaKeysSes.sessionId}" keyId: ${keyId}`);}).catch(error=>{throw new EMEKeyError({type:ErrorTypes.KEY_SYSTEM_ERROR,details:ErrorDetails.KEY_SYSTEM_NO_SESSION,error,fatal:false},`Error generating key-session request: ${error}`);}).then(()=>keyUsablePromise).catch(error=>{licenseStatus.removeAllListeners();this.removeSession(context);throw error;}).then(()=>{licenseStatus.removeAllListeners();return context;});}onKeyStatusChange(mediaKeySessionContext){mediaKeySessionContext.mediaKeysSession.keyStatuses.forEach((status,keyId)=>{this.log(`key status change "${status}" for keyStatuses keyId: ${Hex.hexDump('buffer'in keyId?new Uint8Array(keyId.buffer,keyId.byteOffset,keyId.byteLength):new Uint8Array(keyId))} session keyId: ${Hex.hexDump(new Uint8Array(mediaKeySessionContext.decryptdata.keyId||[]))} uri: ${mediaKeySessionContext.decryptdata.uri}`);mediaKeySessionContext.keyStatus=status;});}fetchServerCertificate(keySystem){const config=this.config;const Loader=config.loader;const certLoader=new Loader(config);const url=this.getServerCertificateUrl(keySystem);if(!url){return Promise.resolve();}this.log(`Fetching server certificate for "${keySystem}"`);return new Promise((resolve,reject)=>{const loaderContext={responseType:'arraybuffer',url};const loadPolicy=config.certLoadPolicy.default;const loaderConfig={loadPolicy,timeout:loadPolicy.maxLoadTimeMs,maxRetry:0,retryDelay:0,maxRetryDelay:0};const loaderCallbacks={onSuccess:(response,stats,context,networkDetails)=>{resolve(response.data);},onError:(response,contex,networkDetails,stats)=>{reject(new EMEKeyError({type:ErrorTypes.KEY_SYSTEM_ERROR,details:ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,fatal:true,networkDetails,response:_objectSpread2({url:loaderContext.url,data:undefined},response)},`"${keySystem}" certificate request failed (${url}). Status: ${response.code} (${response.text})`));},onTimeout:(stats,context,networkDetails)=>{reject(new EMEKeyError({type:ErrorTypes.KEY_SYSTEM_ERROR,details:ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,fatal:true,networkDetails,response:{url:loaderContext.url,data:undefined}},`"${keySystem}" certificate request timed out (${url})`));},onAbort:(stats,context,networkDetails)=>{reject(new Error('aborted'));}};certLoader.load(loaderContext,loaderConfig,loaderCallbacks);});}setMediaKeysServerCertificate(mediaKeys,keySystem,cert){return new Promise((resolve,reject)=>{mediaKeys.setServerCertificate(cert).then(success=>{this.log(`setServerCertificate ${success?'success':'not supported by CDM'} (${cert==null?void 0:cert.byteLength}) on "${keySystem}"`);resolve(mediaKeys);}).catch(error=>{reject(new EMEKeyError({type:ErrorTypes.KEY_SYSTEM_ERROR,details:ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED,error,fatal:true},error.message));});});}renewLicense(context,keyMessage){return this.requestLicense(context,new Uint8Array(keyMessage)).then(data=>{return this.updateKeySession(context,new Uint8Array(data)).catch(error=>{throw new EMEKeyError({type:ErrorTypes.KEY_SYSTEM_ERROR,details:ErrorDetails.KEY_SYSTEM_SESSION_UPDATE_FAILED,error,fatal:true},error.message);});});}unpackPlayReadyKeyMessage(xhr,licenseChallenge){// On Edge, the raw license message is UTF-16-encoded XML.  We need
// to unpack the Challenge element (base64-encoded string containing the
// actual license request) and any HttpHeader elements (sent as request
// headers).
// For PlayReady CDMs, we need to dig the Challenge out of the XML.
const xmlString=String.fromCharCode.apply(null,new Uint16Array(licenseChallenge.buffer));if(!xmlString.includes('PlayReadyKeyMessage')){// This does not appear to be a wrapped message as on Edge.  Some
// clients do not need this unwrapping, so we will assume this is one of
// them.  Note that "xml" at this point probably looks like random
// garbage, since we interpreted UTF-8 as UTF-16.
xhr.setRequestHeader('Content-Type','text/xml; charset=utf-8');return licenseChallenge;}const keyMessageXml=new DOMParser().parseFromString(xmlString,'application/xml');// Set request headers.
const headers=keyMessageXml.querySelectorAll('HttpHeader');if(headers.length>0){let header;for(let i=0,len=headers.length;i<len;i++){var _header$querySelector,_header$querySelector2;header=headers[i];const name=(_header$querySelector=header.querySelector('name'))==null?void 0:_header$querySelector.textContent;const value=(_header$querySelector2=header.querySelector('value'))==null?void 0:_header$querySelector2.textContent;if(name&&value){xhr.setRequestHeader(name,value);}}}const challengeElement=keyMessageXml.querySelector('Challenge');const challengeText=challengeElement==null?void 0:challengeElement.textContent;if(!challengeText){throw new Error(`Cannot find <Challenge> in key message`);}return strToUtf8array(atob(challengeText));}setupLicenseXHR(xhr,url,keysListItem,licenseChallenge){const licenseXhrSetup=this.config.licenseXhrSetup;if(!licenseXhrSetup){xhr.open('POST',url,true);return Promise.resolve({xhr,licenseChallenge});}return Promise.resolve().then(()=>{if(!keysListItem.decryptdata){throw new Error('Key removed');}return licenseXhrSetup.call(this.hls,xhr,url,keysListItem,licenseChallenge);}).catch(error=>{if(!keysListItem.decryptdata){// Key session removed. Cancel license request.
throw error;}// let's try to open before running setup
xhr.open('POST',url,true);return licenseXhrSetup.call(this.hls,xhr,url,keysListItem,licenseChallenge);}).then(licenseXhrSetupResult=>{// if licenseXhrSetup did not yet call open, let's do it now
if(!xhr.readyState){xhr.open('POST',url,true);}const finalLicenseChallenge=licenseXhrSetupResult?licenseXhrSetupResult:licenseChallenge;return {xhr,licenseChallenge:finalLicenseChallenge};});}requestLicense(keySessionContext,licenseChallenge){const keyLoadPolicy=this.config.keyLoadPolicy.default;return new Promise((resolve,reject)=>{const url=this.getLicenseServerUrlOrThrow(keySessionContext.keySystem);this.log(`Sending license request to URL: ${url}`);const xhr=new XMLHttpRequest();xhr.responseType='arraybuffer';xhr.onreadystatechange=()=>{if(!this.hls||!keySessionContext.mediaKeysSession){return reject(new Error('invalid state'));}if(xhr.readyState===4){if(xhr.status===200){this._requestLicenseFailureCount=0;let data=xhr.response;this.log(`License received ${data instanceof ArrayBuffer?data.byteLength:data}`);const licenseResponseCallback=this.config.licenseResponseCallback;if(licenseResponseCallback){try{data=licenseResponseCallback.call(this.hls,xhr,url,keySessionContext);}catch(error){this.error(error);}}resolve(data);}else {const retryConfig=keyLoadPolicy.errorRetry;const maxNumRetry=retryConfig?retryConfig.maxNumRetry:0;this._requestLicenseFailureCount++;if(this._requestLicenseFailureCount>maxNumRetry||xhr.status>=400&&xhr.status<500){reject(new EMEKeyError({type:ErrorTypes.KEY_SYSTEM_ERROR,details:ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,fatal:true,networkDetails:xhr,response:{url,data:undefined,code:xhr.status,text:xhr.statusText}},`License Request XHR failed (${url}). Status: ${xhr.status} (${xhr.statusText})`));}else {const attemptsLeft=maxNumRetry-this._requestLicenseFailureCount+1;this.warn(`Retrying license request, ${attemptsLeft} attempts left`);this.requestLicense(keySessionContext,licenseChallenge).then(resolve,reject);}}}};if(keySessionContext.licenseXhr&&keySessionContext.licenseXhr.readyState!==XMLHttpRequest.DONE){keySessionContext.licenseXhr.abort();}keySessionContext.licenseXhr=xhr;this.setupLicenseXHR(xhr,url,keySessionContext,licenseChallenge).then(({xhr,licenseChallenge})=>{if(keySessionContext.keySystem==KeySystems.PLAYREADY){licenseChallenge=this.unpackPlayReadyKeyMessage(xhr,licenseChallenge);}xhr.send(licenseChallenge);});});}onMediaAttached(event,data){if(!this.config.emeEnabled){return;}const media=data.media;// keep reference of media
this.media=media;media.removeEventListener('encrypted',this.onMediaEncrypted);media.removeEventListener('waitingforkey',this.onWaitingForKey);media.addEventListener('encrypted',this.onMediaEncrypted);media.addEventListener('waitingforkey',this.onWaitingForKey);}onMediaDetached(){const media=this.media;const mediaKeysList=this.mediaKeySessions;if(media){media.removeEventListener('encrypted',this.onMediaEncrypted);media.removeEventListener('waitingforkey',this.onWaitingForKey);this.media=null;}this._requestLicenseFailureCount=0;this.setMediaKeysQueue=[];this.mediaKeySessions=[];this.keyIdToKeySessionPromise={};LevelKey.clearKeyUriToKeyIdMap();// Close all sessions and remove media keys from the video element.
const keySessionCount=mediaKeysList.length;EMEController.CDMCleanupPromise=Promise.all(mediaKeysList.map(mediaKeySessionContext=>this.removeSession(mediaKeySessionContext)).concat(media==null?void 0:media.setMediaKeys(null).catch(error=>{this.log(`Could not clear media keys: ${error}`);}))).then(()=>{if(keySessionCount){this.log('finished closing key sessions and clearing media keys');mediaKeysList.length=0;}}).catch(error=>{this.log(`Could not close sessions and clear media keys: ${error}`);});}onManifestLoading(){this.keyFormatPromise=null;}onManifestLoaded(event,{sessionKeys}){if(!sessionKeys||!this.config.emeEnabled){return;}if(!this.keyFormatPromise){const keyFormats=sessionKeys.reduce((formats,sessionKey)=>{if(formats.indexOf(sessionKey.keyFormat)===-1){formats.push(sessionKey.keyFormat);}return formats;},[]);this.log(`Selecting key-system from session-keys ${keyFormats.join(', ')}`);this.keyFormatPromise=this.getKeyFormatPromise(keyFormats);}}removeSession(mediaKeySessionContext){const{mediaKeysSession,licenseXhr}=mediaKeySessionContext;if(mediaKeysSession){this.log(`Remove licenses and keys and close session ${mediaKeysSession.sessionId}`);if(mediaKeySessionContext._onmessage){mediaKeysSession.removeEventListener('message',mediaKeySessionContext._onmessage);mediaKeySessionContext._onmessage=undefined;}if(mediaKeySessionContext._onkeystatuseschange){mediaKeysSession.removeEventListener('keystatuseschange',mediaKeySessionContext._onkeystatuseschange);mediaKeySessionContext._onkeystatuseschange=undefined;}if(licenseXhr&&licenseXhr.readyState!==XMLHttpRequest.DONE){licenseXhr.abort();}mediaKeySessionContext.mediaKeysSession=mediaKeySessionContext.decryptdata=mediaKeySessionContext.licenseXhr=undefined;const index=this.mediaKeySessions.indexOf(mediaKeySessionContext);if(index>-1){this.mediaKeySessions.splice(index,1);}return mediaKeysSession.remove().catch(error=>{this.log(`Could not remove session: ${error}`);}).then(()=>{return mediaKeysSession.close();}).catch(error=>{this.log(`Could not close session: ${error}`);});}}}EMEController.CDMCleanupPromise=void 0;class EMEKeyError extends Error{constructor(data,message){super(message);this.data=void 0;data.error||(data.error=new Error(message));this.data=data;data.err=data.error;}}/**
 * Common Media Object Type
 *
 * @group CMCD
 * @group CMSD
 *
 * @beta
 */var CmObjectType;(function(CmObjectType){/**
   * text file, such as a manifest or playlist
   */CmObjectType["MANIFEST"]="m";/**
   * audio only
   */CmObjectType["AUDIO"]="a";/**
   * video only
   */CmObjectType["VIDEO"]="v";/**
   * muxed audio and video
   */CmObjectType["MUXED"]="av";/**
   * init segment
   */CmObjectType["INIT"]="i";/**
   * caption or subtitle
   */CmObjectType["CAPTION"]="c";/**
   * ISOBMFF timed text track
   */CmObjectType["TIMED_TEXT"]="tt";/**
   * cryptographic key, license or certificate.
   */CmObjectType["KEY"]="k";/**
   * other
   */CmObjectType["OTHER"]="o";})(CmObjectType||(CmObjectType={}));/**
 * Common Media Streaming Format
 *
 * @group CMCD
 * @group CMSD
 *
 * @beta
 */var CmStreamingFormat;(function(CmStreamingFormat){/**
   * MPEG DASH
   */CmStreamingFormat["DASH"]="d";/**
   * HTTP Live Streaming (HLS)
   */CmStreamingFormat["HLS"]="h";/**
   * Smooth Streaming
   */CmStreamingFormat["SMOOTH"]="s";/**
   * Other
   */CmStreamingFormat["OTHER"]="o";})(CmStreamingFormat||(CmStreamingFormat={}));/**
 * CMCD header fields.
 *
 * @group CMCD
 *
 * @beta
 */var CmcdHeaderField;(function(CmcdHeaderField){/**
   * keys whose values vary with the object being requested.
   */CmcdHeaderField["OBJECT"]="CMCD-Object";/**
   * keys whose values vary with each request.
   */CmcdHeaderField["REQUEST"]="CMCD-Request";/**
   * keys whose values are expected to be invariant over the life of the session.
   */CmcdHeaderField["SESSION"]="CMCD-Session";/**
   * keys whose values do not vary with every request or object.
   */CmcdHeaderField["STATUS"]="CMCD-Status";})(CmcdHeaderField||(CmcdHeaderField={}));/**
 * The map of CMCD header fields to official CMCD keys.
 *
 * @internal
 *
 * @group CMCD
 */const CmcdHeaderMap={[CmcdHeaderField.OBJECT]:['br','d','ot','tb'],[CmcdHeaderField.REQUEST]:['bl','dl','mtp','nor','nrr','su'],[CmcdHeaderField.SESSION]:['cid','pr','sf','sid','st','v'],[CmcdHeaderField.STATUS]:['bs','rtp']};/**
 * Structured Field Item
 *
 * @group Structured Field
 *
 * @beta
 */class SfItem{constructor(value,params){this.value=void 0;this.params=void 0;if(Array.isArray(value)){value=value.map(v=>v instanceof SfItem?v:new SfItem(v));}this.value=value;this.params=params;}}/**
 * A class to represent structured field tokens when `Symbol` is not available.
 *
 * @group Structured Field
 *
 * @beta
 */class SfToken{constructor(description){this.description=void 0;this.description=description;}}const DICT='Dict';function format(value){if(Array.isArray(value)){return JSON.stringify(value);}if(value instanceof Map){return 'Map{}';}if(value instanceof Set){return 'Set{}';}if(typeof value==='object'){return JSON.stringify(value);}return String(value);}function throwError(action,src,type,cause){return new Error(`failed to ${action} "${format(src)}" as ${type}`,{cause});}const BARE_ITEM='Bare Item';const BOOLEAN='Boolean';const BYTES='Byte Sequence';const DECIMAL='Decimal';const INTEGER='Integer';function isInvalidInt(value){return value<-999999999999999||999999999999999<value;}const STRING_REGEX=/[\x00-\x1f\x7f]+/;// eslint-disable-line no-control-regex
const TOKEN='Token';const KEY='Key';function serializeError(src,type,cause){return throwError('serialize',src,type,cause);}// 4.1.9.  Serializing a Boolean
//
// Given a Boolean as input_boolean, return an ASCII string suitable for
// use in a HTTP field value.
//
// 1.  If input_boolean is not a boolean, fail serialization.
//
// 2.  Let output be an empty string.
//
// 3.  Append "?" to output.
//
// 4.  If input_boolean is true, append "1" to output.
//
// 5.  If input_boolean is false, append "0" to output.
//
// 6.  Return output.
function serializeBoolean(value){if(typeof value!=='boolean'){throw serializeError(value,BOOLEAN);}return value?'?1':'?0';}/**
 * Encodes binary data to base64
 *
 * @param binary - The binary data to encode
 * @returns The base64 encoded string
 *
 * @group Utils
 *
 * @beta
 */function base64encode(binary){return btoa(String.fromCharCode(...binary));}// 4.1.8.  Serializing a Byte Sequence
//
// Given a Byte Sequence as input_bytes, return an ASCII string suitable
// for use in a HTTP field value.
//
// 1.  If input_bytes is not a sequence of bytes, fail serialization.
//
// 2.  Let output be an empty string.
//
// 3.  Append ":" to output.
//
// 4.  Append the result of base64-encoding input_bytes as per
//     [RFC4648], Section 4, taking account of the requirements below.
//
// 5.  Append ":" to output.
//
// 6.  Return output.
//
// The encoded data is required to be padded with "=", as per [RFC4648],
// Section 3.2.
//
// Likewise, encoded data SHOULD have pad bits set to zero, as per
// [RFC4648], Section 3.5, unless it is not possible to do so due to
// implementation constraints.
function serializeByteSequence(value){if(ArrayBuffer.isView(value)===false){throw serializeError(value,BYTES);}return `:${base64encode(value)}:`;}// 4.1.4.  Serializing an Integer
//
// Given an Integer as input_integer, return an ASCII string suitable
// for use in a HTTP field value.
//
// 1.  If input_integer is not an integer in the range of
//     -999,999,999,999,999 to 999,999,999,999,999 inclusive, fail
//     serialization.
//
// 2.  Let output be an empty string.
//
// 3.  If input_integer is less than (but not equal to) 0, append "-" to
//     output.
//
// 4.  Append input_integer's numeric value represented in base 10 using
//     only decimal digits to output.
//
// 5.  Return output.
function serializeInteger(value){if(isInvalidInt(value)){throw serializeError(value,INTEGER);}return value.toString();}// 4.1.10.  Serializing a Date
//
// Given a Date as input_integer, return an ASCII string suitable for
// use in an HTTP field value.
// 1.  Let output be "@".
// 2.  Append to output the result of running Serializing an Integer
//     with input_date (Section 4.1.4).
// 3.  Return output.
function serializeDate(value){return `@${serializeInteger(value.getTime()/1000)}`;}/**
 * This implements the rounding procedure described in step 2 of the "Serializing a Decimal" specification.
 * This rounding style is known as "even rounding", "banker's rounding", or "commercial rounding".
 *
 * @param value - The value to round
 * @param precision - The number of decimal places to round to
 * @returns The rounded value
 *
 * @group Utils
 *
 * @beta
 */function roundToEven(value,precision){if(value<0){return -roundToEven(-value,precision);}const decimalShift=Math.pow(10,precision);const isEquidistant=Math.abs(value*decimalShift%1-0.5)<Number.EPSILON;if(isEquidistant){// If the tail of the decimal place is 'equidistant' we round to the nearest even value
const flooredValue=Math.floor(value*decimalShift);return (flooredValue%2===0?flooredValue:flooredValue+1)/decimalShift;}else {// Otherwise, proceed as normal
return Math.round(value*decimalShift)/decimalShift;}}// 4.1.5.  Serializing a Decimal
//
// Given a decimal number as input_decimal, return an ASCII string
// suitable for use in a HTTP field value.
//
// 1.   If input_decimal is not a decimal number, fail serialization.
//
// 2.   If input_decimal has more than three significant digits to the
//      right of the decimal point, round it to three decimal places,
//      rounding the final digit to the nearest value, or to the even
//      value if it is equidistant.
//
// 3.   If input_decimal has more than 12 significant digits to the left
//      of the decimal point after rounding, fail serialization.
//
// 4.   Let output be an empty string.
//
// 5.   If input_decimal is less than (but not equal to) 0, append "-"
//      to output.
//
// 6.   Append input_decimal's integer component represented in base 10
//      (using only decimal digits) to output; if it is zero, append
//      "0".
//
// 7.   Append "." to output.
//
// 8.   If input_decimal's fractional component is zero, append "0" to
//      output.
//
// 9.   Otherwise, append the significant digits of input_decimal's
//      fractional component represented in base 10 (using only decimal
//      digits) to output.
//
// 10.  Return output.
function serializeDecimal(value){const roundedValue=roundToEven(value,3);// round to 3 decimal places
if(Math.floor(Math.abs(roundedValue)).toString().length>12){throw serializeError(value,DECIMAL);}const stringValue=roundedValue.toString();return stringValue.includes('.')?stringValue:`${stringValue}.0`;}const STRING='String';// 4.1.6.  Serializing a String
//
// Given a String as input_string, return an ASCII string suitable for
// use in a HTTP field value.
//
// 1.  Convert input_string into a sequence of ASCII characters; if
//     conversion fails, fail serialization.
//
// 2.  If input_string contains characters in the range %x00-1f or %x7f
//     (i.e., not in VCHAR or SP), fail serialization.
//
// 3.  Let output be the string DQUOTE.
//
// 4.  For each character char in input_string:
//
//     1.  If char is "\" or DQUOTE:
//
//         1.  Append "\" to output.
//
//     2.  Append char to output.
//
// 5.  Append DQUOTE to output.
//
// 6.  Return output.
function serializeString(value){if(STRING_REGEX.test(value)){throw serializeError(value,STRING);}return `"${value.replace(/\\/g,`\\\\`).replace(/"/g,`\\"`)}"`;}function symbolToStr(symbol){return symbol.description||symbol.toString().slice(7,-1);}function serializeToken(token){const value=symbolToStr(token);if(/^([a-zA-Z*])([!#$%&'*+\-.^_`|~\w:/]*)$/.test(value)===false){throw serializeError(value,TOKEN);}return value;}// 4.1.3.1.  Serializing a Bare Item
//
// Given an Item as input_item, return an ASCII string suitable for use
// in a HTTP field value.
//
// 1.  If input_item is an Integer, return the result of running
//     Serializing an Integer (Section 4.1.4) with input_item.
//
// 2.  If input_item is a Decimal, return the result of running
//     Serializing a Decimal (Section 4.1.5) with input_item.
//
// 3.  If input_item is a String, return the result of running
//     Serializing a String (Section 4.1.6) with input_item.
//
// 4.  If input_item is a Token, return the result of running
//     Serializing a Token (Section 4.1.7) with input_item.
//
// 5.  If input_item is a Boolean, return the result of running
//     Serializing a Boolean (Section 4.1.9) with input_item.
//
// 6.  If input_item is a Byte Sequence, return the result of running
//     Serializing a Byte Sequence (Section 4.1.8) with input_item.
//
// 7.  If input_item is a Date, return the result of running Serializing
//     a Date (Section 4.1.10) with input_item.
//
// 8.  Otherwise, fail serialization.
function serializeBareItem(value){switch(typeof value){case'number':if(!isFiniteNumber(value)){throw serializeError(value,BARE_ITEM);}if(Number.isInteger(value)){return serializeInteger(value);}return serializeDecimal(value);case'string':return serializeString(value);case'symbol':return serializeToken(value);case'boolean':return serializeBoolean(value);case'object':if(value instanceof Date){return serializeDate(value);}if(value instanceof Uint8Array){return serializeByteSequence(value);}if(value instanceof SfToken){return serializeToken(value);}default:// fail
throw serializeError(value,BARE_ITEM);}}// 4.1.1.3.  Serializing a Key
//
// Given a key as input_key, return an ASCII string suitable for use in
// a HTTP field value.
//
// 1.  Convert input_key into a sequence of ASCII characters; if
//     conversion fails, fail serialization.
//
// 2.  If input_key contains characters not in lcalpha, DIGIT, "_", "-",
//     ".", or "*" fail serialization.
//
// 3.  If the first character of input_key is not lcalpha or "*", fail
//     serialization.
//
// 4.  Let output be an empty string.
//
// 5.  Append input_key to output.
//
// 6.  Return output.
function serializeKey(value){if(/^[a-z*][a-z0-9\-_.*]*$/.test(value)===false){throw serializeError(value,KEY);}return value;}// 4.1.1.2.  Serializing Parameters
//
// Given an ordered Dictionary as input_parameters (each member having a
// param_name and a param_value), return an ASCII string suitable for
// use in a HTTP field value.
//
// 1.  Let output be an empty string.
//
// 2.  For each param_name with a value of param_value in
//     input_parameters:
//
//     1.  Append ";" to output.
//
//     2.  Append the result of running Serializing a Key
//         (Section 4.1.1.3) with param_name to output.
//
//     3.  If param_value is not Boolean true:
//
//         1.  Append "=" to output.
//
//         2.  Append the result of running Serializing a bare Item
//             (Section 4.1.3.1) with param_value to output.
//
// 3.  Return output.
function serializeParams(params){if(params==null){return '';}return Object.entries(params).map(([key,value])=>{if(value===true){return `;${serializeKey(key)}`;// omit true
}return `;${serializeKey(key)}=${serializeBareItem(value)}`;}).join('');}// 4.1.3.  Serializing an Item
//
// Given an Item as bare_item and Parameters as item_parameters, return
// an ASCII string suitable for use in a HTTP field value.
//
// 1.  Let output be an empty string.
//
// 2.  Append the result of running Serializing a Bare Item
//     Section 4.1.3.1 with bare_item to output.
//
// 3.  Append the result of running Serializing Parameters
//     Section 4.1.1.2 with item_parameters to output.
//
// 4.  Return output.
function serializeItem(value){if(value instanceof SfItem){return `${serializeBareItem(value.value)}${serializeParams(value.params)}`;}else {return serializeBareItem(value);}}// 4.1.1.1.  Serializing an Inner List
//
// Given an array of (member_value, parameters) tuples as inner_list,
// and parameters as list_parameters, return an ASCII string suitable
// for use in a HTTP field value.
//
// 1.  Let output be the string "(".
//
// 2.  For each (member_value, parameters) of inner_list:
//
//     1.  Append the result of running Serializing an Item
//         (Section 4.1.3) with (member_value, parameters) to output.
//
//     2.  If more values remain in inner_list, append a single SP to
//         output.
//
// 3.  Append ")" to output.
//
// 4.  Append the result of running Serializing Parameters
//     (Section 4.1.1.2) with list_parameters to output.
//
// 5.  Return output.
function serializeInnerList(value){return `(${value.value.map(serializeItem).join(' ')})${serializeParams(value.params)}`;}// 4.1.2.  Serializing a Dictionary
//
// Given an ordered Dictionary as input_dictionary (each member having a
// member_name and a tuple value of (member_value, parameters)), return
// an ASCII string suitable for use in a HTTP field value.
//
// 1.  Let output be an empty string.
//
// 2.  For each member_name with a value of (member_value, parameters)
//     in input_dictionary:
//
//     1.  Append the result of running Serializing a Key
//         (Section 4.1.1.3) with member's member_name to output.
//
//     2.  If member_value is Boolean true:
//
//         1.  Append the result of running Serializing Parameters
//             (Section 4.1.1.2) with parameters to output.
//
//     3.  Otherwise:
//
//         1.  Append "=" to output.
//
//         2.  If member_value is an array, append the result of running
//             Serializing an Inner List (Section 4.1.1.1) with
//             (member_value, parameters) to output.
//
//         3.  Otherwise, append the result of running Serializing an
//             Item (Section 4.1.3) with (member_value, parameters) to
//             output.
//
//     4.  If more members remain in input_dictionary:
//
//         1.  Append "," to output.
//
//         2.  Append a single SP to output.
//
// 3.  Return output.
function serializeDict(dict,options={whitespace:true}){if(typeof dict!=='object'){throw serializeError(dict,DICT);}const entries=dict instanceof Map?dict.entries():Object.entries(dict);const optionalWhiteSpace=options!=null&&options.whitespace?' ':'';return Array.from(entries).map(([key,item])=>{if(item instanceof SfItem===false){item=new SfItem(item);}let output=serializeKey(key);if(item.value===true){output+=serializeParams(item.params);}else {output+='=';if(Array.isArray(item.value)){output+=serializeInnerList(item);}else {output+=serializeItem(item);}}return output;}).join(`,${optionalWhiteSpace}`);}/**
 * Encode an object into a structured field dictionary
 *
 * @param input - The structured field dictionary to encode
 * @returns The structured field string
 *
 * @group Structured Field
 *
 * @beta
 */function encodeSfDict(value,options){return serializeDict(value,options);}/**
 * Checks if the given key is a token field.
 *
 * @param key - The key to check.
 *
 * @returns `true` if the key is a token field.
 *
 * @internal
 *
 * @group CMCD
 */const isTokenField=key=>key==='ot'||key==='sf'||key==='st';const isValid=value=>{if(typeof value==='number'){return isFiniteNumber(value);}return value!=null&&value!==''&&value!==false;};/**
 * Constructs a relative path from a URL.
 *
 * @param url - The destination URL
 * @param base - The base URL
 * @returns The relative path
 *
 * @group Utils
 *
 * @beta
 */function urlToRelativePath(url,base){const to=new URL(url);const from=new URL(base);if(to.origin!==from.origin){return url;}const toPath=to.pathname.split('/').slice(1);const fromPath=from.pathname.split('/').slice(1,-1);// remove common parents
while(toPath[0]===fromPath[0]){toPath.shift();fromPath.shift();}// add back paths
while(fromPath.length){fromPath.shift();toPath.unshift('..');}return toPath.join('/');}/**
 * Generate a random v4 UUID
 *
 * @returns A random v4 UUID
 *
 * @group Utils
 *
 * @beta
 */function uuid(){try{return crypto.randomUUID();}catch(error){try{const url=URL.createObjectURL(new Blob());const uuid=url.toString();URL.revokeObjectURL(url);return uuid.slice(uuid.lastIndexOf('/')+1);}catch(error){let dt=new Date().getTime();const uuid='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,c=>{const r=(dt+Math.random()*16)%16|0;dt=Math.floor(dt/16);return (c=='x'?r:r&0x3|0x8).toString(16);});return uuid;}}}const toRounded=value=>Math.round(value);const toUrlSafe=(value,options)=>{if(options!=null&&options.baseUrl){value=urlToRelativePath(value,options.baseUrl);}return encodeURIComponent(value);};const toHundred=value=>toRounded(value/100)*100;/**
 * The default formatters for CMCD values.
 *
 * @group CMCD
 *
 * @beta
 */const CmcdFormatters={/**
   * Bitrate (kbps) rounded integer
   */br:toRounded,/**
   * Duration (milliseconds) rounded integer
   */d:toRounded,/**
   * Buffer Length (milliseconds) rounded nearest 100ms
   */bl:toHundred,/**
   * Deadline (milliseconds) rounded nearest 100ms
   */dl:toHundred,/**
   * Measured Throughput (kbps) rounded nearest 100kbps
   */mtp:toHundred,/**
   * Next Object Request URL encoded
   */nor:toUrlSafe,/**
   * Requested maximum throughput (kbps) rounded nearest 100kbps
   */rtp:toHundred,/**
   * Top Bitrate (kbps) rounded integer
   */tb:toRounded};/**
 * Internal CMCD processing function.
 *
 * @param obj - The CMCD object to process.
 * @param map - The mapping function to use.
 * @param options - Options for encoding.
 *
 * @internal
 *
 * @group CMCD
 */function processCmcd(obj,options){const results={};if(obj==null||typeof obj!=='object'){return results;}const keys=Object.keys(obj).sort();const formatters=_extends({},CmcdFormatters,options==null?void 0:options.formatters);const filter=options==null?void 0:options.filter;keys.forEach(key=>{if(filter!=null&&filter(key)){return;}let value=obj[key];const formatter=formatters[key];if(formatter){value=formatter(value,options);}// Version should only be reported if not equal to 1.
if(key==='v'&&value===1){return;}// Playback rate should only be sent if not equal to 1.
if(key=='pr'&&value===1){return;}// ignore invalid values
if(!isValid(value)){return;}if(isTokenField(key)&&typeof value==='string'){value=new SfToken(value);}results[key]=value;});return results;}/**
 * Encode a CMCD object to a string.
 *
 * @param cmcd - The CMCD object to encode.
 * @param options - Options for encoding.
 *
 * @returns The encoded CMCD string.
 *
 * @group CMCD
 *
 * @beta
 */function encodeCmcd(cmcd,options={}){if(!cmcd){return '';}return encodeSfDict(processCmcd(cmcd,options),_extends({whitespace:false},options));}/**
 * Convert a CMCD data object to request headers
 *
 * @param cmcd - The CMCD data object to convert.
 * @param options - Options for encoding the CMCD object.
 *
 * @returns The CMCD header shards.
 *
 * @group CMCD
 *
 * @beta
 */function toCmcdHeaders(cmcd,options={}){if(!cmcd){return {};}const entries=Object.entries(cmcd);const headerMap=Object.entries(CmcdHeaderMap).concat(Object.entries((options==null?void 0:options.customHeaderMap)||{}));const shards=entries.reduce((acc,entry)=>{var _headerMap$find,_acc$field;const[key,value]=entry;const field=((_headerMap$find=headerMap.find(entry=>entry[1].includes(key)))==null?void 0:_headerMap$find[0])||CmcdHeaderField.REQUEST;(_acc$field=acc[field])!=null?_acc$field:acc[field]={};acc[field][key]=value;return acc;},{});return Object.entries(shards).reduce((acc,[field,value])=>{acc[field]=encodeCmcd(value,options);return acc;},{});}/**
 * Append CMCD query args to a header object.
 *
 * @param headers - The headers to append to.
 * @param cmcd - The CMCD object to append.
 * @param customHeaderMap - A map of custom CMCD keys to header fields.
 *
 * @returns The headers with the CMCD header shards appended.
 *
 * @group CMCD
 *
 * @beta
 */function appendCmcdHeaders(headers,cmcd,options){return _extends(headers,toCmcdHeaders(cmcd,options));}/**
 * CMCD parameter name.
 *
 * @group CMCD
 *
 * @beta
 */const CMCD_PARAM='CMCD';/**
 * Convert a CMCD data object to a query arg.
 *
 * @param cmcd - The CMCD object to convert.
 * @param options - Options for encoding the CMCD object.
 *
 * @returns The CMCD query arg.
 *
 * @group CMCD
 *
 * @beta
 */function toCmcdQuery(cmcd,options={}){if(!cmcd){return '';}const params=encodeCmcd(cmcd,options);return `${CMCD_PARAM}=${encodeURIComponent(params)}`;}const REGEX=/CMCD=[^&#]+/;/**
 * Append CMCD query args to a URL.
 *
 * @param url - The URL to append to.
 * @param cmcd - The CMCD object to append.
 * @param options - Options for encoding the CMCD object.
 *
 * @returns The URL with the CMCD query args appended.
 *
 * @group CMCD
 *
 * @beta
 */function appendCmcdQuery(url,cmcd,options){// TODO: Replace with URLSearchParams once we drop Safari < 10.1 & Chrome < 49 support.
// https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams
const query=toCmcdQuery(cmcd,options);if(!query){return url;}if(REGEX.test(url)){return url.replace(REGEX,query);}const separator=url.includes('?')?'&':'?';return `${url}${separator}${query}`;}/**
 * Controller to deal with Common Media Client Data (CMCD)
 * @see https://cdn.cta.tech/cta/media/media/resources/standards/pdfs/cta-5004-final.pdf
 */class CMCDController{// eslint-disable-line no-restricted-globals
constructor(hls){this.hls=void 0;this.config=void 0;this.media=void 0;this.sid=void 0;this.cid=void 0;this.useHeaders=false;this.includeKeys=void 0;this.initialized=false;this.starved=false;this.buffering=true;this.audioBuffer=void 0;// eslint-disable-line no-restricted-globals
this.videoBuffer=void 0;this.onWaiting=()=>{if(this.initialized){this.starved=true;}this.buffering=true;};this.onPlaying=()=>{if(!this.initialized){this.initialized=true;}this.buffering=false;};/**
     * Apply CMCD data to a manifest request.
     */this.applyPlaylistData=context=>{try{this.apply(context,{ot:CmObjectType.MANIFEST,su:!this.initialized});}catch(error){logger$2.warn('Could not generate manifest CMCD data.',error);}};/**
     * Apply CMCD data to a segment request
     */this.applyFragmentData=context=>{try{const fragment=context.frag;const level=this.hls.levels[fragment.level];const ot=this.getObjectType(fragment);const data={d:fragment.duration*1000,ot};if(ot===CmObjectType.VIDEO||ot===CmObjectType.AUDIO||ot==CmObjectType.MUXED){data.br=level.bitrate/1000;data.tb=this.getTopBandwidth(ot)/1000;data.bl=this.getBufferLength(ot);}this.apply(context,data);}catch(error){logger$2.warn('Could not generate segment CMCD data.',error);}};this.hls=hls;const config=this.config=hls.config;const{cmcd}=config;if(cmcd!=null){config.pLoader=this.createPlaylistLoader();config.fLoader=this.createFragmentLoader();this.sid=cmcd.sessionId||uuid();this.cid=cmcd.contentId;this.useHeaders=cmcd.useHeaders===true;this.includeKeys=cmcd.includeKeys;this.registerListeners();}}registerListeners(){const hls=this.hls;hls.on(Events.MEDIA_ATTACHED,this.onMediaAttached,this);hls.on(Events.MEDIA_DETACHED,this.onMediaDetached,this);hls.on(Events.BUFFER_CREATED,this.onBufferCreated,this);}unregisterListeners(){const hls=this.hls;hls.off(Events.MEDIA_ATTACHED,this.onMediaAttached,this);hls.off(Events.MEDIA_DETACHED,this.onMediaDetached,this);hls.off(Events.BUFFER_CREATED,this.onBufferCreated,this);}destroy(){this.unregisterListeners();this.onMediaDetached();// @ts-ignore
this.hls=this.config=this.audioBuffer=this.videoBuffer=null;// @ts-ignore
this.onWaiting=this.onPlaying=null;}onMediaAttached(event,data){this.media=data.media;this.media.addEventListener('waiting',this.onWaiting);this.media.addEventListener('playing',this.onPlaying);}onMediaDetached(){if(!this.media){return;}this.media.removeEventListener('waiting',this.onWaiting);this.media.removeEventListener('playing',this.onPlaying);// @ts-ignore
this.media=null;}onBufferCreated(event,data){var _data$tracks$audio,_data$tracks$video;this.audioBuffer=(_data$tracks$audio=data.tracks.audio)==null?void 0:_data$tracks$audio.buffer;this.videoBuffer=(_data$tracks$video=data.tracks.video)==null?void 0:_data$tracks$video.buffer;}/**
   * Create baseline CMCD data
   */createData(){var _this$media;return {v:1,sf:CmStreamingFormat.HLS,sid:this.sid,cid:this.cid,pr:(_this$media=this.media)==null?void 0:_this$media.playbackRate,mtp:this.hls.bandwidthEstimate/1000};}/**
   * Apply CMCD data to a request.
   */apply(context,data={}){// apply baseline data
_extends(data,this.createData());const isVideo=data.ot===CmObjectType.INIT||data.ot===CmObjectType.VIDEO||data.ot===CmObjectType.MUXED;if(this.starved&&isVideo){data.bs=true;data.su=true;this.starved=false;}if(data.su==null){data.su=this.buffering;}// TODO: Implement rtp, nrr, nor, dl
const{includeKeys}=this;if(includeKeys){data=Object.keys(data).reduce((acc,key)=>{includeKeys.includes(key)&&(acc[key]=data[key]);return acc;},{});}if(this.useHeaders){if(!context.headers){context.headers={};}appendCmcdHeaders(context.headers,data);}else {context.url=appendCmcdQuery(context.url,data);}}/**
   * The CMCD object type.
   */getObjectType(fragment){const{type}=fragment;if(type==='subtitle'){return CmObjectType.TIMED_TEXT;}if(fragment.sn==='initSegment'){return CmObjectType.INIT;}if(type==='audio'){return CmObjectType.AUDIO;}if(type==='main'){if(!this.hls.audioTracks.length){return CmObjectType.MUXED;}return CmObjectType.VIDEO;}return undefined;}/**
   * Get the highest bitrate.
   */getTopBandwidth(type){let bitrate=0;let levels;const hls=this.hls;if(type===CmObjectType.AUDIO){levels=hls.audioTracks;}else {const max=hls.maxAutoLevel;const len=max>-1?max+1:hls.levels.length;levels=hls.levels.slice(0,len);}for(const level of levels){if(level.bitrate>bitrate){bitrate=level.bitrate;}}return bitrate>0?bitrate:NaN;}/**
   * Get the buffer length for a media type in milliseconds
   */getBufferLength(type){const media=this.hls.media;const buffer=type===CmObjectType.AUDIO?this.audioBuffer:this.videoBuffer;if(!buffer||!media){return NaN;}const info=BufferHelper.bufferInfo(buffer,media.currentTime,this.config.maxBufferHole);return info.len*1000;}/**
   * Create a playlist loader
   */createPlaylistLoader(){const{pLoader}=this.config;const apply=this.applyPlaylistData;const Ctor=pLoader||this.config.loader;return class CmcdPlaylistLoader{constructor(config){this.loader=void 0;this.loader=new Ctor(config);}get stats(){return this.loader.stats;}get context(){return this.loader.context;}destroy(){this.loader.destroy();}abort(){this.loader.abort();}load(context,config,callbacks){apply(context);this.loader.load(context,config,callbacks);}};}/**
   * Create a playlist loader
   */createFragmentLoader(){const{fLoader}=this.config;const apply=this.applyFragmentData;const Ctor=fLoader||this.config.loader;return class CmcdFragmentLoader{constructor(config){this.loader=void 0;this.loader=new Ctor(config);}get stats(){return this.loader.stats;}get context(){return this.loader.context;}destroy(){this.loader.destroy();}abort(){this.loader.abort();}load(context,config,callbacks){apply(context);this.loader.load(context,config,callbacks);}};}}const PATHWAY_PENALTY_DURATION_MS=300000;class ContentSteeringController{constructor(hls){this.hls=void 0;this.log=void 0;this.loader=null;this.uri=null;this.pathwayId='.';this.pathwayPriority=null;this.timeToLoad=300;this.reloadTimer=-1;this.updated=0;this.started=false;this.enabled=true;this.levels=null;this.audioTracks=null;this.subtitleTracks=null;this.penalizedPathways={};this.hls=hls;this.log=logger$2.log.bind(logger$2,`[content-steering]:`);this.registerListeners();}registerListeners(){const hls=this.hls;hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.on(Events.MANIFEST_LOADED,this.onManifestLoaded,this);hls.on(Events.MANIFEST_PARSED,this.onManifestParsed,this);hls.on(Events.ERROR,this.onError,this);}unregisterListeners(){const hls=this.hls;if(!hls){return;}hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.off(Events.MANIFEST_LOADED,this.onManifestLoaded,this);hls.off(Events.MANIFEST_PARSED,this.onManifestParsed,this);hls.off(Events.ERROR,this.onError,this);}startLoad(){this.started=true;this.clearTimeout();if(this.enabled&&this.uri){if(this.updated){const ttl=this.timeToLoad*1000-(performance.now()-this.updated);if(ttl>0){this.scheduleRefresh(this.uri,ttl);return;}}this.loadSteeringManifest(this.uri);}}stopLoad(){this.started=false;if(this.loader){this.loader.destroy();this.loader=null;}this.clearTimeout();}clearTimeout(){if(this.reloadTimer!==-1){self.clearTimeout(this.reloadTimer);this.reloadTimer=-1;}}destroy(){this.unregisterListeners();this.stopLoad();// @ts-ignore
this.hls=null;this.levels=this.audioTracks=this.subtitleTracks=null;}removeLevel(levelToRemove){const levels=this.levels;if(levels){this.levels=levels.filter(level=>level!==levelToRemove);}}onManifestLoading(){this.stopLoad();this.enabled=true;this.timeToLoad=300;this.updated=0;this.uri=null;this.pathwayId='.';this.levels=this.audioTracks=this.subtitleTracks=null;}onManifestLoaded(event,data){const{contentSteering}=data;if(contentSteering===null){return;}this.pathwayId=contentSteering.pathwayId;this.uri=contentSteering.uri;if(this.started){this.startLoad();}}onManifestParsed(event,data){this.audioTracks=data.audioTracks;this.subtitleTracks=data.subtitleTracks;}onError(event,data){const{errorAction}=data;if((errorAction==null?void 0:errorAction.action)===NetworkErrorAction.SendAlternateToPenaltyBox&&errorAction.flags===ErrorActionFlags.MoveAllAlternatesMatchingHost){const levels=this.levels;let pathwayPriority=this.pathwayPriority;let errorPathway=this.pathwayId;if(data.context){const{groupId,pathwayId,type}=data.context;if(groupId&&levels){errorPathway=this.getPathwayForGroupId(groupId,type,errorPathway);}else if(pathwayId){errorPathway=pathwayId;}}if(!(errorPathway in this.penalizedPathways)){this.penalizedPathways[errorPathway]=performance.now();}if(!pathwayPriority&&levels){// If PATHWAY-PRIORITY was not provided, list pathways for error handling
pathwayPriority=levels.reduce((pathways,level)=>{if(pathways.indexOf(level.pathwayId)===-1){pathways.push(level.pathwayId);}return pathways;},[]);}if(pathwayPriority&&pathwayPriority.length>1){this.updatePathwayPriority(pathwayPriority);errorAction.resolved=this.pathwayId!==errorPathway;}if(!errorAction.resolved){logger$2.warn(`Could not resolve ${data.details} ("${data.error.message}") with content-steering for Pathway: ${errorPathway} levels: ${levels?levels.length:levels} priorities: ${JSON.stringify(pathwayPriority)} penalized: ${JSON.stringify(this.penalizedPathways)}`);}}}filterParsedLevels(levels){// Filter levels to only include those that are in the initial pathway
this.levels=levels;let pathwayLevels=this.getLevelsForPathway(this.pathwayId);if(pathwayLevels.length===0){const pathwayId=levels[0].pathwayId;this.log(`No levels found in Pathway ${this.pathwayId}. Setting initial Pathway to "${pathwayId}"`);pathwayLevels=this.getLevelsForPathway(pathwayId);this.pathwayId=pathwayId;}if(pathwayLevels.length!==levels.length){this.log(`Found ${pathwayLevels.length}/${levels.length} levels in Pathway "${this.pathwayId}"`);}return pathwayLevels;}getLevelsForPathway(pathwayId){if(this.levels===null){return [];}return this.levels.filter(level=>pathwayId===level.pathwayId);}updatePathwayPriority(pathwayPriority){this.pathwayPriority=pathwayPriority;let levels;// Evaluate if we should remove the pathway from the penalized list
const penalizedPathways=this.penalizedPathways;const now=performance.now();Object.keys(penalizedPathways).forEach(pathwayId=>{if(now-penalizedPathways[pathwayId]>PATHWAY_PENALTY_DURATION_MS){delete penalizedPathways[pathwayId];}});for(let i=0;i<pathwayPriority.length;i++){const pathwayId=pathwayPriority[i];if(pathwayId in penalizedPathways){continue;}if(pathwayId===this.pathwayId){return;}const selectedIndex=this.hls.nextLoadLevel;const selectedLevel=this.hls.levels[selectedIndex];levels=this.getLevelsForPathway(pathwayId);if(levels.length>0){this.log(`Setting Pathway to "${pathwayId}"`);this.pathwayId=pathwayId;reassignFragmentLevelIndexes(levels);this.hls.trigger(Events.LEVELS_UPDATED,{levels});// Set LevelController's level to trigger LEVEL_SWITCHING which loads playlist if needed
const levelAfterChange=this.hls.levels[selectedIndex];if(selectedLevel&&levelAfterChange&&this.levels){if(levelAfterChange.attrs['STABLE-VARIANT-ID']!==selectedLevel.attrs['STABLE-VARIANT-ID']&&levelAfterChange.bitrate!==selectedLevel.bitrate){this.log(`Unstable Pathways change from bitrate ${selectedLevel.bitrate} to ${levelAfterChange.bitrate}`);}this.hls.nextLoadLevel=selectedIndex;}break;}}}getPathwayForGroupId(groupId,type,defaultPathway){const levels=this.getLevelsForPathway(defaultPathway).concat(this.levels||[]);for(let i=0;i<levels.length;i++){if(type===PlaylistContextType.AUDIO_TRACK&&levels[i].hasAudioGroup(groupId)||type===PlaylistContextType.SUBTITLE_TRACK&&levels[i].hasSubtitleGroup(groupId)){return levels[i].pathwayId;}}return defaultPathway;}clonePathways(pathwayClones){const levels=this.levels;if(!levels){return;}const audioGroupCloneMap={};const subtitleGroupCloneMap={};pathwayClones.forEach(pathwayClone=>{const{ID:cloneId,'BASE-ID':baseId,'URI-REPLACEMENT':uriReplacement}=pathwayClone;if(levels.some(level=>level.pathwayId===cloneId)){return;}const clonedVariants=this.getLevelsForPathway(baseId).map(baseLevel=>{const attributes=new AttrList(baseLevel.attrs);attributes['PATHWAY-ID']=cloneId;const clonedAudioGroupId=attributes.AUDIO&&`${attributes.AUDIO}_clone_${cloneId}`;const clonedSubtitleGroupId=attributes.SUBTITLES&&`${attributes.SUBTITLES}_clone_${cloneId}`;if(clonedAudioGroupId){audioGroupCloneMap[attributes.AUDIO]=clonedAudioGroupId;attributes.AUDIO=clonedAudioGroupId;}if(clonedSubtitleGroupId){subtitleGroupCloneMap[attributes.SUBTITLES]=clonedSubtitleGroupId;attributes.SUBTITLES=clonedSubtitleGroupId;}const url=performUriReplacement(baseLevel.uri,attributes['STABLE-VARIANT-ID'],'PER-VARIANT-URIS',uriReplacement);const clonedLevel=new Level({attrs:attributes,audioCodec:baseLevel.audioCodec,bitrate:baseLevel.bitrate,height:baseLevel.height,name:baseLevel.name,url,videoCodec:baseLevel.videoCodec,width:baseLevel.width});if(baseLevel.audioGroups){for(let i=1;i<baseLevel.audioGroups.length;i++){clonedLevel.addGroupId('audio',`${baseLevel.audioGroups[i]}_clone_${cloneId}`);}}if(baseLevel.subtitleGroups){for(let i=1;i<baseLevel.subtitleGroups.length;i++){clonedLevel.addGroupId('text',`${baseLevel.subtitleGroups[i]}_clone_${cloneId}`);}}return clonedLevel;});levels.push(...clonedVariants);cloneRenditionGroups(this.audioTracks,audioGroupCloneMap,uriReplacement,cloneId);cloneRenditionGroups(this.subtitleTracks,subtitleGroupCloneMap,uriReplacement,cloneId);});}loadSteeringManifest(uri){const config=this.hls.config;const Loader=config.loader;if(this.loader){this.loader.destroy();}this.loader=new Loader(config);let url;try{url=new self.URL(uri);}catch(error){this.enabled=false;this.log(`Failed to parse Steering Manifest URI: ${uri}`);return;}if(url.protocol!=='data:'){const throughput=(this.hls.bandwidthEstimate||config.abrEwmaDefaultEstimate)|0;url.searchParams.set('_HLS_pathway',this.pathwayId);url.searchParams.set('_HLS_throughput',''+throughput);}const context={responseType:'json',url:url.href};const loadPolicy=config.steeringManifestLoadPolicy.default;const legacyRetryCompatibility=loadPolicy.errorRetry||loadPolicy.timeoutRetry||{};const loaderConfig={loadPolicy,timeout:loadPolicy.maxLoadTimeMs,maxRetry:legacyRetryCompatibility.maxNumRetry||0,retryDelay:legacyRetryCompatibility.retryDelayMs||0,maxRetryDelay:legacyRetryCompatibility.maxRetryDelayMs||0};const callbacks={onSuccess:(response,stats,context,networkDetails)=>{this.log(`Loaded steering manifest: "${url}"`);const steeringData=response.data;if(steeringData.VERSION!==1){this.log(`Steering VERSION ${steeringData.VERSION} not supported!`);return;}this.updated=performance.now();this.timeToLoad=steeringData.TTL;const{'RELOAD-URI':reloadUri,'PATHWAY-CLONES':pathwayClones,'PATHWAY-PRIORITY':pathwayPriority}=steeringData;if(reloadUri){try{this.uri=new self.URL(reloadUri,url).href;}catch(error){this.enabled=false;this.log(`Failed to parse Steering Manifest RELOAD-URI: ${reloadUri}`);return;}}this.scheduleRefresh(this.uri||context.url);if(pathwayClones){this.clonePathways(pathwayClones);}const loadedSteeringData={steeringManifest:steeringData,url:url.toString()};this.hls.trigger(Events.STEERING_MANIFEST_LOADED,loadedSteeringData);if(pathwayPriority){this.updatePathwayPriority(pathwayPriority);}},onError:(error,context,networkDetails,stats)=>{this.log(`Error loading steering manifest: ${error.code} ${error.text} (${context.url})`);this.stopLoad();if(error.code===410){this.enabled=false;this.log(`Steering manifest ${context.url} no longer available`);return;}let ttl=this.timeToLoad*1000;if(error.code===429){const loader=this.loader;if(typeof(loader==null?void 0:loader.getResponseHeader)==='function'){const retryAfter=loader.getResponseHeader('Retry-After');if(retryAfter){ttl=parseFloat(retryAfter)*1000;}}this.log(`Steering manifest ${context.url} rate limited`);return;}this.scheduleRefresh(this.uri||context.url,ttl);},onTimeout:(stats,context,networkDetails)=>{this.log(`Timeout loading steering manifest (${context.url})`);this.scheduleRefresh(this.uri||context.url);}};this.log(`Requesting steering manifest: ${url}`);this.loader.load(context,loaderConfig,callbacks);}scheduleRefresh(uri,ttlMs=this.timeToLoad*1000){this.clearTimeout();this.reloadTimer=self.setTimeout(()=>{var _this$hls;const media=(_this$hls=this.hls)==null?void 0:_this$hls.media;if(media&&!media.ended){this.loadSteeringManifest(uri);return;}this.scheduleRefresh(uri,this.timeToLoad*1000);},ttlMs);}}function cloneRenditionGroups(tracks,groupCloneMap,uriReplacement,cloneId){if(!tracks){return;}Object.keys(groupCloneMap).forEach(audioGroupId=>{const clonedTracks=tracks.filter(track=>track.groupId===audioGroupId).map(track=>{const clonedTrack=_extends({},track);clonedTrack.details=undefined;clonedTrack.attrs=new AttrList(clonedTrack.attrs);clonedTrack.url=clonedTrack.attrs.URI=performUriReplacement(track.url,track.attrs['STABLE-RENDITION-ID'],'PER-RENDITION-URIS',uriReplacement);clonedTrack.groupId=clonedTrack.attrs['GROUP-ID']=groupCloneMap[audioGroupId];clonedTrack.attrs['PATHWAY-ID']=cloneId;return clonedTrack;});tracks.push(...clonedTracks);});}function performUriReplacement(uri,stableId,perOptionKey,uriReplacement){const{HOST:host,PARAMS:params,[perOptionKey]:perOptionUris}=uriReplacement;let perVariantUri;if(stableId){perVariantUri=perOptionUris==null?void 0:perOptionUris[stableId];if(perVariantUri){uri=perVariantUri;}}const url=new self.URL(uri);if(host&&!perVariantUri){url.host=host;}if(params){Object.keys(params).sort().forEach(key=>{if(key){url.searchParams.set(key,params[key]);}});}return url.href;}const AGE_HEADER_LINE_REGEX=/^age:\s*[\d.]+\s*$/im;class XhrLoader{constructor(config){this.xhrSetup=void 0;this.requestTimeout=void 0;this.retryTimeout=void 0;this.retryDelay=void 0;this.config=null;this.callbacks=null;this.context=null;this.loader=null;this.stats=void 0;this.xhrSetup=config?config.xhrSetup||null:null;this.stats=new LoadStats();this.retryDelay=0;}destroy(){this.callbacks=null;this.abortInternal();this.loader=null;this.config=null;this.context=null;this.xhrSetup=null;}abortInternal(){const loader=this.loader;self.clearTimeout(this.requestTimeout);self.clearTimeout(this.retryTimeout);if(loader){loader.onreadystatechange=null;loader.onprogress=null;if(loader.readyState!==4){this.stats.aborted=true;loader.abort();}}}abort(){var _this$callbacks;this.abortInternal();if((_this$callbacks=this.callbacks)!=null&&_this$callbacks.onAbort){this.callbacks.onAbort(this.stats,this.context,this.loader);}}load(context,config,callbacks){if(this.stats.loading.start){throw new Error('Loader can only be used once.');}this.stats.loading.start=self.performance.now();this.context=context;this.config=config;this.callbacks=callbacks;this.loadInternal();}loadInternal(){const{config,context}=this;if(!config||!context){return;}const xhr=this.loader=new self.XMLHttpRequest();const stats=this.stats;stats.loading.first=0;stats.loaded=0;stats.aborted=false;const xhrSetup=this.xhrSetup;if(xhrSetup){Promise.resolve().then(()=>{if(this.loader!==xhr||this.stats.aborted)return;return xhrSetup(xhr,context.url);}).catch(error=>{if(this.loader!==xhr||this.stats.aborted)return;xhr.open('GET',context.url,true);return xhrSetup(xhr,context.url);}).then(()=>{if(this.loader!==xhr||this.stats.aborted)return;this.openAndSendXhr(xhr,context,config);}).catch(error=>{// IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS
this.callbacks.onError({code:xhr.status,text:error.message},context,xhr,stats);return;});}else {this.openAndSendXhr(xhr,context,config);}}openAndSendXhr(xhr,context,config){if(!xhr.readyState){xhr.open('GET',context.url,true);}const headers=context.headers;const{maxTimeToFirstByteMs,maxLoadTimeMs}=config.loadPolicy;if(headers){for(const header in headers){xhr.setRequestHeader(header,headers[header]);}}if(context.rangeEnd){xhr.setRequestHeader('Range','bytes='+context.rangeStart+'-'+(context.rangeEnd-1));}xhr.onreadystatechange=this.readystatechange.bind(this);xhr.onprogress=this.loadprogress.bind(this);xhr.responseType=context.responseType;// setup timeout before we perform request
self.clearTimeout(this.requestTimeout);config.timeout=maxTimeToFirstByteMs&&isFiniteNumber(maxTimeToFirstByteMs)?maxTimeToFirstByteMs:maxLoadTimeMs;this.requestTimeout=self.setTimeout(this.loadtimeout.bind(this),config.timeout);xhr.send();}readystatechange(){const{context,loader:xhr,stats}=this;if(!context||!xhr){return;}const readyState=xhr.readyState;const config=this.config;// don't proceed if xhr has been aborted
if(stats.aborted){return;}// >= HEADERS_RECEIVED
if(readyState>=2){if(stats.loading.first===0){stats.loading.first=Math.max(self.performance.now(),stats.loading.start);// readyState >= 2 AND readyState !==4 (readyState = HEADERS_RECEIVED || LOADING) rearm timeout as xhr not finished yet
if(config.timeout!==config.loadPolicy.maxLoadTimeMs){self.clearTimeout(this.requestTimeout);config.timeout=config.loadPolicy.maxLoadTimeMs;this.requestTimeout=self.setTimeout(this.loadtimeout.bind(this),config.loadPolicy.maxLoadTimeMs-(stats.loading.first-stats.loading.start));}}if(readyState===4){self.clearTimeout(this.requestTimeout);xhr.onreadystatechange=null;xhr.onprogress=null;const status=xhr.status;// http status between 200 to 299 are all successful
const useResponseText=xhr.responseType==='text'?xhr.responseText:null;if(status>=200&&status<300){const data=useResponseText!=null?useResponseText:xhr.response;if(data!=null){stats.loading.end=Math.max(self.performance.now(),stats.loading.first);const len=xhr.responseType==='arraybuffer'?data.byteLength:data.length;stats.loaded=stats.total=len;stats.bwEstimate=stats.total*8000/(stats.loading.end-stats.loading.first);if(!this.callbacks){return;}const onProgress=this.callbacks.onProgress;if(onProgress){onProgress(stats,context,data,xhr);}if(!this.callbacks){return;}const _response={url:xhr.responseURL,data:data,code:status};this.callbacks.onSuccess(_response,stats,context,xhr);return;}}// Handle bad status or nullish response
const retryConfig=config.loadPolicy.errorRetry;const retryCount=stats.retry;// if max nb of retries reached or if http status between 400 and 499 (such error cannot be recovered, retrying is useless), return error
const response={url:context.url,data:undefined,code:status};if(shouldRetry(retryConfig,retryCount,false,response)){this.retry(retryConfig);}else {logger$2.error(`${status} while loading ${context.url}`);this.callbacks.onError({code:status,text:xhr.statusText},context,xhr,stats);}}}}loadtimeout(){if(!this.config)return;const retryConfig=this.config.loadPolicy.timeoutRetry;const retryCount=this.stats.retry;if(shouldRetry(retryConfig,retryCount,true)){this.retry(retryConfig);}else {var _this$context;logger$2.warn(`timeout while loading ${(_this$context=this.context)==null?void 0:_this$context.url}`);const callbacks=this.callbacks;if(callbacks){this.abortInternal();callbacks.onTimeout(this.stats,this.context,this.loader);}}}retry(retryConfig){const{context,stats}=this;this.retryDelay=getRetryDelay(retryConfig,stats.retry);stats.retry++;logger$2.warn(`${status?'HTTP Status '+status:'Timeout'} while loading ${context==null?void 0:context.url}, retrying ${stats.retry}/${retryConfig.maxNumRetry} in ${this.retryDelay}ms`);// abort and reset internal state
this.abortInternal();this.loader=null;// schedule retry
self.clearTimeout(this.retryTimeout);this.retryTimeout=self.setTimeout(this.loadInternal.bind(this),this.retryDelay);}loadprogress(event){const stats=this.stats;stats.loaded=event.loaded;if(event.lengthComputable){stats.total=event.total;}}getCacheAge(){let result=null;if(this.loader&&AGE_HEADER_LINE_REGEX.test(this.loader.getAllResponseHeaders())){const ageHeader=this.loader.getResponseHeader('age');result=ageHeader?parseFloat(ageHeader):null;}return result;}getResponseHeader(name){if(this.loader&&new RegExp(`^${name}:\\s*[\\d.]+\\s*$`,'im').test(this.loader.getAllResponseHeaders())){return this.loader.getResponseHeader(name);}return null;}}function fetchSupported(){if(// @ts-ignore
self.fetch&&self.AbortController&&self.ReadableStream&&self.Request){try{new self.ReadableStream({});// eslint-disable-line no-new
return true;}catch(e){/* noop */}}return false;}const BYTERANGE=/(\d+)-(\d+)\/(\d+)/;class FetchLoader{constructor(config/* HlsConfig */){this.fetchSetup=void 0;this.requestTimeout=void 0;this.request=null;this.response=null;this.controller=void 0;this.context=null;this.config=null;this.callbacks=null;this.stats=void 0;this.loader=null;this.fetchSetup=config.fetchSetup||getRequest;this.controller=new self.AbortController();this.stats=new LoadStats();}destroy(){this.loader=this.callbacks=this.context=this.config=this.request=null;this.abortInternal();this.response=null;// @ts-ignore
this.fetchSetup=this.controller=this.stats=null;}abortInternal(){if(this.controller&&!this.stats.loading.end){this.stats.aborted=true;this.controller.abort();}}abort(){var _this$callbacks;this.abortInternal();if((_this$callbacks=this.callbacks)!=null&&_this$callbacks.onAbort){this.callbacks.onAbort(this.stats,this.context,this.response);}}load(context,config,callbacks){const stats=this.stats;if(stats.loading.start){throw new Error('Loader can only be used once.');}stats.loading.start=self.performance.now();const initParams=getRequestParameters(context,this.controller.signal);const onProgress=callbacks.onProgress;const isArrayBuffer=context.responseType==='arraybuffer';const LENGTH=isArrayBuffer?'byteLength':'length';const{maxTimeToFirstByteMs,maxLoadTimeMs}=config.loadPolicy;this.context=context;this.config=config;this.callbacks=callbacks;this.request=this.fetchSetup(context,initParams);self.clearTimeout(this.requestTimeout);config.timeout=maxTimeToFirstByteMs&&isFiniteNumber(maxTimeToFirstByteMs)?maxTimeToFirstByteMs:maxLoadTimeMs;this.requestTimeout=self.setTimeout(()=>{this.abortInternal();callbacks.onTimeout(stats,context,this.response);},config.timeout);self.fetch(this.request).then(response=>{this.response=this.loader=response;const first=Math.max(self.performance.now(),stats.loading.start);self.clearTimeout(this.requestTimeout);config.timeout=maxLoadTimeMs;this.requestTimeout=self.setTimeout(()=>{this.abortInternal();callbacks.onTimeout(stats,context,this.response);},maxLoadTimeMs-(first-stats.loading.start));if(!response.ok){const{status,statusText}=response;throw new FetchError(statusText||'fetch, bad network response',status,response);}stats.loading.first=first;stats.total=getContentLength(response.headers)||stats.total;if(onProgress&&isFiniteNumber(config.highWaterMark)){return this.loadProgressively(response,stats,context,config.highWaterMark,onProgress);}if(isArrayBuffer){return response.arrayBuffer();}if(context.responseType==='json'){return response.json();}return response.text();}).then(responseData=>{const response=this.response;if(!response){throw new Error('loader destroyed');}self.clearTimeout(this.requestTimeout);stats.loading.end=Math.max(self.performance.now(),stats.loading.first);const total=responseData[LENGTH];if(total){stats.loaded=stats.total=total;}const loaderResponse={url:response.url,data:responseData,code:response.status};if(onProgress&&!isFiniteNumber(config.highWaterMark)){onProgress(stats,context,responseData,response);}callbacks.onSuccess(loaderResponse,stats,context,response);}).catch(error=>{self.clearTimeout(this.requestTimeout);if(stats.aborted){return;}// CORS errors result in an undefined code. Set it to 0 here to align with XHR's behavior
// when destroying, 'error' itself can be undefined
const code=!error?0:error.code||0;const text=!error?null:error.message;callbacks.onError({code,text},context,error?error.details:null,stats);});}getCacheAge(){let result=null;if(this.response){const ageHeader=this.response.headers.get('age');result=ageHeader?parseFloat(ageHeader):null;}return result;}getResponseHeader(name){return this.response?this.response.headers.get(name):null;}loadProgressively(response,stats,context,highWaterMark=0,onProgress){const chunkCache=new ChunkCache();const reader=response.body.getReader();const pump=()=>{return reader.read().then(data=>{if(data.done){if(chunkCache.dataLength){onProgress(stats,context,chunkCache.flush(),response);}return Promise.resolve(new ArrayBuffer(0));}const chunk=data.value;const len=chunk.length;stats.loaded+=len;if(len<highWaterMark||chunkCache.dataLength){// The current chunk is too small to to be emitted or the cache already has data
// Push it to the cache
chunkCache.push(chunk);if(chunkCache.dataLength>=highWaterMark){// flush in order to join the typed arrays
onProgress(stats,context,chunkCache.flush(),response);}}else {// If there's nothing cached already, and the chache is large enough
// just emit the progress event
onProgress(stats,context,chunk,response);}return pump();}).catch(()=>{/* aborted */return Promise.reject();});};return pump();}}function getRequestParameters(context,signal){const initParams={method:'GET',mode:'cors',credentials:'same-origin',signal,headers:new self.Headers(_extends({},context.headers))};if(context.rangeEnd){initParams.headers.set('Range','bytes='+context.rangeStart+'-'+String(context.rangeEnd-1));}return initParams;}function getByteRangeLength(byteRangeHeader){const result=BYTERANGE.exec(byteRangeHeader);if(result){return parseInt(result[2])-parseInt(result[1])+1;}}function getContentLength(headers){const contentRange=headers.get('Content-Range');if(contentRange){const byteRangeLength=getByteRangeLength(contentRange);if(isFiniteNumber(byteRangeLength)){return byteRangeLength;}}const contentLength=headers.get('Content-Length');if(contentLength){return parseInt(contentLength);}}function getRequest(context,initParams){return new self.Request(context.url,initParams);}class FetchError extends Error{constructor(message,code,details){super(message);this.code=void 0;this.details=void 0;this.code=code;this.details=details;}}const WHITESPACE_CHAR=/\s/;const Cues={newCue(track,startTime,endTime,captionScreen){const result=[];let row;// the type data states this is VTTCue, but it can potentially be a TextTrackCue on old browsers
let cue;let indenting;let indent;let text;const Cue=self.VTTCue||self.TextTrackCue;for(let r=0;r<captionScreen.rows.length;r++){row=captionScreen.rows[r];indenting=true;indent=0;text='';if(!row.isEmpty()){var _track$cues;for(let c=0;c<row.chars.length;c++){if(WHITESPACE_CHAR.test(row.chars[c].uchar)&&indenting){indent++;}else {text+=row.chars[c].uchar;indenting=false;}}// To be used for cleaning-up orphaned roll-up captions
row.cueStartTime=startTime;// Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE
if(startTime===endTime){endTime+=0.0001;}if(indent>=16){indent--;}else {indent++;}const cueText=fixLineBreaks(text.trim());const id=generateCueId(startTime,endTime,cueText);// If this cue already exists in the track do not push it
if(!(track!=null&&(_track$cues=track.cues)!=null&&_track$cues.getCueById(id))){cue=new Cue(startTime,endTime,cueText);cue.id=id;cue.line=r+1;cue.align='left';// Clamp the position between 10 and 80 percent (CEA-608 PAC indent code)
// https://dvcs.w3.org/hg/text-tracks/raw-file/default/608toVTT/608toVTT.html#positioning-in-cea-608
// Firefox throws an exception and captions break with out of bounds 0-100 values
cue.position=10+Math.min(80,Math.floor(indent*8/32)*10);result.push(cue);}}}if(track&&result.length){// Sort bottom cues in reverse order so that they render in line order when overlapping in Chrome
result.sort((cueA,cueB)=>{if(cueA.line==='auto'||cueB.line==='auto'){return 0;}if(cueA.line>8&&cueB.line>8){return cueB.line-cueA.line;}return cueA.line-cueB.line;});result.forEach(cue=>addCueToTrack(track,cue));}return result;}};/**
 * @deprecated use fragLoadPolicy.default
 *//**
 * @deprecated use manifestLoadPolicy.default and playlistLoadPolicy.default
 */const defaultLoadPolicy={maxTimeToFirstByteMs:8000,maxLoadTimeMs:20000,timeoutRetry:null,errorRetry:null};/**
 * @ignore
 * If possible, keep hlsDefaultConfig shallow
 * It is cloned whenever a new Hls instance is created, by keeping the config
 * shallow the properties are cloned, and we don't end up manipulating the default
 */const hlsDefaultConfig=_objectSpread2(_objectSpread2({autoStartLoad:true,// used by stream-controller
startPosition:-1,// used by stream-controller
defaultAudioCodec:undefined,// used by stream-controller
debug:false,// used by logger
capLevelOnFPSDrop:false,// used by fps-controller
capLevelToPlayerSize:false,// used by cap-level-controller
ignoreDevicePixelRatio:false,// used by cap-level-controller
preferManagedMediaSource:true,initialLiveManifestSize:1,// used by stream-controller
maxBufferLength:30,// used by stream-controller
backBufferLength:Infinity,// used by buffer-controller
frontBufferFlushThreshold:Infinity,maxBufferSize:60*1000*1000,// used by stream-controller
maxBufferHole:0.1,// used by stream-controller
highBufferWatchdogPeriod:2,// used by stream-controller
nudgeOffset:0.1,// used by stream-controller
nudgeMaxRetry:3,// used by stream-controller
maxFragLookUpTolerance:0.25,// used by stream-controller
liveSyncDurationCount:3,// used by latency-controller
liveMaxLatencyDurationCount:Infinity,// used by latency-controller
liveSyncDuration:undefined,// used by latency-controller
liveMaxLatencyDuration:undefined,// used by latency-controller
maxLiveSyncPlaybackRate:1,// used by latency-controller
liveDurationInfinity:false,// used by buffer-controller
/**
   * @deprecated use backBufferLength
   */liveBackBufferLength:null,// used by buffer-controller
maxMaxBufferLength:600,// used by stream-controller
enableWorker:true,// used by transmuxer
workerPath:null,// used by transmuxer
enableSoftwareAES:true,// used by decrypter
startLevel:undefined,// used by level-controller
startFragPrefetch:false,// used by stream-controller
fpsDroppedMonitoringPeriod:5000,// used by fps-controller
fpsDroppedMonitoringThreshold:0.2,// used by fps-controller
appendErrorMaxRetry:3,// used by buffer-controller
loader:XhrLoader,// loader: FetchLoader,
fLoader:undefined,// used by fragment-loader
pLoader:undefined,// used by playlist-loader
xhrSetup:undefined,// used by xhr-loader
licenseXhrSetup:undefined,// used by eme-controller
licenseResponseCallback:undefined,// used by eme-controller
abrController:AbrController,bufferController:BufferController,capLevelController:CapLevelController,errorController:ErrorController,fpsController:FPSController,stretchShortVideoTrack:false,// used by mp4-remuxer
maxAudioFramesDrift:1,// used by mp4-remuxer
forceKeyFrameOnDiscontinuity:true,// used by ts-demuxer
abrEwmaFastLive:3,// used by abr-controller
abrEwmaSlowLive:9,// used by abr-controller
abrEwmaFastVoD:3,// used by abr-controller
abrEwmaSlowVoD:9,// used by abr-controller
abrEwmaDefaultEstimate:5e5,// 500 kbps  // used by abr-controller
abrEwmaDefaultEstimateMax:5e6,// 5 mbps
abrBandWidthFactor:0.95,// used by abr-controller
abrBandWidthUpFactor:0.7,// used by abr-controller
abrMaxWithRealBitrate:false,// used by abr-controller
maxStarvationDelay:4,// used by abr-controller
maxLoadingDelay:4,// used by abr-controller
minAutoBitrate:0,// used by hls
emeEnabled:false,// used by eme-controller
widevineLicenseUrl:undefined,// used by eme-controller
drmSystems:{},// used by eme-controller
drmSystemOptions:{},// used by eme-controller
requestMediaKeySystemAccessFunc:requestMediaKeySystemAccess,// used by eme-controller
testBandwidth:true,progressive:false,lowLatencyMode:true,cmcd:undefined,enableDateRangeMetadataCues:true,enableEmsgMetadataCues:true,enableID3MetadataCues:true,useMediaCapabilities:true,certLoadPolicy:{default:defaultLoadPolicy},keyLoadPolicy:{default:{maxTimeToFirstByteMs:8000,maxLoadTimeMs:20000,timeoutRetry:{maxNumRetry:1,retryDelayMs:1000,maxRetryDelayMs:20000,backoff:'linear'},errorRetry:{maxNumRetry:8,retryDelayMs:1000,maxRetryDelayMs:20000,backoff:'linear'}}},manifestLoadPolicy:{default:{maxTimeToFirstByteMs:Infinity,maxLoadTimeMs:20000,timeoutRetry:{maxNumRetry:2,retryDelayMs:0,maxRetryDelayMs:0},errorRetry:{maxNumRetry:1,retryDelayMs:1000,maxRetryDelayMs:8000}}},playlistLoadPolicy:{default:{maxTimeToFirstByteMs:10000,maxLoadTimeMs:20000,timeoutRetry:{maxNumRetry:2,retryDelayMs:0,maxRetryDelayMs:0},errorRetry:{maxNumRetry:2,retryDelayMs:1000,maxRetryDelayMs:8000}}},fragLoadPolicy:{default:{maxTimeToFirstByteMs:10000,maxLoadTimeMs:120000,timeoutRetry:{maxNumRetry:4,retryDelayMs:0,maxRetryDelayMs:0},errorRetry:{maxNumRetry:6,retryDelayMs:1000,maxRetryDelayMs:8000}}},steeringManifestLoadPolicy:{default:{maxTimeToFirstByteMs:10000,maxLoadTimeMs:20000,timeoutRetry:{maxNumRetry:2,retryDelayMs:0,maxRetryDelayMs:0},errorRetry:{maxNumRetry:1,retryDelayMs:1000,maxRetryDelayMs:8000}}},// These default settings are deprecated in favor of the above policies
// and are maintained for backwards compatibility
manifestLoadingTimeOut:10000,manifestLoadingMaxRetry:1,manifestLoadingRetryDelay:1000,manifestLoadingMaxRetryTimeout:64000,levelLoadingTimeOut:10000,levelLoadingMaxRetry:4,levelLoadingRetryDelay:1000,levelLoadingMaxRetryTimeout:64000,fragLoadingTimeOut:20000,fragLoadingMaxRetry:6,fragLoadingRetryDelay:1000,fragLoadingMaxRetryTimeout:64000},timelineConfig()),{},{subtitleStreamController:SubtitleStreamController,subtitleTrackController:SubtitleTrackController,timelineController:TimelineController,audioStreamController:AudioStreamController,audioTrackController:AudioTrackController,emeController:EMEController,cmcdController:CMCDController,contentSteeringController:ContentSteeringController});function timelineConfig(){return {cueHandler:Cues,// used by timeline-controller
enableWebVTT:true,// used by timeline-controller
enableIMSC1:true,// used by timeline-controller
enableCEA708Captions:true,// used by timeline-controller
captionsTextTrack1Label:'English',// used by timeline-controller
captionsTextTrack1LanguageCode:'en',// used by timeline-controller
captionsTextTrack2Label:'Spanish',// used by timeline-controller
captionsTextTrack2LanguageCode:'es',// used by timeline-controller
captionsTextTrack3Label:'Unknown CC',// used by timeline-controller
captionsTextTrack3LanguageCode:'',// used by timeline-controller
captionsTextTrack4Label:'Unknown CC',// used by timeline-controller
captionsTextTrack4LanguageCode:'',// used by timeline-controller
renderTextTracksNatively:true};}/**
 * @ignore
 */function mergeConfig(defaultConfig,userConfig){if((userConfig.liveSyncDurationCount||userConfig.liveMaxLatencyDurationCount)&&(userConfig.liveSyncDuration||userConfig.liveMaxLatencyDuration)){throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");}if(userConfig.liveMaxLatencyDurationCount!==undefined&&(userConfig.liveSyncDurationCount===undefined||userConfig.liveMaxLatencyDurationCount<=userConfig.liveSyncDurationCount)){throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"');}if(userConfig.liveMaxLatencyDuration!==undefined&&(userConfig.liveSyncDuration===undefined||userConfig.liveMaxLatencyDuration<=userConfig.liveSyncDuration)){throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"');}const defaultsCopy=deepCpy(defaultConfig);// Backwards compatibility with deprecated config values
const deprecatedSettingTypes=['manifest','level','frag'];const deprecatedSettings=['TimeOut','MaxRetry','RetryDelay','MaxRetryTimeout'];deprecatedSettingTypes.forEach(type=>{const policyName=`${type==='level'?'playlist':type}LoadPolicy`;const policyNotSet=userConfig[policyName]===undefined;const report=[];deprecatedSettings.forEach(setting=>{const deprecatedSetting=`${type}Loading${setting}`;const value=userConfig[deprecatedSetting];if(value!==undefined&&policyNotSet){report.push(deprecatedSetting);const settings=defaultsCopy[policyName].default;userConfig[policyName]={default:settings};switch(setting){case'TimeOut':settings.maxLoadTimeMs=value;settings.maxTimeToFirstByteMs=value;break;case'MaxRetry':settings.errorRetry.maxNumRetry=value;settings.timeoutRetry.maxNumRetry=value;break;case'RetryDelay':settings.errorRetry.retryDelayMs=value;settings.timeoutRetry.retryDelayMs=value;break;case'MaxRetryTimeout':settings.errorRetry.maxRetryDelayMs=value;settings.timeoutRetry.maxRetryDelayMs=value;break;}}});if(report.length){logger$2.warn(`hls.js config: "${report.join('", "')}" setting(s) are deprecated, use "${policyName}": ${JSON.stringify(userConfig[policyName])}`);}});return _objectSpread2(_objectSpread2({},defaultsCopy),userConfig);}function deepCpy(obj){if(obj&&typeof obj==='object'){if(Array.isArray(obj)){return obj.map(deepCpy);}return Object.keys(obj).reduce((result,key)=>{result[key]=deepCpy(obj[key]);return result;},{});}return obj;}/**
 * @ignore
 */function enableStreamingMode(config){const currentLoader=config.loader;if(currentLoader!==FetchLoader&&currentLoader!==XhrLoader){// If a developer has configured their own loader, respect that choice
logger$2.log('[config]: Custom loader detected, cannot enable progressive streaming');config.progressive=false;}else {const canStreamProgressively=fetchSupported();if(canStreamProgressively){config.loader=FetchLoader;config.progressive=true;config.enableSoftwareAES=true;logger$2.log('[config]: Progressive streaming enabled, using FetchLoader');}}}let chromeOrFirefox;class LevelController extends BasePlaylistController{constructor(hls,contentSteeringController){super(hls,'[level-controller]');this._levels=[];this._firstLevel=-1;this._maxAutoLevel=-1;this._startLevel=void 0;this.currentLevel=null;this.currentLevelIndex=-1;this.manualLevelIndex=-1;this.steering=void 0;this.onParsedComplete=void 0;this.steering=contentSteeringController;this._registerListeners();}_registerListeners(){const{hls}=this;hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.on(Events.MANIFEST_LOADED,this.onManifestLoaded,this);hls.on(Events.LEVEL_LOADED,this.onLevelLoaded,this);hls.on(Events.LEVELS_UPDATED,this.onLevelsUpdated,this);hls.on(Events.FRAG_BUFFERED,this.onFragBuffered,this);hls.on(Events.ERROR,this.onError,this);}_unregisterListeners(){const{hls}=this;hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.off(Events.MANIFEST_LOADED,this.onManifestLoaded,this);hls.off(Events.LEVEL_LOADED,this.onLevelLoaded,this);hls.off(Events.LEVELS_UPDATED,this.onLevelsUpdated,this);hls.off(Events.FRAG_BUFFERED,this.onFragBuffered,this);hls.off(Events.ERROR,this.onError,this);}destroy(){this._unregisterListeners();this.steering=null;this.resetLevels();super.destroy();}stopLoad(){const levels=this._levels;// clean up live level details to force reload them, and reset load errors
levels.forEach(level=>{level.loadError=0;level.fragmentError=0;});super.stopLoad();}resetLevels(){this._startLevel=undefined;this.manualLevelIndex=-1;this.currentLevelIndex=-1;this.currentLevel=null;this._levels=[];this._maxAutoLevel=-1;}onManifestLoading(event,data){this.resetLevels();}onManifestLoaded(event,data){const preferManagedMediaSource=this.hls.config.preferManagedMediaSource;const levels=[];const redundantSet={};const generatePathwaySet={};let resolutionFound=false;let videoCodecFound=false;let audioCodecFound=false;data.levels.forEach(levelParsed=>{var _audioCodec,_videoCodec;const attributes=levelParsed.attrs;// erase audio codec info if browser does not support mp4a.40.34.
// demuxer will autodetect codec and fallback to mpeg/audio
let{audioCodec,videoCodec}=levelParsed;if(((_audioCodec=audioCodec)==null?void 0:_audioCodec.indexOf('mp4a.40.34'))!==-1){chromeOrFirefox||(chromeOrFirefox=/chrome|firefox/i.test(navigator.userAgent));if(chromeOrFirefox){levelParsed.audioCodec=audioCodec=undefined;}}if(audioCodec){levelParsed.audioCodec=audioCodec=getCodecCompatibleName(audioCodec,preferManagedMediaSource);}if(((_videoCodec=videoCodec)==null?void 0:_videoCodec.indexOf('avc1'))===0){videoCodec=levelParsed.videoCodec=convertAVC1ToAVCOTI(videoCodec);}// only keep levels with supported audio/video codecs
const{width,height,unknownCodecs}=levelParsed;resolutionFound||(resolutionFound=!!(width&&height));videoCodecFound||(videoCodecFound=!!videoCodec);audioCodecFound||(audioCodecFound=!!audioCodec);if(unknownCodecs!=null&&unknownCodecs.length||audioCodec&&!areCodecsMediaSourceSupported(audioCodec,'audio',preferManagedMediaSource)||videoCodec&&!areCodecsMediaSourceSupported(videoCodec,'video',preferManagedMediaSource)){return;}const{CODECS,'FRAME-RATE':FRAMERATE,'HDCP-LEVEL':HDCP,'PATHWAY-ID':PATHWAY,RESOLUTION,'VIDEO-RANGE':VIDEO_RANGE}=attributes;const contentSteeringPrefix=`${PATHWAY||'.'}-`;const levelKey=`${contentSteeringPrefix}${levelParsed.bitrate}-${RESOLUTION}-${FRAMERATE}-${CODECS}-${VIDEO_RANGE}-${HDCP}`;if(!redundantSet[levelKey]){const level=new Level(levelParsed);redundantSet[levelKey]=level;generatePathwaySet[levelKey]=1;levels.push(level);}else if(redundantSet[levelKey].uri!==levelParsed.url&&!levelParsed.attrs['PATHWAY-ID']){// Assign Pathway IDs to Redundant Streams (default Pathways is ".". Redundant Streams "..", "...", and so on.)
// Content Steering controller to handles Pathway fallback on error
const pathwayCount=generatePathwaySet[levelKey]+=1;levelParsed.attrs['PATHWAY-ID']=new Array(pathwayCount+1).join('.');const level=new Level(levelParsed);redundantSet[levelKey]=level;levels.push(level);}else {redundantSet[levelKey].addGroupId('audio',attributes.AUDIO);redundantSet[levelKey].addGroupId('text',attributes.SUBTITLES);}});this.filterAndSortMediaOptions(levels,data,resolutionFound,videoCodecFound,audioCodecFound);}filterAndSortMediaOptions(filteredLevels,data,resolutionFound,videoCodecFound,audioCodecFound){let audioTracks=[];let subtitleTracks=[];let levels=filteredLevels;// remove audio-only and invalid video-range levels if we also have levels with video codecs or RESOLUTION signalled
if((resolutionFound||videoCodecFound)&&audioCodecFound){levels=levels.filter(({videoCodec,videoRange,width,height})=>(!!videoCodec||!!(width&&height))&&isVideoRange(videoRange));}if(levels.length===0){// Dispatch error after MANIFEST_LOADED is done propagating
Promise.resolve().then(()=>{if(this.hls){if(data.levels.length){this.warn(`One or more CODECS in variant not supported: ${JSON.stringify(data.levels[0].attrs)}`);}const error=new Error('no level with compatible codecs found in manifest');this.hls.trigger(Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR,fatal:true,url:data.url,error,reason:error.message});}});return;}if(data.audioTracks){const{preferManagedMediaSource}=this.hls.config;audioTracks=data.audioTracks.filter(track=>!track.audioCodec||areCodecsMediaSourceSupported(track.audioCodec,'audio',preferManagedMediaSource));// Assign ids after filtering as array indices by group-id
assignTrackIdsByGroup(audioTracks);}if(data.subtitles){subtitleTracks=data.subtitles;assignTrackIdsByGroup(subtitleTracks);}// start bitrate is the first bitrate of the manifest
const unsortedLevels=levels.slice(0);// sort levels from lowest to highest
levels.sort((a,b)=>{if(a.attrs['HDCP-LEVEL']!==b.attrs['HDCP-LEVEL']){return (a.attrs['HDCP-LEVEL']||'')>(b.attrs['HDCP-LEVEL']||'')?1:-1;}// sort on height before bitrate for cap-level-controller
if(resolutionFound&&a.height!==b.height){return a.height-b.height;}if(a.frameRate!==b.frameRate){return a.frameRate-b.frameRate;}if(a.videoRange!==b.videoRange){return VideoRangeValues.indexOf(a.videoRange)-VideoRangeValues.indexOf(b.videoRange);}if(a.videoCodec!==b.videoCodec){const valueA=videoCodecPreferenceValue(a.videoCodec);const valueB=videoCodecPreferenceValue(b.videoCodec);if(valueA!==valueB){return valueB-valueA;}}if(a.uri===b.uri&&a.codecSet!==b.codecSet){const valueA=codecsSetSelectionPreferenceValue(a.codecSet);const valueB=codecsSetSelectionPreferenceValue(b.codecSet);if(valueA!==valueB){return valueB-valueA;}}if(a.averageBitrate!==b.averageBitrate){return a.averageBitrate-b.averageBitrate;}return 0;});let firstLevelInPlaylist=unsortedLevels[0];if(this.steering){levels=this.steering.filterParsedLevels(levels);if(levels.length!==unsortedLevels.length){for(let i=0;i<unsortedLevels.length;i++){if(unsortedLevels[i].pathwayId===levels[0].pathwayId){firstLevelInPlaylist=unsortedLevels[i];break;}}}}this._levels=levels;// find index of first level in sorted levels
for(let i=0;i<levels.length;i++){if(levels[i]===firstLevelInPlaylist){var _this$hls$userConfig;this._firstLevel=i;const firstLevelBitrate=firstLevelInPlaylist.bitrate;const bandwidthEstimate=this.hls.bandwidthEstimate;this.log(`manifest loaded, ${levels.length} level(s) found, first bitrate: ${firstLevelBitrate}`);// Update default bwe to first variant bitrate as long it has not been configured or set
if(((_this$hls$userConfig=this.hls.userConfig)==null?void 0:_this$hls$userConfig.abrEwmaDefaultEstimate)===undefined){const startingBwEstimate=Math.min(firstLevelBitrate,this.hls.config.abrEwmaDefaultEstimateMax);if(startingBwEstimate>bandwidthEstimate&&bandwidthEstimate===hlsDefaultConfig.abrEwmaDefaultEstimate){this.hls.bandwidthEstimate=startingBwEstimate;}}break;}}// Audio is only alternate if manifest include a URI along with the audio group tag,
// and this is not an audio-only stream where levels contain audio-only
const audioOnly=audioCodecFound&&!videoCodecFound;const edata={levels,audioTracks,subtitleTracks,sessionData:data.sessionData,sessionKeys:data.sessionKeys,firstLevel:this._firstLevel,stats:data.stats,audio:audioCodecFound,video:videoCodecFound,altAudio:!audioOnly&&audioTracks.some(t=>!!t.url)};this.hls.trigger(Events.MANIFEST_PARSED,edata);// Initiate loading after all controllers have received MANIFEST_PARSED
if(this.hls.config.autoStartLoad||this.hls.forceStartLoad){this.hls.startLoad(this.hls.config.startPosition);}}get levels(){if(this._levels.length===0){return null;}return this._levels;}get level(){return this.currentLevelIndex;}set level(newLevel){const levels=this._levels;if(levels.length===0){return;}// check if level idx is valid
if(newLevel<0||newLevel>=levels.length){// invalid level id given, trigger error
const error=new Error('invalid level idx');const fatal=newLevel<0;this.hls.trigger(Events.ERROR,{type:ErrorTypes.OTHER_ERROR,details:ErrorDetails.LEVEL_SWITCH_ERROR,level:newLevel,fatal,error,reason:error.message});if(fatal){return;}newLevel=Math.min(newLevel,levels.length-1);}const lastLevelIndex=this.currentLevelIndex;const lastLevel=this.currentLevel;const lastPathwayId=lastLevel?lastLevel.attrs['PATHWAY-ID']:undefined;const level=levels[newLevel];const pathwayId=level.attrs['PATHWAY-ID'];this.currentLevelIndex=newLevel;this.currentLevel=level;if(lastLevelIndex===newLevel&&level.details&&lastLevel&&lastPathwayId===pathwayId){return;}this.log(`Switching to level ${newLevel} (${level.height?level.height+'p ':''}${level.videoRange?level.videoRange+' ':''}${level.codecSet?level.codecSet+' ':''}@${level.bitrate})${pathwayId?' with Pathway '+pathwayId:''} from level ${lastLevelIndex}${lastPathwayId?' with Pathway '+lastPathwayId:''}`);const levelSwitchingData={level:newLevel,attrs:level.attrs,details:level.details,bitrate:level.bitrate,averageBitrate:level.averageBitrate,maxBitrate:level.maxBitrate,realBitrate:level.realBitrate,width:level.width,height:level.height,codecSet:level.codecSet,audioCodec:level.audioCodec,videoCodec:level.videoCodec,audioGroups:level.audioGroups,subtitleGroups:level.subtitleGroups,loaded:level.loaded,loadError:level.loadError,fragmentError:level.fragmentError,name:level.name,id:level.id,uri:level.uri,url:level.url,urlId:0,audioGroupIds:level.audioGroupIds,textGroupIds:level.textGroupIds};this.hls.trigger(Events.LEVEL_SWITCHING,levelSwitchingData);// check if we need to load playlist for this level
const levelDetails=level.details;if(!levelDetails||levelDetails.live){// level not retrieved yet, or live playlist we need to (re)load it
const hlsUrlParameters=this.switchParams(level.uri,lastLevel==null?void 0:lastLevel.details,levelDetails);this.loadPlaylist(hlsUrlParameters);}}get manualLevel(){return this.manualLevelIndex;}set manualLevel(newLevel){this.manualLevelIndex=newLevel;if(this._startLevel===undefined){this._startLevel=newLevel;}if(newLevel!==-1){this.level=newLevel;}}get firstLevel(){return this._firstLevel;}set firstLevel(newLevel){this._firstLevel=newLevel;}get startLevel(){// Setting hls.startLevel (this._startLevel) overrides config.startLevel
if(this._startLevel===undefined){const configStartLevel=this.hls.config.startLevel;if(configStartLevel!==undefined){return configStartLevel;}return this.hls.firstAutoLevel;}return this._startLevel;}set startLevel(newLevel){this._startLevel=newLevel;}onError(event,data){if(data.fatal||!data.context){return;}if(data.context.type===PlaylistContextType.LEVEL&&data.context.level===this.level){this.checkRetry(data);}}// reset errors on the successful load of a fragment
onFragBuffered(event,{frag}){if(frag!==undefined&&frag.type===PlaylistLevelType.MAIN){const el=frag.elementaryStreams;if(!Object.keys(el).some(type=>!!el[type])){return;}const level=this._levels[frag.level];if(level!=null&&level.loadError){this.log(`Resetting level error count of ${level.loadError} on frag buffered`);level.loadError=0;}}}onLevelLoaded(event,data){var _data$deliveryDirecti2;const{level,details}=data;const curLevel=this._levels[level];if(!curLevel){var _data$deliveryDirecti;this.warn(`Invalid level index ${level}`);if((_data$deliveryDirecti=data.deliveryDirectives)!=null&&_data$deliveryDirecti.skip){details.deltaUpdateFailed=true;}return;}// only process level loaded events matching with expected level
if(level===this.currentLevelIndex){// reset level load error counter on successful level loaded only if there is no issues with fragments
if(curLevel.fragmentError===0){curLevel.loadError=0;}this.playlistLoaded(level,data,curLevel.details);}else if((_data$deliveryDirecti2=data.deliveryDirectives)!=null&&_data$deliveryDirecti2.skip){// received a delta playlist update that cannot be merged
details.deltaUpdateFailed=true;}}loadPlaylist(hlsUrlParameters){super.loadPlaylist();const currentLevelIndex=this.currentLevelIndex;const currentLevel=this.currentLevel;if(currentLevel&&this.shouldLoadPlaylist(currentLevel)){let url=currentLevel.uri;if(hlsUrlParameters){try{url=hlsUrlParameters.addDirectives(url);}catch(error){this.warn(`Could not construct new URL with HLS Delivery Directives: ${error}`);}}const pathwayId=currentLevel.attrs['PATHWAY-ID'];this.log(`Loading level index ${currentLevelIndex}${(hlsUrlParameters==null?void 0:hlsUrlParameters.msn)!==undefined?' at sn '+hlsUrlParameters.msn+' part '+hlsUrlParameters.part:''} with${pathwayId?' Pathway '+pathwayId:''} ${url}`);// console.log('Current audio track group ID:', this.hls.audioTracks[this.hls.audioTrack].groupId);
// console.log('New video quality level audio group id:', levelObject.attrs.AUDIO, level);
this.clearTimer();this.hls.trigger(Events.LEVEL_LOADING,{url,level:currentLevelIndex,pathwayId:currentLevel.attrs['PATHWAY-ID'],id:0,// Deprecated Level urlId
deliveryDirectives:hlsUrlParameters||null});}}get nextLoadLevel(){if(this.manualLevelIndex!==-1){return this.manualLevelIndex;}else {return this.hls.nextAutoLevel;}}set nextLoadLevel(nextLevel){this.level=nextLevel;if(this.manualLevelIndex===-1){this.hls.nextAutoLevel=nextLevel;}}removeLevel(levelIndex){var _this$currentLevel;const levels=this._levels.filter((level,index)=>{if(index!==levelIndex){return true;}if(this.steering){this.steering.removeLevel(level);}if(level===this.currentLevel){this.currentLevel=null;this.currentLevelIndex=-1;if(level.details){level.details.fragments.forEach(f=>f.level=-1);}}return false;});reassignFragmentLevelIndexes(levels);this._levels=levels;if(this.currentLevelIndex>-1&&(_this$currentLevel=this.currentLevel)!=null&&_this$currentLevel.details){this.currentLevelIndex=this.currentLevel.details.fragments[0].level;}this.hls.trigger(Events.LEVELS_UPDATED,{levels});}onLevelsUpdated(event,{levels}){this._levels=levels;}checkMaxAutoUpdated(){const{autoLevelCapping,maxAutoLevel,maxHdcpLevel}=this.hls;if(this._maxAutoLevel!==maxAutoLevel){this._maxAutoLevel=maxAutoLevel;this.hls.trigger(Events.MAX_AUTO_LEVEL_UPDATED,{autoLevelCapping,levels:this.levels,maxAutoLevel,minAutoLevel:this.hls.minAutoLevel,maxHdcpLevel});}}}function assignTrackIdsByGroup(tracks){const groups={};tracks.forEach(track=>{const groupId=track.groupId||'';track.id=groups[groupId]=groups[groupId]||0;groups[groupId]++;});}class KeyLoader{constructor(config){this.config=void 0;this.keyUriToKeyInfo={};this.emeController=null;this.config=config;}abort(type){for(const uri in this.keyUriToKeyInfo){const loader=this.keyUriToKeyInfo[uri].loader;if(loader){var _loader$context;if(type&&type!==((_loader$context=loader.context)==null?void 0:_loader$context.frag.type)){return;}loader.abort();}}}detach(){for(const uri in this.keyUriToKeyInfo){const keyInfo=this.keyUriToKeyInfo[uri];// Remove cached EME keys on detach
if(keyInfo.mediaKeySessionContext||keyInfo.decryptdata.isCommonEncryption){delete this.keyUriToKeyInfo[uri];}}}destroy(){this.detach();for(const uri in this.keyUriToKeyInfo){const loader=this.keyUriToKeyInfo[uri].loader;if(loader){loader.destroy();}}this.keyUriToKeyInfo={};}createKeyLoadError(frag,details=ErrorDetails.KEY_LOAD_ERROR,error,networkDetails,response){return new LoadError({type:ErrorTypes.NETWORK_ERROR,details,fatal:false,frag,response,error,networkDetails});}loadClear(loadingFrag,encryptedFragments){if(this.emeController&&this.config.emeEnabled){// access key-system with nearest key on start (loaidng frag is unencrypted)
const{sn,cc}=loadingFrag;for(let i=0;i<encryptedFragments.length;i++){const frag=encryptedFragments[i];if(cc<=frag.cc&&(sn==='initSegment'||frag.sn==='initSegment'||sn<frag.sn)){this.emeController.selectKeySystemFormat(frag).then(keySystemFormat=>{frag.setKeyFormat(keySystemFormat);});break;}}}}load(frag){if(!frag.decryptdata&&frag.encrypted&&this.emeController&&this.config.emeEnabled){// Multiple keys, but none selected, resolve in eme-controller
return this.emeController.selectKeySystemFormat(frag).then(keySystemFormat=>{return this.loadInternal(frag,keySystemFormat);});}return this.loadInternal(frag);}loadInternal(frag,keySystemFormat){var _keyInfo,_keyInfo2;if(keySystemFormat){frag.setKeyFormat(keySystemFormat);}const decryptdata=frag.decryptdata;if(!decryptdata){const error=new Error(keySystemFormat?`Expected frag.decryptdata to be defined after setting format ${keySystemFormat}`:'Missing decryption data on fragment in onKeyLoading');return Promise.reject(this.createKeyLoadError(frag,ErrorDetails.KEY_LOAD_ERROR,error));}const uri=decryptdata.uri;if(!uri){return Promise.reject(this.createKeyLoadError(frag,ErrorDetails.KEY_LOAD_ERROR,new Error(`Invalid key URI: "${uri}"`)));}let keyInfo=this.keyUriToKeyInfo[uri];if((_keyInfo=keyInfo)!=null&&_keyInfo.decryptdata.key){decryptdata.key=keyInfo.decryptdata.key;return Promise.resolve({frag,keyInfo});}// Return key load promise as long as it does not have a mediakey session with an unusable key status
if((_keyInfo2=keyInfo)!=null&&_keyInfo2.keyLoadPromise){var _keyInfo$mediaKeySess;switch((_keyInfo$mediaKeySess=keyInfo.mediaKeySessionContext)==null?void 0:_keyInfo$mediaKeySess.keyStatus){case undefined:case'status-pending':case'usable':case'usable-in-future':return keyInfo.keyLoadPromise.then(keyLoadedData=>{// Return the correct fragment with updated decryptdata key and loaded keyInfo
decryptdata.key=keyLoadedData.keyInfo.decryptdata.key;return {frag,keyInfo};});}// If we have a key session and status and it is not pending or usable, continue
// This will go back to the eme-controller for expired keys to get a new keyLoadPromise
}// Load the key or return the loading promise
keyInfo=this.keyUriToKeyInfo[uri]={decryptdata,keyLoadPromise:null,loader:null,mediaKeySessionContext:null};switch(decryptdata.method){case'ISO-23001-7':case'SAMPLE-AES':case'SAMPLE-AES-CENC':case'SAMPLE-AES-CTR':if(decryptdata.keyFormat==='identity'){// loadKeyHTTP handles http(s) and data URLs
return this.loadKeyHTTP(keyInfo,frag);}return this.loadKeyEME(keyInfo,frag);case'AES-128':return this.loadKeyHTTP(keyInfo,frag);default:return Promise.reject(this.createKeyLoadError(frag,ErrorDetails.KEY_LOAD_ERROR,new Error(`Key supplied with unsupported METHOD: "${decryptdata.method}"`)));}}loadKeyEME(keyInfo,frag){const keyLoadedData={frag,keyInfo};if(this.emeController&&this.config.emeEnabled){const keySessionContextPromise=this.emeController.loadKey(keyLoadedData);if(keySessionContextPromise){return (keyInfo.keyLoadPromise=keySessionContextPromise.then(keySessionContext=>{keyInfo.mediaKeySessionContext=keySessionContext;return keyLoadedData;})).catch(error=>{// Remove promise for license renewal or retry
keyInfo.keyLoadPromise=null;throw error;});}}return Promise.resolve(keyLoadedData);}loadKeyHTTP(keyInfo,frag){const config=this.config;const Loader=config.loader;const keyLoader=new Loader(config);frag.keyLoader=keyInfo.loader=keyLoader;return keyInfo.keyLoadPromise=new Promise((resolve,reject)=>{const loaderContext={keyInfo,frag,responseType:'arraybuffer',url:keyInfo.decryptdata.uri};// maxRetry is 0 so that instead of retrying the same key on the same variant multiple times,
// key-loader will trigger an error and rely on stream-controller to handle retry logic.
// this will also align retry logic with fragment-loader
const loadPolicy=config.keyLoadPolicy.default;const loaderConfig={loadPolicy,timeout:loadPolicy.maxLoadTimeMs,maxRetry:0,retryDelay:0,maxRetryDelay:0};const loaderCallbacks={onSuccess:(response,stats,context,networkDetails)=>{const{frag,keyInfo,url:uri}=context;if(!frag.decryptdata||keyInfo!==this.keyUriToKeyInfo[uri]){return reject(this.createKeyLoadError(frag,ErrorDetails.KEY_LOAD_ERROR,new Error('after key load, decryptdata unset or changed'),networkDetails));}keyInfo.decryptdata.key=frag.decryptdata.key=new Uint8Array(response.data);// detach fragment key loader on load success
frag.keyLoader=null;keyInfo.loader=null;resolve({frag,keyInfo});},onError:(response,context,networkDetails,stats)=>{this.resetLoader(context);reject(this.createKeyLoadError(frag,ErrorDetails.KEY_LOAD_ERROR,new Error(`HTTP Error ${response.code} loading key ${response.text}`),networkDetails,_objectSpread2({url:loaderContext.url,data:undefined},response)));},onTimeout:(stats,context,networkDetails)=>{this.resetLoader(context);reject(this.createKeyLoadError(frag,ErrorDetails.KEY_LOAD_TIMEOUT,new Error('key loading timed out'),networkDetails));},onAbort:(stats,context,networkDetails)=>{this.resetLoader(context);reject(this.createKeyLoadError(frag,ErrorDetails.INTERNAL_ABORTED,new Error('key loading aborted'),networkDetails));}};keyLoader.load(loaderContext,loaderConfig,loaderCallbacks);});}resetLoader(context){const{frag,keyInfo,url:uri}=context;const loader=keyInfo.loader;if(frag.keyLoader===loader){frag.keyLoader=null;keyInfo.loader=null;}delete this.keyUriToKeyInfo[uri];if(loader){loader.destroy();}}}function getSourceBuffer(){return self.SourceBuffer||self.WebKitSourceBuffer;}function isMSESupported(){const mediaSource=getMediaSource();if(!mediaSource){return false;}// if SourceBuffer is exposed ensure its API is valid
// Older browsers do not expose SourceBuffer globally so checking SourceBuffer.prototype is impossible
const sourceBuffer=getSourceBuffer();return !sourceBuffer||sourceBuffer.prototype&&typeof sourceBuffer.prototype.appendBuffer==='function'&&typeof sourceBuffer.prototype.remove==='function';}function isSupported(){if(!isMSESupported()){return false;}const mediaSource=getMediaSource();return typeof(mediaSource==null?void 0:mediaSource.isTypeSupported)==='function'&&(['avc1.42E01E,mp4a.40.2','av01.0.01M.08','vp09.00.50.08'].some(codecsForVideoContainer=>mediaSource.isTypeSupported(mimeTypeForCodec(codecsForVideoContainer,'video')))||['mp4a.40.2','fLaC'].some(codecForAudioContainer=>mediaSource.isTypeSupported(mimeTypeForCodec(codecForAudioContainer,'audio'))));}function changeTypeSupported(){var _sourceBuffer$prototy;const sourceBuffer=getSourceBuffer();return typeof(sourceBuffer==null?void 0:(_sourceBuffer$prototy=sourceBuffer.prototype)==null?void 0:_sourceBuffer$prototy.changeType)==='function';}const STALL_MINIMUM_DURATION_MS=250;const MAX_START_GAP_JUMP=2.0;const SKIP_BUFFER_HOLE_STEP_SECONDS=0.1;const SKIP_BUFFER_RANGE_START=0.05;class GapController{constructor(config,media,fragmentTracker,hls){this.config=void 0;this.media=null;this.fragmentTracker=void 0;this.hls=void 0;this.nudgeRetry=0;this.stallReported=false;this.stalled=null;this.moved=false;this.seeking=false;this.config=config;this.media=media;this.fragmentTracker=fragmentTracker;this.hls=hls;}destroy(){this.media=null;// @ts-ignore
this.hls=this.fragmentTracker=null;}/**
   * Checks if the playhead is stuck within a gap, and if so, attempts to free it.
   * A gap is an unbuffered range between two buffered ranges (or the start and the first buffered range).
   *
   * @param lastCurrentTime - Previously read playhead position
   */poll(lastCurrentTime,activeFrag){const{config,media,stalled}=this;if(media===null){return;}const{currentTime,seeking}=media;const seeked=this.seeking&&!seeking;const beginSeek=!this.seeking&&seeking;this.seeking=seeking;// The playhead is moving, no-op
if(currentTime!==lastCurrentTime){this.moved=true;if(!seeking){this.nudgeRetry=0;}if(stalled!==null){// The playhead is now moving, but was previously stalled
if(this.stallReported){const _stalledDuration=self.performance.now()-stalled;logger$2.warn(`playback not stuck anymore @${currentTime}, after ${Math.round(_stalledDuration)}ms`);this.stallReported=false;}this.stalled=null;}return;}// Clear stalled state when beginning or finishing seeking so that we don't report stalls coming out of a seek
if(beginSeek||seeked){this.stalled=null;return;}// The playhead should not be moving
if(media.paused&&!seeking||media.ended||media.playbackRate===0||!BufferHelper.getBuffered(media).length){this.nudgeRetry=0;return;}const bufferInfo=BufferHelper.bufferInfo(media,currentTime,0);const nextStart=bufferInfo.nextStart||0;if(seeking){// Waiting for seeking in a buffered range to complete
const hasEnoughBuffer=bufferInfo.len>MAX_START_GAP_JUMP;// Next buffered range is too far ahead to jump to while still seeking
const noBufferGap=!nextStart||activeFrag&&activeFrag.start<=currentTime||nextStart-currentTime>MAX_START_GAP_JUMP&&!this.fragmentTracker.getPartialFragment(currentTime);if(hasEnoughBuffer||noBufferGap){return;}// Reset moved state when seeking to a point in or before a gap
this.moved=false;}// Skip start gaps if we haven't played, but the last poll detected the start of a stall
// The addition poll gives the browser a chance to jump the gap for us
if(!this.moved&&this.stalled!==null){var _level$details;// There is no playable buffer (seeked, waiting for buffer)
const isBuffered=bufferInfo.len>0;if(!isBuffered&&!nextStart){return;}// Jump start gaps within jump threshold
const startJump=Math.max(nextStart,bufferInfo.start||0)-currentTime;// When joining a live stream with audio tracks, account for live playlist window sliding by allowing
// a larger jump over start gaps caused by the audio-stream-controller buffering a start fragment
// that begins over 1 target duration after the video start position.
const level=this.hls.levels?this.hls.levels[this.hls.currentLevel]:null;const isLive=level==null?void 0:(_level$details=level.details)==null?void 0:_level$details.live;const maxStartGapJump=isLive?level.details.targetduration*2:MAX_START_GAP_JUMP;const partialOrGap=this.fragmentTracker.getPartialFragment(currentTime);if(startJump>0&&(startJump<=maxStartGapJump||partialOrGap)){if(!media.paused){this._trySkipBufferHole(partialOrGap);}return;}}// Start tracking stall time
const tnow=self.performance.now();if(stalled===null){this.stalled=tnow;return;}const stalledDuration=tnow-stalled;if(!seeking&&stalledDuration>=STALL_MINIMUM_DURATION_MS){// Report stalling after trying to fix
this._reportStall(bufferInfo);if(!this.media){return;}}const bufferedWithHoles=BufferHelper.bufferInfo(media,currentTime,config.maxBufferHole);this._tryFixBufferStall(bufferedWithHoles,stalledDuration);}/**
   * Detects and attempts to fix known buffer stalling issues.
   * @param bufferInfo - The properties of the current buffer.
   * @param stalledDurationMs - The amount of time Hls.js has been stalling for.
   * @private
   */_tryFixBufferStall(bufferInfo,stalledDurationMs){const{config,fragmentTracker,media}=this;if(media===null){return;}const currentTime=media.currentTime;const partial=fragmentTracker.getPartialFragment(currentTime);if(partial){// Try to skip over the buffer hole caused by a partial fragment
// This method isn't limited by the size of the gap between buffered ranges
const targetTime=this._trySkipBufferHole(partial);// we return here in this case, meaning
// the branch below only executes when we haven't seeked to a new position
if(targetTime||!this.media){return;}}// if we haven't had to skip over a buffer hole of a partial fragment
// we may just have to "nudge" the playlist as the browser decoding/rendering engine
// needs to cross some sort of threshold covering all source-buffers content
// to start playing properly.
if((bufferInfo.len>config.maxBufferHole||bufferInfo.nextStart&&bufferInfo.nextStart-currentTime<config.maxBufferHole)&&stalledDurationMs>config.highBufferWatchdogPeriod*1000){logger$2.warn('Trying to nudge playhead over buffer-hole');// Try to nudge currentTime over a buffer hole if we've been stalling for the configured amount of seconds
// We only try to jump the hole if it's under the configured size
// Reset stalled so to rearm watchdog timer
this.stalled=null;this._tryNudgeBuffer();}}/**
   * Triggers a BUFFER_STALLED_ERROR event, but only once per stall period.
   * @param bufferLen - The playhead distance from the end of the current buffer segment.
   * @private
   */_reportStall(bufferInfo){const{hls,media,stallReported}=this;if(!stallReported&&media){// Report stalled error once
this.stallReported=true;const error=new Error(`Playback stalling at @${media.currentTime} due to low buffer (${JSON.stringify(bufferInfo)})`);logger$2.warn(error.message);hls.trigger(Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.BUFFER_STALLED_ERROR,fatal:false,error,buffer:bufferInfo.len});}}/**
   * Attempts to fix buffer stalls by jumping over known gaps caused by partial fragments
   * @param partial - The partial fragment found at the current time (where playback is stalling).
   * @private
   */_trySkipBufferHole(partial){const{config,hls,media}=this;if(media===null){return 0;}// Check if currentTime is between unbuffered regions of partial fragments
const currentTime=media.currentTime;const bufferInfo=BufferHelper.bufferInfo(media,currentTime,0);const startTime=currentTime<bufferInfo.start?bufferInfo.start:bufferInfo.nextStart;if(startTime){const bufferStarved=bufferInfo.len<=config.maxBufferHole;const waiting=bufferInfo.len>0&&bufferInfo.len<1&&media.readyState<3;const gapLength=startTime-currentTime;if(gapLength>0&&(bufferStarved||waiting)){// Only allow large gaps to be skipped if it is a start gap, or all fragments in skip range are partial
if(gapLength>config.maxBufferHole){const{fragmentTracker}=this;let startGap=false;if(currentTime===0){const startFrag=fragmentTracker.getAppendedFrag(0,PlaylistLevelType.MAIN);if(startFrag&&startTime<startFrag.end){startGap=true;}}if(!startGap){const startProvisioned=partial||fragmentTracker.getAppendedFrag(currentTime,PlaylistLevelType.MAIN);if(startProvisioned){let moreToLoad=false;let pos=startProvisioned.end;while(pos<startTime){const provisioned=fragmentTracker.getPartialFragment(pos);if(provisioned){pos+=provisioned.duration;}else {moreToLoad=true;break;}}if(moreToLoad){return 0;}}}}const targetTime=Math.max(startTime+SKIP_BUFFER_RANGE_START,currentTime+SKIP_BUFFER_HOLE_STEP_SECONDS);logger$2.warn(`skipping hole, adjusting currentTime from ${currentTime} to ${targetTime}`);this.moved=true;this.stalled=null;media.currentTime=targetTime;if(partial&&!partial.gap){const error=new Error(`fragment loaded with buffer holes, seeking from ${currentTime} to ${targetTime}`);hls.trigger(Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.BUFFER_SEEK_OVER_HOLE,fatal:false,error,reason:error.message,frag:partial});}return targetTime;}}return 0;}/**
   * Attempts to fix buffer stalls by advancing the mediaElement's current time by a small amount.
   * @private
   */_tryNudgeBuffer(){const{config,hls,media,nudgeRetry}=this;if(media===null){return;}const currentTime=media.currentTime;this.nudgeRetry++;if(nudgeRetry<config.nudgeMaxRetry){const targetTime=currentTime+(nudgeRetry+1)*config.nudgeOffset;// playback stalled in buffered area ... let's nudge currentTime to try to overcome this
const error=new Error(`Nudging 'currentTime' from ${currentTime} to ${targetTime}`);logger$2.warn(error.message);media.currentTime=targetTime;hls.trigger(Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.BUFFER_NUDGE_ON_STALL,error,fatal:false});}else {const error=new Error(`Playhead still not moving while enough data buffered @${currentTime} after ${config.nudgeMaxRetry} nudges`);logger$2.error(error.message);hls.trigger(Events.ERROR,{type:ErrorTypes.MEDIA_ERROR,details:ErrorDetails.BUFFER_STALLED_ERROR,error,fatal:true});}}}const TICK_INTERVAL=100;// how often to tick in ms
class StreamController extends BaseStreamController{constructor(hls,fragmentTracker,keyLoader){super(hls,fragmentTracker,keyLoader,'[stream-controller]',PlaylistLevelType.MAIN);this.audioCodecSwap=false;this.gapController=null;this.level=-1;this._forceStartLoad=false;this.altAudio=false;this.audioOnly=false;this.fragPlaying=null;this.onvplaying=null;this.onvseeked=null;this.fragLastKbps=0;this.couldBacktrack=false;this.backtrackFragment=null;this.audioCodecSwitch=false;this.videoBuffer=null;this._registerListeners();}_registerListeners(){const{hls}=this;hls.on(Events.MEDIA_ATTACHED,this.onMediaAttached,this);hls.on(Events.MEDIA_DETACHING,this.onMediaDetaching,this);hls.on(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.on(Events.MANIFEST_PARSED,this.onManifestParsed,this);hls.on(Events.LEVEL_LOADING,this.onLevelLoading,this);hls.on(Events.LEVEL_LOADED,this.onLevelLoaded,this);hls.on(Events.FRAG_LOAD_EMERGENCY_ABORTED,this.onFragLoadEmergencyAborted,this);hls.on(Events.ERROR,this.onError,this);hls.on(Events.AUDIO_TRACK_SWITCHING,this.onAudioTrackSwitching,this);hls.on(Events.AUDIO_TRACK_SWITCHED,this.onAudioTrackSwitched,this);hls.on(Events.BUFFER_CREATED,this.onBufferCreated,this);hls.on(Events.BUFFER_FLUSHED,this.onBufferFlushed,this);hls.on(Events.LEVELS_UPDATED,this.onLevelsUpdated,this);hls.on(Events.FRAG_BUFFERED,this.onFragBuffered,this);}_unregisterListeners(){const{hls}=this;hls.off(Events.MEDIA_ATTACHED,this.onMediaAttached,this);hls.off(Events.MEDIA_DETACHING,this.onMediaDetaching,this);hls.off(Events.MANIFEST_LOADING,this.onManifestLoading,this);hls.off(Events.MANIFEST_PARSED,this.onManifestParsed,this);hls.off(Events.LEVEL_LOADED,this.onLevelLoaded,this);hls.off(Events.FRAG_LOAD_EMERGENCY_ABORTED,this.onFragLoadEmergencyAborted,this);hls.off(Events.ERROR,this.onError,this);hls.off(Events.AUDIO_TRACK_SWITCHING,this.onAudioTrackSwitching,this);hls.off(Events.AUDIO_TRACK_SWITCHED,this.onAudioTrackSwitched,this);hls.off(Events.BUFFER_CREATED,this.onBufferCreated,this);hls.off(Events.BUFFER_FLUSHED,this.onBufferFlushed,this);hls.off(Events.LEVELS_UPDATED,this.onLevelsUpdated,this);hls.off(Events.FRAG_BUFFERED,this.onFragBuffered,this);}onHandlerDestroying(){this._unregisterListeners();super.onHandlerDestroying();}startLoad(startPosition){if(this.levels){const{lastCurrentTime,hls}=this;this.stopLoad();this.setInterval(TICK_INTERVAL);this.level=-1;if(!this.startFragRequested){// determine load level
let startLevel=hls.startLevel;if(startLevel===-1){if(hls.config.testBandwidth&&this.levels.length>1){// -1 : guess start Level by doing a bitrate test by loading first fragment of lowest quality level
startLevel=0;this.bitrateTest=true;}else {startLevel=hls.firstAutoLevel;}}// set new level to playlist loader : this will trigger start level load
// hls.nextLoadLevel remains until it is set to a new value or until a new frag is successfully loaded
hls.nextLoadLevel=startLevel;this.level=hls.loadLevel;this.loadedmetadata=false;}// if startPosition undefined but lastCurrentTime set, set startPosition to last currentTime
if(lastCurrentTime>0&&startPosition===-1){this.log(`Override startPosition with lastCurrentTime @${lastCurrentTime.toFixed(3)}`);startPosition=lastCurrentTime;}this.state=State.IDLE;this.nextLoadPosition=this.startPosition=this.lastCurrentTime=startPosition;this.tick();}else {this._forceStartLoad=true;this.state=State.STOPPED;}}stopLoad(){this._forceStartLoad=false;super.stopLoad();}doTick(){switch(this.state){case State.WAITING_LEVEL:{const{levels,level}=this;const currentLevel=levels==null?void 0:levels[level];const details=currentLevel==null?void 0:currentLevel.details;if(details&&(!details.live||this.levelLastLoaded===currentLevel)){if(this.waitForCdnTuneIn(details)){break;}this.state=State.IDLE;break;}else if(this.hls.nextLoadLevel!==this.level){this.state=State.IDLE;break;}break;}case State.FRAG_LOADING_WAITING_RETRY:{var _this$media;const now=self.performance.now();const retryDate=this.retryDate;// if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading
if(!retryDate||now>=retryDate||(_this$media=this.media)!=null&&_this$media.seeking){const{levels,level}=this;const currentLevel=levels==null?void 0:levels[level];this.resetStartWhenNotLoaded(currentLevel||null);this.state=State.IDLE;}}break;}if(this.state===State.IDLE){this.doTickIdle();}this.onTickEnd();}onTickEnd(){super.onTickEnd();this.checkBuffer();this.checkFragmentChanged();}doTickIdle(){const{hls,levelLastLoaded,levels,media}=this;// if start level not parsed yet OR
// if video not attached AND start fragment already requested OR start frag prefetch not enabled
// exit loop, as we either need more info (level not parsed) or we need media to be attached to load new fragment
if(levelLastLoaded===null||!media&&(this.startFragRequested||!hls.config.startFragPrefetch)){return;}// If the "main" level is audio-only but we are loading an alternate track in the same group, do not load anything
if(this.altAudio&&this.audioOnly){return;}const level=this.buffering?hls.nextLoadLevel:hls.loadLevel;if(!(levels!=null&&levels[level])){return;}const levelInfo=levels[level];// if buffer length is less than maxBufLen try to load a new fragment
const bufferInfo=this.getMainFwdBufferInfo();if(bufferInfo===null){return;}const lastDetails=this.getLevelDetails();if(lastDetails&&this._streamEnded(bufferInfo,lastDetails)){const data={};if(this.altAudio){data.type='video';}this.hls.trigger(Events.BUFFER_EOS,data);this.state=State.ENDED;return;}if(!this.buffering){return;}// set next load level : this will trigger a playlist load if needed
if(hls.loadLevel!==level&&hls.manualLevel===-1){this.log(`Adapting to level ${level} from level ${this.level}`);}this.level=hls.nextLoadLevel=level;const levelDetails=levelInfo.details;// if level info not retrieved yet, switch state and wait for level retrieval
// if live playlist, ensure that new playlist has been refreshed to avoid loading/try to load
// a useless and outdated fragment (that might even introduce load error if it is already out of the live playlist)
if(!levelDetails||this.state===State.WAITING_LEVEL||levelDetails.live&&this.levelLastLoaded!==levelInfo){this.level=level;this.state=State.WAITING_LEVEL;return;}const bufferLen=bufferInfo.len;// compute max Buffer Length that we could get from this load level, based on level bitrate. don't buffer more than 60 MB and more than 30s
const maxBufLen=this.getMaxBufferLength(levelInfo.maxBitrate);// Stay idle if we are still with buffer margins
if(bufferLen>=maxBufLen){return;}if(this.backtrackFragment&&this.backtrackFragment.start>bufferInfo.end){this.backtrackFragment=null;}const targetBufferTime=this.backtrackFragment?this.backtrackFragment.start:bufferInfo.end;let frag=this.getNextFragment(targetBufferTime,levelDetails);// Avoid backtracking by loading an earlier segment in streams with segments that do not start with a key frame (flagged by `couldBacktrack`)
if(this.couldBacktrack&&!this.fragPrevious&&frag&&frag.sn!=='initSegment'&&this.fragmentTracker.getState(frag)!==FragmentState.OK){var _this$backtrackFragme;const backtrackSn=((_this$backtrackFragme=this.backtrackFragment)!=null?_this$backtrackFragme:frag).sn;const fragIdx=backtrackSn-levelDetails.startSN;const backtrackFrag=levelDetails.fragments[fragIdx-1];if(backtrackFrag&&frag.cc===backtrackFrag.cc){frag=backtrackFrag;this.fragmentTracker.removeFragment(backtrackFrag);}}else if(this.backtrackFragment&&bufferInfo.len){this.backtrackFragment=null;}// Avoid loop loading by using nextLoadPosition set for backtracking and skipping consecutive GAP tags
if(frag&&this.isLoopLoading(frag,targetBufferTime)){const gapStart=frag.gap;if(!gapStart){// Cleanup the fragment tracker before trying to find the next unbuffered fragment
const type=this.audioOnly&&!this.altAudio?ElementaryStreamTypes.AUDIO:ElementaryStreamTypes.VIDEO;const mediaBuffer=(type===ElementaryStreamTypes.VIDEO?this.videoBuffer:this.mediaBuffer)||this.media;if(mediaBuffer){this.afterBufferFlushed(mediaBuffer,type,PlaylistLevelType.MAIN);}}frag=this.getNextFragmentLoopLoading(frag,levelDetails,bufferInfo,PlaylistLevelType.MAIN,maxBufLen);}if(!frag){return;}if(frag.initSegment&&!frag.initSegment.data&&!this.bitrateTest){frag=frag.initSegment;}this.loadFragment(frag,levelInfo,targetBufferTime);}loadFragment(frag,level,targetBufferTime){// Check if fragment is not loaded
const fragState=this.fragmentTracker.getState(frag);this.fragCurrent=frag;if(fragState===FragmentState.NOT_LOADED||fragState===FragmentState.PARTIAL){if(frag.sn==='initSegment'){this._loadInitSegment(frag,level);}else if(this.bitrateTest){this.log(`Fragment ${frag.sn} of level ${frag.level} is being downloaded to test bitrate and will not be buffered`);this._loadBitrateTestFrag(frag,level);}else {this.startFragRequested=true;super.loadFragment(frag,level,targetBufferTime);}}else {this.clearTrackerIfNeeded(frag);}}getBufferedFrag(position){return this.fragmentTracker.getBufferedFrag(position,PlaylistLevelType.MAIN);}followingBufferedFrag(frag){if(frag){// try to get range of next fragment (500ms after this range)
return this.getBufferedFrag(frag.end+0.5);}return null;}/*
    on immediate level switch :
     - pause playback if playing
     - cancel any pending load request
     - and trigger a buffer flush
  */immediateLevelSwitch(){this.abortCurrentFrag();this.flushMainBuffer(0,Number.POSITIVE_INFINITY);}/**
   * try to switch ASAP without breaking video playback:
   * in order to ensure smooth but quick level switching,
   * we need to find the next flushable buffer range
   * we should take into account new segment fetch time
   */nextLevelSwitch(){const{levels,media}=this;// ensure that media is defined and that metadata are available (to retrieve currentTime)
if(media!=null&&media.readyState){let fetchdelay;const fragPlayingCurrent=this.getAppendedFrag(media.currentTime);if(fragPlayingCurrent&&fragPlayingCurrent.start>1){// flush buffer preceding current fragment (flush until current fragment start offset)
// minus 1s to avoid video freezing, that could happen if we flush keyframe of current video ...
this.flushMainBuffer(0,fragPlayingCurrent.start-1);}const levelDetails=this.getLevelDetails();if(levelDetails!=null&&levelDetails.live){const bufferInfo=this.getMainFwdBufferInfo();// Do not flush in live stream with low buffer
if(!bufferInfo||bufferInfo.len<levelDetails.targetduration*2){return;}}if(!media.paused&&levels){// add a safety delay of 1s
const nextLevelId=this.hls.nextLoadLevel;const nextLevel=levels[nextLevelId];const fragLastKbps=this.fragLastKbps;if(fragLastKbps&&this.fragCurrent){fetchdelay=this.fragCurrent.duration*nextLevel.maxBitrate/(1000*fragLastKbps)+1;}else {fetchdelay=0;}}else {fetchdelay=0;}// this.log('fetchdelay:'+fetchdelay);
// find buffer range that will be reached once new fragment will be fetched
const bufferedFrag=this.getBufferedFrag(media.currentTime+fetchdelay);if(bufferedFrag){// we can flush buffer range following this one without stalling playback
const nextBufferedFrag=this.followingBufferedFrag(bufferedFrag);if(nextBufferedFrag){// if we are here, we can also cancel any loading/demuxing in progress, as they are useless
this.abortCurrentFrag();// start flush position is in next buffered frag. Leave some padding for non-independent segments and smoother playback.
const maxStart=nextBufferedFrag.maxStartPTS?nextBufferedFrag.maxStartPTS:nextBufferedFrag.start;const fragDuration=nextBufferedFrag.duration;const startPts=Math.max(bufferedFrag.end,maxStart+Math.min(Math.max(fragDuration-this.config.maxFragLookUpTolerance,fragDuration*(this.couldBacktrack?0.5:0.125)),fragDuration*(this.couldBacktrack?0.75:0.25)));this.flushMainBuffer(startPts,Number.POSITIVE_INFINITY);}}}}abortCurrentFrag(){const fragCurrent=this.fragCurrent;this.fragCurrent=null;this.backtrackFragment=null;if(fragCurrent){fragCurrent.abortRequests();this.fragmentTracker.removeFragment(fragCurrent);}switch(this.state){case State.KEY_LOADING:case State.FRAG_LOADING:case State.FRAG_LOADING_WAITING_RETRY:case State.PARSING:case State.PARSED:this.state=State.IDLE;break;}this.nextLoadPosition=this.getLoadPosition();}flushMainBuffer(startOffset,endOffset){super.flushMainBuffer(startOffset,endOffset,this.altAudio?'video':null);}onMediaAttached(event,data){super.onMediaAttached(event,data);const media=data.media;this.onvplaying=this.onMediaPlaying.bind(this);this.onvseeked=this.onMediaSeeked.bind(this);media.addEventListener('playing',this.onvplaying);media.addEventListener('seeked',this.onvseeked);this.gapController=new GapController(this.config,media,this.fragmentTracker,this.hls);}onMediaDetaching(){const{media}=this;if(media&&this.onvplaying&&this.onvseeked){media.removeEventListener('playing',this.onvplaying);media.removeEventListener('seeked',this.onvseeked);this.onvplaying=this.onvseeked=null;this.videoBuffer=null;}this.fragPlaying=null;if(this.gapController){this.gapController.destroy();this.gapController=null;}super.onMediaDetaching();}onMediaPlaying(){// tick to speed up FRAG_CHANGED triggering
this.tick();}onMediaSeeked(){const media=this.media;const currentTime=media?media.currentTime:null;if(isFiniteNumber(currentTime)){this.log(`Media seeked to ${currentTime.toFixed(3)}`);}// If seeked was issued before buffer was appended do not tick immediately
const bufferInfo=this.getMainFwdBufferInfo();if(bufferInfo===null||bufferInfo.len===0){this.warn(`Main forward buffer length on "seeked" event ${bufferInfo?bufferInfo.len:'empty'})`);return;}// tick to speed up FRAG_CHANGED triggering
this.tick();}onManifestLoading(){// reset buffer on manifest loading
this.log('Trigger BUFFER_RESET');this.hls.trigger(Events.BUFFER_RESET,undefined);this.fragmentTracker.removeAllFragments();this.couldBacktrack=false;this.startPosition=this.lastCurrentTime=this.fragLastKbps=0;this.levels=this.fragPlaying=this.backtrackFragment=this.levelLastLoaded=null;this.altAudio=this.audioOnly=this.startFragRequested=false;}onManifestParsed(event,data){// detect if we have different kind of audio codecs used amongst playlists
let aac=false;let heaac=false;data.levels.forEach(level=>{const codec=level.audioCodec;if(codec){aac=aac||codec.indexOf('mp4a.40.2')!==-1;heaac=heaac||codec.indexOf('mp4a.40.5')!==-1;}});this.audioCodecSwitch=aac&&heaac&&!changeTypeSupported();if(this.audioCodecSwitch){this.log('Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC');}this.levels=data.levels;this.startFragRequested=false;}onLevelLoading(event,data){const{levels}=this;if(!levels||this.state!==State.IDLE){return;}const level=levels[data.level];if(!level.details||level.details.live&&this.levelLastLoaded!==level||this.waitForCdnTuneIn(level.details)){this.state=State.WAITING_LEVEL;}}onLevelLoaded(event,data){var _curLevel$details;const{levels}=this;const newLevelId=data.level;const newDetails=data.details;const duration=newDetails.totalduration;if(!levels){this.warn(`Levels were reset while loading level ${newLevelId}`);return;}this.log(`Level ${newLevelId} loaded [${newDetails.startSN},${newDetails.endSN}]${newDetails.lastPartSn?`[part-${newDetails.lastPartSn}-${newDetails.lastPartIndex}]`:''}, cc [${newDetails.startCC}, ${newDetails.endCC}] duration:${duration}`);const curLevel=levels[newLevelId];const fragCurrent=this.fragCurrent;if(fragCurrent&&(this.state===State.FRAG_LOADING||this.state===State.FRAG_LOADING_WAITING_RETRY)){if(fragCurrent.level!==data.level&&fragCurrent.loader){this.abortCurrentFrag();}}let sliding=0;if(newDetails.live||(_curLevel$details=curLevel.details)!=null&&_curLevel$details.live){var _this$levelLastLoaded;this.checkLiveUpdate(newDetails);if(newDetails.deltaUpdateFailed){return;}sliding=this.alignPlaylists(newDetails,curLevel.details,(_this$levelLastLoaded=this.levelLastLoaded)==null?void 0:_this$levelLastLoaded.details);}// override level info
curLevel.details=newDetails;this.levelLastLoaded=curLevel;this.hls.trigger(Events.LEVEL_UPDATED,{details:newDetails,level:newLevelId});// only switch back to IDLE state if we were waiting for level to start downloading a new fragment
if(this.state===State.WAITING_LEVEL){if(this.waitForCdnTuneIn(newDetails)){// Wait for Low-Latency CDN Tune-in
return;}this.state=State.IDLE;}if(!this.startFragRequested){this.setStartPosition(newDetails,sliding);}else if(newDetails.live){this.synchronizeToLiveEdge(newDetails);}// trigger handler right now
this.tick();}_handleFragmentLoadProgress(data){var _frag$initSegment;const{frag,part,payload}=data;const{levels}=this;if(!levels){this.warn(`Levels were reset while fragment load was in progress. Fragment ${frag.sn} of level ${frag.level} will not be buffered`);return;}const currentLevel=levels[frag.level];const details=currentLevel.details;if(!details){this.warn(`Dropping fragment ${frag.sn} of level ${frag.level} after level details were reset`);this.fragmentTracker.removeFragment(frag);return;}const videoCodec=currentLevel.videoCodec;// time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)
const accurateTimeOffset=details.PTSKnown||!details.live;const initSegmentData=(_frag$initSegment=frag.initSegment)==null?void 0:_frag$initSegment.data;const audioCodec=this._getAudioCodec(currentLevel);// transmux the MPEG-TS data to ISO-BMFF segments
// this.log(`Transmuxing ${frag.sn} of [${details.startSN} ,${details.endSN}],level ${frag.level}, cc ${frag.cc}`);
const transmuxer=this.transmuxer=this.transmuxer||new TransmuxerInterface(this.hls,PlaylistLevelType.MAIN,this._handleTransmuxComplete.bind(this),this._handleTransmuxerFlush.bind(this));const partIndex=part?part.index:-1;const partial=partIndex!==-1;const chunkMeta=new ChunkMetadata(frag.level,frag.sn,frag.stats.chunkCount,payload.byteLength,partIndex,partial);const initPTS=this.initPTS[frag.cc];transmuxer.push(payload,initSegmentData,audioCodec,videoCodec,frag,part,details.totalduration,accurateTimeOffset,chunkMeta,initPTS);}onAudioTrackSwitching(event,data){// if any URL found on new audio track, it is an alternate audio track
const fromAltAudio=this.altAudio;const altAudio=!!data.url;// if we switch on main audio, ensure that main fragment scheduling is synced with media.buffered
// don't do anything if we switch to alt audio: audio stream controller is handling it.
// we will just have to change buffer scheduling on audioTrackSwitched
if(!altAudio){if(this.mediaBuffer!==this.media){this.log('Switching on main audio, use media.buffered to schedule main fragment loading');this.mediaBuffer=this.media;const fragCurrent=this.fragCurrent;// we need to refill audio buffer from main: cancel any frag loading to speed up audio switch
if(fragCurrent){this.log('Switching to main audio track, cancel main fragment load');fragCurrent.abortRequests();this.fragmentTracker.removeFragment(fragCurrent);}// destroy transmuxer to force init segment generation (following audio switch)
this.resetTransmuxer();// switch to IDLE state to load new fragment
this.resetLoadingState();}else if(this.audioOnly){// Reset audio transmuxer so when switching back to main audio we're not still appending where we left off
this.resetTransmuxer();}const hls=this.hls;// If switching from alt to main audio, flush all audio and trigger track switched
if(fromAltAudio){hls.trigger(Events.BUFFER_FLUSHING,{startOffset:0,endOffset:Number.POSITIVE_INFINITY,type:null});this.fragmentTracker.removeAllFragments();}hls.trigger(Events.AUDIO_TRACK_SWITCHED,data);}}onAudioTrackSwitched(event,data){const trackId=data.id;const altAudio=!!this.hls.audioTracks[trackId].url;if(altAudio){const videoBuffer=this.videoBuffer;// if we switched on alternate audio, ensure that main fragment scheduling is synced with video sourcebuffer buffered
if(videoBuffer&&this.mediaBuffer!==videoBuffer){this.log('Switching on alternate audio, use video.buffered to schedule main fragment loading');this.mediaBuffer=videoBuffer;}}this.altAudio=altAudio;this.tick();}onBufferCreated(event,data){const tracks=data.tracks;let mediaTrack;let name;let alternate=false;for(const type in tracks){const track=tracks[type];if(track.id==='main'){name=type;mediaTrack=track;// keep video source buffer reference
if(type==='video'){const videoTrack=tracks[type];if(videoTrack){this.videoBuffer=videoTrack.buffer;}}}else {alternate=true;}}if(alternate&&mediaTrack){this.log(`Alternate track found, use ${name}.buffered to schedule main fragment loading`);this.mediaBuffer=mediaTrack.buffer;}else {this.mediaBuffer=this.media;}}onFragBuffered(event,data){const{frag,part}=data;if(frag&&frag.type!==PlaylistLevelType.MAIN){return;}if(this.fragContextChanged(frag)){// If a level switch was requested while a fragment was buffering, it will emit the FRAG_BUFFERED event upon completion
// Avoid setting state back to IDLE, since that will interfere with a level switch
this.warn(`Fragment ${frag.sn}${part?' p: '+part.index:''} of level ${frag.level} finished buffering, but was aborted. state: ${this.state}`);if(this.state===State.PARSED){this.state=State.IDLE;}return;}const stats=part?part.stats:frag.stats;this.fragLastKbps=Math.round(8*stats.total/(stats.buffering.end-stats.loading.first));if(frag.sn!=='initSegment'){this.fragPrevious=frag;}this.fragBufferedComplete(frag,part);}onError(event,data){var _data$context;if(data.fatal){this.state=State.ERROR;return;}switch(data.details){case ErrorDetails.FRAG_GAP:case ErrorDetails.FRAG_PARSING_ERROR:case ErrorDetails.FRAG_DECRYPT_ERROR:case ErrorDetails.FRAG_LOAD_ERROR:case ErrorDetails.FRAG_LOAD_TIMEOUT:case ErrorDetails.KEY_LOAD_ERROR:case ErrorDetails.KEY_LOAD_TIMEOUT:this.onFragmentOrKeyLoadError(PlaylistLevelType.MAIN,data);break;case ErrorDetails.LEVEL_LOAD_ERROR:case ErrorDetails.LEVEL_LOAD_TIMEOUT:case ErrorDetails.LEVEL_PARSING_ERROR:// in case of non fatal error while loading level, if level controller is not retrying to load level, switch back to IDLE
if(!data.levelRetry&&this.state===State.WAITING_LEVEL&&((_data$context=data.context)==null?void 0:_data$context.type)===PlaylistContextType.LEVEL){this.state=State.IDLE;}break;case ErrorDetails.BUFFER_APPEND_ERROR:case ErrorDetails.BUFFER_FULL_ERROR:if(!data.parent||data.parent!=='main'){return;}if(data.details===ErrorDetails.BUFFER_APPEND_ERROR){this.resetLoadingState();return;}if(this.reduceLengthAndFlushBuffer(data)){this.flushMainBuffer(0,Number.POSITIVE_INFINITY);}break;case ErrorDetails.INTERNAL_EXCEPTION:this.recoverWorkerError(data);break;}}// Checks the health of the buffer and attempts to resolve playback stalls.
checkBuffer(){const{media,gapController}=this;if(!media||!gapController||!media.readyState){// Exit early if we don't have media or if the media hasn't buffered anything yet (readyState 0)
return;}if(this.loadedmetadata||!BufferHelper.getBuffered(media).length){// Resolve gaps using the main buffer, whose ranges are the intersections of the A/V sourcebuffers
const activeFrag=this.state!==State.IDLE?this.fragCurrent:null;gapController.poll(this.lastCurrentTime,activeFrag);}this.lastCurrentTime=media.currentTime;}onFragLoadEmergencyAborted(){this.state=State.IDLE;// if loadedmetadata is not set, it means that we are emergency switch down on first frag
// in that case, reset startFragRequested flag
if(!this.loadedmetadata){this.startFragRequested=false;this.nextLoadPosition=this.startPosition;}this.tickImmediate();}onBufferFlushed(event,{type}){if(type!==ElementaryStreamTypes.AUDIO||this.audioOnly&&!this.altAudio){const mediaBuffer=(type===ElementaryStreamTypes.VIDEO?this.videoBuffer:this.mediaBuffer)||this.media;this.afterBufferFlushed(mediaBuffer,type,PlaylistLevelType.MAIN);this.tick();}}onLevelsUpdated(event,data){if(this.level>-1&&this.fragCurrent){this.level=this.fragCurrent.level;}this.levels=data.levels;}swapAudioCodec(){this.audioCodecSwap=!this.audioCodecSwap;}/**
   * Seeks to the set startPosition if not equal to the mediaElement's current time.
   */seekToStartPos(){const{media}=this;if(!media){return;}const currentTime=media.currentTime;let startPosition=this.startPosition;// only adjust currentTime if different from startPosition or if startPosition not buffered
// at that stage, there should be only one buffered range, as we reach that code after first fragment has been buffered
if(startPosition>=0&&currentTime<startPosition){if(media.seeking){this.log(`could not seek to ${startPosition}, already seeking at ${currentTime}`);return;}const buffered=BufferHelper.getBuffered(media);const bufferStart=buffered.length?buffered.start(0):0;const delta=bufferStart-startPosition;if(delta>0&&(delta<this.config.maxBufferHole||delta<this.config.maxFragLookUpTolerance)){this.log(`adjusting start position by ${delta} to match buffer start`);startPosition+=delta;this.startPosition=startPosition;}this.log(`seek to target start position ${startPosition} from current time ${currentTime}`);media.currentTime=startPosition;}}_getAudioCodec(currentLevel){let audioCodec=this.config.defaultAudioCodec||currentLevel.audioCodec;if(this.audioCodecSwap&&audioCodec){this.log('Swapping audio codec');if(audioCodec.indexOf('mp4a.40.5')!==-1){audioCodec='mp4a.40.2';}else {audioCodec='mp4a.40.5';}}return audioCodec;}_loadBitrateTestFrag(frag,level){frag.bitrateTest=true;this._doFragLoad(frag,level).then(data=>{const{hls}=this;if(!data||this.fragContextChanged(frag)){return;}level.fragmentError=0;this.state=State.IDLE;this.startFragRequested=false;this.bitrateTest=false;const stats=frag.stats;// Bitrate tests fragments are neither parsed nor buffered
stats.parsing.start=stats.parsing.end=stats.buffering.start=stats.buffering.end=self.performance.now();hls.trigger(Events.FRAG_LOADED,data);frag.bitrateTest=false;});}_handleTransmuxComplete(transmuxResult){var _id3$samples;const id='main';const{hls}=this;const{remuxResult,chunkMeta}=transmuxResult;const context=this.getCurrentContext(chunkMeta);if(!context){this.resetWhenMissingContext(chunkMeta);return;}const{frag,part,level}=context;const{video,text,id3,initSegment}=remuxResult;const{details}=level;// The audio-stream-controller handles audio buffering if Hls.js is playing an alternate audio track
const audio=this.altAudio?undefined:remuxResult.audio;// Check if the current fragment has been aborted. We check this by first seeing if we're still playing the current level.
// If we are, subsequently check if the currently loading fragment (fragCurrent) has changed.
if(this.fragContextChanged(frag)){this.fragmentTracker.removeFragment(frag);return;}this.state=State.PARSING;if(initSegment){if(initSegment!=null&&initSegment.tracks){const mapFragment=frag.initSegment||frag;this._bufferInitSegment(level,initSegment.tracks,mapFragment,chunkMeta);hls.trigger(Events.FRAG_PARSING_INIT_SEGMENT,{frag:mapFragment,id,tracks:initSegment.tracks});}// This would be nice if Number.isFinite acted as a typeguard, but it doesn't. See: https://github.com/Microsoft/TypeScript/issues/10038
const initPTS=initSegment.initPTS;const timescale=initSegment.timescale;if(isFiniteNumber(initPTS)){this.initPTS[frag.cc]={baseTime:initPTS,timescale};hls.trigger(Events.INIT_PTS_FOUND,{frag,id,initPTS,timescale});}}// Avoid buffering if backtracking this fragment
if(video&&details&&frag.sn!=='initSegment'){const prevFrag=details.fragments[frag.sn-1-details.startSN];const isFirstFragment=frag.sn===details.startSN;const isFirstInDiscontinuity=!prevFrag||frag.cc>prevFrag.cc;if(remuxResult.independent!==false){const{startPTS,endPTS,startDTS,endDTS}=video;if(part){part.elementaryStreams[video.type]={startPTS,endPTS,startDTS,endDTS};}else {if(video.firstKeyFrame&&video.independent&&chunkMeta.id===1&&!isFirstInDiscontinuity){this.couldBacktrack=true;}if(video.dropped&&video.independent){// Backtrack if dropped frames create a gap after currentTime
const bufferInfo=this.getMainFwdBufferInfo();const targetBufferTime=(bufferInfo?bufferInfo.end:this.getLoadPosition())+this.config.maxBufferHole;const startTime=video.firstKeyFramePTS?video.firstKeyFramePTS:startPTS;if(!isFirstFragment&&targetBufferTime<startTime-this.config.maxBufferHole&&!isFirstInDiscontinuity){this.backtrack(frag);return;}else if(isFirstInDiscontinuity){// Mark segment with a gap to avoid loop loading
frag.gap=true;}// Set video stream start to fragment start so that truncated samples do not distort the timeline, and mark it partial
frag.setElementaryStreamInfo(video.type,frag.start,endPTS,frag.start,endDTS,true);}else if(isFirstFragment&&startPTS>MAX_START_GAP_JUMP){// Mark segment with a gap to skip large start gap
frag.gap=true;}}frag.setElementaryStreamInfo(video.type,startPTS,endPTS,startDTS,endDTS);if(this.backtrackFragment){this.backtrackFragment=frag;}this.bufferFragmentData(video,frag,part,chunkMeta,isFirstFragment||isFirstInDiscontinuity);}else if(isFirstFragment||isFirstInDiscontinuity){// Mark segment with a gap to avoid loop loading
frag.gap=true;}else {this.backtrack(frag);return;}}if(audio){const{startPTS,endPTS,startDTS,endDTS}=audio;if(part){part.elementaryStreams[ElementaryStreamTypes.AUDIO]={startPTS,endPTS,startDTS,endDTS};}frag.setElementaryStreamInfo(ElementaryStreamTypes.AUDIO,startPTS,endPTS,startDTS,endDTS);this.bufferFragmentData(audio,frag,part,chunkMeta);}if(details&&id3!=null&&(_id3$samples=id3.samples)!=null&&_id3$samples.length){const emittedID3={id,frag,details,samples:id3.samples};hls.trigger(Events.FRAG_PARSING_METADATA,emittedID3);}if(details&&text){const emittedText={id,frag,details,samples:text.samples};hls.trigger(Events.FRAG_PARSING_USERDATA,emittedText);}}_bufferInitSegment(currentLevel,tracks,frag,chunkMeta){if(this.state!==State.PARSING){return;}this.audioOnly=!!tracks.audio&&!tracks.video;// if audio track is expected to come from audio stream controller, discard any coming from main
if(this.altAudio&&!this.audioOnly){delete tracks.audio;}// include levelCodec in audio and video tracks
const{audio,video,audiovideo}=tracks;if(audio){let audioCodec=currentLevel.audioCodec;const ua=navigator.userAgent.toLowerCase();if(this.audioCodecSwitch){if(audioCodec){if(audioCodec.indexOf('mp4a.40.5')!==-1){audioCodec='mp4a.40.2';}else {audioCodec='mp4a.40.5';}}// In the case that AAC and HE-AAC audio codecs are signalled in manifest,
// force HE-AAC, as it seems that most browsers prefers it.
// don't force HE-AAC if mono stream, or in Firefox
const audioMetadata=audio.metadata;if(audioMetadata&&'channelCount'in audioMetadata&&(audioMetadata.channelCount||1)!==1&&ua.indexOf('firefox')===-1){audioCodec='mp4a.40.5';}}// HE-AAC is broken on Android, always signal audio codec as AAC even if variant manifest states otherwise
if(audioCodec&&audioCodec.indexOf('mp4a.40.5')!==-1&&ua.indexOf('android')!==-1&&audio.container!=='audio/mpeg'){// Exclude mpeg audio
audioCodec='mp4a.40.2';this.log(`Android: force audio codec to ${audioCodec}`);}if(currentLevel.audioCodec&&currentLevel.audioCodec!==audioCodec){this.log(`Swapping manifest audio codec "${currentLevel.audioCodec}" for "${audioCodec}"`);}audio.levelCodec=audioCodec;audio.id='main';this.log(`Init audio buffer, container:${audio.container}, codecs[selected/level/parsed]=[${audioCodec||''}/${currentLevel.audioCodec||''}/${audio.codec}]`);}if(video){video.levelCodec=currentLevel.videoCodec;video.id='main';this.log(`Init video buffer, container:${video.container}, codecs[level/parsed]=[${currentLevel.videoCodec||''}/${video.codec}]`);}if(audiovideo){this.log(`Init audiovideo buffer, container:${audiovideo.container}, codecs[level/parsed]=[${currentLevel.codecs}/${audiovideo.codec}]`);}this.hls.trigger(Events.BUFFER_CODECS,tracks);// loop through tracks that are going to be provided to bufferController
Object.keys(tracks).forEach(trackName=>{const track=tracks[trackName];const initSegment=track.initSegment;if(initSegment!=null&&initSegment.byteLength){this.hls.trigger(Events.BUFFER_APPENDING,{type:trackName,data:initSegment,frag,part:null,chunkMeta,parent:frag.type});}});// trigger handler right now
this.tickImmediate();}getMainFwdBufferInfo(){return this.getFwdBufferInfo(this.mediaBuffer?this.mediaBuffer:this.media,PlaylistLevelType.MAIN);}backtrack(frag){this.couldBacktrack=true;// Causes findFragments to backtrack through fragments to find the keyframe
this.backtrackFragment=frag;this.resetTransmuxer();this.flushBufferGap(frag);this.fragmentTracker.removeFragment(frag);this.fragPrevious=null;this.nextLoadPosition=frag.start;this.state=State.IDLE;}checkFragmentChanged(){const video=this.media;let fragPlayingCurrent=null;if(video&&video.readyState>1&&video.seeking===false){const currentTime=video.currentTime;/* if video element is in seeked state, currentTime can only increase.
        (assuming that playback rate is positive ...)
        As sometimes currentTime jumps back to zero after a
        media decode error, check this, to avoid seeking back to
        wrong position after a media decode error
      */if(BufferHelper.isBuffered(video,currentTime)){fragPlayingCurrent=this.getAppendedFrag(currentTime);}else if(BufferHelper.isBuffered(video,currentTime+0.1)){/* ensure that FRAG_CHANGED event is triggered at startup,
          when first video frame is displayed and playback is paused.
          add a tolerance of 100ms, in case current position is not buffered,
          check if current pos+100ms is buffered and use that buffer range
          for FRAG_CHANGED event reporting */fragPlayingCurrent=this.getAppendedFrag(currentTime+0.1);}if(fragPlayingCurrent){this.backtrackFragment=null;const fragPlaying=this.fragPlaying;const fragCurrentLevel=fragPlayingCurrent.level;if(!fragPlaying||fragPlayingCurrent.sn!==fragPlaying.sn||fragPlaying.level!==fragCurrentLevel){this.fragPlaying=fragPlayingCurrent;this.hls.trigger(Events.FRAG_CHANGED,{frag:fragPlayingCurrent});if(!fragPlaying||fragPlaying.level!==fragCurrentLevel){this.hls.trigger(Events.LEVEL_SWITCHED,{level:fragCurrentLevel});}}}}}get nextLevel(){const frag=this.nextBufferedFrag;if(frag){return frag.level;}return -1;}get currentFrag(){const media=this.media;if(media){return this.fragPlaying||this.getAppendedFrag(media.currentTime);}return null;}get currentProgramDateTime(){const media=this.media;if(media){const currentTime=media.currentTime;const frag=this.currentFrag;if(frag&&isFiniteNumber(currentTime)&&isFiniteNumber(frag.programDateTime)){const epocMs=frag.programDateTime+(currentTime-frag.start)*1000;return new Date(epocMs);}}return null;}get currentLevel(){const frag=this.currentFrag;if(frag){return frag.level;}return -1;}get nextBufferedFrag(){const frag=this.currentFrag;if(frag){return this.followingBufferedFrag(frag);}return null;}get forceStartLoad(){return this._forceStartLoad;}}/**
 * The `Hls` class is the core of the HLS.js library used to instantiate player instances.
 * @public
 */class Hls{/**
   * Get the video-dev/hls.js package version.
   */static get version(){return "1.5.20";}/**
   * Check if the required MediaSource Extensions are available.
   */static isMSESupported(){return isMSESupported();}/**
   * Check if MediaSource Extensions are available and isTypeSupported checks pass for any baseline codecs.
   */static isSupported(){return isSupported();}/**
   * Get the MediaSource global used for MSE playback (ManagedMediaSource, MediaSource, or WebKitMediaSource).
   */static getMediaSource(){return getMediaSource();}static get Events(){return Events;}static get ErrorTypes(){return ErrorTypes;}static get ErrorDetails(){return ErrorDetails;}/**
   * Get the default configuration applied to new instances.
   */static get DefaultConfig(){if(!Hls.defaultConfig){return hlsDefaultConfig;}return Hls.defaultConfig;}/**
   * Replace the default configuration applied to new instances.
   */static set DefaultConfig(defaultConfig){Hls.defaultConfig=defaultConfig;}/**
   * Creates an instance of an HLS client that can attach to exactly one `HTMLMediaElement`.
   * @param userConfig - Configuration options applied over `Hls.DefaultConfig`
   */constructor(userConfig={}){/**
     * The runtime configuration used by the player. At instantiation this is combination of `hls.userConfig` merged over `Hls.DefaultConfig`.
     */this.config=void 0;/**
     * The configuration object provided on player instantiation.
     */this.userConfig=void 0;this.coreComponents=void 0;this.networkControllers=void 0;this.started=false;this._emitter=new EventEmitter();this._autoLevelCapping=-1;this._maxHdcpLevel=null;this.abrController=void 0;this.bufferController=void 0;this.capLevelController=void 0;this.latencyController=void 0;this.levelController=void 0;this.streamController=void 0;this.audioTrackController=void 0;this.subtitleTrackController=void 0;this.emeController=void 0;this.cmcdController=void 0;this._media=null;this.url=null;this.triggeringException=void 0;enableLogs(userConfig.debug||false,'Hls instance');const config=this.config=mergeConfig(Hls.DefaultConfig,userConfig);this.userConfig=userConfig;if(config.progressive){enableStreamingMode(config);}// core controllers and network loaders
const{abrController:ConfigAbrController,bufferController:ConfigBufferController,capLevelController:ConfigCapLevelController,errorController:ConfigErrorController,fpsController:ConfigFpsController}=config;const errorController=new ConfigErrorController(this);const abrController=this.abrController=new ConfigAbrController(this);const bufferController=this.bufferController=new ConfigBufferController(this);const capLevelController=this.capLevelController=new ConfigCapLevelController(this);const fpsController=new ConfigFpsController(this);const playListLoader=new PlaylistLoader(this);const id3TrackController=new ID3TrackController(this);const ConfigContentSteeringController=config.contentSteeringController;// ConentSteeringController is defined before LevelController to receive Multivariant Playlist events first
const contentSteering=ConfigContentSteeringController?new ConfigContentSteeringController(this):null;const levelController=this.levelController=new LevelController(this,contentSteering);// FragmentTracker must be defined before StreamController because the order of event handling is important
const fragmentTracker=new FragmentTracker(this);const keyLoader=new KeyLoader(this.config);const streamController=this.streamController=new StreamController(this,fragmentTracker,keyLoader);// Cap level controller uses streamController to flush the buffer
capLevelController.setStreamController(streamController);// fpsController uses streamController to switch when frames are being dropped
fpsController.setStreamController(streamController);const networkControllers=[playListLoader,levelController,streamController];if(contentSteering){networkControllers.splice(1,0,contentSteering);}this.networkControllers=networkControllers;const coreComponents=[abrController,bufferController,capLevelController,fpsController,id3TrackController,fragmentTracker];this.audioTrackController=this.createController(config.audioTrackController,networkControllers);const AudioStreamControllerClass=config.audioStreamController;if(AudioStreamControllerClass){networkControllers.push(new AudioStreamControllerClass(this,fragmentTracker,keyLoader));}// subtitleTrackController must be defined before subtitleStreamController because the order of event handling is important
this.subtitleTrackController=this.createController(config.subtitleTrackController,networkControllers);const SubtitleStreamControllerClass=config.subtitleStreamController;if(SubtitleStreamControllerClass){networkControllers.push(new SubtitleStreamControllerClass(this,fragmentTracker,keyLoader));}this.createController(config.timelineController,coreComponents);keyLoader.emeController=this.emeController=this.createController(config.emeController,coreComponents);this.cmcdController=this.createController(config.cmcdController,coreComponents);this.latencyController=this.createController(LatencyController,coreComponents);this.coreComponents=coreComponents;// Error controller handles errors before and after all other controllers
// This listener will be invoked after all other controllers error listeners
networkControllers.push(errorController);const onErrorOut=errorController.onErrorOut;if(typeof onErrorOut==='function'){this.on(Events.ERROR,onErrorOut,errorController);}}createController(ControllerClass,components){if(ControllerClass){const controllerInstance=new ControllerClass(this);if(components){components.push(controllerInstance);}return controllerInstance;}return null;}// Delegate the EventEmitter through the public API of Hls.js
on(event,listener,context=this){this._emitter.on(event,listener,context);}once(event,listener,context=this){this._emitter.once(event,listener,context);}removeAllListeners(event){this._emitter.removeAllListeners(event);}off(event,listener,context=this,once){this._emitter.off(event,listener,context,once);}listeners(event){return this._emitter.listeners(event);}emit(event,name,eventObject){return this._emitter.emit(event,name,eventObject);}trigger(event,eventObject){if(this.config.debug){return this.emit(event,event,eventObject);}else {try{return this.emit(event,event,eventObject);}catch(error){logger$2.error('An internal error happened while handling event '+event+'. Error message: "'+error.message+'". Here is a stacktrace:',error);// Prevent recursion in error event handlers that throw #5497
if(!this.triggeringException){this.triggeringException=true;const fatal=event===Events.ERROR;this.trigger(Events.ERROR,{type:ErrorTypes.OTHER_ERROR,details:ErrorDetails.INTERNAL_EXCEPTION,fatal,event,error});this.triggeringException=false;}}}return false;}listenerCount(event){return this._emitter.listenerCount(event);}/**
   * Dispose of the instance
   */destroy(){logger$2.log('destroy');this.trigger(Events.DESTROYING,undefined);this.detachMedia();this.removeAllListeners();this._autoLevelCapping=-1;this.url=null;this.networkControllers.forEach(component=>component.destroy());this.networkControllers.length=0;this.coreComponents.forEach(component=>component.destroy());this.coreComponents.length=0;// Remove any references that could be held in config options or callbacks
const config=this.config;config.xhrSetup=config.fetchSetup=undefined;// @ts-ignore
this.userConfig=null;}/**
   * Attaches Hls.js to a media element
   */attachMedia(media){logger$2.log('attachMedia');this._media=media;this.trigger(Events.MEDIA_ATTACHING,{media:media});}/**
   * Detach Hls.js from the media
   */detachMedia(){logger$2.log('detachMedia');this.trigger(Events.MEDIA_DETACHING,undefined);this._media=null;}/**
   * Set the source URL. Can be relative or absolute.
   */loadSource(url){this.stopLoad();const media=this.media;const loadedSource=this.url;const loadingSource=this.url=urlToolkitExports.buildAbsoluteURL(self.location.href,url,{alwaysNormalize:true});this._autoLevelCapping=-1;this._maxHdcpLevel=null;logger$2.log(`loadSource:${loadingSource}`);if(media&&loadedSource&&(loadedSource!==loadingSource||this.bufferController.hasSourceTypes())){this.detachMedia();this.attachMedia(media);}// when attaching to a source URL, trigger a playlist load
this.trigger(Events.MANIFEST_LOADING,{url:url});}/**
   * Start loading data from the stream source.
   * Depending on default config, client starts loading automatically when a source is set.
   *
   * @param startPosition - Set the start position to stream from.
   * Defaults to -1 (None: starts from earliest point)
   */startLoad(startPosition=-1){logger$2.log(`startLoad(${startPosition})`);this.started=true;this.resumeBuffering();for(let i=0;i<this.networkControllers.length;i++){this.networkControllers[i].startLoad(startPosition);if(!this.started||!this.networkControllers){break;}}}/**
   * Stop loading of any stream data.
   */stopLoad(){logger$2.log('stopLoad');this.started=false;for(let i=0;i<this.networkControllers.length;i++){this.networkControllers[i].stopLoad();if(this.started||!this.networkControllers){break;}}}/**
   * Resumes stream controller segment loading after `pauseBuffering` has been called.
   */resumeBuffering(){logger$2.log(`resume buffering`);this.networkControllers.forEach(controller=>{if(controller.resumeBuffering){controller.resumeBuffering();}});}/**
   * Prevents stream controller from loading new segments until `resumeBuffering` is called.
   * This allows for media buffering to be paused without interupting playlist loading.
   */pauseBuffering(){logger$2.log(`pause buffering`);this.networkControllers.forEach(controller=>{if(controller.pauseBuffering){controller.pauseBuffering();}});}/**
   * Swap through possible audio codecs in the stream (for example to switch from stereo to 5.1)
   */swapAudioCodec(){logger$2.log('swapAudioCodec');this.streamController.swapAudioCodec();}/**
   * When the media-element fails, this allows to detach and then re-attach it
   * as one call (convenience method).
   *
   * Automatic recovery of media-errors by this process is configurable.
   */recoverMediaError(){logger$2.log('recoverMediaError');const media=this._media;this.detachMedia();if(media){this.attachMedia(media);}}removeLevel(levelIndex){this.levelController.removeLevel(levelIndex);}/**
   * @returns an array of levels (variants) sorted by HDCP-LEVEL, RESOLUTION (height), FRAME-RATE, CODECS, VIDEO-RANGE, and BANDWIDTH
   */get levels(){const levels=this.levelController.levels;return levels?levels:[];}/**
   * Index of quality level (variant) currently played
   */get currentLevel(){return this.streamController.currentLevel;}/**
   * Set quality level index immediately. This will flush the current buffer to replace the quality asap. That means playback will interrupt at least shortly to re-buffer and re-sync eventually. Set to -1 for automatic level selection.
   */set currentLevel(newLevel){logger$2.log(`set currentLevel:${newLevel}`);this.levelController.manualLevel=newLevel;this.streamController.immediateLevelSwitch();}/**
   * Index of next quality level loaded as scheduled by stream controller.
   */get nextLevel(){return this.streamController.nextLevel;}/**
   * Set quality level index for next loaded data.
   * This will switch the video quality asap, without interrupting playback.
   * May abort current loading of data, and flush parts of buffer (outside currently played fragment region).
   * @param newLevel - Pass -1 for automatic level selection
   */set nextLevel(newLevel){logger$2.log(`set nextLevel:${newLevel}`);this.levelController.manualLevel=newLevel;this.streamController.nextLevelSwitch();}/**
   * Return the quality level of the currently or last (of none is loaded currently) segment
   */get loadLevel(){return this.levelController.level;}/**
   * Set quality level index for next loaded data in a conservative way.
   * This will switch the quality without flushing, but interrupt current loading.
   * Thus the moment when the quality switch will appear in effect will only be after the already existing buffer.
   * @param newLevel - Pass -1 for automatic level selection
   */set loadLevel(newLevel){logger$2.log(`set loadLevel:${newLevel}`);this.levelController.manualLevel=newLevel;}/**
   * get next quality level loaded
   */get nextLoadLevel(){return this.levelController.nextLoadLevel;}/**
   * Set quality level of next loaded segment in a fully "non-destructive" way.
   * Same as `loadLevel` but will wait for next switch (until current loading is done).
   */set nextLoadLevel(level){this.levelController.nextLoadLevel=level;}/**
   * Return "first level": like a default level, if not set,
   * falls back to index of first level referenced in manifest
   */get firstLevel(){return Math.max(this.levelController.firstLevel,this.minAutoLevel);}/**
   * Sets "first-level", see getter.
   */set firstLevel(newLevel){logger$2.log(`set firstLevel:${newLevel}`);this.levelController.firstLevel=newLevel;}/**
   * Return the desired start level for the first fragment that will be loaded.
   * The default value of -1 indicates automatic start level selection.
   * Setting hls.nextAutoLevel without setting a startLevel will result in
   * the nextAutoLevel value being used for one fragment load.
   */get startLevel(){const startLevel=this.levelController.startLevel;if(startLevel===-1&&this.abrController.forcedAutoLevel>-1){return this.abrController.forcedAutoLevel;}return startLevel;}/**
   * set  start level (level of first fragment that will be played back)
   * if not overrided by user, first level appearing in manifest will be used as start level
   * if -1 : automatic start level selection, playback will start from level matching download bandwidth
   * (determined from download of first segment)
   */set startLevel(newLevel){logger$2.log(`set startLevel:${newLevel}`);// if not in automatic start level detection, ensure startLevel is greater than minAutoLevel
if(newLevel!==-1){newLevel=Math.max(newLevel,this.minAutoLevel);}this.levelController.startLevel=newLevel;}/**
   * Whether level capping is enabled.
   * Default value is set via `config.capLevelToPlayerSize`.
   */get capLevelToPlayerSize(){return this.config.capLevelToPlayerSize;}/**
   * Enables or disables level capping. If disabled after previously enabled, `nextLevelSwitch` will be immediately called.
   */set capLevelToPlayerSize(shouldStartCapping){const newCapLevelToPlayerSize=!!shouldStartCapping;if(newCapLevelToPlayerSize!==this.config.capLevelToPlayerSize){if(newCapLevelToPlayerSize){this.capLevelController.startCapping();// If capping occurs, nextLevelSwitch will happen based on size.
}else {this.capLevelController.stopCapping();this.autoLevelCapping=-1;this.streamController.nextLevelSwitch();// Now we're uncapped, get the next level asap.
}this.config.capLevelToPlayerSize=newCapLevelToPlayerSize;}}/**
   * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)
   */get autoLevelCapping(){return this._autoLevelCapping;}/**
   * Returns the current bandwidth estimate in bits per second, when available. Otherwise, `NaN` is returned.
   */get bandwidthEstimate(){const{bwEstimator}=this.abrController;if(!bwEstimator){return NaN;}return bwEstimator.getEstimate();}set bandwidthEstimate(abrEwmaDefaultEstimate){this.abrController.resetEstimator(abrEwmaDefaultEstimate);}/**
   * get time to first byte estimate
   * @type {number}
   */get ttfbEstimate(){const{bwEstimator}=this.abrController;if(!bwEstimator){return NaN;}return bwEstimator.getEstimateTTFB();}/**
   * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)
   */set autoLevelCapping(newLevel){if(this._autoLevelCapping!==newLevel){logger$2.log(`set autoLevelCapping:${newLevel}`);this._autoLevelCapping=newLevel;this.levelController.checkMaxAutoUpdated();}}get maxHdcpLevel(){return this._maxHdcpLevel;}set maxHdcpLevel(value){if(isHdcpLevel(value)&&this._maxHdcpLevel!==value){this._maxHdcpLevel=value;this.levelController.checkMaxAutoUpdated();}}/**
   * True when automatic level selection enabled
   */get autoLevelEnabled(){return this.levelController.manualLevel===-1;}/**
   * Level set manually (if any)
   */get manualLevel(){return this.levelController.manualLevel;}/**
   * min level selectable in auto mode according to config.minAutoBitrate
   */get minAutoLevel(){const{levels,config:{minAutoBitrate}}=this;if(!levels)return 0;const len=levels.length;for(let i=0;i<len;i++){if(levels[i].maxBitrate>=minAutoBitrate){return i;}}return 0;}/**
   * max level selectable in auto mode according to autoLevelCapping
   */get maxAutoLevel(){const{levels,autoLevelCapping,maxHdcpLevel}=this;let maxAutoLevel;if(autoLevelCapping===-1&&levels!=null&&levels.length){maxAutoLevel=levels.length-1;}else {maxAutoLevel=autoLevelCapping;}if(maxHdcpLevel){for(let i=maxAutoLevel;i--;){const hdcpLevel=levels[i].attrs['HDCP-LEVEL'];if(hdcpLevel&&hdcpLevel<=maxHdcpLevel){return i;}}}return maxAutoLevel;}get firstAutoLevel(){return this.abrController.firstAutoLevel;}/**
   * next automatically selected quality level
   */get nextAutoLevel(){return this.abrController.nextAutoLevel;}/**
   * this setter is used to force next auto level.
   * this is useful to force a switch down in auto mode:
   * in case of load error on level N, hls.js can set nextAutoLevel to N-1 for example)
   * forced value is valid for one fragment. upon successful frag loading at forced level,
   * this value will be resetted to -1 by ABR controller.
   */set nextAutoLevel(nextLevel){this.abrController.nextAutoLevel=nextLevel;}/**
   * get the datetime value relative to media.currentTime for the active level Program Date Time if present
   */get playingDate(){return this.streamController.currentProgramDateTime;}get mainForwardBufferInfo(){return this.streamController.getMainFwdBufferInfo();}/**
   * Find and select the best matching audio track, making a level switch when a Group change is necessary.
   * Updates `hls.config.audioPreference`. Returns the selected track, or null when no matching track is found.
   */setAudioOption(audioOption){var _this$audioTrackContr;return (_this$audioTrackContr=this.audioTrackController)==null?void 0:_this$audioTrackContr.setAudioOption(audioOption);}/**
   * Find and select the best matching subtitle track, making a level switch when a Group change is necessary.
   * Updates `hls.config.subtitlePreference`. Returns the selected track, or null when no matching track is found.
   */setSubtitleOption(subtitleOption){var _this$subtitleTrackCo;(_this$subtitleTrackCo=this.subtitleTrackController)==null?void 0:_this$subtitleTrackCo.setSubtitleOption(subtitleOption);return null;}/**
   * Get the complete list of audio tracks across all media groups
   */get allAudioTracks(){const audioTrackController=this.audioTrackController;return audioTrackController?audioTrackController.allAudioTracks:[];}/**
   * Get the list of selectable audio tracks
   */get audioTracks(){const audioTrackController=this.audioTrackController;return audioTrackController?audioTrackController.audioTracks:[];}/**
   * index of the selected audio track (index in audio track lists)
   */get audioTrack(){const audioTrackController=this.audioTrackController;return audioTrackController?audioTrackController.audioTrack:-1;}/**
   * selects an audio track, based on its index in audio track lists
   */set audioTrack(audioTrackId){const audioTrackController=this.audioTrackController;if(audioTrackController){audioTrackController.audioTrack=audioTrackId;}}/**
   * get the complete list of subtitle tracks across all media groups
   */get allSubtitleTracks(){const subtitleTrackController=this.subtitleTrackController;return subtitleTrackController?subtitleTrackController.allSubtitleTracks:[];}/**
   * get alternate subtitle tracks list from playlist
   */get subtitleTracks(){const subtitleTrackController=this.subtitleTrackController;return subtitleTrackController?subtitleTrackController.subtitleTracks:[];}/**
   * index of the selected subtitle track (index in subtitle track lists)
   */get subtitleTrack(){const subtitleTrackController=this.subtitleTrackController;return subtitleTrackController?subtitleTrackController.subtitleTrack:-1;}get media(){return this._media;}/**
   * select an subtitle track, based on its index in subtitle track lists
   */set subtitleTrack(subtitleTrackId){const subtitleTrackController=this.subtitleTrackController;if(subtitleTrackController){subtitleTrackController.subtitleTrack=subtitleTrackId;}}/**
   * Whether subtitle display is enabled or not
   */get subtitleDisplay(){const subtitleTrackController=this.subtitleTrackController;return subtitleTrackController?subtitleTrackController.subtitleDisplay:false;}/**
   * Enable/disable subtitle display rendering
   */set subtitleDisplay(value){const subtitleTrackController=this.subtitleTrackController;if(subtitleTrackController){subtitleTrackController.subtitleDisplay=value;}}/**
   * get mode for Low-Latency HLS loading
   */get lowLatencyMode(){return this.config.lowLatencyMode;}/**
   * Enable/disable Low-Latency HLS part playlist and segment loading, and start live streams at playlist PART-HOLD-BACK rather than HOLD-BACK.
   */set lowLatencyMode(mode){this.config.lowLatencyMode=mode;}/**
   * Position (in seconds) of live sync point (ie edge of live position minus safety delay defined by ```hls.config.liveSyncDuration```)
   * @returns null prior to loading live Playlist
   */get liveSyncPosition(){return this.latencyController.liveSyncPosition;}/**
   * Estimated position (in seconds) of live edge (ie edge of live playlist plus time sync playlist advanced)
   * @returns 0 before first playlist is loaded
   */get latency(){return this.latencyController.latency;}/**
   * maximum distance from the edge before the player seeks forward to ```hls.liveSyncPosition```
   * configured using ```liveMaxLatencyDurationCount``` (multiple of target duration) or ```liveMaxLatencyDuration```
   * @returns 0 before first playlist is loaded
   */get maxLatency(){return this.latencyController.maxLatency;}/**
   * target distance from the edge as calculated by the latency controller
   */get targetLatency(){return this.latencyController.targetLatency;}/**
   * the rate at which the edge of the current live playlist is advancing or 1 if there is none
   */get drift(){return this.latencyController.drift;}/**
   * set to true when startLoad is called before MANIFEST_PARSED event
   */get forceStartLoad(){return this.streamController.forceStartLoad;}}Hls.defaultConfig=void 0;

var css_248z = "@charset \"UTF-8\";@keyframes plyr-progress{to{background-position:25px 0;background-position:var(--plyr-progress-loading-size,25px) 0}}@keyframes plyr-popup{0%{opacity:.5;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}@keyframes plyr-fade-in{0%{opacity:0}to{opacity:1}}.plyr{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;align-items:center;direction:ltr;display:flex;flex-direction:column;font-family:inherit;font-family:var(--plyr-font-family,inherit);font-variant-numeric:tabular-nums;font-weight:400;font-weight:var(--plyr-font-weight-regular,400);line-height:1.7;line-height:var(--plyr-line-height,1.7);max-width:100%;min-width:200px;position:relative;text-shadow:none;transition:box-shadow .3s ease;z-index:0}.plyr audio,.plyr iframe,.plyr video{display:block;height:100%;width:100%}.plyr button{font:inherit;line-height:inherit;width:auto}.plyr:focus{outline:0}.plyr--full-ui{box-sizing:border-box}.plyr--full-ui *,.plyr--full-ui :after,.plyr--full-ui :before{box-sizing:inherit}.plyr--full-ui a,.plyr--full-ui button,.plyr--full-ui input,.plyr--full-ui label{touch-action:manipulation}.plyr__badge{background:#4a5464;background:var(--plyr-badge-background,#4a5464);border-radius:2px;border-radius:var(--plyr-badge-border-radius,2px);color:#fff;color:var(--plyr-badge-text-color,#fff);font-size:9px;font-size:var(--plyr-font-size-badge,9px);line-height:1;padding:3px 4px}.plyr--full-ui ::-webkit-media-text-track-container{display:none}.plyr__captions{animation:plyr-fade-in .3s ease;bottom:0;display:none;font-size:13px;font-size:var(--plyr-font-size-small,13px);left:0;padding:10px;padding:var(--plyr-control-spacing,10px);position:absolute;text-align:center;transition:transform .4s ease-in-out;width:100%}.plyr__captions span:empty{display:none}@media (min-width:480px){.plyr__captions{font-size:15px;font-size:var(--plyr-font-size-base,15px);padding:20px;padding:calc(var(--plyr-control-spacing, 10px)*2)}}@media (min-width:768px){.plyr__captions{font-size:18px;font-size:var(--plyr-font-size-large,18px)}}.plyr--captions-active .plyr__captions{display:block}.plyr:not(.plyr--hide-controls) .plyr__controls:not(:empty)~.plyr__captions{transform:translateY(-40px);transform:translateY(calc(var(--plyr-control-spacing, 10px)*-4))}.plyr__caption{background:#000c;background:var(--plyr-captions-background,#000c);border-radius:2px;-webkit-box-decoration-break:clone;box-decoration-break:clone;color:#fff;color:var(--plyr-captions-text-color,#fff);line-height:185%;padding:.2em .5em;white-space:pre-wrap}.plyr__caption div{display:inline}.plyr__control{background:#0000;border:0;border-radius:4px;border-radius:var(--plyr-control-radius,4px);color:inherit;cursor:pointer;flex-shrink:0;overflow:visible;padding:7px;padding:calc(var(--plyr-control-spacing, 10px)*.7);position:relative;transition:all .3s ease}.plyr__control svg{fill:currentColor;display:block;height:18px;height:var(--plyr-control-icon-size,18px);pointer-events:none;width:18px;width:var(--plyr-control-icon-size,18px)}.plyr__control:focus{outline:0}.plyr__control:focus-visible{outline:2px dashed #00b2ff;outline:2px dashed var(--plyr-focus-visible-color,var(--plyr-color-main,var(--plyr-color-main,#00b2ff)));outline-offset:2px}a.plyr__control{text-decoration:none}.plyr__control.plyr__control--pressed .icon--not-pressed,.plyr__control.plyr__control--pressed .label--not-pressed,.plyr__control:not(.plyr__control--pressed) .icon--pressed,.plyr__control:not(.plyr__control--pressed) .label--pressed,a.plyr__control:after,a.plyr__control:before{display:none}.plyr--full-ui ::-webkit-media-controls{display:none}.plyr__controls{align-items:center;display:flex;justify-content:flex-end;text-align:center}.plyr__controls .plyr__progress__container{flex:1;min-width:0}.plyr__controls .plyr__controls__item{margin-left:2.5px;margin-left:calc(var(--plyr-control-spacing, 10px)/4)}.plyr__controls .plyr__controls__item:first-child{margin-left:0;margin-right:auto}.plyr__controls .plyr__controls__item.plyr__progress__container{padding-left:2.5px;padding-left:calc(var(--plyr-control-spacing, 10px)/4)}.plyr__controls .plyr__controls__item.plyr__time{padding:0 5px;padding:0 calc(var(--plyr-control-spacing, 10px)/2)}.plyr__controls .plyr__controls__item.plyr__progress__container:first-child,.plyr__controls .plyr__controls__item.plyr__time+.plyr__time,.plyr__controls .plyr__controls__item.plyr__time:first-child{padding-left:0}.plyr [data-plyr=airplay],.plyr [data-plyr=captions],.plyr [data-plyr=fullscreen],.plyr [data-plyr=pip],.plyr__controls:empty{display:none}.plyr--airplay-supported [data-plyr=airplay],.plyr--captions-enabled [data-plyr=captions],.plyr--fullscreen-enabled [data-plyr=fullscreen],.plyr--pip-supported [data-plyr=pip]{display:inline-block}.plyr__menu{display:flex;position:relative}.plyr__menu .plyr__control svg{transition:transform .3s ease}.plyr__menu .plyr__control[aria-expanded=true] svg{transform:rotate(90deg)}.plyr__menu .plyr__control[aria-expanded=true] .plyr__tooltip{display:none}.plyr__menu__container{animation:plyr-popup .2s ease;background:#ffffffe6;background:var(--plyr-menu-background,#ffffffe6);border-radius:8px;border-radius:var(--plyr-menu-radius,8px);bottom:100%;box-shadow:0 1px 2px #00000026;box-shadow:var(--plyr-menu-shadow,0 1px 2px #00000026);color:#4a5464;color:var(--plyr-menu-color,#4a5464);font-size:15px;font-size:var(--plyr-font-size-base,15px);margin-bottom:10px;position:absolute;right:-3px;text-align:left;white-space:nowrap;z-index:3}.plyr__menu__container>div{overflow:hidden;transition:height .35s cubic-bezier(.4,0,.2,1),width .35s cubic-bezier(.4,0,.2,1)}.plyr__menu__container:after{border:4px solid #0000;border-top-color:#ffffffe6;border:var(--plyr-menu-arrow-size,4px) solid #0000;border-top-color:var(--plyr-menu-background,#ffffffe6);content:\"\";height:0;position:absolute;right:14px;right:calc(var(--plyr-control-icon-size, 18px)/2 + var(--plyr-control-spacing, 10px)*.7 - var(--plyr-menu-arrow-size, 4px)/2);top:100%;width:0}.plyr__menu__container [role=menu]{padding:7px;padding:calc(var(--plyr-control-spacing, 10px)*.7)}.plyr__menu__container [role=menuitem],.plyr__menu__container [role=menuitemradio]{margin-top:2px}.plyr__menu__container [role=menuitem]:first-child,.plyr__menu__container [role=menuitemradio]:first-child{margin-top:0}.plyr__menu__container .plyr__control{align-items:center;color:#4a5464;color:var(--plyr-menu-color,#4a5464);display:flex;font-size:13px;font-size:var(--plyr-font-size-menu,var(--plyr-font-size-small,13px));padding:4.66667px 10.5px;padding:calc(var(--plyr-control-spacing, 10px)*.7/1.5) calc(var(--plyr-control-spacing, 10px)*.7*1.5);-webkit-user-select:none;user-select:none;width:100%}.plyr__menu__container .plyr__control>span{align-items:inherit;display:flex;width:100%}.plyr__menu__container .plyr__control:after{border:4px solid #0000;border:var(--plyr-menu-item-arrow-size,4px) solid #0000;content:\"\";position:absolute;top:50%;transform:translateY(-50%)}.plyr__menu__container .plyr__control--forward{padding-right:28px;padding-right:calc(var(--plyr-control-spacing, 10px)*.7*4)}.plyr__menu__container .plyr__control--forward:after{border-left-color:#728197;border-left-color:var(--plyr-menu-arrow-color,#728197);right:6.5px;right:calc(var(--plyr-control-spacing, 10px)*.7*1.5 - var(--plyr-menu-item-arrow-size, 4px))}.plyr__menu__container .plyr__control--forward:focus-visible:after,.plyr__menu__container .plyr__control--forward:hover:after{border-left-color:initial}.plyr__menu__container .plyr__control--back{font-weight:400;font-weight:var(--plyr-font-weight-regular,400);margin:7px;margin:calc(var(--plyr-control-spacing, 10px)*.7);margin-bottom:3.5px;margin-bottom:calc(var(--plyr-control-spacing, 10px)*.7/2);padding-left:28px;padding-left:calc(var(--plyr-control-spacing, 10px)*.7*4);position:relative;width:calc(100% - 14px);width:calc(100% - var(--plyr-control-spacing, 10px)*.7*2)}.plyr__menu__container .plyr__control--back:after{border-right-color:#728197;border-right-color:var(--plyr-menu-arrow-color,#728197);left:6.5px;left:calc(var(--plyr-control-spacing, 10px)*.7*1.5 - var(--plyr-menu-item-arrow-size, 4px))}.plyr__menu__container .plyr__control--back:before{background:#dcdfe5;background:var(--plyr-menu-back-border-color,#dcdfe5);box-shadow:0 1px 0 #fff;box-shadow:0 1px 0 var(--plyr-menu-back-border-shadow-color,#fff);content:\"\";height:1px;left:0;margin-top:3.5px;margin-top:calc(var(--plyr-control-spacing, 10px)*.7/2);overflow:hidden;position:absolute;right:0;top:100%}.plyr__menu__container .plyr__control--back:focus-visible:after,.plyr__menu__container .plyr__control--back:hover:after{border-right-color:initial}.plyr__menu__container .plyr__control[role=menuitemradio]{padding-left:7px;padding-left:calc(var(--plyr-control-spacing, 10px)*.7)}.plyr__menu__container .plyr__control[role=menuitemradio]:after,.plyr__menu__container .plyr__control[role=menuitemradio]:before{border-radius:100%}.plyr__menu__container .plyr__control[role=menuitemradio]:before{background:#0000001a;content:\"\";display:block;flex-shrink:0;height:16px;margin-right:10px;margin-right:var(--plyr-control-spacing,10px);transition:all .3s ease;width:16px}.plyr__menu__container .plyr__control[role=menuitemradio]:after{background:#fff;border:0;height:6px;left:12px;opacity:0;top:50%;transform:translateY(-50%) scale(0);transition:transform .3s ease,opacity .3s ease;width:6px}.plyr__menu__container .plyr__control[role=menuitemradio][aria-checked=true]:before{background:#00b2ff;background:var(--plyr-control-toggle-checked-background,var(--plyr-color-main,var(--plyr-color-main,#00b2ff)))}.plyr__menu__container .plyr__control[role=menuitemradio][aria-checked=true]:after{opacity:1;transform:translateY(-50%) scale(1)}.plyr__menu__container .plyr__control[role=menuitemradio]:focus-visible:before,.plyr__menu__container .plyr__control[role=menuitemradio]:hover:before{background:#23282f1a}.plyr__menu__container .plyr__menu__value{align-items:center;display:flex;margin-left:auto;margin-right:-5px;margin-right:calc(var(--plyr-control-spacing, 10px)*.7*-1 - -2px);overflow:hidden;padding-left:24.5px;padding-left:calc(var(--plyr-control-spacing, 10px)*.7*3.5);pointer-events:none}.plyr--full-ui input[type=range]{-webkit-appearance:none;appearance:none;background:#0000;border:0;border-radius:26px;border-radius:calc(var(--plyr-range-thumb-height, 13px)*2);color:#00b2ff;color:var(--plyr-range-fill-background,var(--plyr-color-main,var(--plyr-color-main,#00b2ff)));display:block;height:19px;height:calc(var(--plyr-range-thumb-active-shadow-width, 3px)*2 + var(--plyr-range-thumb-height, 13px));margin:0;min-width:0;padding:0;transition:box-shadow .3s ease;width:100%}.plyr--full-ui input[type=range]::-webkit-slider-runnable-track{background:#0000;background-image:linear-gradient(90deg,currentColor 0,#0000 0);background-image:linear-gradient(to right,currentColor var(--value,0),#0000 var(--value,0));border:0;border-radius:2.5px;border-radius:calc(var(--plyr-range-track-height, 5px)/2);height:5px;height:var(--plyr-range-track-height,5px);-webkit-transition:box-shadow .3s ease;transition:box-shadow .3s ease;-webkit-user-select:none;user-select:none}.plyr--full-ui input[type=range]::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;background:#fff;background:var(--plyr-range-thumb-background,#fff);border:0;border-radius:100%;box-shadow:0 1px 1px #23282f26,0 0 0 1px #23282f33;box-shadow:var(--plyr-range-thumb-shadow,0 1px 1px #23282f26,0 0 0 1px #23282f33);height:13px;height:var(--plyr-range-thumb-height,13px);margin-top:-4px;margin-top:calc((var(--plyr-range-thumb-height, 13px) - var(--plyr-range-track-height, 5px))/2*-1);position:relative;-webkit-transition:all .2s ease;transition:all .2s ease;width:13px;width:var(--plyr-range-thumb-height,13px)}.plyr--full-ui input[type=range]::-moz-range-track{background:#0000;border:0;border-radius:2.5px;border-radius:calc(var(--plyr-range-track-height, 5px)/2);height:5px;height:var(--plyr-range-track-height,5px);-moz-transition:box-shadow .3s ease;transition:box-shadow .3s ease;user-select:none}.plyr--full-ui input[type=range]::-moz-range-thumb{background:#fff;background:var(--plyr-range-thumb-background,#fff);border:0;border-radius:100%;box-shadow:0 1px 1px #23282f26,0 0 0 1px #23282f33;box-shadow:var(--plyr-range-thumb-shadow,0 1px 1px #23282f26,0 0 0 1px #23282f33);height:13px;height:var(--plyr-range-thumb-height,13px);position:relative;-moz-transition:all .2s ease;transition:all .2s ease;width:13px;width:var(--plyr-range-thumb-height,13px)}.plyr--full-ui input[type=range]::-moz-range-progress{background:currentColor;border-radius:2.5px;border-radius:calc(var(--plyr-range-track-height, 5px)/2);height:5px;height:var(--plyr-range-track-height,5px)}.plyr--full-ui input[type=range]::-ms-track{color:#0000}.plyr--full-ui input[type=range]::-ms-fill-upper,.plyr--full-ui input[type=range]::-ms-track{background:#0000;border:0;border-radius:2.5px;border-radius:calc(var(--plyr-range-track-height, 5px)/2);height:5px;height:var(--plyr-range-track-height,5px);-ms-transition:box-shadow .3s ease;transition:box-shadow .3s ease;user-select:none}.plyr--full-ui input[type=range]::-ms-fill-lower{background:#0000;background:currentColor;border:0;border-radius:2.5px;border-radius:calc(var(--plyr-range-track-height, 5px)/2);height:5px;height:var(--plyr-range-track-height,5px);-ms-transition:box-shadow .3s ease;transition:box-shadow .3s ease;user-select:none}.plyr--full-ui input[type=range]::-ms-thumb{background:#fff;background:var(--plyr-range-thumb-background,#fff);border:0;border-radius:100%;box-shadow:0 1px 1px #23282f26,0 0 0 1px #23282f33;box-shadow:var(--plyr-range-thumb-shadow,0 1px 1px #23282f26,0 0 0 1px #23282f33);height:13px;height:var(--plyr-range-thumb-height,13px);margin-top:0;position:relative;-ms-transition:all .2s ease;transition:all .2s ease;width:13px;width:var(--plyr-range-thumb-height,13px)}.plyr--full-ui input[type=range]::-ms-tooltip{display:none}.plyr--full-ui input[type=range]::-moz-focus-outer{border:0}.plyr--full-ui input[type=range]:focus{outline:0}.plyr--full-ui input[type=range]:focus-visible::-webkit-slider-runnable-track{outline:2px dashed #00b2ff;outline:2px dashed var(--plyr-focus-visible-color,var(--plyr-color-main,var(--plyr-color-main,#00b2ff)));outline-offset:2px}.plyr--full-ui input[type=range]:focus-visible::-moz-range-track{outline:2px dashed #00b2ff;outline:2px dashed var(--plyr-focus-visible-color,var(--plyr-color-main,var(--plyr-color-main,#00b2ff)));outline-offset:2px}.plyr--full-ui input[type=range]:focus-visible::-ms-track{outline:2px dashed #00b2ff;outline:2px dashed var(--plyr-focus-visible-color,var(--plyr-color-main,var(--plyr-color-main,#00b2ff)));outline-offset:2px}.plyr__poster{background-color:#000;background-color:var(--plyr-video-background,var(--plyr-video-background,#000));background-position:50% 50%;background-repeat:no-repeat;background-size:contain;height:100%;left:0;opacity:0;position:absolute;top:0;transition:opacity .2s ease;width:100%;z-index:1}.plyr--stopped.plyr__poster-enabled .plyr__poster{opacity:1}.plyr--youtube.plyr--paused.plyr__poster-enabled:not(.plyr--stopped) .plyr__poster{display:none}.plyr__time{font-size:13px;font-size:var(--plyr-font-size-time,var(--plyr-font-size-small,13px))}.plyr__time+.plyr__time:before{content:\"⁄\";margin-right:10px;margin-right:var(--plyr-control-spacing,10px)}@media (max-width:767px){.plyr__time+.plyr__time{display:none}}.plyr__tooltip{background:#fff;background:var(--plyr-tooltip-background,#fff);border-radius:5px;border-radius:var(--plyr-tooltip-radius,5px);bottom:100%;box-shadow:0 1px 2px #00000026;box-shadow:var(--plyr-tooltip-shadow,0 1px 2px #00000026);color:#4a5464;color:var(--plyr-tooltip-color,#4a5464);font-size:13px;font-size:var(--plyr-font-size-small,13px);font-weight:400;font-weight:var(--plyr-font-weight-regular,400);left:50%;line-height:1.3;margin-bottom:10px;margin-bottom:calc(var(--plyr-control-spacing, 10px)/2*2);opacity:0;padding:5px 7.5px;padding:calc(var(--plyr-control-spacing, 10px)/2) calc(var(--plyr-control-spacing, 10px)/2*1.5);pointer-events:none;position:absolute;transform:translate(-50%,10px) scale(.8);transform-origin:50% 100%;transition:transform .2s ease .1s,opacity .2s ease .1s;white-space:nowrap;z-index:2}.plyr__tooltip:before{border-left:4px solid #0000;border-left:var(--plyr-tooltip-arrow-size,4px) solid #0000;border-right:4px solid #0000;border-right:var(--plyr-tooltip-arrow-size,4px) solid #0000;border-top:4px solid #fff;border-top:var(--plyr-tooltip-arrow-size,4px) solid var(--plyr-tooltip-background,#fff);bottom:-4px;bottom:calc(var(--plyr-tooltip-arrow-size, 4px)*-1);content:\"\";height:0;left:50%;position:absolute;transform:translateX(-50%);width:0;z-index:2}.plyr .plyr__control:focus-visible .plyr__tooltip,.plyr .plyr__control:hover .plyr__tooltip,.plyr__tooltip--visible{opacity:1;transform:translate(-50%) scale(1)}.plyr .plyr__control:hover .plyr__tooltip{z-index:3}.plyr__controls>.plyr__control:first-child .plyr__tooltip,.plyr__controls>.plyr__control:first-child+.plyr__control .plyr__tooltip{left:0;transform:translateY(10px) scale(.8);transform-origin:0 100%}.plyr__controls>.plyr__control:first-child .plyr__tooltip:before,.plyr__controls>.plyr__control:first-child+.plyr__control .plyr__tooltip:before{left:16px;left:calc(var(--plyr-control-icon-size, 18px)/2 + var(--plyr-control-spacing, 10px)*.7)}.plyr__controls>.plyr__control:last-child .plyr__tooltip{left:auto;right:0;transform:translateY(10px) scale(.8);transform-origin:100% 100%}.plyr__controls>.plyr__control:last-child .plyr__tooltip:before{left:auto;right:16px;right:calc(var(--plyr-control-icon-size, 18px)/2 + var(--plyr-control-spacing, 10px)*.7);transform:translateX(50%)}.plyr__controls>.plyr__control:first-child .plyr__tooltip--visible,.plyr__controls>.plyr__control:first-child+.plyr__control .plyr__tooltip--visible,.plyr__controls>.plyr__control:first-child+.plyr__control:focus-visible .plyr__tooltip,.plyr__controls>.plyr__control:first-child+.plyr__control:hover .plyr__tooltip,.plyr__controls>.plyr__control:first-child:focus-visible .plyr__tooltip,.plyr__controls>.plyr__control:first-child:hover .plyr__tooltip,.plyr__controls>.plyr__control:last-child .plyr__tooltip--visible,.plyr__controls>.plyr__control:last-child:focus-visible .plyr__tooltip,.plyr__controls>.plyr__control:last-child:hover .plyr__tooltip{transform:translate(0) scale(1)}.plyr__progress{left:6.5px;left:calc(var(--plyr-range-thumb-height, 13px)*.5);margin-right:13px;margin-right:var(--plyr-range-thumb-height,13px);position:relative}.plyr__progress input[type=range],.plyr__progress__buffer{margin-left:-6.5px;margin-left:calc(var(--plyr-range-thumb-height, 13px)*-.5);margin-right:-6.5px;margin-right:calc(var(--plyr-range-thumb-height, 13px)*-.5);width:calc(100% + 13px);width:calc(100% + var(--plyr-range-thumb-height, 13px))}.plyr__progress input[type=range]{position:relative;z-index:2}.plyr__progress .plyr__tooltip{left:0;max-width:120px;overflow-wrap:break-word}.plyr__progress__buffer{-webkit-appearance:none;background:#0000;border:0;border-radius:100px;height:5px;height:var(--plyr-range-track-height,5px);left:0;margin-top:-2.5px;margin-top:calc((var(--plyr-range-track-height, 5px)/2)*-1);padding:0;position:absolute;top:50%}.plyr__progress__buffer::-webkit-progress-bar{background:#0000}.plyr__progress__buffer::-webkit-progress-value{background:currentColor;border-radius:100px;min-width:5px;min-width:var(--plyr-range-track-height,5px);-webkit-transition:width .2s ease;transition:width .2s ease}.plyr__progress__buffer::-moz-progress-bar{background:currentColor;border-radius:100px;min-width:5px;min-width:var(--plyr-range-track-height,5px);-moz-transition:width .2s ease;transition:width .2s ease}.plyr__progress__buffer::-ms-fill{border-radius:100px;-ms-transition:width .2s ease;transition:width .2s ease}.plyr--loading .plyr__progress__buffer{animation:plyr-progress 1s linear infinite;background-image:linear-gradient(-45deg,#23282f99 25%,#0000 0,#0000 50%,#23282f99 0,#23282f99 75%,#0000 0,#0000);background-image:linear-gradient(-45deg,var(--plyr-progress-loading-background,#23282f99) 25%,#0000 25%,#0000 50%,var(--plyr-progress-loading-background,#23282f99) 50%,var(--plyr-progress-loading-background,#23282f99) 75%,#0000 75%,#0000);background-repeat:repeat-x;background-size:25px 25px;background-size:var(--plyr-progress-loading-size,25px) var(--plyr-progress-loading-size,25px);color:#0000}.plyr--video.plyr--loading .plyr__progress__buffer{background-color:#ffffff40;background-color:var(--plyr-video-progress-buffered-background,#ffffff40)}.plyr--audio.plyr--loading .plyr__progress__buffer{background-color:#c1c8d199;background-color:var(--plyr-audio-progress-buffered-background,#c1c8d199)}.plyr__progress__marker{background-color:#fff;background-color:var(--plyr-progress-marker-background,#fff);border-radius:1px;height:5px;height:var(--plyr-range-track-height,5px);position:absolute;top:50%;transform:translate(-50%,-50%);width:3px;width:var(--plyr-progress-marker-width,3px);z-index:3}.plyr__volume{align-items:center;display:flex;position:relative}.plyr__volume input[type=range]{margin-left:5px;margin-left:calc(var(--plyr-control-spacing, 10px)/2);margin-right:5px;margin-right:calc(var(--plyr-control-spacing, 10px)/2);max-width:90px;min-width:60px;position:relative;z-index:2}.plyr--audio{display:block}.plyr--audio .plyr__controls{background:#fff;background:var(--plyr-audio-controls-background,#fff);border-radius:inherit;color:#4a5464;color:var(--plyr-audio-control-color,#4a5464);padding:10px;padding:var(--plyr-control-spacing,10px)}.plyr--audio .plyr__control:focus-visible,.plyr--audio .plyr__control:hover,.plyr--audio .plyr__control[aria-expanded=true]{background:#00b2ff;background:var(--plyr-audio-control-background-hover,var(--plyr-color-main,var(--plyr-color-main,#00b2ff)));color:#fff;color:var(--plyr-audio-control-color-hover,#fff)}.plyr--full-ui.plyr--audio input[type=range]::-webkit-slider-runnable-track{background-color:#c1c8d199;background-color:var(--plyr-audio-range-track-background,var(--plyr-audio-progress-buffered-background,#c1c8d199))}.plyr--full-ui.plyr--audio input[type=range]::-moz-range-track{background-color:#c1c8d199;background-color:var(--plyr-audio-range-track-background,var(--plyr-audio-progress-buffered-background,#c1c8d199))}.plyr--full-ui.plyr--audio input[type=range]::-ms-track{background-color:#c1c8d199;background-color:var(--plyr-audio-range-track-background,var(--plyr-audio-progress-buffered-background,#c1c8d199))}.plyr--full-ui.plyr--audio input[type=range]:active::-webkit-slider-thumb{box-shadow:0 1px 1px #23282f26,0 0 0 1px #23282f33,0 0 0 3px #23282f1a;box-shadow:var(--plyr-range-thumb-shadow,0 1px 1px #23282f26,0 0 0 1px #23282f33),0 0 0 var(--plyr-range-thumb-active-shadow-width,3px) var(--plyr-audio-range-thumb-active-shadow-color,#23282f1a)}.plyr--full-ui.plyr--audio input[type=range]:active::-moz-range-thumb{box-shadow:0 1px 1px #23282f26,0 0 0 1px #23282f33,0 0 0 3px #23282f1a;box-shadow:var(--plyr-range-thumb-shadow,0 1px 1px #23282f26,0 0 0 1px #23282f33),0 0 0 var(--plyr-range-thumb-active-shadow-width,3px) var(--plyr-audio-range-thumb-active-shadow-color,#23282f1a)}.plyr--full-ui.plyr--audio input[type=range]:active::-ms-thumb{box-shadow:0 1px 1px #23282f26,0 0 0 1px #23282f33,0 0 0 3px #23282f1a;box-shadow:var(--plyr-range-thumb-shadow,0 1px 1px #23282f26,0 0 0 1px #23282f33),0 0 0 var(--plyr-range-thumb-active-shadow-width,3px) var(--plyr-audio-range-thumb-active-shadow-color,#23282f1a)}.plyr--audio .plyr__progress__buffer{color:#c1c8d199;color:var(--plyr-audio-progress-buffered-background,#c1c8d199)}.plyr--video{overflow:hidden}.plyr--video.plyr--menu-open{overflow:visible}.plyr__video-wrapper{background:#000;background:var(--plyr-video-background,var(--plyr-video-background,#000));border-radius:inherit;height:100%;margin:auto;overflow:hidden;position:relative;width:100%}.plyr__video-embed,.plyr__video-wrapper--fixed-ratio{aspect-ratio:16/9}@supports not (aspect-ratio:16/9){.plyr__video-embed,.plyr__video-wrapper--fixed-ratio{height:0;padding-bottom:56.25%;position:relative}}.plyr__video-embed iframe,.plyr__video-wrapper--fixed-ratio video{border:0;height:100%;left:0;position:absolute;top:0;width:100%}.plyr--full-ui .plyr__video-embed>.plyr__video-embed__container{padding-bottom:240%;position:relative;transform:translateY(-38.28125%)}.plyr--video .plyr__controls{background:linear-gradient(#0000,#000000bf);background:var(--plyr-video-controls-background,linear-gradient(#0000,#000000bf));border-bottom-left-radius:inherit;border-bottom-right-radius:inherit;bottom:0;color:#fff;color:var(--plyr-video-control-color,#fff);left:0;padding:5px;padding:calc(var(--plyr-control-spacing, 10px)/2);padding-top:20px;padding-top:calc(var(--plyr-control-spacing, 10px)*2);position:absolute;right:0;transition:opacity .4s ease-in-out,transform .4s ease-in-out;z-index:3}@media (min-width:480px){.plyr--video .plyr__controls{padding:10px;padding:var(--plyr-control-spacing,10px);padding-top:35px;padding-top:calc(var(--plyr-control-spacing, 10px)*3.5)}}.plyr--video.plyr--hide-controls .plyr__controls{opacity:0;pointer-events:none;transform:translateY(100%)}.plyr--video .plyr__control:focus-visible,.plyr--video .plyr__control:hover,.plyr--video .plyr__control[aria-expanded=true]{background:#00b2ff;background:var(--plyr-video-control-background-hover,var(--plyr-color-main,var(--plyr-color-main,#00b2ff)));color:#fff;color:var(--plyr-video-control-color-hover,#fff)}.plyr__control--overlaid{background:#00b2ff;background:var(--plyr-video-control-background-hover,var(--plyr-color-main,var(--plyr-color-main,#00b2ff)));border:0;border-radius:100%;color:#fff;color:var(--plyr-video-control-color,#fff);display:none;left:50%;opacity:.9;padding:15px;padding:calc(var(--plyr-control-spacing, 10px)*1.5);position:absolute;top:50%;transform:translate(-50%,-50%);transition:.3s;z-index:2}.plyr__control--overlaid svg{left:2px;position:relative}.plyr__control--overlaid:focus,.plyr__control--overlaid:hover{opacity:1}.plyr--playing .plyr__control--overlaid{opacity:0;visibility:hidden}.plyr--full-ui.plyr--video .plyr__control--overlaid{display:block}.plyr--full-ui.plyr--video input[type=range]::-webkit-slider-runnable-track{background-color:#ffffff40;background-color:var(--plyr-video-range-track-background,var(--plyr-video-progress-buffered-background,#ffffff40))}.plyr--full-ui.plyr--video input[type=range]::-moz-range-track{background-color:#ffffff40;background-color:var(--plyr-video-range-track-background,var(--plyr-video-progress-buffered-background,#ffffff40))}.plyr--full-ui.plyr--video input[type=range]::-ms-track{background-color:#ffffff40;background-color:var(--plyr-video-range-track-background,var(--plyr-video-progress-buffered-background,#ffffff40))}.plyr--full-ui.plyr--video input[type=range]:active::-webkit-slider-thumb{box-shadow:0 1px 1px #23282f26,0 0 0 1px #23282f33,0 0 0 3px #ffffff80;box-shadow:var(--plyr-range-thumb-shadow,0 1px 1px #23282f26,0 0 0 1px #23282f33),0 0 0 var(--plyr-range-thumb-active-shadow-width,3px) var(--plyr-audio-range-thumb-active-shadow-color,#ffffff80)}.plyr--full-ui.plyr--video input[type=range]:active::-moz-range-thumb{box-shadow:0 1px 1px #23282f26,0 0 0 1px #23282f33,0 0 0 3px #ffffff80;box-shadow:var(--plyr-range-thumb-shadow,0 1px 1px #23282f26,0 0 0 1px #23282f33),0 0 0 var(--plyr-range-thumb-active-shadow-width,3px) var(--plyr-audio-range-thumb-active-shadow-color,#ffffff80)}.plyr--full-ui.plyr--video input[type=range]:active::-ms-thumb{box-shadow:0 1px 1px #23282f26,0 0 0 1px #23282f33,0 0 0 3px #ffffff80;box-shadow:var(--plyr-range-thumb-shadow,0 1px 1px #23282f26,0 0 0 1px #23282f33),0 0 0 var(--plyr-range-thumb-active-shadow-width,3px) var(--plyr-audio-range-thumb-active-shadow-color,#ffffff80)}.plyr--video .plyr__progress__buffer{color:#ffffff40;color:var(--plyr-video-progress-buffered-background,#ffffff40)}.plyr:fullscreen{background:#000;border-radius:0!important;height:100%;margin:0;width:100%}.plyr:fullscreen video{height:100%}.plyr:fullscreen .plyr__control .icon--exit-fullscreen{display:block}.plyr:fullscreen .plyr__control .icon--exit-fullscreen+svg{display:none}.plyr:fullscreen.plyr--hide-controls{cursor:none}@media (min-width:1024px){.plyr:fullscreen .plyr__captions{font-size:21px;font-size:var(--plyr-font-size-xlarge,21px)}}.plyr--fullscreen-fallback{background:#000;border-radius:0!important;bottom:0;height:100%;left:0;margin:0;position:fixed;right:0;top:0;width:100%;z-index:10000000}.plyr--fullscreen-fallback video{height:100%}.plyr--fullscreen-fallback .plyr__control .icon--exit-fullscreen{display:block}.plyr--fullscreen-fallback .plyr__control .icon--exit-fullscreen+svg{display:none}.plyr--fullscreen-fallback.plyr--hide-controls{cursor:none}@media (min-width:1024px){.plyr--fullscreen-fallback .plyr__captions{font-size:21px;font-size:var(--plyr-font-size-xlarge,21px)}}.plyr__ads{border-radius:inherit;bottom:0;cursor:pointer;left:0;overflow:hidden;position:absolute;right:0;top:0;z-index:-1}.plyr__ads>div,.plyr__ads>div iframe{height:100%;position:absolute;width:100%}.plyr__ads:after{background:#23282f;border-radius:2px;bottom:10px;bottom:var(--plyr-control-spacing,10px);color:#fff;content:attr(data-badge-text);font-size:11px;padding:2px 6px;pointer-events:none;position:absolute;right:10px;right:var(--plyr-control-spacing,10px);z-index:3}.plyr__ads:empty:after{display:none}.plyr__cues{background:currentColor;display:block;height:5px;height:var(--plyr-range-track-height,5px);left:0;opacity:.8;position:absolute;top:50%;transform:translateY(-50%);width:3px;z-index:3}.plyr__preview-thumb{background-color:#fff;background-color:var(--plyr-tooltip-background,#fff);border-radius:8px;border-radius:var(--plyr-menu-radius,8px);bottom:100%;box-shadow:0 1px 2px #00000026;box-shadow:var(--plyr-tooltip-shadow,0 1px 2px #00000026);margin-bottom:10px;margin-bottom:calc(var(--plyr-control-spacing, 10px)/2*2);opacity:0;padding:3px;pointer-events:none;position:absolute;transform:translateY(10px) scale(.8);transform-origin:50% 100%;transition:transform .2s ease .1s,opacity .2s ease .1s;z-index:2}.plyr__preview-thumb--is-shown{opacity:1;transform:translate(0) scale(1)}.plyr__preview-thumb:before{border-left:4px solid #0000;border-left:var(--plyr-tooltip-arrow-size,4px) solid #0000;border-right:4px solid #0000;border-right:var(--plyr-tooltip-arrow-size,4px) solid #0000;border-top:4px solid #fff;border-top:var(--plyr-tooltip-arrow-size,4px) solid var(--plyr-tooltip-background,#fff);bottom:-4px;bottom:calc(var(--plyr-tooltip-arrow-size, 4px)*-1);content:\"\";height:0;left:calc(50% + var(--preview-arrow-offset));position:absolute;transform:translateX(-50%);width:0;z-index:2}.plyr__preview-thumb__image-container{background:#c1c8d1;border-radius:7px;border-radius:calc(var(--plyr-menu-radius, 8px) - 1px);overflow:hidden;position:relative;z-index:0}.plyr__preview-thumb__image-container img,.plyr__preview-thumb__image-container:after{height:100%;left:0;position:absolute;top:0;width:100%}.plyr__preview-thumb__image-container:after{border-radius:inherit;box-shadow:inset 0 0 0 1px #00000026;content:\"\";pointer-events:none}.plyr__preview-thumb__image-container img{max-height:none;max-width:none}.plyr__preview-thumb__time-container{background:linear-gradient(#0000,#000000bf);background:var(--plyr-video-controls-background,linear-gradient(#0000,#000000bf));border-bottom-left-radius:7px;border-bottom-left-radius:calc(var(--plyr-menu-radius, 8px) - 1px);border-bottom-right-radius:7px;border-bottom-right-radius:calc(var(--plyr-menu-radius, 8px) - 1px);bottom:0;left:0;line-height:1.1;padding:20px 6px 6px;position:absolute;right:0;z-index:3}.plyr__preview-thumb__time-container span{color:#fff;font-size:13px;font-size:var(--plyr-font-size-time,var(--plyr-font-size-small,13px))}.plyr__preview-scrubbing{bottom:0;filter:blur(1px);height:100%;left:0;margin:auto;opacity:0;overflow:hidden;pointer-events:none;position:absolute;right:0;top:0;transition:opacity .3s ease;width:100%;z-index:1}.plyr__preview-scrubbing--is-shown{opacity:1}.plyr__preview-scrubbing img{height:100%;left:0;max-height:none;max-width:none;object-fit:contain;position:absolute;top:0;width:100%}.plyr--no-transition{transition:none!important}.plyr__sr-only{clip:rect(1px,1px,1px,1px);border:0!important;height:1px!important;overflow:hidden;padding:0!important;position:absolute!important;width:1px!important}.plyr [hidden]{display:none!important}";
styleInject(css_248z);

/*! js-cookie v3.0.5 | MIT */
/* eslint-disable no-var */
function assign(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      target[key] = source[key];
    }
  }
  return target;
}
/* eslint-enable no-var */

/* eslint-disable no-var */
var defaultConverter = {
  read: function (value) {
    if (value[0] === '"') {
      value = value.slice(1, -1);
    }
    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
  },
  write: function (value) {
    return encodeURIComponent(value).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g, decodeURIComponent);
  }
};
/* eslint-enable no-var */

/* eslint-disable no-var */

function init(converter, defaultAttributes) {
  function set(name, value, attributes) {
    if (typeof document === 'undefined') {
      return;
    }
    attributes = assign({}, defaultAttributes, attributes);
    if (typeof attributes.expires === 'number') {
      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
    }
    if (attributes.expires) {
      attributes.expires = attributes.expires.toUTCString();
    }
    name = encodeURIComponent(name).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
    var stringifiedAttributes = '';
    for (var attributeName in attributes) {
      if (!attributes[attributeName]) {
        continue;
      }
      stringifiedAttributes += '; ' + attributeName;
      if (attributes[attributeName] === true) {
        continue;
      }

      // Considers RFC 6265 section 5.2:
      // ...
      // 3.  If the remaining unparsed-attributes contains a %x3B (";")
      //     character:
      // Consume the characters of the unparsed-attributes up to,
      // not including, the first %x3B (";") character.
      // ...
      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
    }
    return document.cookie = name + '=' + converter.write(value, name) + stringifiedAttributes;
  }
  function get(name) {
    if (typeof document === 'undefined' || arguments.length && !name) {
      return;
    }

    // To prevent the for loop in the first place assign an empty array
    // in case there are no cookies at all.
    var cookies = document.cookie ? document.cookie.split('; ') : [];
    var jar = {};
    for (var i = 0; i < cookies.length; i++) {
      var parts = cookies[i].split('=');
      var value = parts.slice(1).join('=');
      try {
        var found = decodeURIComponent(parts[0]);
        jar[found] = converter.read(value, found);
        if (name === found) {
          break;
        }
      } catch (e) {}
    }
    return name ? jar[name] : jar;
  }
  return Object.create({
    set,
    get,
    remove: function (name, attributes) {
      set(name, '', assign({}, attributes, {
        expires: -1
      }));
    },
    withAttributes: function (attributes) {
      return init(this.converter, assign({}, this.attributes, attributes));
    },
    withConverter: function (converter) {
      return init(assign({}, this.converter, converter), this.attributes);
    }
  }, {
    attributes: {
      value: Object.freeze(defaultAttributes)
    },
    converter: {
      value: Object.freeze(converter)
    }
  });
}
var api = init(defaultConverter, {
  path: '/'
});

var cryptoJs = {exports: {}};

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var core = {exports: {}};

var hasRequiredCore;

function requireCore () {
	if (hasRequiredCore) return core.exports;
	hasRequiredCore = 1;
	(function (module, exports) {
		(function (root, factory) {
		  {
		    // CommonJS
		    module.exports = factory();
		  }
		})(commonjsGlobal, function () {
		  /*globals window, global, require*/

		  /**
		   * CryptoJS core components.
		   */
		  var CryptoJS = CryptoJS || function (Math, undefined$1) {
		    var crypto;

		    // Native crypto from window (Browser)
		    if (typeof window !== 'undefined' && window.crypto) {
		      crypto = window.crypto;
		    }

		    // Native crypto in web worker (Browser)
		    if (typeof self !== 'undefined' && self.crypto) {
		      crypto = self.crypto;
		    }

		    // Native crypto from worker
		    if (typeof globalThis !== 'undefined' && globalThis.crypto) {
		      crypto = globalThis.crypto;
		    }

		    // Native (experimental IE 11) crypto from window (Browser)
		    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
		      crypto = window.msCrypto;
		    }

		    // Native crypto from global (NodeJS)
		    if (!crypto && typeof commonjsGlobal !== 'undefined' && commonjsGlobal.crypto) {
		      crypto = commonjsGlobal.crypto;
		    }

		    // Native crypto import via require (NodeJS)
		    if (!crypto && typeof commonjsRequire === 'function') {
		      try {
		        crypto = require('crypto');
		      } catch (err) {}
		    }

		    /*
		     * Cryptographically secure pseudorandom number generator
		     *
		     * As Math.random() is cryptographically not safe to use
		     */
		    var cryptoSecureRandomInt = function () {
		      if (crypto) {
		        // Use getRandomValues method (Browser)
		        if (typeof crypto.getRandomValues === 'function') {
		          try {
		            return crypto.getRandomValues(new Uint32Array(1))[0];
		          } catch (err) {}
		        }

		        // Use randomBytes method (NodeJS)
		        if (typeof crypto.randomBytes === 'function') {
		          try {
		            return crypto.randomBytes(4).readInt32LE();
		          } catch (err) {}
		        }
		      }
		      throw new Error('Native crypto module could not be used to get secure random number.');
		    };

		    /*
		     * Local polyfill of Object.create
		      */
		    var create = Object.create || function () {
		      function F() {}
		      return function (obj) {
		        var subtype;
		        F.prototype = obj;
		        subtype = new F();
		        F.prototype = null;
		        return subtype;
		      };
		    }();

		    /**
		     * CryptoJS namespace.
		     */
		    var C = {};

		    /**
		     * Library namespace.
		     */
		    var C_lib = C.lib = {};

		    /**
		     * Base object for prototypal inheritance.
		     */
		    var Base = C_lib.Base = function () {
		      return {
		        /**
		         * Creates a new object that inherits from this object.
		         *
		         * @param {Object} overrides Properties to copy into the new object.
		         *
		         * @return {Object} The new object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var MyType = CryptoJS.lib.Base.extend({
		         *         field: 'value',
		         *
		         *         method: function () {
		         *         }
		         *     });
		         */
		        extend: function (overrides) {
		          // Spawn
		          var subtype = create(this);

		          // Augment
		          if (overrides) {
		            subtype.mixIn(overrides);
		          }

		          // Create default initializer
		          if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
		            subtype.init = function () {
		              subtype.$super.init.apply(this, arguments);
		            };
		          }

		          // Initializer's prototype is the subtype object
		          subtype.init.prototype = subtype;

		          // Reference supertype
		          subtype.$super = this;
		          return subtype;
		        },
		        /**
		         * Extends this object and runs the init method.
		         * Arguments to create() will be passed to init().
		         *
		         * @return {Object} The new object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var instance = MyType.create();
		         */
		        create: function () {
		          var instance = this.extend();
		          instance.init.apply(instance, arguments);
		          return instance;
		        },
		        /**
		         * Initializes a newly created object.
		         * Override this method to add some logic when your objects are created.
		         *
		         * @example
		         *
		         *     var MyType = CryptoJS.lib.Base.extend({
		         *         init: function () {
		         *             // ...
		         *         }
		         *     });
		         */
		        init: function () {},
		        /**
		         * Copies properties into this object.
		         *
		         * @param {Object} properties The properties to mix in.
		         *
		         * @example
		         *
		         *     MyType.mixIn({
		         *         field: 'value'
		         *     });
		         */
		        mixIn: function (properties) {
		          for (var propertyName in properties) {
		            if (properties.hasOwnProperty(propertyName)) {
		              this[propertyName] = properties[propertyName];
		            }
		          }

		          // IE won't copy toString using the loop above
		          if (properties.hasOwnProperty('toString')) {
		            this.toString = properties.toString;
		          }
		        },
		        /**
		         * Creates a copy of this object.
		         *
		         * @return {Object} The clone.
		         *
		         * @example
		         *
		         *     var clone = instance.clone();
		         */
		        clone: function () {
		          return this.init.prototype.extend(this);
		        }
		      };
		    }();

		    /**
		     * An array of 32-bit words.
		     *
		     * @property {Array} words The array of 32-bit words.
		     * @property {number} sigBytes The number of significant bytes in this word array.
		     */
		    var WordArray = C_lib.WordArray = Base.extend({
		      /**
		       * Initializes a newly created word array.
		       *
		       * @param {Array} words (Optional) An array of 32-bit words.
		       * @param {number} sigBytes (Optional) The number of significant bytes in the words.
		       *
		       * @example
		       *
		       *     var wordArray = CryptoJS.lib.WordArray.create();
		       *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
		       *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
		       */
		      init: function (words, sigBytes) {
		        words = this.words = words || [];
		        if (sigBytes != undefined$1) {
		          this.sigBytes = sigBytes;
		        } else {
		          this.sigBytes = words.length * 4;
		        }
		      },
		      /**
		       * Converts this word array to a string.
		       *
		       * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
		       *
		       * @return {string} The stringified word array.
		       *
		       * @example
		       *
		       *     var string = wordArray + '';
		       *     var string = wordArray.toString();
		       *     var string = wordArray.toString(CryptoJS.enc.Utf8);
		       */
		      toString: function (encoder) {
		        return (encoder || Hex).stringify(this);
		      },
		      /**
		       * Concatenates a word array to this word array.
		       *
		       * @param {WordArray} wordArray The word array to append.
		       *
		       * @return {WordArray} This word array.
		       *
		       * @example
		       *
		       *     wordArray1.concat(wordArray2);
		       */
		      concat: function (wordArray) {
		        // Shortcuts
		        var thisWords = this.words;
		        var thatWords = wordArray.words;
		        var thisSigBytes = this.sigBytes;
		        var thatSigBytes = wordArray.sigBytes;

		        // Clamp excess bits
		        this.clamp();

		        // Concat
		        if (thisSigBytes % 4) {
		          // Copy one byte at a time
		          for (var i = 0; i < thatSigBytes; i++) {
		            var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
		            thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
		          }
		        } else {
		          // Copy one word at a time
		          for (var j = 0; j < thatSigBytes; j += 4) {
		            thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
		          }
		        }
		        this.sigBytes += thatSigBytes;

		        // Chainable
		        return this;
		      },
		      /**
		       * Removes insignificant bits.
		       *
		       * @example
		       *
		       *     wordArray.clamp();
		       */
		      clamp: function () {
		        // Shortcuts
		        var words = this.words;
		        var sigBytes = this.sigBytes;

		        // Clamp
		        words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
		        words.length = Math.ceil(sigBytes / 4);
		      },
		      /**
		       * Creates a copy of this word array.
		       *
		       * @return {WordArray} The clone.
		       *
		       * @example
		       *
		       *     var clone = wordArray.clone();
		       */
		      clone: function () {
		        var clone = Base.clone.call(this);
		        clone.words = this.words.slice(0);
		        return clone;
		      },
		      /**
		       * Creates a word array filled with random bytes.
		       *
		       * @param {number} nBytes The number of random bytes to generate.
		       *
		       * @return {WordArray} The random word array.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var wordArray = CryptoJS.lib.WordArray.random(16);
		       */
		      random: function (nBytes) {
		        var words = [];
		        for (var i = 0; i < nBytes; i += 4) {
		          words.push(cryptoSecureRandomInt());
		        }
		        return new WordArray.init(words, nBytes);
		      }
		    });

		    /**
		     * Encoder namespace.
		     */
		    var C_enc = C.enc = {};

		    /**
		     * Hex encoding strategy.
		     */
		    var Hex = C_enc.Hex = {
		      /**
		       * Converts a word array to a hex string.
		       *
		       * @param {WordArray} wordArray The word array.
		       *
		       * @return {string} The hex string.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
		       */
		      stringify: function (wordArray) {
		        // Shortcuts
		        var words = wordArray.words;
		        var sigBytes = wordArray.sigBytes;

		        // Convert
		        var hexChars = [];
		        for (var i = 0; i < sigBytes; i++) {
		          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
		          hexChars.push((bite >>> 4).toString(16));
		          hexChars.push((bite & 0x0f).toString(16));
		        }
		        return hexChars.join('');
		      },
		      /**
		       * Converts a hex string to a word array.
		       *
		       * @param {string} hexStr The hex string.
		       *
		       * @return {WordArray} The word array.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
		       */
		      parse: function (hexStr) {
		        // Shortcut
		        var hexStrLength = hexStr.length;

		        // Convert
		        var words = [];
		        for (var i = 0; i < hexStrLength; i += 2) {
		          words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
		        }
		        return new WordArray.init(words, hexStrLength / 2);
		      }
		    };

		    /**
		     * Latin1 encoding strategy.
		     */
		    var Latin1 = C_enc.Latin1 = {
		      /**
		       * Converts a word array to a Latin1 string.
		       *
		       * @param {WordArray} wordArray The word array.
		       *
		       * @return {string} The Latin1 string.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
		       */
		      stringify: function (wordArray) {
		        // Shortcuts
		        var words = wordArray.words;
		        var sigBytes = wordArray.sigBytes;

		        // Convert
		        var latin1Chars = [];
		        for (var i = 0; i < sigBytes; i++) {
		          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
		          latin1Chars.push(String.fromCharCode(bite));
		        }
		        return latin1Chars.join('');
		      },
		      /**
		       * Converts a Latin1 string to a word array.
		       *
		       * @param {string} latin1Str The Latin1 string.
		       *
		       * @return {WordArray} The word array.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
		       */
		      parse: function (latin1Str) {
		        // Shortcut
		        var latin1StrLength = latin1Str.length;

		        // Convert
		        var words = [];
		        for (var i = 0; i < latin1StrLength; i++) {
		          words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
		        }
		        return new WordArray.init(words, latin1StrLength);
		      }
		    };

		    /**
		     * UTF-8 encoding strategy.
		     */
		    var Utf8 = C_enc.Utf8 = {
		      /**
		       * Converts a word array to a UTF-8 string.
		       *
		       * @param {WordArray} wordArray The word array.
		       *
		       * @return {string} The UTF-8 string.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
		       */
		      stringify: function (wordArray) {
		        try {
		          return decodeURIComponent(escape(Latin1.stringify(wordArray)));
		        } catch (e) {
		          throw new Error('Malformed UTF-8 data');
		        }
		      },
		      /**
		       * Converts a UTF-8 string to a word array.
		       *
		       * @param {string} utf8Str The UTF-8 string.
		       *
		       * @return {WordArray} The word array.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
		       */
		      parse: function (utf8Str) {
		        return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
		      }
		    };

		    /**
		     * Abstract buffered block algorithm template.
		     *
		     * The property blockSize must be implemented in a concrete subtype.
		     *
		     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
		     */
		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
		      /**
		       * Resets this block algorithm's data buffer to its initial state.
		       *
		       * @example
		       *
		       *     bufferedBlockAlgorithm.reset();
		       */
		      reset: function () {
		        // Initial values
		        this._data = new WordArray.init();
		        this._nDataBytes = 0;
		      },
		      /**
		       * Adds new data to this block algorithm's buffer.
		       *
		       * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
		       *
		       * @example
		       *
		       *     bufferedBlockAlgorithm._append('data');
		       *     bufferedBlockAlgorithm._append(wordArray);
		       */
		      _append: function (data) {
		        // Convert string to WordArray, else assume WordArray already
		        if (typeof data == 'string') {
		          data = Utf8.parse(data);
		        }

		        // Append
		        this._data.concat(data);
		        this._nDataBytes += data.sigBytes;
		      },
		      /**
		       * Processes available data blocks.
		       *
		       * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
		       *
		       * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
		       *
		       * @return {WordArray} The processed data.
		       *
		       * @example
		       *
		       *     var processedData = bufferedBlockAlgorithm._process();
		       *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
		       */
		      _process: function (doFlush) {
		        var processedWords;

		        // Shortcuts
		        var data = this._data;
		        var dataWords = data.words;
		        var dataSigBytes = data.sigBytes;
		        var blockSize = this.blockSize;
		        var blockSizeBytes = blockSize * 4;

		        // Count blocks ready
		        var nBlocksReady = dataSigBytes / blockSizeBytes;
		        if (doFlush) {
		          // Round up to include partial blocks
		          nBlocksReady = Math.ceil(nBlocksReady);
		        } else {
		          // Round down to include only full blocks,
		          // less the number of blocks that must remain in the buffer
		          nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
		        }

		        // Count words ready
		        var nWordsReady = nBlocksReady * blockSize;

		        // Count bytes ready
		        var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

		        // Process blocks
		        if (nWordsReady) {
		          for (var offset = 0; offset < nWordsReady; offset += blockSize) {
		            // Perform concrete-algorithm logic
		            this._doProcessBlock(dataWords, offset);
		          }

		          // Remove processed words
		          processedWords = dataWords.splice(0, nWordsReady);
		          data.sigBytes -= nBytesReady;
		        }

		        // Return processed words
		        return new WordArray.init(processedWords, nBytesReady);
		      },
		      /**
		       * Creates a copy of this object.
		       *
		       * @return {Object} The clone.
		       *
		       * @example
		       *
		       *     var clone = bufferedBlockAlgorithm.clone();
		       */
		      clone: function () {
		        var clone = Base.clone.call(this);
		        clone._data = this._data.clone();
		        return clone;
		      },
		      _minBufferSize: 0
		    });

		    /**
		     * Abstract hasher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
		     */
		    C_lib.Hasher = BufferedBlockAlgorithm.extend({
		      /**
		       * Configuration options.
		       */
		      cfg: Base.extend(),
		      /**
		       * Initializes a newly created hasher.
		       *
		       * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
		       *
		       * @example
		       *
		       *     var hasher = CryptoJS.algo.SHA256.create();
		       */
		      init: function (cfg) {
		        // Apply config defaults
		        this.cfg = this.cfg.extend(cfg);

		        // Set initial values
		        this.reset();
		      },
		      /**
		       * Resets this hasher to its initial state.
		       *
		       * @example
		       *
		       *     hasher.reset();
		       */
		      reset: function () {
		        // Reset data buffer
		        BufferedBlockAlgorithm.reset.call(this);

		        // Perform concrete-hasher logic
		        this._doReset();
		      },
		      /**
		       * Updates this hasher with a message.
		       *
		       * @param {WordArray|string} messageUpdate The message to append.
		       *
		       * @return {Hasher} This hasher.
		       *
		       * @example
		       *
		       *     hasher.update('message');
		       *     hasher.update(wordArray);
		       */
		      update: function (messageUpdate) {
		        // Append
		        this._append(messageUpdate);

		        // Update the hash
		        this._process();

		        // Chainable
		        return this;
		      },
		      /**
		       * Finalizes the hash computation.
		       * Note that the finalize operation is effectively a destructive, read-once operation.
		       *
		       * @param {WordArray|string} messageUpdate (Optional) A final message update.
		       *
		       * @return {WordArray} The hash.
		       *
		       * @example
		       *
		       *     var hash = hasher.finalize();
		       *     var hash = hasher.finalize('message');
		       *     var hash = hasher.finalize(wordArray);
		       */
		      finalize: function (messageUpdate) {
		        // Final message update
		        if (messageUpdate) {
		          this._append(messageUpdate);
		        }

		        // Perform concrete-hasher logic
		        var hash = this._doFinalize();
		        return hash;
		      },
		      blockSize: 512 / 32,
		      /**
		       * Creates a shortcut function to a hasher's object interface.
		       *
		       * @param {Hasher} hasher The hasher to create a helper for.
		       *
		       * @return {Function} The shortcut function.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
		       */
		      _createHelper: function (hasher) {
		        return function (message, cfg) {
		          return new hasher.init(cfg).finalize(message);
		        };
		      },
		      /**
		       * Creates a shortcut function to the HMAC's object interface.
		       *
		       * @param {Hasher} hasher The hasher to use in this HMAC helper.
		       *
		       * @return {Function} The shortcut function.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
		       */
		      _createHmacHelper: function (hasher) {
		        return function (message, key) {
		          return new C_algo.HMAC.init(hasher, key).finalize(message);
		        };
		      }
		    });

		    /**
		     * Algorithm namespace.
		     */
		    var C_algo = C.algo = {};
		    return C;
		  }(Math);
		  return CryptoJS;
		}); 
	} (core));
	return core.exports;
}

var x64Core = {exports: {}};

var hasRequiredX64Core;

function requireX64Core () {
	if (hasRequiredX64Core) return x64Core.exports;
	hasRequiredX64Core = 1;
	(function (module, exports) {
		(function (root, factory) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function (undefined$1) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var X32WordArray = C_lib.WordArray;

		    /**
		     * x64 namespace.
		     */
		    var C_x64 = C.x64 = {};

		    /**
		     * A 64-bit word.
		     */
		    C_x64.Word = Base.extend({
		      /**
		       * Initializes a newly created 64-bit word.
		       *
		       * @param {number} high The high 32 bits.
		       * @param {number} low The low 32 bits.
		       *
		       * @example
		       *
		       *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
		       */
		      init: function (high, low) {
		        this.high = high;
		        this.low = low;
		      }

		      /**
		       * Bitwise NOTs this word.
		       *
		       * @return {X64Word} A new x64-Word object after negating.
		       *
		       * @example
		       *
		       *     var negated = x64Word.not();
		       */
		      // not: function () {
		      // var high = ~this.high;
		      // var low = ~this.low;

		      // return X64Word.create(high, low);
		      // },

		      /**
		       * Bitwise ANDs this word with the passed word.
		       *
		       * @param {X64Word} word The x64-Word to AND with this word.
		       *
		       * @return {X64Word} A new x64-Word object after ANDing.
		       *
		       * @example
		       *
		       *     var anded = x64Word.and(anotherX64Word);
		       */
		      // and: function (word) {
		      // var high = this.high & word.high;
		      // var low = this.low & word.low;

		      // return X64Word.create(high, low);
		      // },

		      /**
		       * Bitwise ORs this word with the passed word.
		       *
		       * @param {X64Word} word The x64-Word to OR with this word.
		       *
		       * @return {X64Word} A new x64-Word object after ORing.
		       *
		       * @example
		       *
		       *     var ored = x64Word.or(anotherX64Word);
		       */
		      // or: function (word) {
		      // var high = this.high | word.high;
		      // var low = this.low | word.low;

		      // return X64Word.create(high, low);
		      // },

		      /**
		       * Bitwise XORs this word with the passed word.
		       *
		       * @param {X64Word} word The x64-Word to XOR with this word.
		       *
		       * @return {X64Word} A new x64-Word object after XORing.
		       *
		       * @example
		       *
		       *     var xored = x64Word.xor(anotherX64Word);
		       */
		      // xor: function (word) {
		      // var high = this.high ^ word.high;
		      // var low = this.low ^ word.low;

		      // return X64Word.create(high, low);
		      // },

		      /**
		       * Shifts this word n bits to the left.
		       *
		       * @param {number} n The number of bits to shift.
		       *
		       * @return {X64Word} A new x64-Word object after shifting.
		       *
		       * @example
		       *
		       *     var shifted = x64Word.shiftL(25);
		       */
		      // shiftL: function (n) {
		      // if (n < 32) {
		      // var high = (this.high << n) | (this.low >>> (32 - n));
		      // var low = this.low << n;
		      // } else {
		      // var high = this.low << (n - 32);
		      // var low = 0;
		      // }

		      // return X64Word.create(high, low);
		      // },

		      /**
		       * Shifts this word n bits to the right.
		       *
		       * @param {number} n The number of bits to shift.
		       *
		       * @return {X64Word} A new x64-Word object after shifting.
		       *
		       * @example
		       *
		       *     var shifted = x64Word.shiftR(7);
		       */
		      // shiftR: function (n) {
		      // if (n < 32) {
		      // var low = (this.low >>> n) | (this.high << (32 - n));
		      // var high = this.high >>> n;
		      // } else {
		      // var low = this.high >>> (n - 32);
		      // var high = 0;
		      // }

		      // return X64Word.create(high, low);
		      // },

		      /**
		       * Rotates this word n bits to the left.
		       *
		       * @param {number} n The number of bits to rotate.
		       *
		       * @return {X64Word} A new x64-Word object after rotating.
		       *
		       * @example
		       *
		       *     var rotated = x64Word.rotL(25);
		       */
		      // rotL: function (n) {
		      // return this.shiftL(n).or(this.shiftR(64 - n));
		      // },

		      /**
		       * Rotates this word n bits to the right.
		       *
		       * @param {number} n The number of bits to rotate.
		       *
		       * @return {X64Word} A new x64-Word object after rotating.
		       *
		       * @example
		       *
		       *     var rotated = x64Word.rotR(7);
		       */
		      // rotR: function (n) {
		      // return this.shiftR(n).or(this.shiftL(64 - n));
		      // },

		      /**
		       * Adds this word with the passed word.
		       *
		       * @param {X64Word} word The x64-Word to add with this word.
		       *
		       * @return {X64Word} A new x64-Word object after adding.
		       *
		       * @example
		       *
		       *     var added = x64Word.add(anotherX64Word);
		       */
		      // add: function (word) {
		      // var low = (this.low + word.low) | 0;
		      // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
		      // var high = (this.high + word.high + carry) | 0;

		      // return X64Word.create(high, low);
		      // }
		    });

		    /**
		     * An array of 64-bit words.
		     *
		     * @property {Array} words The array of CryptoJS.x64.Word objects.
		     * @property {number} sigBytes The number of significant bytes in this word array.
		     */
		    C_x64.WordArray = Base.extend({
		      /**
		       * Initializes a newly created word array.
		       *
		       * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
		       * @param {number} sigBytes (Optional) The number of significant bytes in the words.
		       *
		       * @example
		       *
		       *     var wordArray = CryptoJS.x64.WordArray.create();
		       *
		       *     var wordArray = CryptoJS.x64.WordArray.create([
		       *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
		       *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
		       *     ]);
		       *
		       *     var wordArray = CryptoJS.x64.WordArray.create([
		       *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
		       *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
		       *     ], 10);
		       */
		      init: function (words, sigBytes) {
		        words = this.words = words || [];
		        if (sigBytes != undefined$1) {
		          this.sigBytes = sigBytes;
		        } else {
		          this.sigBytes = words.length * 8;
		        }
		      },
		      /**
		       * Converts this 64-bit word array to a 32-bit word array.
		       *
		       * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
		       *
		       * @example
		       *
		       *     var x32WordArray = x64WordArray.toX32();
		       */
		      toX32: function () {
		        // Shortcuts
		        var x64Words = this.words;
		        var x64WordsLength = x64Words.length;

		        // Convert
		        var x32Words = [];
		        for (var i = 0; i < x64WordsLength; i++) {
		          var x64Word = x64Words[i];
		          x32Words.push(x64Word.high);
		          x32Words.push(x64Word.low);
		        }
		        return X32WordArray.create(x32Words, this.sigBytes);
		      },
		      /**
		       * Creates a copy of this word array.
		       *
		       * @return {X64WordArray} The clone.
		       *
		       * @example
		       *
		       *     var clone = x64WordArray.clone();
		       */
		      clone: function () {
		        var clone = Base.clone.call(this);

		        // Clone "words" array
		        var words = clone.words = this.words.slice(0);

		        // Clone each X64Word object
		        var wordsLength = words.length;
		        for (var i = 0; i < wordsLength; i++) {
		          words[i] = words[i].clone();
		        }
		        return clone;
		      }
		    });
		  })();
		  return CryptoJS;
		}); 
	} (x64Core));
	return x64Core.exports;
}

var libTypedarrays = {exports: {}};

var hasRequiredLibTypedarrays;

function requireLibTypedarrays () {
	if (hasRequiredLibTypedarrays) return libTypedarrays.exports;
	hasRequiredLibTypedarrays = 1;
	(function (module, exports) {
		(function (root, factory) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Check if typed arrays are supported
		    if (typeof ArrayBuffer != 'function') {
		      return;
		    }

		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;

		    // Reference original init
		    var superInit = WordArray.init;

		    // Augment WordArray.init to handle typed arrays
		    var subInit = WordArray.init = function (typedArray) {
		      // Convert buffers to uint8
		      if (typedArray instanceof ArrayBuffer) {
		        typedArray = new Uint8Array(typedArray);
		      }

		      // Convert other array views to uint8
		      if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
		        typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
		      }

		      // Handle Uint8Array
		      if (typedArray instanceof Uint8Array) {
		        // Shortcut
		        var typedArrayByteLength = typedArray.byteLength;

		        // Extract bytes
		        var words = [];
		        for (var i = 0; i < typedArrayByteLength; i++) {
		          words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
		        }

		        // Initialize this word array
		        superInit.call(this, words, typedArrayByteLength);
		      } else {
		        // Else call normal init
		        superInit.apply(this, arguments);
		      }
		    };
		    subInit.prototype = WordArray;
		  })();
		  return CryptoJS.lib.WordArray;
		}); 
	} (libTypedarrays));
	return libTypedarrays.exports;
}

var encUtf16 = {exports: {}};

var hasRequiredEncUtf16;

function requireEncUtf16 () {
	if (hasRequiredEncUtf16) return encUtf16.exports;
	hasRequiredEncUtf16 = 1;
	(function (module, exports) {
		(function (root, factory) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_enc = C.enc;

		    /**
		     * UTF-16 BE encoding strategy.
		     */
		    C_enc.Utf16 = C_enc.Utf16BE = {
		      /**
		       * Converts a word array to a UTF-16 BE string.
		       *
		       * @param {WordArray} wordArray The word array.
		       *
		       * @return {string} The UTF-16 BE string.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
		       */
		      stringify: function (wordArray) {
		        // Shortcuts
		        var words = wordArray.words;
		        var sigBytes = wordArray.sigBytes;

		        // Convert
		        var utf16Chars = [];
		        for (var i = 0; i < sigBytes; i += 2) {
		          var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;
		          utf16Chars.push(String.fromCharCode(codePoint));
		        }
		        return utf16Chars.join('');
		      },
		      /**
		       * Converts a UTF-16 BE string to a word array.
		       *
		       * @param {string} utf16Str The UTF-16 BE string.
		       *
		       * @return {WordArray} The word array.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
		       */
		      parse: function (utf16Str) {
		        // Shortcut
		        var utf16StrLength = utf16Str.length;

		        // Convert
		        var words = [];
		        for (var i = 0; i < utf16StrLength; i++) {
		          words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
		        }
		        return WordArray.create(words, utf16StrLength * 2);
		      }
		    };

		    /**
		     * UTF-16 LE encoding strategy.
		     */
		    C_enc.Utf16LE = {
		      /**
		       * Converts a word array to a UTF-16 LE string.
		       *
		       * @param {WordArray} wordArray The word array.
		       *
		       * @return {string} The UTF-16 LE string.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
		       */
		      stringify: function (wordArray) {
		        // Shortcuts
		        var words = wordArray.words;
		        var sigBytes = wordArray.sigBytes;

		        // Convert
		        var utf16Chars = [];
		        for (var i = 0; i < sigBytes; i += 2) {
		          var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);
		          utf16Chars.push(String.fromCharCode(codePoint));
		        }
		        return utf16Chars.join('');
		      },
		      /**
		       * Converts a UTF-16 LE string to a word array.
		       *
		       * @param {string} utf16Str The UTF-16 LE string.
		       *
		       * @return {WordArray} The word array.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
		       */
		      parse: function (utf16Str) {
		        // Shortcut
		        var utf16StrLength = utf16Str.length;

		        // Convert
		        var words = [];
		        for (var i = 0; i < utf16StrLength; i++) {
		          words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
		        }
		        return WordArray.create(words, utf16StrLength * 2);
		      }
		    };
		    function swapEndian(word) {
		      return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;
		    }
		  })();
		  return CryptoJS.enc.Utf16;
		}); 
	} (encUtf16));
	return encUtf16.exports;
}

var encBase64 = {exports: {}};

var hasRequiredEncBase64;

function requireEncBase64 () {
	if (hasRequiredEncBase64) return encBase64.exports;
	hasRequiredEncBase64 = 1;
	(function (module, exports) {
		(function (root, factory) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_enc = C.enc;

		    /**
		     * Base64 encoding strategy.
		     */
		    C_enc.Base64 = {
		      /**
		       * Converts a word array to a Base64 string.
		       *
		       * @param {WordArray} wordArray The word array.
		       *
		       * @return {string} The Base64 string.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
		       */
		      stringify: function (wordArray) {
		        // Shortcuts
		        var words = wordArray.words;
		        var sigBytes = wordArray.sigBytes;
		        var map = this._map;

		        // Clamp excess bits
		        wordArray.clamp();

		        // Convert
		        var base64Chars = [];
		        for (var i = 0; i < sigBytes; i += 3) {
		          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
		          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
		          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
		          var triplet = byte1 << 16 | byte2 << 8 | byte3;
		          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
		            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
		          }
		        }

		        // Add padding
		        var paddingChar = map.charAt(64);
		        if (paddingChar) {
		          while (base64Chars.length % 4) {
		            base64Chars.push(paddingChar);
		          }
		        }
		        return base64Chars.join('');
		      },
		      /**
		       * Converts a Base64 string to a word array.
		       *
		       * @param {string} base64Str The Base64 string.
		       *
		       * @return {WordArray} The word array.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
		       */
		      parse: function (base64Str) {
		        // Shortcuts
		        var base64StrLength = base64Str.length;
		        var map = this._map;
		        var reverseMap = this._reverseMap;
		        if (!reverseMap) {
		          reverseMap = this._reverseMap = [];
		          for (var j = 0; j < map.length; j++) {
		            reverseMap[map.charCodeAt(j)] = j;
		          }
		        }

		        // Ignore padding
		        var paddingChar = map.charAt(64);
		        if (paddingChar) {
		          var paddingIndex = base64Str.indexOf(paddingChar);
		          if (paddingIndex !== -1) {
		            base64StrLength = paddingIndex;
		          }
		        }

		        // Convert
		        return parseLoop(base64Str, base64StrLength, reverseMap);
		      },
		      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
		    };
		    function parseLoop(base64Str, base64StrLength, reverseMap) {
		      var words = [];
		      var nBytes = 0;
		      for (var i = 0; i < base64StrLength; i++) {
		        if (i % 4) {
		          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
		          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
		          var bitsCombined = bits1 | bits2;
		          words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
		          nBytes++;
		        }
		      }
		      return WordArray.create(words, nBytes);
		    }
		  })();
		  return CryptoJS.enc.Base64;
		}); 
	} (encBase64));
	return encBase64.exports;
}

var encBase64url = {exports: {}};

var hasRequiredEncBase64url;

function requireEncBase64url () {
	if (hasRequiredEncBase64url) return encBase64url.exports;
	hasRequiredEncBase64url = 1;
	(function (module, exports) {
		(function (root, factory) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_enc = C.enc;

		    /**
		     * Base64url encoding strategy.
		     */
		    C_enc.Base64url = {
		      /**
		       * Converts a word array to a Base64url string.
		       *
		       * @param {WordArray} wordArray The word array.
		       *
		       * @param {boolean} urlSafe Whether to use url safe
		       *
		       * @return {string} The Base64url string.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
		       */
		      stringify: function (wordArray, urlSafe) {
		        if (urlSafe === undefined) {
		          urlSafe = true;
		        }
		        // Shortcuts
		        var words = wordArray.words;
		        var sigBytes = wordArray.sigBytes;
		        var map = urlSafe ? this._safe_map : this._map;

		        // Clamp excess bits
		        wordArray.clamp();

		        // Convert
		        var base64Chars = [];
		        for (var i = 0; i < sigBytes; i += 3) {
		          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
		          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
		          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
		          var triplet = byte1 << 16 | byte2 << 8 | byte3;
		          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
		            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
		          }
		        }

		        // Add padding
		        var paddingChar = map.charAt(64);
		        if (paddingChar) {
		          while (base64Chars.length % 4) {
		            base64Chars.push(paddingChar);
		          }
		        }
		        return base64Chars.join('');
		      },
		      /**
		       * Converts a Base64url string to a word array.
		       *
		       * @param {string} base64Str The Base64url string.
		       *
		       * @param {boolean} urlSafe Whether to use url safe
		       *
		       * @return {WordArray} The word array.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
		       */
		      parse: function (base64Str, urlSafe) {
		        if (urlSafe === undefined) {
		          urlSafe = true;
		        }

		        // Shortcuts
		        var base64StrLength = base64Str.length;
		        var map = urlSafe ? this._safe_map : this._map;
		        var reverseMap = this._reverseMap;
		        if (!reverseMap) {
		          reverseMap = this._reverseMap = [];
		          for (var j = 0; j < map.length; j++) {
		            reverseMap[map.charCodeAt(j)] = j;
		          }
		        }

		        // Ignore padding
		        var paddingChar = map.charAt(64);
		        if (paddingChar) {
		          var paddingIndex = base64Str.indexOf(paddingChar);
		          if (paddingIndex !== -1) {
		            base64StrLength = paddingIndex;
		          }
		        }

		        // Convert
		        return parseLoop(base64Str, base64StrLength, reverseMap);
		      },
		      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
		      _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'
		    };
		    function parseLoop(base64Str, base64StrLength, reverseMap) {
		      var words = [];
		      var nBytes = 0;
		      for (var i = 0; i < base64StrLength; i++) {
		        if (i % 4) {
		          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
		          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
		          var bitsCombined = bits1 | bits2;
		          words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
		          nBytes++;
		        }
		      }
		      return WordArray.create(words, nBytes);
		    }
		  })();
		  return CryptoJS.enc.Base64url;
		}); 
	} (encBase64url));
	return encBase64url.exports;
}

var md5 = {exports: {}};

var hasRequiredMd5;

function requireMd5 () {
	if (hasRequiredMd5) return md5.exports;
	hasRequiredMd5 = 1;
	(function (module, exports) {
		(function (root, factory) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Constants table
		    var T = [];

		    // Compute constants
		    (function () {
		      for (var i = 0; i < 64; i++) {
		        T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;
		      }
		    })();

		    /**
		     * MD5 hash algorithm.
		     */
		    var MD5 = C_algo.MD5 = Hasher.extend({
		      _doReset: function () {
		        this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);
		      },
		      _doProcessBlock: function (M, offset) {
		        // Swap endian
		        for (var i = 0; i < 16; i++) {
		          // Shortcuts
		          var offset_i = offset + i;
		          var M_offset_i = M[offset_i];
		          M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
		        }

		        // Shortcuts
		        var H = this._hash.words;
		        var M_offset_0 = M[offset + 0];
		        var M_offset_1 = M[offset + 1];
		        var M_offset_2 = M[offset + 2];
		        var M_offset_3 = M[offset + 3];
		        var M_offset_4 = M[offset + 4];
		        var M_offset_5 = M[offset + 5];
		        var M_offset_6 = M[offset + 6];
		        var M_offset_7 = M[offset + 7];
		        var M_offset_8 = M[offset + 8];
		        var M_offset_9 = M[offset + 9];
		        var M_offset_10 = M[offset + 10];
		        var M_offset_11 = M[offset + 11];
		        var M_offset_12 = M[offset + 12];
		        var M_offset_13 = M[offset + 13];
		        var M_offset_14 = M[offset + 14];
		        var M_offset_15 = M[offset + 15];

		        // Working variables
		        var a = H[0];
		        var b = H[1];
		        var c = H[2];
		        var d = H[3];

		        // Computation
		        a = FF(a, b, c, d, M_offset_0, 7, T[0]);
		        d = FF(d, a, b, c, M_offset_1, 12, T[1]);
		        c = FF(c, d, a, b, M_offset_2, 17, T[2]);
		        b = FF(b, c, d, a, M_offset_3, 22, T[3]);
		        a = FF(a, b, c, d, M_offset_4, 7, T[4]);
		        d = FF(d, a, b, c, M_offset_5, 12, T[5]);
		        c = FF(c, d, a, b, M_offset_6, 17, T[6]);
		        b = FF(b, c, d, a, M_offset_7, 22, T[7]);
		        a = FF(a, b, c, d, M_offset_8, 7, T[8]);
		        d = FF(d, a, b, c, M_offset_9, 12, T[9]);
		        c = FF(c, d, a, b, M_offset_10, 17, T[10]);
		        b = FF(b, c, d, a, M_offset_11, 22, T[11]);
		        a = FF(a, b, c, d, M_offset_12, 7, T[12]);
		        d = FF(d, a, b, c, M_offset_13, 12, T[13]);
		        c = FF(c, d, a, b, M_offset_14, 17, T[14]);
		        b = FF(b, c, d, a, M_offset_15, 22, T[15]);
		        a = GG(a, b, c, d, M_offset_1, 5, T[16]);
		        d = GG(d, a, b, c, M_offset_6, 9, T[17]);
		        c = GG(c, d, a, b, M_offset_11, 14, T[18]);
		        b = GG(b, c, d, a, M_offset_0, 20, T[19]);
		        a = GG(a, b, c, d, M_offset_5, 5, T[20]);
		        d = GG(d, a, b, c, M_offset_10, 9, T[21]);
		        c = GG(c, d, a, b, M_offset_15, 14, T[22]);
		        b = GG(b, c, d, a, M_offset_4, 20, T[23]);
		        a = GG(a, b, c, d, M_offset_9, 5, T[24]);
		        d = GG(d, a, b, c, M_offset_14, 9, T[25]);
		        c = GG(c, d, a, b, M_offset_3, 14, T[26]);
		        b = GG(b, c, d, a, M_offset_8, 20, T[27]);
		        a = GG(a, b, c, d, M_offset_13, 5, T[28]);
		        d = GG(d, a, b, c, M_offset_2, 9, T[29]);
		        c = GG(c, d, a, b, M_offset_7, 14, T[30]);
		        b = GG(b, c, d, a, M_offset_12, 20, T[31]);
		        a = HH(a, b, c, d, M_offset_5, 4, T[32]);
		        d = HH(d, a, b, c, M_offset_8, 11, T[33]);
		        c = HH(c, d, a, b, M_offset_11, 16, T[34]);
		        b = HH(b, c, d, a, M_offset_14, 23, T[35]);
		        a = HH(a, b, c, d, M_offset_1, 4, T[36]);
		        d = HH(d, a, b, c, M_offset_4, 11, T[37]);
		        c = HH(c, d, a, b, M_offset_7, 16, T[38]);
		        b = HH(b, c, d, a, M_offset_10, 23, T[39]);
		        a = HH(a, b, c, d, M_offset_13, 4, T[40]);
		        d = HH(d, a, b, c, M_offset_0, 11, T[41]);
		        c = HH(c, d, a, b, M_offset_3, 16, T[42]);
		        b = HH(b, c, d, a, M_offset_6, 23, T[43]);
		        a = HH(a, b, c, d, M_offset_9, 4, T[44]);
		        d = HH(d, a, b, c, M_offset_12, 11, T[45]);
		        c = HH(c, d, a, b, M_offset_15, 16, T[46]);
		        b = HH(b, c, d, a, M_offset_2, 23, T[47]);
		        a = II(a, b, c, d, M_offset_0, 6, T[48]);
		        d = II(d, a, b, c, M_offset_7, 10, T[49]);
		        c = II(c, d, a, b, M_offset_14, 15, T[50]);
		        b = II(b, c, d, a, M_offset_5, 21, T[51]);
		        a = II(a, b, c, d, M_offset_12, 6, T[52]);
		        d = II(d, a, b, c, M_offset_3, 10, T[53]);
		        c = II(c, d, a, b, M_offset_10, 15, T[54]);
		        b = II(b, c, d, a, M_offset_1, 21, T[55]);
		        a = II(a, b, c, d, M_offset_8, 6, T[56]);
		        d = II(d, a, b, c, M_offset_15, 10, T[57]);
		        c = II(c, d, a, b, M_offset_6, 15, T[58]);
		        b = II(b, c, d, a, M_offset_13, 21, T[59]);
		        a = II(a, b, c, d, M_offset_4, 6, T[60]);
		        d = II(d, a, b, c, M_offset_11, 10, T[61]);
		        c = II(c, d, a, b, M_offset_2, 15, T[62]);
		        b = II(b, c, d, a, M_offset_9, 21, T[63]);

		        // Intermediate hash value
		        H[0] = H[0] + a | 0;
		        H[1] = H[1] + b | 0;
		        H[2] = H[2] + c | 0;
		        H[3] = H[3] + d | 0;
		      },
		      _doFinalize: function () {
		        // Shortcuts
		        var data = this._data;
		        var dataWords = data.words;
		        var nBitsTotal = this._nDataBytes * 8;
		        var nBitsLeft = data.sigBytes * 8;

		        // Add padding
		        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
		        var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
		        var nBitsTotalL = nBitsTotal;
		        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;
		        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;
		        data.sigBytes = (dataWords.length + 1) * 4;

		        // Hash final blocks
		        this._process();

		        // Shortcuts
		        var hash = this._hash;
		        var H = hash.words;

		        // Swap endian
		        for (var i = 0; i < 4; i++) {
		          // Shortcut
		          var H_i = H[i];
		          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
		        }

		        // Return final computed hash
		        return hash;
		      },
		      clone: function () {
		        var clone = Hasher.clone.call(this);
		        clone._hash = this._hash.clone();
		        return clone;
		      }
		    });
		    function FF(a, b, c, d, x, s, t) {
		      var n = a + (b & c | ~b & d) + x + t;
		      return (n << s | n >>> 32 - s) + b;
		    }
		    function GG(a, b, c, d, x, s, t) {
		      var n = a + (b & d | c & ~d) + x + t;
		      return (n << s | n >>> 32 - s) + b;
		    }
		    function HH(a, b, c, d, x, s, t) {
		      var n = a + (b ^ c ^ d) + x + t;
		      return (n << s | n >>> 32 - s) + b;
		    }
		    function II(a, b, c, d, x, s, t) {
		      var n = a + (c ^ (b | ~d)) + x + t;
		      return (n << s | n >>> 32 - s) + b;
		    }

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.MD5('message');
		     *     var hash = CryptoJS.MD5(wordArray);
		     */
		    C.MD5 = Hasher._createHelper(MD5);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacMD5(message, key);
		     */
		    C.HmacMD5 = Hasher._createHmacHelper(MD5);
		  })(Math);
		  return CryptoJS.MD5;
		}); 
	} (md5));
	return md5.exports;
}

var sha1 = {exports: {}};

var hasRequiredSha1;

function requireSha1 () {
	if (hasRequiredSha1) return sha1.exports;
	hasRequiredSha1 = 1;
	(function (module, exports) {
		(function (root, factory) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Reusable object
		    var W = [];

		    /**
		     * SHA-1 hash algorithm.
		     */
		    var SHA1 = C_algo.SHA1 = Hasher.extend({
		      _doReset: function () {
		        this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);
		      },
		      _doProcessBlock: function (M, offset) {
		        // Shortcut
		        var H = this._hash.words;

		        // Working variables
		        var a = H[0];
		        var b = H[1];
		        var c = H[2];
		        var d = H[3];
		        var e = H[4];

		        // Computation
		        for (var i = 0; i < 80; i++) {
		          if (i < 16) {
		            W[i] = M[offset + i] | 0;
		          } else {
		            var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
		            W[i] = n << 1 | n >>> 31;
		          }
		          var t = (a << 5 | a >>> 27) + e + W[i];
		          if (i < 20) {
		            t += (b & c | ~b & d) + 0x5a827999;
		          } else if (i < 40) {
		            t += (b ^ c ^ d) + 0x6ed9eba1;
		          } else if (i < 60) {
		            t += (b & c | b & d | c & d) - 0x70e44324;
		          } else /* if (i < 80) */{
		              t += (b ^ c ^ d) - 0x359d3e2a;
		            }
		          e = d;
		          d = c;
		          c = b << 30 | b >>> 2;
		          b = a;
		          a = t;
		        }

		        // Intermediate hash value
		        H[0] = H[0] + a | 0;
		        H[1] = H[1] + b | 0;
		        H[2] = H[2] + c | 0;
		        H[3] = H[3] + d | 0;
		        H[4] = H[4] + e | 0;
		      },
		      _doFinalize: function () {
		        // Shortcuts
		        var data = this._data;
		        var dataWords = data.words;
		        var nBitsTotal = this._nDataBytes * 8;
		        var nBitsLeft = data.sigBytes * 8;

		        // Add padding
		        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
		        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
		        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
		        data.sigBytes = dataWords.length * 4;

		        // Hash final blocks
		        this._process();

		        // Return final computed hash
		        return this._hash;
		      },
		      clone: function () {
		        var clone = Hasher.clone.call(this);
		        clone._hash = this._hash.clone();
		        return clone;
		      }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA1('message');
		     *     var hash = CryptoJS.SHA1(wordArray);
		     */
		    C.SHA1 = Hasher._createHelper(SHA1);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA1(message, key);
		     */
		    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
		  })();
		  return CryptoJS.SHA1;
		}); 
	} (sha1));
	return sha1.exports;
}

var sha256 = {exports: {}};

var hasRequiredSha256;

function requireSha256 () {
	if (hasRequiredSha256) return sha256.exports;
	hasRequiredSha256 = 1;
	(function (module, exports) {
		(function (root, factory) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Initialization and round constants tables
		    var H = [];
		    var K = [];

		    // Compute constants
		    (function () {
		      function isPrime(n) {
		        var sqrtN = Math.sqrt(n);
		        for (var factor = 2; factor <= sqrtN; factor++) {
		          if (!(n % factor)) {
		            return false;
		          }
		        }
		        return true;
		      }
		      function getFractionalBits(n) {
		        return (n - (n | 0)) * 0x100000000 | 0;
		      }
		      var n = 2;
		      var nPrime = 0;
		      while (nPrime < 64) {
		        if (isPrime(n)) {
		          if (nPrime < 8) {
		            H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
		          }
		          K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
		          nPrime++;
		        }
		        n++;
		      }
		    })();

		    // Reusable object
		    var W = [];

		    /**
		     * SHA-256 hash algorithm.
		     */
		    var SHA256 = C_algo.SHA256 = Hasher.extend({
		      _doReset: function () {
		        this._hash = new WordArray.init(H.slice(0));
		      },
		      _doProcessBlock: function (M, offset) {
		        // Shortcut
		        var H = this._hash.words;

		        // Working variables
		        var a = H[0];
		        var b = H[1];
		        var c = H[2];
		        var d = H[3];
		        var e = H[4];
		        var f = H[5];
		        var g = H[6];
		        var h = H[7];

		        // Computation
		        for (var i = 0; i < 64; i++) {
		          if (i < 16) {
		            W[i] = M[offset + i] | 0;
		          } else {
		            var gamma0x = W[i - 15];
		            var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
		            var gamma1x = W[i - 2];
		            var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
		            W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
		          }
		          var ch = e & f ^ ~e & g;
		          var maj = a & b ^ a & c ^ b & c;
		          var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
		          var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
		          var t1 = h + sigma1 + ch + K[i] + W[i];
		          var t2 = sigma0 + maj;
		          h = g;
		          g = f;
		          f = e;
		          e = d + t1 | 0;
		          d = c;
		          c = b;
		          b = a;
		          a = t1 + t2 | 0;
		        }

		        // Intermediate hash value
		        H[0] = H[0] + a | 0;
		        H[1] = H[1] + b | 0;
		        H[2] = H[2] + c | 0;
		        H[3] = H[3] + d | 0;
		        H[4] = H[4] + e | 0;
		        H[5] = H[5] + f | 0;
		        H[6] = H[6] + g | 0;
		        H[7] = H[7] + h | 0;
		      },
		      _doFinalize: function () {
		        // Shortcuts
		        var data = this._data;
		        var dataWords = data.words;
		        var nBitsTotal = this._nDataBytes * 8;
		        var nBitsLeft = data.sigBytes * 8;

		        // Add padding
		        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
		        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
		        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
		        data.sigBytes = dataWords.length * 4;

		        // Hash final blocks
		        this._process();

		        // Return final computed hash
		        return this._hash;
		      },
		      clone: function () {
		        var clone = Hasher.clone.call(this);
		        clone._hash = this._hash.clone();
		        return clone;
		      }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA256('message');
		     *     var hash = CryptoJS.SHA256(wordArray);
		     */
		    C.SHA256 = Hasher._createHelper(SHA256);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA256(message, key);
		     */
		    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
		  })(Math);
		  return CryptoJS.SHA256;
		}); 
	} (sha256));
	return sha256.exports;
}

var sha224 = {exports: {}};

var hasRequiredSha224;

function requireSha224 () {
	if (hasRequiredSha224) return sha224.exports;
	hasRequiredSha224 = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireSha256());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var SHA256 = C_algo.SHA256;

		    /**
		     * SHA-224 hash algorithm.
		     */
		    var SHA224 = C_algo.SHA224 = SHA256.extend({
		      _doReset: function () {
		        this._hash = new WordArray.init([0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);
		      },
		      _doFinalize: function () {
		        var hash = SHA256._doFinalize.call(this);
		        hash.sigBytes -= 4;
		        return hash;
		      }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA224('message');
		     *     var hash = CryptoJS.SHA224(wordArray);
		     */
		    C.SHA224 = SHA256._createHelper(SHA224);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA224(message, key);
		     */
		    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
		  })();
		  return CryptoJS.SHA224;
		}); 
	} (sha224));
	return sha224.exports;
}

var sha512 = {exports: {}};

var hasRequiredSha512;

function requireSha512 () {
	if (hasRequiredSha512) return sha512.exports;
	hasRequiredSha512 = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireX64Core());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Hasher = C_lib.Hasher;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var X64WordArray = C_x64.WordArray;
		    var C_algo = C.algo;
		    function X64Word_create() {
		      return X64Word.create.apply(X64Word, arguments);
		    }

		    // Constants
		    var K = [X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd), X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc), X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019), X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118), X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe), X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2), X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1), X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694), X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3), X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65), X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483), X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5), X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210), X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4), X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725), X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70), X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926), X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df), X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8), X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b), X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001), X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30), X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910), X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8), X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53), X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8), X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb), X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3), X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60), X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec), X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9), X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b), X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207), X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178), X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6), X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b), X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493), X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c), X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a), X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)];

		    // Reusable objects
		    var W = [];
		    (function () {
		      for (var i = 0; i < 80; i++) {
		        W[i] = X64Word_create();
		      }
		    })();

		    /**
		     * SHA-512 hash algorithm.
		     */
		    var SHA512 = C_algo.SHA512 = Hasher.extend({
		      _doReset: function () {
		        this._hash = new X64WordArray.init([new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b), new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1), new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f), new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);
		      },
		      _doProcessBlock: function (M, offset) {
		        // Shortcuts
		        var H = this._hash.words;
		        var H0 = H[0];
		        var H1 = H[1];
		        var H2 = H[2];
		        var H3 = H[3];
		        var H4 = H[4];
		        var H5 = H[5];
		        var H6 = H[6];
		        var H7 = H[7];
		        var H0h = H0.high;
		        var H0l = H0.low;
		        var H1h = H1.high;
		        var H1l = H1.low;
		        var H2h = H2.high;
		        var H2l = H2.low;
		        var H3h = H3.high;
		        var H3l = H3.low;
		        var H4h = H4.high;
		        var H4l = H4.low;
		        var H5h = H5.high;
		        var H5l = H5.low;
		        var H6h = H6.high;
		        var H6l = H6.low;
		        var H7h = H7.high;
		        var H7l = H7.low;

		        // Working variables
		        var ah = H0h;
		        var al = H0l;
		        var bh = H1h;
		        var bl = H1l;
		        var ch = H2h;
		        var cl = H2l;
		        var dh = H3h;
		        var dl = H3l;
		        var eh = H4h;
		        var el = H4l;
		        var fh = H5h;
		        var fl = H5l;
		        var gh = H6h;
		        var gl = H6l;
		        var hh = H7h;
		        var hl = H7l;

		        // Rounds
		        for (var i = 0; i < 80; i++) {
		          var Wil;
		          var Wih;

		          // Shortcut
		          var Wi = W[i];

		          // Extend message
		          if (i < 16) {
		            Wih = Wi.high = M[offset + i * 2] | 0;
		            Wil = Wi.low = M[offset + i * 2 + 1] | 0;
		          } else {
		            // Gamma0
		            var gamma0x = W[i - 15];
		            var gamma0xh = gamma0x.high;
		            var gamma0xl = gamma0x.low;
		            var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
		            var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);

		            // Gamma1
		            var gamma1x = W[i - 2];
		            var gamma1xh = gamma1x.high;
		            var gamma1xl = gamma1x.low;
		            var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
		            var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);

		            // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
		            var Wi7 = W[i - 7];
		            var Wi7h = Wi7.high;
		            var Wi7l = Wi7.low;
		            var Wi16 = W[i - 16];
		            var Wi16h = Wi16.high;
		            var Wi16l = Wi16.low;
		            Wil = gamma0l + Wi7l;
		            Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
		            Wil = Wil + gamma1l;
		            Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
		            Wil = Wil + Wi16l;
		            Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
		            Wi.high = Wih;
		            Wi.low = Wil;
		          }
		          var chh = eh & fh ^ ~eh & gh;
		          var chl = el & fl ^ ~el & gl;
		          var majh = ah & bh ^ ah & ch ^ bh & ch;
		          var majl = al & bl ^ al & cl ^ bl & cl;
		          var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
		          var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
		          var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
		          var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);

		          // t1 = h + sigma1 + ch + K[i] + W[i]
		          var Ki = K[i];
		          var Kih = Ki.high;
		          var Kil = Ki.low;
		          var t1l = hl + sigma1l;
		          var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
		          var t1l = t1l + chl;
		          var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
		          var t1l = t1l + Kil;
		          var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
		          var t1l = t1l + Wil;
		          var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);

		          // t2 = sigma0 + maj
		          var t2l = sigma0l + majl;
		          var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);

		          // Update working variables
		          hh = gh;
		          hl = gl;
		          gh = fh;
		          gl = fl;
		          fh = eh;
		          fl = el;
		          el = dl + t1l | 0;
		          eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
		          dh = ch;
		          dl = cl;
		          ch = bh;
		          cl = bl;
		          bh = ah;
		          bl = al;
		          al = t1l + t2l | 0;
		          ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
		        }

		        // Intermediate hash value
		        H0l = H0.low = H0l + al;
		        H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
		        H1l = H1.low = H1l + bl;
		        H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
		        H2l = H2.low = H2l + cl;
		        H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
		        H3l = H3.low = H3l + dl;
		        H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
		        H4l = H4.low = H4l + el;
		        H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
		        H5l = H5.low = H5l + fl;
		        H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
		        H6l = H6.low = H6l + gl;
		        H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
		        H7l = H7.low = H7l + hl;
		        H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
		      },
		      _doFinalize: function () {
		        // Shortcuts
		        var data = this._data;
		        var dataWords = data.words;
		        var nBitsTotal = this._nDataBytes * 8;
		        var nBitsLeft = data.sigBytes * 8;

		        // Add padding
		        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
		        dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
		        dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
		        data.sigBytes = dataWords.length * 4;

		        // Hash final blocks
		        this._process();

		        // Convert hash to 32-bit word array before returning
		        var hash = this._hash.toX32();

		        // Return final computed hash
		        return hash;
		      },
		      clone: function () {
		        var clone = Hasher.clone.call(this);
		        clone._hash = this._hash.clone();
		        return clone;
		      },
		      blockSize: 1024 / 32
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA512('message');
		     *     var hash = CryptoJS.SHA512(wordArray);
		     */
		    C.SHA512 = Hasher._createHelper(SHA512);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA512(message, key);
		     */
		    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
		  })();
		  return CryptoJS.SHA512;
		}); 
	} (sha512));
	return sha512.exports;
}

var sha384 = {exports: {}};

var hasRequiredSha384;

function requireSha384 () {
	if (hasRequiredSha384) return sha384.exports;
	hasRequiredSha384 = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireX64Core(), requireSha512());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var X64WordArray = C_x64.WordArray;
		    var C_algo = C.algo;
		    var SHA512 = C_algo.SHA512;

		    /**
		     * SHA-384 hash algorithm.
		     */
		    var SHA384 = C_algo.SHA384 = SHA512.extend({
		      _doReset: function () {
		        this._hash = new X64WordArray.init([new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507), new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939), new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511), new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)]);
		      },
		      _doFinalize: function () {
		        var hash = SHA512._doFinalize.call(this);
		        hash.sigBytes -= 16;
		        return hash;
		      }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA384('message');
		     *     var hash = CryptoJS.SHA384(wordArray);
		     */
		    C.SHA384 = SHA512._createHelper(SHA384);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA384(message, key);
		     */
		    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
		  })();
		  return CryptoJS.SHA384;
		}); 
	} (sha384));
	return sha384.exports;
}

var sha3 = {exports: {}};

var hasRequiredSha3;

function requireSha3 () {
	if (hasRequiredSha3) return sha3.exports;
	hasRequiredSha3 = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireX64Core());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var C_algo = C.algo;

		    // Constants tables
		    var RHO_OFFSETS = [];
		    var PI_INDEXES = [];
		    var ROUND_CONSTANTS = [];

		    // Compute Constants
		    (function () {
		      // Compute rho offset constants
		      var x = 1,
		        y = 0;
		      for (var t = 0; t < 24; t++) {
		        RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
		        var newX = y % 5;
		        var newY = (2 * x + 3 * y) % 5;
		        x = newX;
		        y = newY;
		      }

		      // Compute pi index constants
		      for (var x = 0; x < 5; x++) {
		        for (var y = 0; y < 5; y++) {
		          PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
		        }
		      }

		      // Compute round constants
		      var LFSR = 0x01;
		      for (var i = 0; i < 24; i++) {
		        var roundConstantMsw = 0;
		        var roundConstantLsw = 0;
		        for (var j = 0; j < 7; j++) {
		          if (LFSR & 0x01) {
		            var bitPosition = (1 << j) - 1;
		            if (bitPosition < 32) {
		              roundConstantLsw ^= 1 << bitPosition;
		            } else /* if (bitPosition >= 32) */{
		                roundConstantMsw ^= 1 << bitPosition - 32;
		              }
		          }

		          // Compute next LFSR
		          if (LFSR & 0x80) {
		            // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
		            LFSR = LFSR << 1 ^ 0x71;
		          } else {
		            LFSR <<= 1;
		          }
		        }
		        ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
		      }
		    })();

		    // Reusable objects for temporary values
		    var T = [];
		    (function () {
		      for (var i = 0; i < 25; i++) {
		        T[i] = X64Word.create();
		      }
		    })();

		    /**
		     * SHA-3 hash algorithm.
		     */
		    var SHA3 = C_algo.SHA3 = Hasher.extend({
		      /**
		       * Configuration options.
		       *
		       * @property {number} outputLength
		       *   The desired number of bits in the output hash.
		       *   Only values permitted are: 224, 256, 384, 512.
		       *   Default: 512
		       */
		      cfg: Hasher.cfg.extend({
		        outputLength: 512
		      }),
		      _doReset: function () {
		        var state = this._state = [];
		        for (var i = 0; i < 25; i++) {
		          state[i] = new X64Word.init();
		        }
		        this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
		      },
		      _doProcessBlock: function (M, offset) {
		        // Shortcuts
		        var state = this._state;
		        var nBlockSizeLanes = this.blockSize / 2;

		        // Absorb
		        for (var i = 0; i < nBlockSizeLanes; i++) {
		          // Shortcuts
		          var M2i = M[offset + 2 * i];
		          var M2i1 = M[offset + 2 * i + 1];

		          // Swap endian
		          M2i = (M2i << 8 | M2i >>> 24) & 0x00ff00ff | (M2i << 24 | M2i >>> 8) & 0xff00ff00;
		          M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff | (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00;

		          // Absorb message into state
		          var lane = state[i];
		          lane.high ^= M2i1;
		          lane.low ^= M2i;
		        }

		        // Rounds
		        for (var round = 0; round < 24; round++) {
		          // Theta
		          for (var x = 0; x < 5; x++) {
		            // Mix column lanes
		            var tMsw = 0,
		              tLsw = 0;
		            for (var y = 0; y < 5; y++) {
		              var lane = state[x + 5 * y];
		              tMsw ^= lane.high;
		              tLsw ^= lane.low;
		            }

		            // Temporary values
		            var Tx = T[x];
		            Tx.high = tMsw;
		            Tx.low = tLsw;
		          }
		          for (var x = 0; x < 5; x++) {
		            // Shortcuts
		            var Tx4 = T[(x + 4) % 5];
		            var Tx1 = T[(x + 1) % 5];
		            var Tx1Msw = Tx1.high;
		            var Tx1Lsw = Tx1.low;

		            // Mix surrounding columns
		            var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
		            var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
		            for (var y = 0; y < 5; y++) {
		              var lane = state[x + 5 * y];
		              lane.high ^= tMsw;
		              lane.low ^= tLsw;
		            }
		          }

		          // Rho Pi
		          for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
		            var tMsw;
		            var tLsw;

		            // Shortcuts
		            var lane = state[laneIndex];
		            var laneMsw = lane.high;
		            var laneLsw = lane.low;
		            var rhoOffset = RHO_OFFSETS[laneIndex];

		            // Rotate lanes
		            if (rhoOffset < 32) {
		              tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
		              tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
		            } else /* if (rhoOffset >= 32) */{
		                tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
		                tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
		              }

		            // Transpose lanes
		            var TPiLane = T[PI_INDEXES[laneIndex]];
		            TPiLane.high = tMsw;
		            TPiLane.low = tLsw;
		          }

		          // Rho pi at x = y = 0
		          var T0 = T[0];
		          var state0 = state[0];
		          T0.high = state0.high;
		          T0.low = state0.low;

		          // Chi
		          for (var x = 0; x < 5; x++) {
		            for (var y = 0; y < 5; y++) {
		              // Shortcuts
		              var laneIndex = x + 5 * y;
		              var lane = state[laneIndex];
		              var TLane = T[laneIndex];
		              var Tx1Lane = T[(x + 1) % 5 + 5 * y];
		              var Tx2Lane = T[(x + 2) % 5 + 5 * y];

		              // Mix rows
		              lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
		              lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
		            }
		          }

		          // Iota
		          var lane = state[0];
		          var roundConstant = ROUND_CONSTANTS[round];
		          lane.high ^= roundConstant.high;
		          lane.low ^= roundConstant.low;
		        }
		      },
		      _doFinalize: function () {
		        // Shortcuts
		        var data = this._data;
		        var dataWords = data.words;
		        this._nDataBytes * 8;
		        var nBitsLeft = data.sigBytes * 8;
		        var blockSizeBits = this.blockSize * 32;

		        // Add padding
		        dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;
		        dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;
		        data.sigBytes = dataWords.length * 4;

		        // Hash final blocks
		        this._process();

		        // Shortcuts
		        var state = this._state;
		        var outputLengthBytes = this.cfg.outputLength / 8;
		        var outputLengthLanes = outputLengthBytes / 8;

		        // Squeeze
		        var hashWords = [];
		        for (var i = 0; i < outputLengthLanes; i++) {
		          // Shortcuts
		          var lane = state[i];
		          var laneMsw = lane.high;
		          var laneLsw = lane.low;

		          // Swap endian
		          laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff | (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;
		          laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff | (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00;

		          // Squeeze state to retrieve hash
		          hashWords.push(laneLsw);
		          hashWords.push(laneMsw);
		        }

		        // Return final computed hash
		        return new WordArray.init(hashWords, outputLengthBytes);
		      },
		      clone: function () {
		        var clone = Hasher.clone.call(this);
		        var state = clone._state = this._state.slice(0);
		        for (var i = 0; i < 25; i++) {
		          state[i] = state[i].clone();
		        }
		        return clone;
		      }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA3('message');
		     *     var hash = CryptoJS.SHA3(wordArray);
		     */
		    C.SHA3 = Hasher._createHelper(SHA3);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA3(message, key);
		     */
		    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
		  })(Math);
		  return CryptoJS.SHA3;
		}); 
	} (sha3));
	return sha3.exports;
}

var ripemd160 = {exports: {}};

var hasRequiredRipemd160;

function requireRipemd160 () {
	if (hasRequiredRipemd160) return ripemd160.exports;
	hasRequiredRipemd160 = 1;
	(function (module, exports) {
		(function (root, factory) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  /** @preserve
		  (c) 2012 by Cédric Mesnil. All rights reserved.
		  	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
		  	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
		      - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
		  	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		  */

		  (function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Constants table
		    var _zl = WordArray.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);
		    var _zr = WordArray.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);
		    var _sl = WordArray.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);
		    var _sr = WordArray.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);
		    var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
		    var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

		    /**
		     * RIPEMD160 hash algorithm.
		     */
		    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
		      _doReset: function () {
		        this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
		      },
		      _doProcessBlock: function (M, offset) {
		        // Swap endian
		        for (var i = 0; i < 16; i++) {
		          // Shortcuts
		          var offset_i = offset + i;
		          var M_offset_i = M[offset_i];

		          // Swap
		          M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
		        }
		        // Shortcut
		        var H = this._hash.words;
		        var hl = _hl.words;
		        var hr = _hr.words;
		        var zl = _zl.words;
		        var zr = _zr.words;
		        var sl = _sl.words;
		        var sr = _sr.words;

		        // Working variables
		        var al, bl, cl, dl, el;
		        var ar, br, cr, dr, er;
		        ar = al = H[0];
		        br = bl = H[1];
		        cr = cl = H[2];
		        dr = dl = H[3];
		        er = el = H[4];
		        // Computation
		        var t;
		        for (var i = 0; i < 80; i += 1) {
		          t = al + M[offset + zl[i]] | 0;
		          if (i < 16) {
		            t += f1(bl, cl, dl) + hl[0];
		          } else if (i < 32) {
		            t += f2(bl, cl, dl) + hl[1];
		          } else if (i < 48) {
		            t += f3(bl, cl, dl) + hl[2];
		          } else if (i < 64) {
		            t += f4(bl, cl, dl) + hl[3];
		          } else {
		            // if (i<80) {
		            t += f5(bl, cl, dl) + hl[4];
		          }
		          t = t | 0;
		          t = rotl(t, sl[i]);
		          t = t + el | 0;
		          al = el;
		          el = dl;
		          dl = rotl(cl, 10);
		          cl = bl;
		          bl = t;
		          t = ar + M[offset + zr[i]] | 0;
		          if (i < 16) {
		            t += f5(br, cr, dr) + hr[0];
		          } else if (i < 32) {
		            t += f4(br, cr, dr) + hr[1];
		          } else if (i < 48) {
		            t += f3(br, cr, dr) + hr[2];
		          } else if (i < 64) {
		            t += f2(br, cr, dr) + hr[3];
		          } else {
		            // if (i<80) {
		            t += f1(br, cr, dr) + hr[4];
		          }
		          t = t | 0;
		          t = rotl(t, sr[i]);
		          t = t + er | 0;
		          ar = er;
		          er = dr;
		          dr = rotl(cr, 10);
		          cr = br;
		          br = t;
		        }
		        // Intermediate hash value
		        t = H[1] + cl + dr | 0;
		        H[1] = H[2] + dl + er | 0;
		        H[2] = H[3] + el + ar | 0;
		        H[3] = H[4] + al + br | 0;
		        H[4] = H[0] + bl + cr | 0;
		        H[0] = t;
		      },
		      _doFinalize: function () {
		        // Shortcuts
		        var data = this._data;
		        var dataWords = data.words;
		        var nBitsTotal = this._nDataBytes * 8;
		        var nBitsLeft = data.sigBytes * 8;

		        // Add padding
		        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
		        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff | (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;
		        data.sigBytes = (dataWords.length + 1) * 4;

		        // Hash final blocks
		        this._process();

		        // Shortcuts
		        var hash = this._hash;
		        var H = hash.words;

		        // Swap endian
		        for (var i = 0; i < 5; i++) {
		          // Shortcut
		          var H_i = H[i];

		          // Swap
		          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
		        }

		        // Return final computed hash
		        return hash;
		      },
		      clone: function () {
		        var clone = Hasher.clone.call(this);
		        clone._hash = this._hash.clone();
		        return clone;
		      }
		    });
		    function f1(x, y, z) {
		      return x ^ y ^ z;
		    }
		    function f2(x, y, z) {
		      return x & y | ~x & z;
		    }
		    function f3(x, y, z) {
		      return (x | ~y) ^ z;
		    }
		    function f4(x, y, z) {
		      return x & z | y & ~z;
		    }
		    function f5(x, y, z) {
		      return x ^ (y | ~z);
		    }
		    function rotl(x, n) {
		      return x << n | x >>> 32 - n;
		    }

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.RIPEMD160('message');
		     *     var hash = CryptoJS.RIPEMD160(wordArray);
		     */
		    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
		     */
		    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
		  })();
		  return CryptoJS.RIPEMD160;
		}); 
	} (ripemd160));
	return ripemd160.exports;
}

var hmac = {exports: {}};

var hasRequiredHmac;

function requireHmac () {
	if (hasRequiredHmac) return hmac.exports;
	hasRequiredHmac = 1;
	(function (module, exports) {
		(function (root, factory) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var C_enc = C.enc;
		    var Utf8 = C_enc.Utf8;
		    var C_algo = C.algo;

		    /**
		     * HMAC algorithm.
		     */
		    C_algo.HMAC = Base.extend({
		      /**
		       * Initializes a newly created HMAC.
		       *
		       * @param {Hasher} hasher The hash algorithm to use.
		       * @param {WordArray|string} key The secret key.
		       *
		       * @example
		       *
		       *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
		       */
		      init: function (hasher, key) {
		        // Init hasher
		        hasher = this._hasher = new hasher.init();

		        // Convert string to WordArray, else assume WordArray already
		        if (typeof key == 'string') {
		          key = Utf8.parse(key);
		        }

		        // Shortcuts
		        var hasherBlockSize = hasher.blockSize;
		        var hasherBlockSizeBytes = hasherBlockSize * 4;

		        // Allow arbitrary length keys
		        if (key.sigBytes > hasherBlockSizeBytes) {
		          key = hasher.finalize(key);
		        }

		        // Clamp excess bits
		        key.clamp();

		        // Clone key for inner and outer pads
		        var oKey = this._oKey = key.clone();
		        var iKey = this._iKey = key.clone();

		        // Shortcuts
		        var oKeyWords = oKey.words;
		        var iKeyWords = iKey.words;

		        // XOR keys with pad constants
		        for (var i = 0; i < hasherBlockSize; i++) {
		          oKeyWords[i] ^= 0x5c5c5c5c;
		          iKeyWords[i] ^= 0x36363636;
		        }
		        oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

		        // Set initial values
		        this.reset();
		      },
		      /**
		       * Resets this HMAC to its initial state.
		       *
		       * @example
		       *
		       *     hmacHasher.reset();
		       */
		      reset: function () {
		        // Shortcut
		        var hasher = this._hasher;

		        // Reset
		        hasher.reset();
		        hasher.update(this._iKey);
		      },
		      /**
		       * Updates this HMAC with a message.
		       *
		       * @param {WordArray|string} messageUpdate The message to append.
		       *
		       * @return {HMAC} This HMAC instance.
		       *
		       * @example
		       *
		       *     hmacHasher.update('message');
		       *     hmacHasher.update(wordArray);
		       */
		      update: function (messageUpdate) {
		        this._hasher.update(messageUpdate);

		        // Chainable
		        return this;
		      },
		      /**
		       * Finalizes the HMAC computation.
		       * Note that the finalize operation is effectively a destructive, read-once operation.
		       *
		       * @param {WordArray|string} messageUpdate (Optional) A final message update.
		       *
		       * @return {WordArray} The HMAC.
		       *
		       * @example
		       *
		       *     var hmac = hmacHasher.finalize();
		       *     var hmac = hmacHasher.finalize('message');
		       *     var hmac = hmacHasher.finalize(wordArray);
		       */
		      finalize: function (messageUpdate) {
		        // Shortcut
		        var hasher = this._hasher;

		        // Compute HMAC
		        var innerHash = hasher.finalize(messageUpdate);
		        hasher.reset();
		        var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
		        return hmac;
		      }
		    });
		  })();
		}); 
	} (hmac));
	return hmac.exports;
}

var pbkdf2 = {exports: {}};

var hasRequiredPbkdf2;

function requirePbkdf2 () {
	if (hasRequiredPbkdf2) return pbkdf2.exports;
	hasRequiredPbkdf2 = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireSha256(), requireHmac());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var SHA256 = C_algo.SHA256;
		    var HMAC = C_algo.HMAC;

		    /**
		     * Password-Based Key Derivation Function 2 algorithm.
		     */
		    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
		      /**
		       * Configuration options.
		       *
		       * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
		       * @property {Hasher} hasher The hasher to use. Default: SHA256
		       * @property {number} iterations The number of iterations to perform. Default: 250000
		       */
		      cfg: Base.extend({
		        keySize: 128 / 32,
		        hasher: SHA256,
		        iterations: 250000
		      }),
		      /**
		       * Initializes a newly created key derivation function.
		       *
		       * @param {Object} cfg (Optional) The configuration options to use for the derivation.
		       *
		       * @example
		       *
		       *     var kdf = CryptoJS.algo.PBKDF2.create();
		       *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
		       *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
		       */
		      init: function (cfg) {
		        this.cfg = this.cfg.extend(cfg);
		      },
		      /**
		       * Computes the Password-Based Key Derivation Function 2.
		       *
		       * @param {WordArray|string} password The password.
		       * @param {WordArray|string} salt A salt.
		       *
		       * @return {WordArray} The derived key.
		       *
		       * @example
		       *
		       *     var key = kdf.compute(password, salt);
		       */
		      compute: function (password, salt) {
		        // Shortcut
		        var cfg = this.cfg;

		        // Init HMAC
		        var hmac = HMAC.create(cfg.hasher, password);

		        // Initial values
		        var derivedKey = WordArray.create();
		        var blockIndex = WordArray.create([0x00000001]);

		        // Shortcuts
		        var derivedKeyWords = derivedKey.words;
		        var blockIndexWords = blockIndex.words;
		        var keySize = cfg.keySize;
		        var iterations = cfg.iterations;

		        // Generate key
		        while (derivedKeyWords.length < keySize) {
		          var block = hmac.update(salt).finalize(blockIndex);
		          hmac.reset();

		          // Shortcuts
		          var blockWords = block.words;
		          var blockWordsLength = blockWords.length;

		          // Iterations
		          var intermediate = block;
		          for (var i = 1; i < iterations; i++) {
		            intermediate = hmac.finalize(intermediate);
		            hmac.reset();

		            // Shortcut
		            var intermediateWords = intermediate.words;

		            // XOR intermediate with block
		            for (var j = 0; j < blockWordsLength; j++) {
		              blockWords[j] ^= intermediateWords[j];
		            }
		          }
		          derivedKey.concat(block);
		          blockIndexWords[0]++;
		        }
		        derivedKey.sigBytes = keySize * 4;
		        return derivedKey;
		      }
		    });

		    /**
		     * Computes the Password-Based Key Derivation Function 2.
		     *
		     * @param {WordArray|string} password The password.
		     * @param {WordArray|string} salt A salt.
		     * @param {Object} cfg (Optional) The configuration options to use for this computation.
		     *
		     * @return {WordArray} The derived key.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var key = CryptoJS.PBKDF2(password, salt);
		     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
		     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
		     */
		    C.PBKDF2 = function (password, salt, cfg) {
		      return PBKDF2.create(cfg).compute(password, salt);
		    };
		  })();
		  return CryptoJS.PBKDF2;
		}); 
	} (pbkdf2));
	return pbkdf2.exports;
}

var evpkdf = {exports: {}};

var hasRequiredEvpkdf;

function requireEvpkdf () {
	if (hasRequiredEvpkdf) return evpkdf.exports;
	hasRequiredEvpkdf = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireSha1(), requireHmac());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var MD5 = C_algo.MD5;

		    /**
		     * This key derivation function is meant to conform with EVP_BytesToKey.
		     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
		     */
		    var EvpKDF = C_algo.EvpKDF = Base.extend({
		      /**
		       * Configuration options.
		       *
		       * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
		       * @property {Hasher} hasher The hash algorithm to use. Default: MD5
		       * @property {number} iterations The number of iterations to perform. Default: 1
		       */
		      cfg: Base.extend({
		        keySize: 128 / 32,
		        hasher: MD5,
		        iterations: 1
		      }),
		      /**
		       * Initializes a newly created key derivation function.
		       *
		       * @param {Object} cfg (Optional) The configuration options to use for the derivation.
		       *
		       * @example
		       *
		       *     var kdf = CryptoJS.algo.EvpKDF.create();
		       *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
		       *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
		       */
		      init: function (cfg) {
		        this.cfg = this.cfg.extend(cfg);
		      },
		      /**
		       * Derives a key from a password.
		       *
		       * @param {WordArray|string} password The password.
		       * @param {WordArray|string} salt A salt.
		       *
		       * @return {WordArray} The derived key.
		       *
		       * @example
		       *
		       *     var key = kdf.compute(password, salt);
		       */
		      compute: function (password, salt) {
		        var block;

		        // Shortcut
		        var cfg = this.cfg;

		        // Init hasher
		        var hasher = cfg.hasher.create();

		        // Initial values
		        var derivedKey = WordArray.create();

		        // Shortcuts
		        var derivedKeyWords = derivedKey.words;
		        var keySize = cfg.keySize;
		        var iterations = cfg.iterations;

		        // Generate key
		        while (derivedKeyWords.length < keySize) {
		          if (block) {
		            hasher.update(block);
		          }
		          block = hasher.update(password).finalize(salt);
		          hasher.reset();

		          // Iterations
		          for (var i = 1; i < iterations; i++) {
		            block = hasher.finalize(block);
		            hasher.reset();
		          }
		          derivedKey.concat(block);
		        }
		        derivedKey.sigBytes = keySize * 4;
		        return derivedKey;
		      }
		    });

		    /**
		     * Derives a key from a password.
		     *
		     * @param {WordArray|string} password The password.
		     * @param {WordArray|string} salt A salt.
		     * @param {Object} cfg (Optional) The configuration options to use for this computation.
		     *
		     * @return {WordArray} The derived key.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var key = CryptoJS.EvpKDF(password, salt);
		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
		     */
		    C.EvpKDF = function (password, salt, cfg) {
		      return EvpKDF.create(cfg).compute(password, salt);
		    };
		  })();
		  return CryptoJS.EvpKDF;
		}); 
	} (evpkdf));
	return evpkdf.exports;
}

var cipherCore = {exports: {}};

var hasRequiredCipherCore;

function requireCipherCore () {
	if (hasRequiredCipherCore) return cipherCore.exports;
	hasRequiredCipherCore = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireEvpkdf());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  /**
		   * Cipher core components.
		   */
		  CryptoJS.lib.Cipher || function (undefined$1) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
		    var C_enc = C.enc;
		    C_enc.Utf8;
		    var Base64 = C_enc.Base64;
		    var C_algo = C.algo;
		    var EvpKDF = C_algo.EvpKDF;

		    /**
		     * Abstract base cipher template.
		     *
		     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
		     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
		     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
		     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
		     */
		    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
		      /**
		       * Configuration options.
		       *
		       * @property {WordArray} iv The IV to use for this operation.
		       */
		      cfg: Base.extend(),
		      /**
		       * Creates this cipher in encryption mode.
		       *
		       * @param {WordArray} key The key.
		       * @param {Object} cfg (Optional) The configuration options to use for this operation.
		       *
		       * @return {Cipher} A cipher instance.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
		       */
		      createEncryptor: function (key, cfg) {
		        return this.create(this._ENC_XFORM_MODE, key, cfg);
		      },
		      /**
		       * Creates this cipher in decryption mode.
		       *
		       * @param {WordArray} key The key.
		       * @param {Object} cfg (Optional) The configuration options to use for this operation.
		       *
		       * @return {Cipher} A cipher instance.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
		       */
		      createDecryptor: function (key, cfg) {
		        return this.create(this._DEC_XFORM_MODE, key, cfg);
		      },
		      /**
		       * Initializes a newly created cipher.
		       *
		       * @param {number} xformMode Either the encryption or decryption transormation mode constant.
		       * @param {WordArray} key The key.
		       * @param {Object} cfg (Optional) The configuration options to use for this operation.
		       *
		       * @example
		       *
		       *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
		       */
		      init: function (xformMode, key, cfg) {
		        // Apply config defaults
		        this.cfg = this.cfg.extend(cfg);

		        // Store transform mode and key
		        this._xformMode = xformMode;
		        this._key = key;

		        // Set initial values
		        this.reset();
		      },
		      /**
		       * Resets this cipher to its initial state.
		       *
		       * @example
		       *
		       *     cipher.reset();
		       */
		      reset: function () {
		        // Reset data buffer
		        BufferedBlockAlgorithm.reset.call(this);

		        // Perform concrete-cipher logic
		        this._doReset();
		      },
		      /**
		       * Adds data to be encrypted or decrypted.
		       *
		       * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
		       *
		       * @return {WordArray} The data after processing.
		       *
		       * @example
		       *
		       *     var encrypted = cipher.process('data');
		       *     var encrypted = cipher.process(wordArray);
		       */
		      process: function (dataUpdate) {
		        // Append
		        this._append(dataUpdate);

		        // Process available blocks
		        return this._process();
		      },
		      /**
		       * Finalizes the encryption or decryption process.
		       * Note that the finalize operation is effectively a destructive, read-once operation.
		       *
		       * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
		       *
		       * @return {WordArray} The data after final processing.
		       *
		       * @example
		       *
		       *     var encrypted = cipher.finalize();
		       *     var encrypted = cipher.finalize('data');
		       *     var encrypted = cipher.finalize(wordArray);
		       */
		      finalize: function (dataUpdate) {
		        // Final data update
		        if (dataUpdate) {
		          this._append(dataUpdate);
		        }

		        // Perform concrete-cipher logic
		        var finalProcessedData = this._doFinalize();
		        return finalProcessedData;
		      },
		      keySize: 128 / 32,
		      ivSize: 128 / 32,
		      _ENC_XFORM_MODE: 1,
		      _DEC_XFORM_MODE: 2,
		      /**
		       * Creates shortcut functions to a cipher's object interface.
		       *
		       * @param {Cipher} cipher The cipher to create a helper for.
		       *
		       * @return {Object} An object with encrypt and decrypt shortcut functions.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
		       */
		      _createHelper: function () {
		        function selectCipherStrategy(key) {
		          if (typeof key == 'string') {
		            return PasswordBasedCipher;
		          } else {
		            return SerializableCipher;
		          }
		        }
		        return function (cipher) {
		          return {
		            encrypt: function (message, key, cfg) {
		              return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
		            },
		            decrypt: function (ciphertext, key, cfg) {
		              return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
		            }
		          };
		        };
		      }()
		    });

		    /**
		     * Abstract base stream cipher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
		     */
		    C_lib.StreamCipher = Cipher.extend({
		      _doFinalize: function () {
		        // Process partial blocks
		        var finalProcessedBlocks = this._process(!!'flush');
		        return finalProcessedBlocks;
		      },
		      blockSize: 1
		    });

		    /**
		     * Mode namespace.
		     */
		    var C_mode = C.mode = {};

		    /**
		     * Abstract base block cipher mode template.
		     */
		    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
		      /**
		       * Creates this mode for encryption.
		       *
		       * @param {Cipher} cipher A block cipher instance.
		       * @param {Array} iv The IV words.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
		       */
		      createEncryptor: function (cipher, iv) {
		        return this.Encryptor.create(cipher, iv);
		      },
		      /**
		       * Creates this mode for decryption.
		       *
		       * @param {Cipher} cipher A block cipher instance.
		       * @param {Array} iv The IV words.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
		       */
		      createDecryptor: function (cipher, iv) {
		        return this.Decryptor.create(cipher, iv);
		      },
		      /**
		       * Initializes a newly created mode.
		       *
		       * @param {Cipher} cipher A block cipher instance.
		       * @param {Array} iv The IV words.
		       *
		       * @example
		       *
		       *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
		       */
		      init: function (cipher, iv) {
		        this._cipher = cipher;
		        this._iv = iv;
		      }
		    });

		    /**
		     * Cipher Block Chaining mode.
		     */
		    var CBC = C_mode.CBC = function () {
		      /**
		       * Abstract base CBC mode.
		       */
		      var CBC = BlockCipherMode.extend();

		      /**
		       * CBC encryptor.
		       */
		      CBC.Encryptor = CBC.extend({
		        /**
		         * Processes the data block at offset.
		         *
		         * @param {Array} words The data words to operate on.
		         * @param {number} offset The offset where the block starts.
		         *
		         * @example
		         *
		         *     mode.processBlock(data.words, offset);
		         */
		        processBlock: function (words, offset) {
		          // Shortcuts
		          var cipher = this._cipher;
		          var blockSize = cipher.blockSize;

		          // XOR and encrypt
		          xorBlock.call(this, words, offset, blockSize);
		          cipher.encryptBlock(words, offset);

		          // Remember this block to use with next block
		          this._prevBlock = words.slice(offset, offset + blockSize);
		        }
		      });

		      /**
		       * CBC decryptor.
		       */
		      CBC.Decryptor = CBC.extend({
		        /**
		         * Processes the data block at offset.
		         *
		         * @param {Array} words The data words to operate on.
		         * @param {number} offset The offset where the block starts.
		         *
		         * @example
		         *
		         *     mode.processBlock(data.words, offset);
		         */
		        processBlock: function (words, offset) {
		          // Shortcuts
		          var cipher = this._cipher;
		          var blockSize = cipher.blockSize;

		          // Remember this block to use with next block
		          var thisBlock = words.slice(offset, offset + blockSize);

		          // Decrypt and XOR
		          cipher.decryptBlock(words, offset);
		          xorBlock.call(this, words, offset, blockSize);

		          // This block becomes the previous block
		          this._prevBlock = thisBlock;
		        }
		      });
		      function xorBlock(words, offset, blockSize) {
		        var block;

		        // Shortcut
		        var iv = this._iv;

		        // Choose mixing block
		        if (iv) {
		          block = iv;

		          // Remove IV for subsequent blocks
		          this._iv = undefined$1;
		        } else {
		          block = this._prevBlock;
		        }

		        // XOR blocks
		        for (var i = 0; i < blockSize; i++) {
		          words[offset + i] ^= block[i];
		        }
		      }
		      return CBC;
		    }();

		    /**
		     * Padding namespace.
		     */
		    var C_pad = C.pad = {};

		    /**
		     * PKCS #5/7 padding strategy.
		     */
		    var Pkcs7 = C_pad.Pkcs7 = {
		      /**
		       * Pads data using the algorithm defined in PKCS #5/7.
		       *
		       * @param {WordArray} data The data to pad.
		       * @param {number} blockSize The multiple that the data should be padded to.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
		       */
		      pad: function (data, blockSize) {
		        // Shortcut
		        var blockSizeBytes = blockSize * 4;

		        // Count padding bytes
		        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

		        // Create padding word
		        var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;

		        // Create padding
		        var paddingWords = [];
		        for (var i = 0; i < nPaddingBytes; i += 4) {
		          paddingWords.push(paddingWord);
		        }
		        var padding = WordArray.create(paddingWords, nPaddingBytes);

		        // Add padding
		        data.concat(padding);
		      },
		      /**
		       * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
		       *
		       * @param {WordArray} data The data to unpad.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     CryptoJS.pad.Pkcs7.unpad(wordArray);
		       */
		      unpad: function (data) {
		        // Get number of padding bytes from last byte
		        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

		        // Remove padding
		        data.sigBytes -= nPaddingBytes;
		      }
		    };

		    /**
		     * Abstract base block cipher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
		     */
		    C_lib.BlockCipher = Cipher.extend({
		      /**
		       * Configuration options.
		       *
		       * @property {Mode} mode The block mode to use. Default: CBC
		       * @property {Padding} padding The padding strategy to use. Default: Pkcs7
		       */
		      cfg: Cipher.cfg.extend({
		        mode: CBC,
		        padding: Pkcs7
		      }),
		      reset: function () {
		        var modeCreator;

		        // Reset cipher
		        Cipher.reset.call(this);

		        // Shortcuts
		        var cfg = this.cfg;
		        var iv = cfg.iv;
		        var mode = cfg.mode;

		        // Reset block mode
		        if (this._xformMode == this._ENC_XFORM_MODE) {
		          modeCreator = mode.createEncryptor;
		        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{
		            modeCreator = mode.createDecryptor;
		            // Keep at least one block in the buffer for unpadding
		            this._minBufferSize = 1;
		          }
		        if (this._mode && this._mode.__creator == modeCreator) {
		          this._mode.init(this, iv && iv.words);
		        } else {
		          this._mode = modeCreator.call(mode, this, iv && iv.words);
		          this._mode.__creator = modeCreator;
		        }
		      },
		      _doProcessBlock: function (words, offset) {
		        this._mode.processBlock(words, offset);
		      },
		      _doFinalize: function () {
		        var finalProcessedBlocks;

		        // Shortcut
		        var padding = this.cfg.padding;

		        // Finalize
		        if (this._xformMode == this._ENC_XFORM_MODE) {
		          // Pad data
		          padding.pad(this._data, this.blockSize);

		          // Process final blocks
		          finalProcessedBlocks = this._process(!!'flush');
		        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{
		            // Process final blocks
		            finalProcessedBlocks = this._process(!!'flush');

		            // Unpad data
		            padding.unpad(finalProcessedBlocks);
		          }
		        return finalProcessedBlocks;
		      },
		      blockSize: 128 / 32
		    });

		    /**
		     * A collection of cipher parameters.
		     *
		     * @property {WordArray} ciphertext The raw ciphertext.
		     * @property {WordArray} key The key to this ciphertext.
		     * @property {WordArray} iv The IV used in the ciphering operation.
		     * @property {WordArray} salt The salt used with a key derivation function.
		     * @property {Cipher} algorithm The cipher algorithm.
		     * @property {Mode} mode The block mode used in the ciphering operation.
		     * @property {Padding} padding The padding scheme used in the ciphering operation.
		     * @property {number} blockSize The block size of the cipher.
		     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
		     */
		    var CipherParams = C_lib.CipherParams = Base.extend({
		      /**
		       * Initializes a newly created cipher params object.
		       *
		       * @param {Object} cipherParams An object with any of the possible cipher parameters.
		       *
		       * @example
		       *
		       *     var cipherParams = CryptoJS.lib.CipherParams.create({
		       *         ciphertext: ciphertextWordArray,
		       *         key: keyWordArray,
		       *         iv: ivWordArray,
		       *         salt: saltWordArray,
		       *         algorithm: CryptoJS.algo.AES,
		       *         mode: CryptoJS.mode.CBC,
		       *         padding: CryptoJS.pad.PKCS7,
		       *         blockSize: 4,
		       *         formatter: CryptoJS.format.OpenSSL
		       *     });
		       */
		      init: function (cipherParams) {
		        this.mixIn(cipherParams);
		      },
		      /**
		       * Converts this cipher params object to a string.
		       *
		       * @param {Format} formatter (Optional) The formatting strategy to use.
		       *
		       * @return {string} The stringified cipher params.
		       *
		       * @throws Error If neither the formatter nor the default formatter is set.
		       *
		       * @example
		       *
		       *     var string = cipherParams + '';
		       *     var string = cipherParams.toString();
		       *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
		       */
		      toString: function (formatter) {
		        return (formatter || this.formatter).stringify(this);
		      }
		    });

		    /**
		     * Format namespace.
		     */
		    var C_format = C.format = {};

		    /**
		     * OpenSSL formatting strategy.
		     */
		    var OpenSSLFormatter = C_format.OpenSSL = {
		      /**
		       * Converts a cipher params object to an OpenSSL-compatible string.
		       *
		       * @param {CipherParams} cipherParams The cipher params object.
		       *
		       * @return {string} The OpenSSL-compatible string.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
		       */
		      stringify: function (cipherParams) {
		        var wordArray;

		        // Shortcuts
		        var ciphertext = cipherParams.ciphertext;
		        var salt = cipherParams.salt;

		        // Format
		        if (salt) {
		          wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
		        } else {
		          wordArray = ciphertext;
		        }
		        return wordArray.toString(Base64);
		      },
		      /**
		       * Converts an OpenSSL-compatible string to a cipher params object.
		       *
		       * @param {string} openSSLStr The OpenSSL-compatible string.
		       *
		       * @return {CipherParams} The cipher params object.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
		       */
		      parse: function (openSSLStr) {
		        var salt;

		        // Parse base64
		        var ciphertext = Base64.parse(openSSLStr);

		        // Shortcut
		        var ciphertextWords = ciphertext.words;

		        // Test for salt
		        if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
		          // Extract salt
		          salt = WordArray.create(ciphertextWords.slice(2, 4));

		          // Remove salt from ciphertext
		          ciphertextWords.splice(0, 4);
		          ciphertext.sigBytes -= 16;
		        }
		        return CipherParams.create({
		          ciphertext: ciphertext,
		          salt: salt
		        });
		      }
		    };

		    /**
		     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
		     */
		    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
		      /**
		       * Configuration options.
		       *
		       * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
		       */
		      cfg: Base.extend({
		        format: OpenSSLFormatter
		      }),
		      /**
		       * Encrypts a message.
		       *
		       * @param {Cipher} cipher The cipher algorithm to use.
		       * @param {WordArray|string} message The message to encrypt.
		       * @param {WordArray} key The key.
		       * @param {Object} cfg (Optional) The configuration options to use for this operation.
		       *
		       * @return {CipherParams} A cipher params object.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
		       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
		       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		       */
		      encrypt: function (cipher, message, key, cfg) {
		        // Apply config defaults
		        cfg = this.cfg.extend(cfg);

		        // Encrypt
		        var encryptor = cipher.createEncryptor(key, cfg);
		        var ciphertext = encryptor.finalize(message);

		        // Shortcut
		        var cipherCfg = encryptor.cfg;

		        // Create and return serializable cipher params
		        return CipherParams.create({
		          ciphertext: ciphertext,
		          key: key,
		          iv: cipherCfg.iv,
		          algorithm: cipher,
		          mode: cipherCfg.mode,
		          padding: cipherCfg.padding,
		          blockSize: cipher.blockSize,
		          formatter: cfg.format
		        });
		      },
		      /**
		       * Decrypts serialized ciphertext.
		       *
		       * @param {Cipher} cipher The cipher algorithm to use.
		       * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
		       * @param {WordArray} key The key.
		       * @param {Object} cfg (Optional) The configuration options to use for this operation.
		       *
		       * @return {WordArray} The plaintext.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		       *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		       */
		      decrypt: function (cipher, ciphertext, key, cfg) {
		        // Apply config defaults
		        cfg = this.cfg.extend(cfg);

		        // Convert string to CipherParams
		        ciphertext = this._parse(ciphertext, cfg.format);

		        // Decrypt
		        var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
		        return plaintext;
		      },
		      /**
		       * Converts serialized ciphertext to CipherParams,
		       * else assumed CipherParams already and returns ciphertext unchanged.
		       *
		       * @param {CipherParams|string} ciphertext The ciphertext.
		       * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
		       *
		       * @return {CipherParams} The unserialized ciphertext.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
		       */
		      _parse: function (ciphertext, format) {
		        if (typeof ciphertext == 'string') {
		          return format.parse(ciphertext, this);
		        } else {
		          return ciphertext;
		        }
		      }
		    });

		    /**
		     * Key derivation function namespace.
		     */
		    var C_kdf = C.kdf = {};

		    /**
		     * OpenSSL key derivation function.
		     */
		    var OpenSSLKdf = C_kdf.OpenSSL = {
		      /**
		       * Derives a key and IV from a password.
		       *
		       * @param {string} password The password to derive from.
		       * @param {number} keySize The size in words of the key to generate.
		       * @param {number} ivSize The size in words of the IV to generate.
		       * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
		       *
		       * @return {CipherParams} A cipher params object with the key, IV, and salt.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
		       *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
		       */
		      execute: function (password, keySize, ivSize, salt, hasher) {
		        // Generate random salt
		        if (!salt) {
		          salt = WordArray.random(64 / 8);
		        }

		        // Derive key and IV
		        if (!hasher) {
		          var key = EvpKDF.create({
		            keySize: keySize + ivSize
		          }).compute(password, salt);
		        } else {
		          var key = EvpKDF.create({
		            keySize: keySize + ivSize,
		            hasher: hasher
		          }).compute(password, salt);
		        }

		        // Separate key and IV
		        var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
		        key.sigBytes = keySize * 4;

		        // Return params
		        return CipherParams.create({
		          key: key,
		          iv: iv,
		          salt: salt
		        });
		      }
		    };

		    /**
		     * A serializable cipher wrapper that derives the key from a password,
		     * and returns ciphertext as a serializable cipher params object.
		     */
		    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
		      /**
		       * Configuration options.
		       *
		       * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
		       */
		      cfg: SerializableCipher.cfg.extend({
		        kdf: OpenSSLKdf
		      }),
		      /**
		       * Encrypts a message using a password.
		       *
		       * @param {Cipher} cipher The cipher algorithm to use.
		       * @param {WordArray|string} message The message to encrypt.
		       * @param {string} password The password.
		       * @param {Object} cfg (Optional) The configuration options to use for this operation.
		       *
		       * @return {CipherParams} A cipher params object.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
		       *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
		       */
		      encrypt: function (cipher, message, password, cfg) {
		        // Apply config defaults
		        cfg = this.cfg.extend(cfg);

		        // Derive key and other params
		        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);

		        // Add IV to config
		        cfg.iv = derivedParams.iv;

		        // Encrypt
		        var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

		        // Mix in derived params
		        ciphertext.mixIn(derivedParams);
		        return ciphertext;
		      },
		      /**
		       * Decrypts serialized ciphertext using a password.
		       *
		       * @param {Cipher} cipher The cipher algorithm to use.
		       * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
		       * @param {string} password The password.
		       * @param {Object} cfg (Optional) The configuration options to use for this operation.
		       *
		       * @return {WordArray} The plaintext.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
		       *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
		       */
		      decrypt: function (cipher, ciphertext, password, cfg) {
		        // Apply config defaults
		        cfg = this.cfg.extend(cfg);

		        // Convert string to CipherParams
		        ciphertext = this._parse(ciphertext, cfg.format);

		        // Derive key and other params
		        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);

		        // Add IV to config
		        cfg.iv = derivedParams.iv;

		        // Decrypt
		        var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
		        return plaintext;
		      }
		    });
		  }();
		}); 
	} (cipherCore));
	return cipherCore.exports;
}

var modeCfb = {exports: {}};

var hasRequiredModeCfb;

function requireModeCfb () {
	if (hasRequiredModeCfb) return modeCfb.exports;
	hasRequiredModeCfb = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  /**
		   * Cipher Feedback block mode.
		   */
		  CryptoJS.mode.CFB = function () {
		    var CFB = CryptoJS.lib.BlockCipherMode.extend();
		    CFB.Encryptor = CFB.extend({
		      processBlock: function (words, offset) {
		        // Shortcuts
		        var cipher = this._cipher;
		        var blockSize = cipher.blockSize;
		        generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

		        // Remember this block to use with next block
		        this._prevBlock = words.slice(offset, offset + blockSize);
		      }
		    });
		    CFB.Decryptor = CFB.extend({
		      processBlock: function (words, offset) {
		        // Shortcuts
		        var cipher = this._cipher;
		        var blockSize = cipher.blockSize;

		        // Remember this block to use with next block
		        var thisBlock = words.slice(offset, offset + blockSize);
		        generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

		        // This block becomes the previous block
		        this._prevBlock = thisBlock;
		      }
		    });
		    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
		      var keystream;

		      // Shortcut
		      var iv = this._iv;

		      // Generate keystream
		      if (iv) {
		        keystream = iv.slice(0);

		        // Remove IV for subsequent blocks
		        this._iv = undefined;
		      } else {
		        keystream = this._prevBlock;
		      }
		      cipher.encryptBlock(keystream, 0);

		      // Encrypt
		      for (var i = 0; i < blockSize; i++) {
		        words[offset + i] ^= keystream[i];
		      }
		    }
		    return CFB;
		  }();
		  return CryptoJS.mode.CFB;
		}); 
	} (modeCfb));
	return modeCfb.exports;
}

var modeCtr = {exports: {}};

var hasRequiredModeCtr;

function requireModeCtr () {
	if (hasRequiredModeCtr) return modeCtr.exports;
	hasRequiredModeCtr = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  /**
		   * Counter block mode.
		   */
		  CryptoJS.mode.CTR = function () {
		    var CTR = CryptoJS.lib.BlockCipherMode.extend();
		    var Encryptor = CTR.Encryptor = CTR.extend({
		      processBlock: function (words, offset) {
		        // Shortcuts
		        var cipher = this._cipher;
		        var blockSize = cipher.blockSize;
		        var iv = this._iv;
		        var counter = this._counter;

		        // Generate keystream
		        if (iv) {
		          counter = this._counter = iv.slice(0);

		          // Remove IV for subsequent blocks
		          this._iv = undefined;
		        }
		        var keystream = counter.slice(0);
		        cipher.encryptBlock(keystream, 0);

		        // Increment counter
		        counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;

		        // Encrypt
		        for (var i = 0; i < blockSize; i++) {
		          words[offset + i] ^= keystream[i];
		        }
		      }
		    });
		    CTR.Decryptor = Encryptor;
		    return CTR;
		  }();
		  return CryptoJS.mode.CTR;
		}); 
	} (modeCtr));
	return modeCtr.exports;
}

var modeCtrGladman = {exports: {}};

var hasRequiredModeCtrGladman;

function requireModeCtrGladman () {
	if (hasRequiredModeCtrGladman) return modeCtrGladman.exports;
	hasRequiredModeCtrGladman = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  /** @preserve
		   * Counter block mode compatible with  Dr Brian Gladman fileenc.c
		   * derived from CryptoJS.mode.CTR
		   * Jan Hruby jhruby.web@gmail.com
		   */
		  CryptoJS.mode.CTRGladman = function () {
		    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
		    function incWord(word) {
		      if ((word >> 24 & 0xff) === 0xff) {
		        //overflow
		        var b1 = word >> 16 & 0xff;
		        var b2 = word >> 8 & 0xff;
		        var b3 = word & 0xff;
		        if (b1 === 0xff)
		          // overflow b1
		          {
		            b1 = 0;
		            if (b2 === 0xff) {
		              b2 = 0;
		              if (b3 === 0xff) {
		                b3 = 0;
		              } else {
		                ++b3;
		              }
		            } else {
		              ++b2;
		            }
		          } else {
		          ++b1;
		        }
		        word = 0;
		        word += b1 << 16;
		        word += b2 << 8;
		        word += b3;
		      } else {
		        word += 0x01 << 24;
		      }
		      return word;
		    }
		    function incCounter(counter) {
		      if ((counter[0] = incWord(counter[0])) === 0) {
		        // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
		        counter[1] = incWord(counter[1]);
		      }
		      return counter;
		    }
		    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
		      processBlock: function (words, offset) {
		        // Shortcuts
		        var cipher = this._cipher;
		        var blockSize = cipher.blockSize;
		        var iv = this._iv;
		        var counter = this._counter;

		        // Generate keystream
		        if (iv) {
		          counter = this._counter = iv.slice(0);

		          // Remove IV for subsequent blocks
		          this._iv = undefined;
		        }
		        incCounter(counter);
		        var keystream = counter.slice(0);
		        cipher.encryptBlock(keystream, 0);

		        // Encrypt
		        for (var i = 0; i < blockSize; i++) {
		          words[offset + i] ^= keystream[i];
		        }
		      }
		    });
		    CTRGladman.Decryptor = Encryptor;
		    return CTRGladman;
		  }();
		  return CryptoJS.mode.CTRGladman;
		}); 
	} (modeCtrGladman));
	return modeCtrGladman.exports;
}

var modeOfb = {exports: {}};

var hasRequiredModeOfb;

function requireModeOfb () {
	if (hasRequiredModeOfb) return modeOfb.exports;
	hasRequiredModeOfb = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  /**
		   * Output Feedback block mode.
		   */
		  CryptoJS.mode.OFB = function () {
		    var OFB = CryptoJS.lib.BlockCipherMode.extend();
		    var Encryptor = OFB.Encryptor = OFB.extend({
		      processBlock: function (words, offset) {
		        // Shortcuts
		        var cipher = this._cipher;
		        var blockSize = cipher.blockSize;
		        var iv = this._iv;
		        var keystream = this._keystream;

		        // Generate keystream
		        if (iv) {
		          keystream = this._keystream = iv.slice(0);

		          // Remove IV for subsequent blocks
		          this._iv = undefined;
		        }
		        cipher.encryptBlock(keystream, 0);

		        // Encrypt
		        for (var i = 0; i < blockSize; i++) {
		          words[offset + i] ^= keystream[i];
		        }
		      }
		    });
		    OFB.Decryptor = Encryptor;
		    return OFB;
		  }();
		  return CryptoJS.mode.OFB;
		}); 
	} (modeOfb));
	return modeOfb.exports;
}

var modeEcb = {exports: {}};

var hasRequiredModeEcb;

function requireModeEcb () {
	if (hasRequiredModeEcb) return modeEcb.exports;
	hasRequiredModeEcb = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  /**
		   * Electronic Codebook block mode.
		   */
		  CryptoJS.mode.ECB = function () {
		    var ECB = CryptoJS.lib.BlockCipherMode.extend();
		    ECB.Encryptor = ECB.extend({
		      processBlock: function (words, offset) {
		        this._cipher.encryptBlock(words, offset);
		      }
		    });
		    ECB.Decryptor = ECB.extend({
		      processBlock: function (words, offset) {
		        this._cipher.decryptBlock(words, offset);
		      }
		    });
		    return ECB;
		  }();
		  return CryptoJS.mode.ECB;
		}); 
	} (modeEcb));
	return modeEcb.exports;
}

var padAnsix923 = {exports: {}};

var hasRequiredPadAnsix923;

function requirePadAnsix923 () {
	if (hasRequiredPadAnsix923) return padAnsix923.exports;
	hasRequiredPadAnsix923 = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  /**
		   * ANSI X.923 padding strategy.
		   */
		  CryptoJS.pad.AnsiX923 = {
		    pad: function (data, blockSize) {
		      // Shortcuts
		      var dataSigBytes = data.sigBytes;
		      var blockSizeBytes = blockSize * 4;

		      // Count padding bytes
		      var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

		      // Compute last byte position
		      var lastBytePos = dataSigBytes + nPaddingBytes - 1;

		      // Pad
		      data.clamp();
		      data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
		      data.sigBytes += nPaddingBytes;
		    },
		    unpad: function (data) {
		      // Get number of padding bytes from last byte
		      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

		      // Remove padding
		      data.sigBytes -= nPaddingBytes;
		    }
		  };
		  return CryptoJS.pad.Ansix923;
		}); 
	} (padAnsix923));
	return padAnsix923.exports;
}

var padIso10126 = {exports: {}};

var hasRequiredPadIso10126;

function requirePadIso10126 () {
	if (hasRequiredPadIso10126) return padIso10126.exports;
	hasRequiredPadIso10126 = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  /**
		   * ISO 10126 padding strategy.
		   */
		  CryptoJS.pad.Iso10126 = {
		    pad: function (data, blockSize) {
		      // Shortcut
		      var blockSizeBytes = blockSize * 4;

		      // Count padding bytes
		      var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

		      // Pad
		      data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
		    },
		    unpad: function (data) {
		      // Get number of padding bytes from last byte
		      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

		      // Remove padding
		      data.sigBytes -= nPaddingBytes;
		    }
		  };
		  return CryptoJS.pad.Iso10126;
		}); 
	} (padIso10126));
	return padIso10126.exports;
}

var padIso97971 = {exports: {}};

var hasRequiredPadIso97971;

function requirePadIso97971 () {
	if (hasRequiredPadIso97971) return padIso97971.exports;
	hasRequiredPadIso97971 = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  /**
		   * ISO/IEC 9797-1 Padding Method 2.
		   */
		  CryptoJS.pad.Iso97971 = {
		    pad: function (data, blockSize) {
		      // Add 0x80 byte
		      data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

		      // Zero pad the rest
		      CryptoJS.pad.ZeroPadding.pad(data, blockSize);
		    },
		    unpad: function (data) {
		      // Remove zero padding
		      CryptoJS.pad.ZeroPadding.unpad(data);

		      // Remove one more byte -- the 0x80 byte
		      data.sigBytes--;
		    }
		  };
		  return CryptoJS.pad.Iso97971;
		}); 
	} (padIso97971));
	return padIso97971.exports;
}

var padZeropadding = {exports: {}};

var hasRequiredPadZeropadding;

function requirePadZeropadding () {
	if (hasRequiredPadZeropadding) return padZeropadding.exports;
	hasRequiredPadZeropadding = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  /**
		   * Zero padding strategy.
		   */
		  CryptoJS.pad.ZeroPadding = {
		    pad: function (data, blockSize) {
		      // Shortcut
		      var blockSizeBytes = blockSize * 4;

		      // Pad
		      data.clamp();
		      data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
		    },
		    unpad: function (data) {
		      // Shortcut
		      var dataWords = data.words;

		      // Unpad
		      var i = data.sigBytes - 1;
		      for (var i = data.sigBytes - 1; i >= 0; i--) {
		        if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff) {
		          data.sigBytes = i + 1;
		          break;
		        }
		      }
		    }
		  };
		  return CryptoJS.pad.ZeroPadding;
		}); 
	} (padZeropadding));
	return padZeropadding.exports;
}

var padNopadding = {exports: {}};

var hasRequiredPadNopadding;

function requirePadNopadding () {
	if (hasRequiredPadNopadding) return padNopadding.exports;
	hasRequiredPadNopadding = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  /**
		   * A noop padding strategy.
		   */
		  CryptoJS.pad.NoPadding = {
		    pad: function () {},
		    unpad: function () {}
		  };
		  return CryptoJS.pad.NoPadding;
		}); 
	} (padNopadding));
	return padNopadding.exports;
}

var formatHex = {exports: {}};

var hasRequiredFormatHex;

function requireFormatHex () {
	if (hasRequiredFormatHex) return formatHex.exports;
	hasRequiredFormatHex = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function (undefined$1) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var CipherParams = C_lib.CipherParams;
		    var C_enc = C.enc;
		    var Hex = C_enc.Hex;
		    var C_format = C.format;
		    C_format.Hex = {
		      /**
		       * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
		       *
		       * @param {CipherParams} cipherParams The cipher params object.
		       *
		       * @return {string} The hexadecimally encoded string.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
		       */
		      stringify: function (cipherParams) {
		        return cipherParams.ciphertext.toString(Hex);
		      },
		      /**
		       * Converts a hexadecimally encoded ciphertext string to a cipher params object.
		       *
		       * @param {string} input The hexadecimally encoded string.
		       *
		       * @return {CipherParams} The cipher params object.
		       *
		       * @static
		       *
		       * @example
		       *
		       *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
		       */
		      parse: function (input) {
		        var ciphertext = Hex.parse(input);
		        return CipherParams.create({
		          ciphertext: ciphertext
		        });
		      }
		    };
		  })();
		  return CryptoJS.format.Hex;
		}); 
	} (formatHex));
	return formatHex.exports;
}

var aes = {exports: {}};

var hasRequiredAes;

function requireAes () {
	if (hasRequiredAes) return aes.exports;
	hasRequiredAes = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var BlockCipher = C_lib.BlockCipher;
		    var C_algo = C.algo;

		    // Lookup tables
		    var SBOX = [];
		    var INV_SBOX = [];
		    var SUB_MIX_0 = [];
		    var SUB_MIX_1 = [];
		    var SUB_MIX_2 = [];
		    var SUB_MIX_3 = [];
		    var INV_SUB_MIX_0 = [];
		    var INV_SUB_MIX_1 = [];
		    var INV_SUB_MIX_2 = [];
		    var INV_SUB_MIX_3 = [];

		    // Compute lookup tables
		    (function () {
		      // Compute double table
		      var d = [];
		      for (var i = 0; i < 256; i++) {
		        if (i < 128) {
		          d[i] = i << 1;
		        } else {
		          d[i] = i << 1 ^ 0x11b;
		        }
		      }

		      // Walk GF(2^8)
		      var x = 0;
		      var xi = 0;
		      for (var i = 0; i < 256; i++) {
		        // Compute sbox
		        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
		        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
		        SBOX[x] = sx;
		        INV_SBOX[sx] = x;

		        // Compute multiplication
		        var x2 = d[x];
		        var x4 = d[x2];
		        var x8 = d[x4];

		        // Compute sub bytes, mix columns tables
		        var t = d[sx] * 0x101 ^ sx * 0x1010100;
		        SUB_MIX_0[x] = t << 24 | t >>> 8;
		        SUB_MIX_1[x] = t << 16 | t >>> 16;
		        SUB_MIX_2[x] = t << 8 | t >>> 24;
		        SUB_MIX_3[x] = t;

		        // Compute inv sub bytes, inv mix columns tables
		        var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
		        INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
		        INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
		        INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
		        INV_SUB_MIX_3[sx] = t;

		        // Compute next counter
		        if (!x) {
		          x = xi = 1;
		        } else {
		          x = x2 ^ d[d[d[x8 ^ x2]]];
		          xi ^= d[d[xi]];
		        }
		      }
		    })();

		    // Precomputed Rcon lookup
		    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

		    /**
		     * AES block cipher algorithm.
		     */
		    var AES = C_algo.AES = BlockCipher.extend({
		      _doReset: function () {
		        var t;

		        // Skip reset of nRounds has been set before and key did not change
		        if (this._nRounds && this._keyPriorReset === this._key) {
		          return;
		        }

		        // Shortcuts
		        var key = this._keyPriorReset = this._key;
		        var keyWords = key.words;
		        var keySize = key.sigBytes / 4;

		        // Compute number of rounds
		        var nRounds = this._nRounds = keySize + 6;

		        // Compute number of key schedule rows
		        var ksRows = (nRounds + 1) * 4;

		        // Compute key schedule
		        var keySchedule = this._keySchedule = [];
		        for (var ksRow = 0; ksRow < ksRows; ksRow++) {
		          if (ksRow < keySize) {
		            keySchedule[ksRow] = keyWords[ksRow];
		          } else {
		            t = keySchedule[ksRow - 1];
		            if (!(ksRow % keySize)) {
		              // Rot word
		              t = t << 8 | t >>> 24;

		              // Sub word
		              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];

		              // Mix Rcon
		              t ^= RCON[ksRow / keySize | 0] << 24;
		            } else if (keySize > 6 && ksRow % keySize == 4) {
		              // Sub word
		              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];
		            }
		            keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
		          }
		        }

		        // Compute inv key schedule
		        var invKeySchedule = this._invKeySchedule = [];
		        for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
		          var ksRow = ksRows - invKsRow;
		          if (invKsRow % 4) {
		            var t = keySchedule[ksRow];
		          } else {
		            var t = keySchedule[ksRow - 4];
		          }
		          if (invKsRow < 4 || ksRow <= 4) {
		            invKeySchedule[invKsRow] = t;
		          } else {
		            invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
		          }
		        }
		      },
		      encryptBlock: function (M, offset) {
		        this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
		      },
		      decryptBlock: function (M, offset) {
		        // Swap 2nd and 4th rows
		        var t = M[offset + 1];
		        M[offset + 1] = M[offset + 3];
		        M[offset + 3] = t;
		        this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

		        // Inv swap 2nd and 4th rows
		        var t = M[offset + 1];
		        M[offset + 1] = M[offset + 3];
		        M[offset + 3] = t;
		      },
		      _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
		        // Shortcut
		        var nRounds = this._nRounds;

		        // Get input, add round key
		        var s0 = M[offset] ^ keySchedule[0];
		        var s1 = M[offset + 1] ^ keySchedule[1];
		        var s2 = M[offset + 2] ^ keySchedule[2];
		        var s3 = M[offset + 3] ^ keySchedule[3];

		        // Key schedule row counter
		        var ksRow = 4;

		        // Rounds
		        for (var round = 1; round < nRounds; round++) {
		          // Shift rows, sub bytes, mix columns, add round key
		          var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
		          var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
		          var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
		          var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

		          // Update state
		          s0 = t0;
		          s1 = t1;
		          s2 = t2;
		          s3 = t3;
		        }

		        // Shift rows, sub bytes, add round key
		        var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
		        var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
		        var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
		        var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

		        // Set output
		        M[offset] = t0;
		        M[offset + 1] = t1;
		        M[offset + 2] = t2;
		        M[offset + 3] = t3;
		      },
		      keySize: 256 / 32
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
		     */
		    C.AES = BlockCipher._createHelper(AES);
		  })();
		  return CryptoJS.AES;
		}); 
	} (aes));
	return aes.exports;
}

var tripledes = {exports: {}};

var hasRequiredTripledes;

function requireTripledes () {
	if (hasRequiredTripledes) return tripledes.exports;
	hasRequiredTripledes = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var BlockCipher = C_lib.BlockCipher;
		    var C_algo = C.algo;

		    // Permuted Choice 1 constants
		    var PC1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4];

		    // Permuted Choice 2 constants
		    var PC2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32];

		    // Cumulative bit shift constants
		    var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

		    // SBOXes and round permutation constants
		    var SBOX_P = [{
		      0x0: 0x808200,
		      0x10000000: 0x8000,
		      0x20000000: 0x808002,
		      0x30000000: 0x2,
		      0x40000000: 0x200,
		      0x50000000: 0x808202,
		      0x60000000: 0x800202,
		      0x70000000: 0x800000,
		      0x80000000: 0x202,
		      0x90000000: 0x800200,
		      0xa0000000: 0x8200,
		      0xb0000000: 0x808000,
		      0xc0000000: 0x8002,
		      0xd0000000: 0x800002,
		      0xe0000000: 0x0,
		      0xf0000000: 0x8202,
		      0x8000000: 0x0,
		      0x18000000: 0x808202,
		      0x28000000: 0x8202,
		      0x38000000: 0x8000,
		      0x48000000: 0x808200,
		      0x58000000: 0x200,
		      0x68000000: 0x808002,
		      0x78000000: 0x2,
		      0x88000000: 0x800200,
		      0x98000000: 0x8200,
		      0xa8000000: 0x808000,
		      0xb8000000: 0x800202,
		      0xc8000000: 0x800002,
		      0xd8000000: 0x8002,
		      0xe8000000: 0x202,
		      0xf8000000: 0x800000,
		      0x1: 0x8000,
		      0x10000001: 0x2,
		      0x20000001: 0x808200,
		      0x30000001: 0x800000,
		      0x40000001: 0x808002,
		      0x50000001: 0x8200,
		      0x60000001: 0x200,
		      0x70000001: 0x800202,
		      0x80000001: 0x808202,
		      0x90000001: 0x808000,
		      0xa0000001: 0x800002,
		      0xb0000001: 0x8202,
		      0xc0000001: 0x202,
		      0xd0000001: 0x800200,
		      0xe0000001: 0x8002,
		      0xf0000001: 0x0,
		      0x8000001: 0x808202,
		      0x18000001: 0x808000,
		      0x28000001: 0x800000,
		      0x38000001: 0x200,
		      0x48000001: 0x8000,
		      0x58000001: 0x800002,
		      0x68000001: 0x2,
		      0x78000001: 0x8202,
		      0x88000001: 0x8002,
		      0x98000001: 0x800202,
		      0xa8000001: 0x202,
		      0xb8000001: 0x808200,
		      0xc8000001: 0x800200,
		      0xd8000001: 0x0,
		      0xe8000001: 0x8200,
		      0xf8000001: 0x808002
		    }, {
		      0x0: 0x40084010,
		      0x1000000: 0x4000,
		      0x2000000: 0x80000,
		      0x3000000: 0x40080010,
		      0x4000000: 0x40000010,
		      0x5000000: 0x40084000,
		      0x6000000: 0x40004000,
		      0x7000000: 0x10,
		      0x8000000: 0x84000,
		      0x9000000: 0x40004010,
		      0xa000000: 0x40000000,
		      0xb000000: 0x84010,
		      0xc000000: 0x80010,
		      0xd000000: 0x0,
		      0xe000000: 0x4010,
		      0xf000000: 0x40080000,
		      0x800000: 0x40004000,
		      0x1800000: 0x84010,
		      0x2800000: 0x10,
		      0x3800000: 0x40004010,
		      0x4800000: 0x40084010,
		      0x5800000: 0x40000000,
		      0x6800000: 0x80000,
		      0x7800000: 0x40080010,
		      0x8800000: 0x80010,
		      0x9800000: 0x0,
		      0xa800000: 0x4000,
		      0xb800000: 0x40080000,
		      0xc800000: 0x40000010,
		      0xd800000: 0x84000,
		      0xe800000: 0x40084000,
		      0xf800000: 0x4010,
		      0x10000000: 0x0,
		      0x11000000: 0x40080010,
		      0x12000000: 0x40004010,
		      0x13000000: 0x40084000,
		      0x14000000: 0x40080000,
		      0x15000000: 0x10,
		      0x16000000: 0x84010,
		      0x17000000: 0x4000,
		      0x18000000: 0x4010,
		      0x19000000: 0x80000,
		      0x1a000000: 0x80010,
		      0x1b000000: 0x40000010,
		      0x1c000000: 0x84000,
		      0x1d000000: 0x40004000,
		      0x1e000000: 0x40000000,
		      0x1f000000: 0x40084010,
		      0x10800000: 0x84010,
		      0x11800000: 0x80000,
		      0x12800000: 0x40080000,
		      0x13800000: 0x4000,
		      0x14800000: 0x40004000,
		      0x15800000: 0x40084010,
		      0x16800000: 0x10,
		      0x17800000: 0x40000000,
		      0x18800000: 0x40084000,
		      0x19800000: 0x40000010,
		      0x1a800000: 0x40004010,
		      0x1b800000: 0x80010,
		      0x1c800000: 0x0,
		      0x1d800000: 0x4010,
		      0x1e800000: 0x40080010,
		      0x1f800000: 0x84000
		    }, {
		      0x0: 0x104,
		      0x100000: 0x0,
		      0x200000: 0x4000100,
		      0x300000: 0x10104,
		      0x400000: 0x10004,
		      0x500000: 0x4000004,
		      0x600000: 0x4010104,
		      0x700000: 0x4010000,
		      0x800000: 0x4000000,
		      0x900000: 0x4010100,
		      0xa00000: 0x10100,
		      0xb00000: 0x4010004,
		      0xc00000: 0x4000104,
		      0xd00000: 0x10000,
		      0xe00000: 0x4,
		      0xf00000: 0x100,
		      0x80000: 0x4010100,
		      0x180000: 0x4010004,
		      0x280000: 0x0,
		      0x380000: 0x4000100,
		      0x480000: 0x4000004,
		      0x580000: 0x10000,
		      0x680000: 0x10004,
		      0x780000: 0x104,
		      0x880000: 0x4,
		      0x980000: 0x100,
		      0xa80000: 0x4010000,
		      0xb80000: 0x10104,
		      0xc80000: 0x10100,
		      0xd80000: 0x4000104,
		      0xe80000: 0x4010104,
		      0xf80000: 0x4000000,
		      0x1000000: 0x4010100,
		      0x1100000: 0x10004,
		      0x1200000: 0x10000,
		      0x1300000: 0x4000100,
		      0x1400000: 0x100,
		      0x1500000: 0x4010104,
		      0x1600000: 0x4000004,
		      0x1700000: 0x0,
		      0x1800000: 0x4000104,
		      0x1900000: 0x4000000,
		      0x1a00000: 0x4,
		      0x1b00000: 0x10100,
		      0x1c00000: 0x4010000,
		      0x1d00000: 0x104,
		      0x1e00000: 0x10104,
		      0x1f00000: 0x4010004,
		      0x1080000: 0x4000000,
		      0x1180000: 0x104,
		      0x1280000: 0x4010100,
		      0x1380000: 0x0,
		      0x1480000: 0x10004,
		      0x1580000: 0x4000100,
		      0x1680000: 0x100,
		      0x1780000: 0x4010004,
		      0x1880000: 0x10000,
		      0x1980000: 0x4010104,
		      0x1a80000: 0x10104,
		      0x1b80000: 0x4000004,
		      0x1c80000: 0x4000104,
		      0x1d80000: 0x4010000,
		      0x1e80000: 0x4,
		      0x1f80000: 0x10100
		    }, {
		      0x0: 0x80401000,
		      0x10000: 0x80001040,
		      0x20000: 0x401040,
		      0x30000: 0x80400000,
		      0x40000: 0x0,
		      0x50000: 0x401000,
		      0x60000: 0x80000040,
		      0x70000: 0x400040,
		      0x80000: 0x80000000,
		      0x90000: 0x400000,
		      0xa0000: 0x40,
		      0xb0000: 0x80001000,
		      0xc0000: 0x80400040,
		      0xd0000: 0x1040,
		      0xe0000: 0x1000,
		      0xf0000: 0x80401040,
		      0x8000: 0x80001040,
		      0x18000: 0x40,
		      0x28000: 0x80400040,
		      0x38000: 0x80001000,
		      0x48000: 0x401000,
		      0x58000: 0x80401040,
		      0x68000: 0x0,
		      0x78000: 0x80400000,
		      0x88000: 0x1000,
		      0x98000: 0x80401000,
		      0xa8000: 0x400000,
		      0xb8000: 0x1040,
		      0xc8000: 0x80000000,
		      0xd8000: 0x400040,
		      0xe8000: 0x401040,
		      0xf8000: 0x80000040,
		      0x100000: 0x400040,
		      0x110000: 0x401000,
		      0x120000: 0x80000040,
		      0x130000: 0x0,
		      0x140000: 0x1040,
		      0x150000: 0x80400040,
		      0x160000: 0x80401000,
		      0x170000: 0x80001040,
		      0x180000: 0x80401040,
		      0x190000: 0x80000000,
		      0x1a0000: 0x80400000,
		      0x1b0000: 0x401040,
		      0x1c0000: 0x80001000,
		      0x1d0000: 0x400000,
		      0x1e0000: 0x40,
		      0x1f0000: 0x1000,
		      0x108000: 0x80400000,
		      0x118000: 0x80401040,
		      0x128000: 0x0,
		      0x138000: 0x401000,
		      0x148000: 0x400040,
		      0x158000: 0x80000000,
		      0x168000: 0x80001040,
		      0x178000: 0x40,
		      0x188000: 0x80000040,
		      0x198000: 0x1000,
		      0x1a8000: 0x80001000,
		      0x1b8000: 0x80400040,
		      0x1c8000: 0x1040,
		      0x1d8000: 0x80401000,
		      0x1e8000: 0x400000,
		      0x1f8000: 0x401040
		    }, {
		      0x0: 0x80,
		      0x1000: 0x1040000,
		      0x2000: 0x40000,
		      0x3000: 0x20000000,
		      0x4000: 0x20040080,
		      0x5000: 0x1000080,
		      0x6000: 0x21000080,
		      0x7000: 0x40080,
		      0x8000: 0x1000000,
		      0x9000: 0x20040000,
		      0xa000: 0x20000080,
		      0xb000: 0x21040080,
		      0xc000: 0x21040000,
		      0xd000: 0x0,
		      0xe000: 0x1040080,
		      0xf000: 0x21000000,
		      0x800: 0x1040080,
		      0x1800: 0x21000080,
		      0x2800: 0x80,
		      0x3800: 0x1040000,
		      0x4800: 0x40000,
		      0x5800: 0x20040080,
		      0x6800: 0x21040000,
		      0x7800: 0x20000000,
		      0x8800: 0x20040000,
		      0x9800: 0x0,
		      0xa800: 0x21040080,
		      0xb800: 0x1000080,
		      0xc800: 0x20000080,
		      0xd800: 0x21000000,
		      0xe800: 0x1000000,
		      0xf800: 0x40080,
		      0x10000: 0x40000,
		      0x11000: 0x80,
		      0x12000: 0x20000000,
		      0x13000: 0x21000080,
		      0x14000: 0x1000080,
		      0x15000: 0x21040000,
		      0x16000: 0x20040080,
		      0x17000: 0x1000000,
		      0x18000: 0x21040080,
		      0x19000: 0x21000000,
		      0x1a000: 0x1040000,
		      0x1b000: 0x20040000,
		      0x1c000: 0x40080,
		      0x1d000: 0x20000080,
		      0x1e000: 0x0,
		      0x1f000: 0x1040080,
		      0x10800: 0x21000080,
		      0x11800: 0x1000000,
		      0x12800: 0x1040000,
		      0x13800: 0x20040080,
		      0x14800: 0x20000000,
		      0x15800: 0x1040080,
		      0x16800: 0x80,
		      0x17800: 0x21040000,
		      0x18800: 0x40080,
		      0x19800: 0x21040080,
		      0x1a800: 0x0,
		      0x1b800: 0x21000000,
		      0x1c800: 0x1000080,
		      0x1d800: 0x40000,
		      0x1e800: 0x20040000,
		      0x1f800: 0x20000080
		    }, {
		      0x0: 0x10000008,
		      0x100: 0x2000,
		      0x200: 0x10200000,
		      0x300: 0x10202008,
		      0x400: 0x10002000,
		      0x500: 0x200000,
		      0x600: 0x200008,
		      0x700: 0x10000000,
		      0x800: 0x0,
		      0x900: 0x10002008,
		      0xa00: 0x202000,
		      0xb00: 0x8,
		      0xc00: 0x10200008,
		      0xd00: 0x202008,
		      0xe00: 0x2008,
		      0xf00: 0x10202000,
		      0x80: 0x10200000,
		      0x180: 0x10202008,
		      0x280: 0x8,
		      0x380: 0x200000,
		      0x480: 0x202008,
		      0x580: 0x10000008,
		      0x680: 0x10002000,
		      0x780: 0x2008,
		      0x880: 0x200008,
		      0x980: 0x2000,
		      0xa80: 0x10002008,
		      0xb80: 0x10200008,
		      0xc80: 0x0,
		      0xd80: 0x10202000,
		      0xe80: 0x202000,
		      0xf80: 0x10000000,
		      0x1000: 0x10002000,
		      0x1100: 0x10200008,
		      0x1200: 0x10202008,
		      0x1300: 0x2008,
		      0x1400: 0x200000,
		      0x1500: 0x10000000,
		      0x1600: 0x10000008,
		      0x1700: 0x202000,
		      0x1800: 0x202008,
		      0x1900: 0x0,
		      0x1a00: 0x8,
		      0x1b00: 0x10200000,
		      0x1c00: 0x2000,
		      0x1d00: 0x10002008,
		      0x1e00: 0x10202000,
		      0x1f00: 0x200008,
		      0x1080: 0x8,
		      0x1180: 0x202000,
		      0x1280: 0x200000,
		      0x1380: 0x10000008,
		      0x1480: 0x10002000,
		      0x1580: 0x2008,
		      0x1680: 0x10202008,
		      0x1780: 0x10200000,
		      0x1880: 0x10202000,
		      0x1980: 0x10200008,
		      0x1a80: 0x2000,
		      0x1b80: 0x202008,
		      0x1c80: 0x200008,
		      0x1d80: 0x0,
		      0x1e80: 0x10000000,
		      0x1f80: 0x10002008
		    }, {
		      0x0: 0x100000,
		      0x10: 0x2000401,
		      0x20: 0x400,
		      0x30: 0x100401,
		      0x40: 0x2100401,
		      0x50: 0x0,
		      0x60: 0x1,
		      0x70: 0x2100001,
		      0x80: 0x2000400,
		      0x90: 0x100001,
		      0xa0: 0x2000001,
		      0xb0: 0x2100400,
		      0xc0: 0x2100000,
		      0xd0: 0x401,
		      0xe0: 0x100400,
		      0xf0: 0x2000000,
		      0x8: 0x2100001,
		      0x18: 0x0,
		      0x28: 0x2000401,
		      0x38: 0x2100400,
		      0x48: 0x100000,
		      0x58: 0x2000001,
		      0x68: 0x2000000,
		      0x78: 0x401,
		      0x88: 0x100401,
		      0x98: 0x2000400,
		      0xa8: 0x2100000,
		      0xb8: 0x100001,
		      0xc8: 0x400,
		      0xd8: 0x2100401,
		      0xe8: 0x1,
		      0xf8: 0x100400,
		      0x100: 0x2000000,
		      0x110: 0x100000,
		      0x120: 0x2000401,
		      0x130: 0x2100001,
		      0x140: 0x100001,
		      0x150: 0x2000400,
		      0x160: 0x2100400,
		      0x170: 0x100401,
		      0x180: 0x401,
		      0x190: 0x2100401,
		      0x1a0: 0x100400,
		      0x1b0: 0x1,
		      0x1c0: 0x0,
		      0x1d0: 0x2100000,
		      0x1e0: 0x2000001,
		      0x1f0: 0x400,
		      0x108: 0x100400,
		      0x118: 0x2000401,
		      0x128: 0x2100001,
		      0x138: 0x1,
		      0x148: 0x2000000,
		      0x158: 0x100000,
		      0x168: 0x401,
		      0x178: 0x2100400,
		      0x188: 0x2000001,
		      0x198: 0x2100000,
		      0x1a8: 0x0,
		      0x1b8: 0x2100401,
		      0x1c8: 0x100401,
		      0x1d8: 0x400,
		      0x1e8: 0x2000400,
		      0x1f8: 0x100001
		    }, {
		      0x0: 0x8000820,
		      0x1: 0x20000,
		      0x2: 0x8000000,
		      0x3: 0x20,
		      0x4: 0x20020,
		      0x5: 0x8020820,
		      0x6: 0x8020800,
		      0x7: 0x800,
		      0x8: 0x8020000,
		      0x9: 0x8000800,
		      0xa: 0x20800,
		      0xb: 0x8020020,
		      0xc: 0x820,
		      0xd: 0x0,
		      0xe: 0x8000020,
		      0xf: 0x20820,
		      0x80000000: 0x800,
		      0x80000001: 0x8020820,
		      0x80000002: 0x8000820,
		      0x80000003: 0x8000000,
		      0x80000004: 0x8020000,
		      0x80000005: 0x20800,
		      0x80000006: 0x20820,
		      0x80000007: 0x20,
		      0x80000008: 0x8000020,
		      0x80000009: 0x820,
		      0x8000000a: 0x20020,
		      0x8000000b: 0x8020800,
		      0x8000000c: 0x0,
		      0x8000000d: 0x8020020,
		      0x8000000e: 0x8000800,
		      0x8000000f: 0x20000,
		      0x10: 0x20820,
		      0x11: 0x8020800,
		      0x12: 0x20,
		      0x13: 0x800,
		      0x14: 0x8000800,
		      0x15: 0x8000020,
		      0x16: 0x8020020,
		      0x17: 0x20000,
		      0x18: 0x0,
		      0x19: 0x20020,
		      0x1a: 0x8020000,
		      0x1b: 0x8000820,
		      0x1c: 0x8020820,
		      0x1d: 0x20800,
		      0x1e: 0x820,
		      0x1f: 0x8000000,
		      0x80000010: 0x20000,
		      0x80000011: 0x800,
		      0x80000012: 0x8020020,
		      0x80000013: 0x20820,
		      0x80000014: 0x20,
		      0x80000015: 0x8020000,
		      0x80000016: 0x8000000,
		      0x80000017: 0x8000820,
		      0x80000018: 0x8020820,
		      0x80000019: 0x8000020,
		      0x8000001a: 0x8000800,
		      0x8000001b: 0x0,
		      0x8000001c: 0x20800,
		      0x8000001d: 0x820,
		      0x8000001e: 0x20020,
		      0x8000001f: 0x8020800
		    }];

		    // Masks that select the SBOX input
		    var SBOX_MASK = [0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000, 0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];

		    /**
		     * DES block cipher algorithm.
		     */
		    var DES = C_algo.DES = BlockCipher.extend({
		      _doReset: function () {
		        // Shortcuts
		        var key = this._key;
		        var keyWords = key.words;

		        // Select 56 bits according to PC1
		        var keyBits = [];
		        for (var i = 0; i < 56; i++) {
		          var keyBitPos = PC1[i] - 1;
		          keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
		        }

		        // Assemble 16 subkeys
		        var subKeys = this._subKeys = [];
		        for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
		          // Create subkey
		          var subKey = subKeys[nSubKey] = [];

		          // Shortcut
		          var bitShift = BIT_SHIFTS[nSubKey];

		          // Select 48 bits according to PC2
		          for (var i = 0; i < 24; i++) {
		            // Select from the left 28 key bits
		            subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;

		            // Select from the right 28 key bits
		            subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
		          }

		          // Since each subkey is applied to an expanded 32-bit input,
		          // the subkey can be broken into 8 values scaled to 32-bits,
		          // which allows the key to be used without expansion
		          subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
		          for (var i = 1; i < 7; i++) {
		            subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
		          }
		          subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
		        }

		        // Compute inverse subkeys
		        var invSubKeys = this._invSubKeys = [];
		        for (var i = 0; i < 16; i++) {
		          invSubKeys[i] = subKeys[15 - i];
		        }
		      },
		      encryptBlock: function (M, offset) {
		        this._doCryptBlock(M, offset, this._subKeys);
		      },
		      decryptBlock: function (M, offset) {
		        this._doCryptBlock(M, offset, this._invSubKeys);
		      },
		      _doCryptBlock: function (M, offset, subKeys) {
		        // Get input
		        this._lBlock = M[offset];
		        this._rBlock = M[offset + 1];

		        // Initial permutation
		        exchangeLR.call(this, 4, 0x0f0f0f0f);
		        exchangeLR.call(this, 16, 0x0000ffff);
		        exchangeRL.call(this, 2, 0x33333333);
		        exchangeRL.call(this, 8, 0x00ff00ff);
		        exchangeLR.call(this, 1, 0x55555555);

		        // Rounds
		        for (var round = 0; round < 16; round++) {
		          // Shortcuts
		          var subKey = subKeys[round];
		          var lBlock = this._lBlock;
		          var rBlock = this._rBlock;

		          // Feistel function
		          var f = 0;
		          for (var i = 0; i < 8; i++) {
		            f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
		          }
		          this._lBlock = rBlock;
		          this._rBlock = lBlock ^ f;
		        }

		        // Undo swap from last round
		        var t = this._lBlock;
		        this._lBlock = this._rBlock;
		        this._rBlock = t;

		        // Final permutation
		        exchangeLR.call(this, 1, 0x55555555);
		        exchangeRL.call(this, 8, 0x00ff00ff);
		        exchangeRL.call(this, 2, 0x33333333);
		        exchangeLR.call(this, 16, 0x0000ffff);
		        exchangeLR.call(this, 4, 0x0f0f0f0f);

		        // Set output
		        M[offset] = this._lBlock;
		        M[offset + 1] = this._rBlock;
		      },
		      keySize: 64 / 32,
		      ivSize: 64 / 32,
		      blockSize: 64 / 32
		    });

		    // Swap bits across the left and right words
		    function exchangeLR(offset, mask) {
		      var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
		      this._rBlock ^= t;
		      this._lBlock ^= t << offset;
		    }
		    function exchangeRL(offset, mask) {
		      var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
		      this._lBlock ^= t;
		      this._rBlock ^= t << offset;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
		     */
		    C.DES = BlockCipher._createHelper(DES);

		    /**
		     * Triple-DES block cipher algorithm.
		     */
		    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
		      _doReset: function () {
		        // Shortcuts
		        var key = this._key;
		        var keyWords = key.words;
		        // Make sure the key length is valid (64, 128 or >= 192 bit)
		        if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
		          throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');
		        }

		        // Extend the key according to the keying options defined in 3DES standard
		        var key1 = keyWords.slice(0, 2);
		        var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
		        var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);

		        // Create DES instances
		        this._des1 = DES.createEncryptor(WordArray.create(key1));
		        this._des2 = DES.createEncryptor(WordArray.create(key2));
		        this._des3 = DES.createEncryptor(WordArray.create(key3));
		      },
		      encryptBlock: function (M, offset) {
		        this._des1.encryptBlock(M, offset);
		        this._des2.decryptBlock(M, offset);
		        this._des3.encryptBlock(M, offset);
		      },
		      decryptBlock: function (M, offset) {
		        this._des3.decryptBlock(M, offset);
		        this._des2.encryptBlock(M, offset);
		        this._des1.decryptBlock(M, offset);
		      },
		      keySize: 192 / 32,
		      ivSize: 64 / 32,
		      blockSize: 64 / 32
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
		     */
		    C.TripleDES = BlockCipher._createHelper(TripleDES);
		  })();
		  return CryptoJS.TripleDES;
		}); 
	} (tripledes));
	return tripledes.exports;
}

var rc4 = {exports: {}};

var hasRequiredRc4;

function requireRc4 () {
	if (hasRequiredRc4) return rc4.exports;
	hasRequiredRc4 = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    /**
		     * RC4 stream cipher algorithm.
		     */
		    var RC4 = C_algo.RC4 = StreamCipher.extend({
		      _doReset: function () {
		        // Shortcuts
		        var key = this._key;
		        var keyWords = key.words;
		        var keySigBytes = key.sigBytes;

		        // Init sbox
		        var S = this._S = [];
		        for (var i = 0; i < 256; i++) {
		          S[i] = i;
		        }

		        // Key setup
		        for (var i = 0, j = 0; i < 256; i++) {
		          var keyByteIndex = i % keySigBytes;
		          var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;
		          j = (j + S[i] + keyByte) % 256;

		          // Swap
		          var t = S[i];
		          S[i] = S[j];
		          S[j] = t;
		        }

		        // Counters
		        this._i = this._j = 0;
		      },
		      _doProcessBlock: function (M, offset) {
		        M[offset] ^= generateKeystreamWord.call(this);
		      },
		      keySize: 256 / 32,
		      ivSize: 0
		    });
		    function generateKeystreamWord() {
		      // Shortcuts
		      var S = this._S;
		      var i = this._i;
		      var j = this._j;

		      // Generate keystream word
		      var keystreamWord = 0;
		      for (var n = 0; n < 4; n++) {
		        i = (i + 1) % 256;
		        j = (j + S[i]) % 256;

		        // Swap
		        var t = S[i];
		        S[i] = S[j];
		        S[j] = t;
		        keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
		      }

		      // Update counters
		      this._i = i;
		      this._j = j;
		      return keystreamWord;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
		     */
		    C.RC4 = StreamCipher._createHelper(RC4);

		    /**
		     * Modified RC4 stream cipher algorithm.
		     */
		    var RC4Drop = C_algo.RC4Drop = RC4.extend({
		      /**
		       * Configuration options.
		       *
		       * @property {number} drop The number of keystream words to drop. Default 192
		       */
		      cfg: RC4.cfg.extend({
		        drop: 192
		      }),
		      _doReset: function () {
		        RC4._doReset.call(this);

		        // Drop
		        for (var i = this.cfg.drop; i > 0; i--) {
		          generateKeystreamWord.call(this);
		        }
		      }
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
		     */
		    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
		  })();
		  return CryptoJS.RC4;
		}); 
	} (rc4));
	return rc4.exports;
}

var rabbit = {exports: {}};

var hasRequiredRabbit;

function requireRabbit () {
	if (hasRequiredRabbit) return rabbit.exports;
	hasRequiredRabbit = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    // Reusable objects
		    var S = [];
		    var C_ = [];
		    var G = [];

		    /**
		     * Rabbit stream cipher algorithm
		     */
		    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
		      _doReset: function () {
		        // Shortcuts
		        var K = this._key.words;
		        var iv = this.cfg.iv;

		        // Swap endian
		        for (var i = 0; i < 4; i++) {
		          K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff | (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;
		        }

		        // Generate initial state values
		        var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];

		        // Generate initial counter values
		        var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];

		        // Carry bit
		        this._b = 0;

		        // Iterate the system four times
		        for (var i = 0; i < 4; i++) {
		          nextState.call(this);
		        }

		        // Modify the counters
		        for (var i = 0; i < 8; i++) {
		          C[i] ^= X[i + 4 & 7];
		        }

		        // IV setup
		        if (iv) {
		          // Shortcuts
		          var IV = iv.words;
		          var IV_0 = IV[0];
		          var IV_1 = IV[1];

		          // Generate four subvectors
		          var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
		          var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
		          var i1 = i0 >>> 16 | i2 & 0xffff0000;
		          var i3 = i2 << 16 | i0 & 0x0000ffff;

		          // Modify counter values
		          C[0] ^= i0;
		          C[1] ^= i1;
		          C[2] ^= i2;
		          C[3] ^= i3;
		          C[4] ^= i0;
		          C[5] ^= i1;
		          C[6] ^= i2;
		          C[7] ^= i3;

		          // Iterate the system four times
		          for (var i = 0; i < 4; i++) {
		            nextState.call(this);
		          }
		        }
		      },
		      _doProcessBlock: function (M, offset) {
		        // Shortcut
		        var X = this._X;

		        // Iterate the system
		        nextState.call(this);

		        // Generate four keystream words
		        S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
		        S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
		        S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
		        S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
		        for (var i = 0; i < 4; i++) {
		          // Swap endian
		          S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;

		          // Encrypt
		          M[offset + i] ^= S[i];
		        }
		      },
		      blockSize: 128 / 32,
		      ivSize: 64 / 32
		    });
		    function nextState() {
		      // Shortcuts
		      var X = this._X;
		      var C = this._C;

		      // Save old counter values
		      for (var i = 0; i < 8; i++) {
		        C_[i] = C[i];
		      }

		      // Calculate new counter values
		      C[0] = C[0] + 0x4d34d34d + this._b | 0;
		      C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
		      C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
		      C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
		      C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
		      C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
		      C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
		      C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
		      this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;

		      // Calculate the g-values
		      for (var i = 0; i < 8; i++) {
		        var gx = X[i] + C[i];

		        // Construct high and low argument for squaring
		        var ga = gx & 0xffff;
		        var gb = gx >>> 16;

		        // Calculate high and low result of squaring
		        var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
		        var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);

		        // High XOR low
		        G[i] = gh ^ gl;
		      }

		      // Calculate new state values
		      X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
		      X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
		      X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
		      X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
		      X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
		      X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
		      X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
		      X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
		     */
		    C.Rabbit = StreamCipher._createHelper(Rabbit);
		  })();
		  return CryptoJS.Rabbit;
		}); 
	} (rabbit));
	return rabbit.exports;
}

var rabbitLegacy = {exports: {}};

var hasRequiredRabbitLegacy;

function requireRabbitLegacy () {
	if (hasRequiredRabbitLegacy) return rabbitLegacy.exports;
	hasRequiredRabbitLegacy = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    // Reusable objects
		    var S = [];
		    var C_ = [];
		    var G = [];

		    /**
		     * Rabbit stream cipher algorithm.
		     *
		     * This is a legacy version that neglected to convert the key to little-endian.
		     * This error doesn't affect the cipher's security,
		     * but it does affect its compatibility with other implementations.
		     */
		    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
		      _doReset: function () {
		        // Shortcuts
		        var K = this._key.words;
		        var iv = this.cfg.iv;

		        // Generate initial state values
		        var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];

		        // Generate initial counter values
		        var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];

		        // Carry bit
		        this._b = 0;

		        // Iterate the system four times
		        for (var i = 0; i < 4; i++) {
		          nextState.call(this);
		        }

		        // Modify the counters
		        for (var i = 0; i < 8; i++) {
		          C[i] ^= X[i + 4 & 7];
		        }

		        // IV setup
		        if (iv) {
		          // Shortcuts
		          var IV = iv.words;
		          var IV_0 = IV[0];
		          var IV_1 = IV[1];

		          // Generate four subvectors
		          var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
		          var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
		          var i1 = i0 >>> 16 | i2 & 0xffff0000;
		          var i3 = i2 << 16 | i0 & 0x0000ffff;

		          // Modify counter values
		          C[0] ^= i0;
		          C[1] ^= i1;
		          C[2] ^= i2;
		          C[3] ^= i3;
		          C[4] ^= i0;
		          C[5] ^= i1;
		          C[6] ^= i2;
		          C[7] ^= i3;

		          // Iterate the system four times
		          for (var i = 0; i < 4; i++) {
		            nextState.call(this);
		          }
		        }
		      },
		      _doProcessBlock: function (M, offset) {
		        // Shortcut
		        var X = this._X;

		        // Iterate the system
		        nextState.call(this);

		        // Generate four keystream words
		        S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
		        S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
		        S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
		        S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
		        for (var i = 0; i < 4; i++) {
		          // Swap endian
		          S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;

		          // Encrypt
		          M[offset + i] ^= S[i];
		        }
		      },
		      blockSize: 128 / 32,
		      ivSize: 64 / 32
		    });
		    function nextState() {
		      // Shortcuts
		      var X = this._X;
		      var C = this._C;

		      // Save old counter values
		      for (var i = 0; i < 8; i++) {
		        C_[i] = C[i];
		      }

		      // Calculate new counter values
		      C[0] = C[0] + 0x4d34d34d + this._b | 0;
		      C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
		      C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
		      C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
		      C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
		      C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
		      C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
		      C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
		      this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;

		      // Calculate the g-values
		      for (var i = 0; i < 8; i++) {
		        var gx = X[i] + C[i];

		        // Construct high and low argument for squaring
		        var ga = gx & 0xffff;
		        var gb = gx >>> 16;

		        // Calculate high and low result of squaring
		        var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
		        var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);

		        // High XOR low
		        G[i] = gh ^ gl;
		      }

		      // Calculate new state values
		      X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
		      X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
		      X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
		      X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
		      X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
		      X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
		      X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
		      X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
		     */
		    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
		  })();
		  return CryptoJS.RabbitLegacy;
		}); 
	} (rabbitLegacy));
	return rabbitLegacy.exports;
}

var blowfish = {exports: {}};

var hasRequiredBlowfish;

function requireBlowfish () {
	if (hasRequiredBlowfish) return blowfish.exports;
	hasRequiredBlowfish = 1;
	(function (module, exports) {
		(function (root, factory, undef) {
		  {
		    // CommonJS
		    module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
		  }
		})(commonjsGlobal, function (CryptoJS) {
		  (function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var BlockCipher = C_lib.BlockCipher;
		    var C_algo = C.algo;
		    const N = 16;

		    //Origin pbox and sbox, derived from PI
		    const ORIG_P = [0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344, 0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89, 0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C, 0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917, 0x9216D5D9, 0x8979FB1B];
		    const ORIG_S = [[0xD1310BA6, 0x98DFB5AC, 0x2FFD72DB, 0xD01ADFB7, 0xB8E1AFED, 0x6A267E96, 0xBA7C9045, 0xF12C7F99, 0x24A19947, 0xB3916CF7, 0x0801F2E2, 0x858EFC16, 0x636920D8, 0x71574E69, 0xA458FEA3, 0xF4933D7E, 0x0D95748F, 0x728EB658, 0x718BCD58, 0x82154AEE, 0x7B54A41D, 0xC25A59B5, 0x9C30D539, 0x2AF26013, 0xC5D1B023, 0x286085F0, 0xCA417918, 0xB8DB38EF, 0x8E79DCB0, 0x603A180E, 0x6C9E0E8B, 0xB01E8A3E, 0xD71577C1, 0xBD314B27, 0x78AF2FDA, 0x55605C60, 0xE65525F3, 0xAA55AB94, 0x57489862, 0x63E81440, 0x55CA396A, 0x2AAB10B6, 0xB4CC5C34, 0x1141E8CE, 0xA15486AF, 0x7C72E993, 0xB3EE1411, 0x636FBC2A, 0x2BA9C55D, 0x741831F6, 0xCE5C3E16, 0x9B87931E, 0xAFD6BA33, 0x6C24CF5C, 0x7A325381, 0x28958677, 0x3B8F4898, 0x6B4BB9AF, 0xC4BFE81B, 0x66282193, 0x61D809CC, 0xFB21A991, 0x487CAC60, 0x5DEC8032, 0xEF845D5D, 0xE98575B1, 0xDC262302, 0xEB651B88, 0x23893E81, 0xD396ACC5, 0x0F6D6FF3, 0x83F44239, 0x2E0B4482, 0xA4842004, 0x69C8F04A, 0x9E1F9B5E, 0x21C66842, 0xF6E96C9A, 0x670C9C61, 0xABD388F0, 0x6A51A0D2, 0xD8542F68, 0x960FA728, 0xAB5133A3, 0x6EEF0B6C, 0x137A3BE4, 0xBA3BF050, 0x7EFB2A98, 0xA1F1651D, 0x39AF0176, 0x66CA593E, 0x82430E88, 0x8CEE8619, 0x456F9FB4, 0x7D84A5C3, 0x3B8B5EBE, 0xE06F75D8, 0x85C12073, 0x401A449F, 0x56C16AA6, 0x4ED3AA62, 0x363F7706, 0x1BFEDF72, 0x429B023D, 0x37D0D724, 0xD00A1248, 0xDB0FEAD3, 0x49F1C09B, 0x075372C9, 0x80991B7B, 0x25D479D8, 0xF6E8DEF7, 0xE3FE501A, 0xB6794C3B, 0x976CE0BD, 0x04C006BA, 0xC1A94FB6, 0x409F60C4, 0x5E5C9EC2, 0x196A2463, 0x68FB6FAF, 0x3E6C53B5, 0x1339B2EB, 0x3B52EC6F, 0x6DFC511F, 0x9B30952C, 0xCC814544, 0xAF5EBD09, 0xBEE3D004, 0xDE334AFD, 0x660F2807, 0x192E4BB3, 0xC0CBA857, 0x45C8740F, 0xD20B5F39, 0xB9D3FBDB, 0x5579C0BD, 0x1A60320A, 0xD6A100C6, 0x402C7279, 0x679F25FE, 0xFB1FA3CC, 0x8EA5E9F8, 0xDB3222F8, 0x3C7516DF, 0xFD616B15, 0x2F501EC8, 0xAD0552AB, 0x323DB5FA, 0xFD238760, 0x53317B48, 0x3E00DF82, 0x9E5C57BB, 0xCA6F8CA0, 0x1A87562E, 0xDF1769DB, 0xD542A8F6, 0x287EFFC3, 0xAC6732C6, 0x8C4F5573, 0x695B27B0, 0xBBCA58C8, 0xE1FFA35D, 0xB8F011A0, 0x10FA3D98, 0xFD2183B8, 0x4AFCB56C, 0x2DD1D35B, 0x9A53E479, 0xB6F84565, 0xD28E49BC, 0x4BFB9790, 0xE1DDF2DA, 0xA4CB7E33, 0x62FB1341, 0xCEE4C6E8, 0xEF20CADA, 0x36774C01, 0xD07E9EFE, 0x2BF11FB4, 0x95DBDA4D, 0xAE909198, 0xEAAD8E71, 0x6B93D5A0, 0xD08ED1D0, 0xAFC725E0, 0x8E3C5B2F, 0x8E7594B7, 0x8FF6E2FB, 0xF2122B64, 0x8888B812, 0x900DF01C, 0x4FAD5EA0, 0x688FC31C, 0xD1CFF191, 0xB3A8C1AD, 0x2F2F2218, 0xBE0E1777, 0xEA752DFE, 0x8B021FA1, 0xE5A0CC0F, 0xB56F74E8, 0x18ACF3D6, 0xCE89E299, 0xB4A84FE0, 0xFD13E0B7, 0x7CC43B81, 0xD2ADA8D9, 0x165FA266, 0x80957705, 0x93CC7314, 0x211A1477, 0xE6AD2065, 0x77B5FA86, 0xC75442F5, 0xFB9D35CF, 0xEBCDAF0C, 0x7B3E89A0, 0xD6411BD3, 0xAE1E7E49, 0x00250E2D, 0x2071B35E, 0x226800BB, 0x57B8E0AF, 0x2464369B, 0xF009B91E, 0x5563911D, 0x59DFA6AA, 0x78C14389, 0xD95A537F, 0x207D5BA2, 0x02E5B9C5, 0x83260376, 0x6295CFA9, 0x11C81968, 0x4E734A41, 0xB3472DCA, 0x7B14A94A, 0x1B510052, 0x9A532915, 0xD60F573F, 0xBC9BC6E4, 0x2B60A476, 0x81E67400, 0x08BA6FB5, 0x571BE91F, 0xF296EC6B, 0x2A0DD915, 0xB6636521, 0xE7B9F9B6, 0xFF34052E, 0xC5855664, 0x53B02D5D, 0xA99F8FA1, 0x08BA4799, 0x6E85076A], [0x4B7A70E9, 0xB5B32944, 0xDB75092E, 0xC4192623, 0xAD6EA6B0, 0x49A7DF7D, 0x9CEE60B8, 0x8FEDB266, 0xECAA8C71, 0x699A17FF, 0x5664526C, 0xC2B19EE1, 0x193602A5, 0x75094C29, 0xA0591340, 0xE4183A3E, 0x3F54989A, 0x5B429D65, 0x6B8FE4D6, 0x99F73FD6, 0xA1D29C07, 0xEFE830F5, 0x4D2D38E6, 0xF0255DC1, 0x4CDD2086, 0x8470EB26, 0x6382E9C6, 0x021ECC5E, 0x09686B3F, 0x3EBAEFC9, 0x3C971814, 0x6B6A70A1, 0x687F3584, 0x52A0E286, 0xB79C5305, 0xAA500737, 0x3E07841C, 0x7FDEAE5C, 0x8E7D44EC, 0x5716F2B8, 0xB03ADA37, 0xF0500C0D, 0xF01C1F04, 0x0200B3FF, 0xAE0CF51A, 0x3CB574B2, 0x25837A58, 0xDC0921BD, 0xD19113F9, 0x7CA92FF6, 0x94324773, 0x22F54701, 0x3AE5E581, 0x37C2DADC, 0xC8B57634, 0x9AF3DDA7, 0xA9446146, 0x0FD0030E, 0xECC8C73E, 0xA4751E41, 0xE238CD99, 0x3BEA0E2F, 0x3280BBA1, 0x183EB331, 0x4E548B38, 0x4F6DB908, 0x6F420D03, 0xF60A04BF, 0x2CB81290, 0x24977C79, 0x5679B072, 0xBCAF89AF, 0xDE9A771F, 0xD9930810, 0xB38BAE12, 0xDCCF3F2E, 0x5512721F, 0x2E6B7124, 0x501ADDE6, 0x9F84CD87, 0x7A584718, 0x7408DA17, 0xBC9F9ABC, 0xE94B7D8C, 0xEC7AEC3A, 0xDB851DFA, 0x63094366, 0xC464C3D2, 0xEF1C1847, 0x3215D908, 0xDD433B37, 0x24C2BA16, 0x12A14D43, 0x2A65C451, 0x50940002, 0x133AE4DD, 0x71DFF89E, 0x10314E55, 0x81AC77D6, 0x5F11199B, 0x043556F1, 0xD7A3C76B, 0x3C11183B, 0x5924A509, 0xF28FE6ED, 0x97F1FBFA, 0x9EBABF2C, 0x1E153C6E, 0x86E34570, 0xEAE96FB1, 0x860E5E0A, 0x5A3E2AB3, 0x771FE71C, 0x4E3D06FA, 0x2965DCB9, 0x99E71D0F, 0x803E89D6, 0x5266C825, 0x2E4CC978, 0x9C10B36A, 0xC6150EBA, 0x94E2EA78, 0xA5FC3C53, 0x1E0A2DF4, 0xF2F74EA7, 0x361D2B3D, 0x1939260F, 0x19C27960, 0x5223A708, 0xF71312B6, 0xEBADFE6E, 0xEAC31F66, 0xE3BC4595, 0xA67BC883, 0xB17F37D1, 0x018CFF28, 0xC332DDEF, 0xBE6C5AA5, 0x65582185, 0x68AB9802, 0xEECEA50F, 0xDB2F953B, 0x2AEF7DAD, 0x5B6E2F84, 0x1521B628, 0x29076170, 0xECDD4775, 0x619F1510, 0x13CCA830, 0xEB61BD96, 0x0334FE1E, 0xAA0363CF, 0xB5735C90, 0x4C70A239, 0xD59E9E0B, 0xCBAADE14, 0xEECC86BC, 0x60622CA7, 0x9CAB5CAB, 0xB2F3846E, 0x648B1EAF, 0x19BDF0CA, 0xA02369B9, 0x655ABB50, 0x40685A32, 0x3C2AB4B3, 0x319EE9D5, 0xC021B8F7, 0x9B540B19, 0x875FA099, 0x95F7997E, 0x623D7DA8, 0xF837889A, 0x97E32D77, 0x11ED935F, 0x16681281, 0x0E358829, 0xC7E61FD6, 0x96DEDFA1, 0x7858BA99, 0x57F584A5, 0x1B227263, 0x9B83C3FF, 0x1AC24696, 0xCDB30AEB, 0x532E3054, 0x8FD948E4, 0x6DBC3128, 0x58EBF2EF, 0x34C6FFEA, 0xFE28ED61, 0xEE7C3C73, 0x5D4A14D9, 0xE864B7E3, 0x42105D14, 0x203E13E0, 0x45EEE2B6, 0xA3AAABEA, 0xDB6C4F15, 0xFACB4FD0, 0xC742F442, 0xEF6ABBB5, 0x654F3B1D, 0x41CD2105, 0xD81E799E, 0x86854DC7, 0xE44B476A, 0x3D816250, 0xCF62A1F2, 0x5B8D2646, 0xFC8883A0, 0xC1C7B6A3, 0x7F1524C3, 0x69CB7492, 0x47848A0B, 0x5692B285, 0x095BBF00, 0xAD19489D, 0x1462B174, 0x23820E00, 0x58428D2A, 0x0C55F5EA, 0x1DADF43E, 0x233F7061, 0x3372F092, 0x8D937E41, 0xD65FECF1, 0x6C223BDB, 0x7CDE3759, 0xCBEE7460, 0x4085F2A7, 0xCE77326E, 0xA6078084, 0x19F8509E, 0xE8EFD855, 0x61D99735, 0xA969A7AA, 0xC50C06C2, 0x5A04ABFC, 0x800BCADC, 0x9E447A2E, 0xC3453484, 0xFDD56705, 0x0E1E9EC9, 0xDB73DBD3, 0x105588CD, 0x675FDA79, 0xE3674340, 0xC5C43465, 0x713E38D8, 0x3D28F89E, 0xF16DFF20, 0x153E21E7, 0x8FB03D4A, 0xE6E39F2B, 0xDB83ADF7], [0xE93D5A68, 0x948140F7, 0xF64C261C, 0x94692934, 0x411520F7, 0x7602D4F7, 0xBCF46B2E, 0xD4A20068, 0xD4082471, 0x3320F46A, 0x43B7D4B7, 0x500061AF, 0x1E39F62E, 0x97244546, 0x14214F74, 0xBF8B8840, 0x4D95FC1D, 0x96B591AF, 0x70F4DDD3, 0x66A02F45, 0xBFBC09EC, 0x03BD9785, 0x7FAC6DD0, 0x31CB8504, 0x96EB27B3, 0x55FD3941, 0xDA2547E6, 0xABCA0A9A, 0x28507825, 0x530429F4, 0x0A2C86DA, 0xE9B66DFB, 0x68DC1462, 0xD7486900, 0x680EC0A4, 0x27A18DEE, 0x4F3FFEA2, 0xE887AD8C, 0xB58CE006, 0x7AF4D6B6, 0xAACE1E7C, 0xD3375FEC, 0xCE78A399, 0x406B2A42, 0x20FE9E35, 0xD9F385B9, 0xEE39D7AB, 0x3B124E8B, 0x1DC9FAF7, 0x4B6D1856, 0x26A36631, 0xEAE397B2, 0x3A6EFA74, 0xDD5B4332, 0x6841E7F7, 0xCA7820FB, 0xFB0AF54E, 0xD8FEB397, 0x454056AC, 0xBA489527, 0x55533A3A, 0x20838D87, 0xFE6BA9B7, 0xD096954B, 0x55A867BC, 0xA1159A58, 0xCCA92963, 0x99E1DB33, 0xA62A4A56, 0x3F3125F9, 0x5EF47E1C, 0x9029317C, 0xFDF8E802, 0x04272F70, 0x80BB155C, 0x05282CE3, 0x95C11548, 0xE4C66D22, 0x48C1133F, 0xC70F86DC, 0x07F9C9EE, 0x41041F0F, 0x404779A4, 0x5D886E17, 0x325F51EB, 0xD59BC0D1, 0xF2BCC18F, 0x41113564, 0x257B7834, 0x602A9C60, 0xDFF8E8A3, 0x1F636C1B, 0x0E12B4C2, 0x02E1329E, 0xAF664FD1, 0xCAD18115, 0x6B2395E0, 0x333E92E1, 0x3B240B62, 0xEEBEB922, 0x85B2A20E, 0xE6BA0D99, 0xDE720C8C, 0x2DA2F728, 0xD0127845, 0x95B794FD, 0x647D0862, 0xE7CCF5F0, 0x5449A36F, 0x877D48FA, 0xC39DFD27, 0xF33E8D1E, 0x0A476341, 0x992EFF74, 0x3A6F6EAB, 0xF4F8FD37, 0xA812DC60, 0xA1EBDDF8, 0x991BE14C, 0xDB6E6B0D, 0xC67B5510, 0x6D672C37, 0x2765D43B, 0xDCD0E804, 0xF1290DC7, 0xCC00FFA3, 0xB5390F92, 0x690FED0B, 0x667B9FFB, 0xCEDB7D9C, 0xA091CF0B, 0xD9155EA3, 0xBB132F88, 0x515BAD24, 0x7B9479BF, 0x763BD6EB, 0x37392EB3, 0xCC115979, 0x8026E297, 0xF42E312D, 0x6842ADA7, 0xC66A2B3B, 0x12754CCC, 0x782EF11C, 0x6A124237, 0xB79251E7, 0x06A1BBE6, 0x4BFB6350, 0x1A6B1018, 0x11CAEDFA, 0x3D25BDD8, 0xE2E1C3C9, 0x44421659, 0x0A121386, 0xD90CEC6E, 0xD5ABEA2A, 0x64AF674E, 0xDA86A85F, 0xBEBFE988, 0x64E4C3FE, 0x9DBC8057, 0xF0F7C086, 0x60787BF8, 0x6003604D, 0xD1FD8346, 0xF6381FB0, 0x7745AE04, 0xD736FCCC, 0x83426B33, 0xF01EAB71, 0xB0804187, 0x3C005E5F, 0x77A057BE, 0xBDE8AE24, 0x55464299, 0xBF582E61, 0x4E58F48F, 0xF2DDFDA2, 0xF474EF38, 0x8789BDC2, 0x5366F9C3, 0xC8B38E74, 0xB475F255, 0x46FCD9B9, 0x7AEB2661, 0x8B1DDF84, 0x846A0E79, 0x915F95E2, 0x466E598E, 0x20B45770, 0x8CD55591, 0xC902DE4C, 0xB90BACE1, 0xBB8205D0, 0x11A86248, 0x7574A99E, 0xB77F19B6, 0xE0A9DC09, 0x662D09A1, 0xC4324633, 0xE85A1F02, 0x09F0BE8C, 0x4A99A025, 0x1D6EFE10, 0x1AB93D1D, 0x0BA5A4DF, 0xA186F20F, 0x2868F169, 0xDCB7DA83, 0x573906FE, 0xA1E2CE9B, 0x4FCD7F52, 0x50115E01, 0xA70683FA, 0xA002B5C4, 0x0DE6D027, 0x9AF88C27, 0x773F8641, 0xC3604C06, 0x61A806B5, 0xF0177A28, 0xC0F586E0, 0x006058AA, 0x30DC7D62, 0x11E69ED7, 0x2338EA63, 0x53C2DD94, 0xC2C21634, 0xBBCBEE56, 0x90BCB6DE, 0xEBFC7DA1, 0xCE591D76, 0x6F05E409, 0x4B7C0188, 0x39720A3D, 0x7C927C24, 0x86E3725F, 0x724D9DB9, 0x1AC15BB4, 0xD39EB8FC, 0xED545578, 0x08FCA5B5, 0xD83D7CD3, 0x4DAD0FC4, 0x1E50EF5E, 0xB161E6F8, 0xA28514D9, 0x6C51133C, 0x6FD5C7E7, 0x56E14EC4, 0x362ABFCE, 0xDDC6C837, 0xD79A3234, 0x92638212, 0x670EFA8E, 0x406000E0], [0x3A39CE37, 0xD3FAF5CF, 0xABC27737, 0x5AC52D1B, 0x5CB0679E, 0x4FA33742, 0xD3822740, 0x99BC9BBE, 0xD5118E9D, 0xBF0F7315, 0xD62D1C7E, 0xC700C47B, 0xB78C1B6B, 0x21A19045, 0xB26EB1BE, 0x6A366EB4, 0x5748AB2F, 0xBC946E79, 0xC6A376D2, 0x6549C2C8, 0x530FF8EE, 0x468DDE7D, 0xD5730A1D, 0x4CD04DC6, 0x2939BBDB, 0xA9BA4650, 0xAC9526E8, 0xBE5EE304, 0xA1FAD5F0, 0x6A2D519A, 0x63EF8CE2, 0x9A86EE22, 0xC089C2B8, 0x43242EF6, 0xA51E03AA, 0x9CF2D0A4, 0x83C061BA, 0x9BE96A4D, 0x8FE51550, 0xBA645BD6, 0x2826A2F9, 0xA73A3AE1, 0x4BA99586, 0xEF5562E9, 0xC72FEFD3, 0xF752F7DA, 0x3F046F69, 0x77FA0A59, 0x80E4A915, 0x87B08601, 0x9B09E6AD, 0x3B3EE593, 0xE990FD5A, 0x9E34D797, 0x2CF0B7D9, 0x022B8B51, 0x96D5AC3A, 0x017DA67D, 0xD1CF3ED6, 0x7C7D2D28, 0x1F9F25CF, 0xADF2B89B, 0x5AD6B472, 0x5A88F54C, 0xE029AC71, 0xE019A5E6, 0x47B0ACFD, 0xED93FA9B, 0xE8D3C48D, 0x283B57CC, 0xF8D56629, 0x79132E28, 0x785F0191, 0xED756055, 0xF7960E44, 0xE3D35E8C, 0x15056DD4, 0x88F46DBA, 0x03A16125, 0x0564F0BD, 0xC3EB9E15, 0x3C9057A2, 0x97271AEC, 0xA93A072A, 0x1B3F6D9B, 0x1E6321F5, 0xF59C66FB, 0x26DCF319, 0x7533D928, 0xB155FDF5, 0x03563482, 0x8ABA3CBB, 0x28517711, 0xC20AD9F8, 0xABCC5167, 0xCCAD925F, 0x4DE81751, 0x3830DC8E, 0x379D5862, 0x9320F991, 0xEA7A90C2, 0xFB3E7BCE, 0x5121CE64, 0x774FBE32, 0xA8B6E37E, 0xC3293D46, 0x48DE5369, 0x6413E680, 0xA2AE0810, 0xDD6DB224, 0x69852DFD, 0x09072166, 0xB39A460A, 0x6445C0DD, 0x586CDECF, 0x1C20C8AE, 0x5BBEF7DD, 0x1B588D40, 0xCCD2017F, 0x6BB4E3BB, 0xDDA26A7E, 0x3A59FF45, 0x3E350A44, 0xBCB4CDD5, 0x72EACEA8, 0xFA6484BB, 0x8D6612AE, 0xBF3C6F47, 0xD29BE463, 0x542F5D9E, 0xAEC2771B, 0xF64E6370, 0x740E0D8D, 0xE75B1357, 0xF8721671, 0xAF537D5D, 0x4040CB08, 0x4EB4E2CC, 0x34D2466A, 0x0115AF84, 0xE1B00428, 0x95983A1D, 0x06B89FB4, 0xCE6EA048, 0x6F3F3B82, 0x3520AB82, 0x011A1D4B, 0x277227F8, 0x611560B1, 0xE7933FDC, 0xBB3A792B, 0x344525BD, 0xA08839E1, 0x51CE794B, 0x2F32C9B7, 0xA01FBAC9, 0xE01CC87E, 0xBCC7D1F6, 0xCF0111C3, 0xA1E8AAC7, 0x1A908749, 0xD44FBD9A, 0xD0DADECB, 0xD50ADA38, 0x0339C32A, 0xC6913667, 0x8DF9317C, 0xE0B12B4F, 0xF79E59B7, 0x43F5BB3A, 0xF2D519FF, 0x27D9459C, 0xBF97222C, 0x15E6FC2A, 0x0F91FC71, 0x9B941525, 0xFAE59361, 0xCEB69CEB, 0xC2A86459, 0x12BAA8D1, 0xB6C1075E, 0xE3056A0C, 0x10D25065, 0xCB03A442, 0xE0EC6E0E, 0x1698DB3B, 0x4C98A0BE, 0x3278E964, 0x9F1F9532, 0xE0D392DF, 0xD3A0342B, 0x8971F21E, 0x1B0A7441, 0x4BA3348C, 0xC5BE7120, 0xC37632D8, 0xDF359F8D, 0x9B992F2E, 0xE60B6F47, 0x0FE3F11D, 0xE54CDA54, 0x1EDAD891, 0xCE6279CF, 0xCD3E7E6F, 0x1618B166, 0xFD2C1D05, 0x848FD2C5, 0xF6FB2299, 0xF523F357, 0xA6327623, 0x93A83531, 0x56CCCD02, 0xACF08162, 0x5A75EBB5, 0x6E163697, 0x88D273CC, 0xDE966292, 0x81B949D0, 0x4C50901B, 0x71C65614, 0xE6C6C7BD, 0x327A140A, 0x45E1D006, 0xC3F27B9A, 0xC9AA53FD, 0x62A80F00, 0xBB25BFE2, 0x35BDD2F6, 0x71126905, 0xB2040222, 0xB6CBCF7C, 0xCD769C2B, 0x53113EC0, 0x1640E3D3, 0x38ABBD60, 0x2547ADF0, 0xBA38209C, 0xF746CE76, 0x77AFA1C5, 0x20756060, 0x85CBFE4E, 0x8AE88DD8, 0x7AAAF9B0, 0x4CF9AA7E, 0x1948C25C, 0x02FB8A8C, 0x01C36AE4, 0xD6EBE1F9, 0x90D4F869, 0xA65CDEA0, 0x3F09252D, 0xC208E69F, 0xB74E6132, 0xCE77E25B, 0x578FDFE3, 0x3AC372E6]];
		    var BLOWFISH_CTX = {
		      pbox: [],
		      sbox: []
		    };
		    function F(ctx, x) {
		      let a = x >> 24 & 0xFF;
		      let b = x >> 16 & 0xFF;
		      let c = x >> 8 & 0xFF;
		      let d = x & 0xFF;
		      let y = ctx.sbox[0][a] + ctx.sbox[1][b];
		      y = y ^ ctx.sbox[2][c];
		      y = y + ctx.sbox[3][d];
		      return y;
		    }
		    function BlowFish_Encrypt(ctx, left, right) {
		      let Xl = left;
		      let Xr = right;
		      let temp;
		      for (let i = 0; i < N; ++i) {
		        Xl = Xl ^ ctx.pbox[i];
		        Xr = F(ctx, Xl) ^ Xr;
		        temp = Xl;
		        Xl = Xr;
		        Xr = temp;
		      }
		      temp = Xl;
		      Xl = Xr;
		      Xr = temp;
		      Xr = Xr ^ ctx.pbox[N];
		      Xl = Xl ^ ctx.pbox[N + 1];
		      return {
		        left: Xl,
		        right: Xr
		      };
		    }
		    function BlowFish_Decrypt(ctx, left, right) {
		      let Xl = left;
		      let Xr = right;
		      let temp;
		      for (let i = N + 1; i > 1; --i) {
		        Xl = Xl ^ ctx.pbox[i];
		        Xr = F(ctx, Xl) ^ Xr;
		        temp = Xl;
		        Xl = Xr;
		        Xr = temp;
		      }
		      temp = Xl;
		      Xl = Xr;
		      Xr = temp;
		      Xr = Xr ^ ctx.pbox[1];
		      Xl = Xl ^ ctx.pbox[0];
		      return {
		        left: Xl,
		        right: Xr
		      };
		    }

		    /**
		     * Initialization ctx's pbox and sbox.
		     *
		     * @param {Object} ctx The object has pbox and sbox.
		     * @param {Array} key An array of 32-bit words.
		     * @param {int} keysize The length of the key.
		     *
		     * @example
		     *
		     *     BlowFishInit(BLOWFISH_CTX, key, 128/32);
		     */
		    function BlowFishInit(ctx, key, keysize) {
		      for (let Row = 0; Row < 4; Row++) {
		        ctx.sbox[Row] = [];
		        for (let Col = 0; Col < 256; Col++) {
		          ctx.sbox[Row][Col] = ORIG_S[Row][Col];
		        }
		      }
		      let keyIndex = 0;
		      for (let index = 0; index < N + 2; index++) {
		        ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
		        keyIndex++;
		        if (keyIndex >= keysize) {
		          keyIndex = 0;
		        }
		      }
		      let Data1 = 0;
		      let Data2 = 0;
		      let res = 0;
		      for (let i = 0; i < N + 2; i += 2) {
		        res = BlowFish_Encrypt(ctx, Data1, Data2);
		        Data1 = res.left;
		        Data2 = res.right;
		        ctx.pbox[i] = Data1;
		        ctx.pbox[i + 1] = Data2;
		      }
		      for (let i = 0; i < 4; i++) {
		        for (let j = 0; j < 256; j += 2) {
		          res = BlowFish_Encrypt(ctx, Data1, Data2);
		          Data1 = res.left;
		          Data2 = res.right;
		          ctx.sbox[i][j] = Data1;
		          ctx.sbox[i][j + 1] = Data2;
		        }
		      }
		      return true;
		    }

		    /**
		     * Blowfish block cipher algorithm.
		     */
		    var Blowfish = C_algo.Blowfish = BlockCipher.extend({
		      _doReset: function () {
		        // Skip reset of nRounds has been set before and key did not change
		        if (this._keyPriorReset === this._key) {
		          return;
		        }

		        // Shortcuts
		        var key = this._keyPriorReset = this._key;
		        var keyWords = key.words;
		        var keySize = key.sigBytes / 4;

		        //Initialization pbox and sbox
		        BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
		      },
		      encryptBlock: function (M, offset) {
		        var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
		        M[offset] = res.left;
		        M[offset + 1] = res.right;
		      },
		      decryptBlock: function (M, offset) {
		        var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
		        M[offset] = res.left;
		        M[offset + 1] = res.right;
		      },
		      blockSize: 64 / 32,
		      keySize: 128 / 32,
		      ivSize: 64 / 32
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.Blowfish.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.Blowfish.decrypt(ciphertext, key, cfg);
		     */
		    C.Blowfish = BlockCipher._createHelper(Blowfish);
		  })();
		  return CryptoJS.Blowfish;
		}); 
	} (blowfish));
	return blowfish.exports;
}

(function (module, exports) {
	(function (root, factory, undef) {
	  {
	    // CommonJS
	    module.exports = factory(requireCore(), requireX64Core(), requireLibTypedarrays(), requireEncUtf16(), requireEncBase64(), requireEncBase64url(), requireMd5(), requireSha1(), requireSha256(), requireSha224(), requireSha512(), requireSha384(), requireSha3(), requireRipemd160(), requireHmac(), requirePbkdf2(), requireEvpkdf(), requireCipherCore(), requireModeCfb(), requireModeCtr(), requireModeCtrGladman(), requireModeOfb(), requireModeEcb(), requirePadAnsix923(), requirePadIso10126(), requirePadIso97971(), requirePadZeropadding(), requirePadNopadding(), requireFormatHex(), requireAes(), requireTripledes(), requireRc4(), requireRabbit(), requireRabbitLegacy(), requireBlowfish());
	  }
	})(commonjsGlobal, function (CryptoJS) {
	  return CryptoJS;
	}); 
} (cryptoJs));

var cryptoJsExports = cryptoJs.exports;
var CryptoJS = /*@__PURE__*/getDefaultExportFromCjs$1(cryptoJsExports);

const secretPass = "XkhZG4fW2t2W";
function GetCookiesValue(key, isEncrypted = false) {
    try {
        if (!isEncrypted) {
            return api.get(key) ? api.get(key) : undefined;
        }
        const cookieValue = api.get(key);
        if (cookieValue === undefined) {
            return undefined;
        }
        const bytes = CryptoJS.AES.decrypt(cookieValue, secretPass);
        return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));
    }
    catch (e) {
        api.remove(key);
    }
}
function SetCookiesValue(key, value, expires = 1, isEncrypted = false) {
    try {
        if (value === undefined || null) {
            return;
        }
        if (!isEncrypted) {
            return api.set(key, value, { expires });
        }
        const encryptedValue = CryptoJS.AES.encrypt(typeof value === "object" ? JSON.stringify(value) : value, secretPass).toString();
        return api.set(key, encryptedValue, { expires });
    }
    catch (e) {
        // eslint-disable-next-line no-console
        // console.log(e);
    }
}

// "use client"
// import { useEffect, useRef } from "react";
// import Plyr from "plyr";
// import Hls from "hls.js";
// import "plyr/dist/plyr.css";
// const VideoPlayer = () => {
//   const videoRef = useRef<HTMLVideoElement | null>(null);
//   useEffect(() => {
//     if (!videoRef.current) return;
//     const video = videoRef.current;
//     const source = "https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8";
//     // Initialize Plyr
//     const player = new Plyr(video, {
//       captions: { active: true, update: true, language: "en" },
//     });
//     if (Hls.isSupported()) {
//       const hls = new Hls();
//       hls.loadSource(source);
//       hls.attachMedia(video);
//       hls.on(Hls.Events.MANIFEST_PARSED, () => {
//         video
//           .play()
//           .catch(() => console.warn("Autoplay blocked. User interaction needed."));
//       });
//     } else {
//       video.src = source;
//     }
//     return () => {
//       player.destroy();
//     };
//   }, []);
//   return (
//     <div className="container">
//       <video ref={videoRef} controls crossOrigin="anonymous" playsInline />
//     </div>
//   );
// };
// export default VideoPlayer;
// function drmCall(bingeToken: string) {
//   //@ts-ignore
//   videojs.Vhs.xhr.beforeRequest = (options) => {
//     const modifiedOptions = { ...options };
//     if (modifiedOptions.uri.startsWith("https://ss.binge.buzz/binge-drm")) {
//       const search = new URL(options.uri);
//       const searchParam = search.searchParams.get("r");
//       if (checkLiveOrStage() === "staging") {
//         modifiedOptions.uri = `https://ss-staging.binge.buzz/binge-drm/secured?r=${searchParam}&drmtoken=${bingeToken}`;
//       }
//       modifiedOptions.headers = modifiedOptions.headers || {};
//       modifiedOptions.headers.Authorization = `Bearer ${bingeToken}`;
//       videojs.xhr(
//         {
//           uri: modifiedOptions.uri,
//           headers: {
//             "Content-Type": "application/json",
//             Authorization: `Bearer ${bingeToken}`,
//           },
//         },
//         (err, resp) => {
//           if (resp.statusCode === 429) {
//             // handleCloseContentError();
//           } else if (resp.statusCode === 401) {
//             // handleUnauthorizedError();
//           } else if (resp.statusCode !== 200) {
//             // fireError();
//           }
//         }
//       );
//     }
//     return modifiedOptions;
//   };
// }
function modifyDrmUrl(url, bingeToken) {
    const search = new URL(url);
    const searchParam = search.searchParams.get("r");
    console.log(searchParam, "searchParam");
    {
        return `https://ss-staging.binge.buzz/binge-drm/secured?r=${searchParam}&drmtoken=${bingeToken}`;
    }
}
const checkValidSource = async (src) => {
    if (!src) {
        return false;
    }
    try {
        const res = await fetch(src, { method: "HEAD" });
        return res.ok;
    }
    catch (error) {
        return false;
    }
};
const VideoJSPlayer = ({ videoId, _hlsStreamUrl, isActive, redirectPath, initialTime, onTimeUpdate, path, }) => {
    const videoRef = React.useRef(null);
    const playerRef = React.useRef(null);
    const [isValid, setIsValid] = React.useState(false);
    const bingeToken = GetCookiesValue("annonJwtToken", false);
    React.useEffect(() => {
        const fetchValidSource = async () => {
            const valid = await checkValidSource(_hlsStreamUrl);
            setIsValid(valid);
        };
        fetchValidSource();
    }, [_hlsStreamUrl]);
    React.useEffect(() => {
        if (!isValid || !videoRef.current)
            return;
        const video = videoRef.current;
        const player = new Plyr(video, {
            autoplay: isActive,
            controls: [
                "play-large",
                "play",
                "progress",
                "current-time",
                "mute",
                "volume",
                "fullscreen",
            ],
        });
        playerRef.current = player;
        if (Hls.isSupported()) {
            const hls = new Hls({
                xhrSetup: (xhr, url) => {
                    if (url.includes("binge-drm")) {
                        xhr.open("GET", modifyDrmUrl(url, bingeToken), true);
                    }
                    xhr.setRequestHeader("Authorization", `Bearer ${bingeToken}`);
                },
            });
            hls.loadSource(_hlsStreamUrl);
            hls.attachMedia(video);
            hls.on(Hls.Events.MANIFEST_PARSED, () => {
                if (initialTime > 0) {
                    player.currentTime = initialTime;
                }
            });
            hls.on(Hls.Events.ERROR, (_, data) => {
                if (data.type === Hls.ErrorTypes.NETWORK_ERROR) {
                    console.warn("HLS network error, retrying...");
                    setTimeout(() => hls.loadSource(_hlsStreamUrl), 3000);
                }
            });
        }
        return () => {
            player.destroy();
        };
    }, [isValid, _hlsStreamUrl]);
    // useEffect(() => {
    //   if (!videoRef.current) return;
    //   const video = videoRef.current;
    //   const source = "https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8";
    //   // Initialize Plyr
    //   const player = new Plyr(video, {
    //     captions: { active: true, update: true, language: "en" },
    //   });
    //   if (Hls.isSupported()) {
    //     const hls = new Hls();
    //     hls.loadSource(source);
    //     hls.attachMedia(video);
    //     hls.on(Hls.Events.MANIFEST_PARSED, () => {
    //       video
    //         .play()
    //         .catch(() => console.warn("Autoplay blocked. User interaction needed."));
    //     });
    //   } else {
    //     video.src = source;
    //   }
    //   return () => {
    //     player.destroy();
    //   };
    // }, []);
    return (require$$2$1.jsx("div", { children: isValid ? (require$$2$1.jsx("div", { style: { position: "relative", width: "100%", height: "100%" }, children: require$$2$1.jsx("video", { ref: videoRef, crossOrigin: "anonymous", className: "plyr" }) })) : (require$$2$1.jsx(Image$1, { path: path, sx: {
                borderRadius: "16px",
                width: "100%",
                aspectRatio: "16/9",
                objectFit: "contain",
                cursor: "pointer",
            } })) }));
};

// const VideoJsPlayerComponent = lazy(() => import("./VideoJSPlayer"));
const LOCAL_BASE_URL = "https://web-api-staging.binge.buzz";
const Houdini = dt.div `
  position: relative;
  width: 100%;
  overflow: hidden;
  display: flex;
  justify-content: center;
  border-radius: 16px;
  padding: var(--border-size);

  --border-size: 0.1rem;
  --border-opacity: 0; /* Initially invisible */

  border: var(--border-size) solid transparent;
  background: rgb(255 255 255 / var(--opacity)) padding-box; /* Only inner content visible initially */
  background-clip: padding-box, border-box;

  &:hover {
    --border-opacity: 1; /* Show border on hover */

    background: conic-gradient(
          from var(--angle),
          transparent 25%,
          rgba(254, 32, 32) 50%,
          rgba(219, 0, 0) 75%,
          transparent 100%
        )
        border-box,
      rgb(255 255 255 / var(--opacity)) padding-box;

    animation: rotate 4s linear infinite, opacityChange 3s infinite alternate;
  }

  @property --opacity {
    syntax: "<number>";
    initial-value: 0.5;
    inherits: false;
  }

  @property --angle {
    syntax: "<angle>";
    initial-value: 0deg;
    inherits: false;
  }

  @keyframes opacityChange {
    to {
      --opacity: 1;
    }
  }

  @keyframes rotate {
    to {
      --angle: 360deg;
    }
  }
`;
const InnerContainer = dt.div `
  width: 100%;
  height: 100%;
  border-radius: 12px; /* Ensures inner content is also rounded */
  overflow: hidden; /* Ensures content doesn't overflow the border */
`;
function SlickSlider({ data, isLoading }) {
    const sliderRef = React.useRef(null);
    React.useState(true);
    const [activeSlideIndex, setActiveSlideIndex] = React.useState(0);
    const [hoveredIndex, setHoveredIndex] = React.useState(null);
    const timerRef = React.useRef(undefined);
    const [videoProgress, setVideoProgress] = React.useState({});
    function SampleNextArrow(props) {
        const { className, style, onClick } = props;
        return (require$$2$1.jsx(Box$1, { className: className, onClick: onClick, sx: {
                ...style,
                top: "50%",
                right: 0,
                transform: "translateY(-50%)",
                zIndex: 10,
                cursor: "pointer",
                display: "flex !important",
                position: "absolute",
                backgroundColor: "white",
                borderRadius: "50%",
                width: "40px",
                height: "40px",
                justifyContent: "center",
                alignItems: "center",
            }, children: require$$2$1.jsx(default_1, { sx: { fontSize: 20, color: "black" } }) }));
    }
    function SamplePrevArrow(props) {
        const { className, style, onClick } = props;
        return (require$$2$1.jsx(Box$1, { className: className, onClick: onClick, sx: {
                ...style,
                top: "50%",
                left: 0,
                display: "flex !important",
                transform: "translateY(-50%)",
                zIndex: 10,
                cursor: "pointer",
                position: "absolute",
                backgroundColor: "white",
                borderRadius: "50%",
                width: "40px",
                height: "40px",
                justifyContent: "center",
                alignItems: "center",
            }, children: require$$2$1.jsx(default_1$1, { sx: { fontSize: 20, color: "black" } }) }));
    }
    const settings = {
        speed: 500,
        infinite: false,
        arrows: false,
        slidesToShow: 3,
        slidesToScroll: 1,
        beforeChange: (oldIndex, newIndex) => setActiveSlideIndex(newIndex),
        nextArrow: require$$2$1.jsx(SampleNextArrow, {}),
        prevArrow: require$$2$1.jsx(SamplePrevArrow, {}),
        responsive: [
            {
                breakpoint: 1300,
                settings: {
                    slidesToShow: 3,
                },
            },
            {
                breakpoint: 1200,
                settings: {
                    slidesToShow: 2.5,
                },
            },
            {
                breakpoint: 1000,
                settings: {
                    slidesToShow: 2,
                },
            },
            {
                breakpoint: 800,
                settings: {
                    slidesToShow: 1.5,
                },
            },
            {
                breakpoint: 600,
                settings: {
                    slidesToShow: 1,
                },
            },
        ],
    };
    const handleTimeUpdate = (videoId, currentTime) => {
        setVideoProgress((prev) => ({ ...prev, [videoId]: currentTime }));
    };
    const handleVideoClick = (item) => {
        // if (typeof window !== "undefined") {
        //   window.location.assign(`https://binge.buzz/playing-vod/${item.id}`);
        // }
    };
    return (require$$2$1.jsx(Box$1, { sx: { overflowX: "hidden", position: "relative" }, children: data.length > 0 && (require$$2$1.jsxs(require$$2$1.Fragment, { children: [!isLoading && (require$$2$1.jsx(SamplePrevArrow, { onClick: () => sliderRef?.current?.slickPrev() })), require$$2$1.jsx(Slider, { ref: sliderRef, ...settings, children: data.map((item, index) => {
                        return (require$$2$1.jsx(Houdini, { children: require$$2$1.jsx(InnerContainer, { onMouseEnter: () => {
                                    if (activeSlideIndex === index)
                                        return;
                                    if (timerRef.current)
                                        clearTimeout(timerRef.current);
                                    setHoveredIndex(index);
                                    if (hoveredIndex !== index) {
                                        setActiveSlideIndex(index);
                                    }
                                }, children: isLoading ? (require$$2$1.jsx(Skeleton$1, { variant: "rectangular", width: "100%", height: 250, sx: {
                                        bgcolor: "#F9F9FB",
                                        background: "linear-gradient(90deg, #F9F9FB 25%, #f2e8f2 50%, #F9F9FB 75%)",
                                        backgroundSize: "300% 100%",
                                        animation: "waveAnimation 2.8s ease-in-out infinite",
                                        "@keyframes waveAnimation": {
                                            "0%": { backgroundPosition: "100% 0" },
                                            "100%": { backgroundPosition: "-100% 0" },
                                        },
                                        borderRadius: 2,
                                    } })) : (require$$2$1.jsxs(Box$1, { sx: {
                                        position: "relative",
                                        width: "100%",
                                        aspectRatio: "16/9",
                                    }, onClick: () => handleVideoClick(), children: [require$$2$1.jsx(Box$1, { sx: {
                                                position: "absolute",
                                                width: "100%",
                                                height: "100%",
                                                transition: "opacity 0.8s ease-in-out",
                                                opacity: index === activeSlideIndex ? 0 : 1,
                                                zIndex: index === activeSlideIndex ? 0 : 1,
                                            }, onClick: (e) => e.stopPropagation(), children: require$$2$1.jsx(Image$1, { path: item.image_landscape ||
                                                    item.image_portrait ||
                                                    item.image_square ||
                                                    item.thumb_path, sx: {
                                                    borderRadius: "16px",
                                                    width: "100%",
                                                    aspectRatio: "16/9",
                                                    objectFit: "contain",
                                                    cursor: "pointer",
                                                }, onClick: () => {
                                                    //   if (typeof window !== "undefined") {
                                                    //     window.location.assign(
                                                    //       `https://binge.buzz/playing-vod/${item.id}`
                                                    //     );
                                                    //   }
                                                } }) }), require$$2$1.jsx(Box$1, { sx: {
                                                position: "absolute",
                                                width: "100%",
                                                height: "100%",
                                                transition: "opacity 0.8s ease-in-out",
                                                opacity: index === activeSlideIndex ? 1 : 0,
                                                zIndex: index === activeSlideIndex ? 1 : 0,
                                            }, children: require$$2$1.jsx(VideoJSPlayer, { videoId: item.id, 
                                                //@ts-ignore
                                                _hlsStreamUrl: item.trailer_link, isActive: index === activeSlideIndex, path: item.image_landscape ||
                                                    item.image_portrait ||
                                                    item.image_square ||
                                                    item.thumb_path, redirectPath: `https://binge.buzz/playing-vod/${item.id}`, initialTime: videoProgress[item.id] || 0, onTimeUpdate: (time) => handleTimeUpdate(item.id, time) }) })] })) }) }, index));
                    }) }), !isLoading && (require$$2$1.jsx(SampleNextArrow, { onClick: () => sliderRef?.current?.slickNext() }))] })) }));
}

function withPagination(Component, props) {
    return function WithPagination() {
        const { category, type, token, tile, isLoading } = props;
        const [productList, setProductList] = React.useState([]);
        console.log(category, "catttt");
        React.useEffect(() => {
            const fetchProducts = async () => {
                if (!(category?.category_type === "ad_category" && category?.ad_type == 1) &&
                    category?.category_type !== "tvod") {
                    const ProductRequestbody = {
                        category_id: category?.category_id,
                        category_type: category?.category_type,
                        page: -1,
                        page_size: -1,
                    };
                    let ProductRes = await fetch("https://web-api-staging.binge.buzz/api/v3/page/category/products", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            Authorization: `Bearer ${token}`,
                            "Device-Type": "websdk",
                        },
                        body: JSON.stringify(ProductRequestbody),
                    }).then((response) => response.json());
                    if (ProductRes.data &&
                        ProductRes.data.products &&
                        ProductRes.data.products.length) {
                        setProductList(ProductRes.data.products);
                        // setTotalProduct(ProductRes.data.total);
                    }
                }
            };
            fetchProducts();
        }, [category, token]);
        if (productList && productList.length > 0) {
            return require$$2$1.jsx(Component, { data: productList, isLoading: isLoading });
        }
    };
}

var MEDIA_TYPE;
(function (MEDIA_TYPE) {
    MEDIA_TYPE["Movie"] = "movie";
    MEDIA_TYPE["Tv"] = "tv";
})(MEDIA_TYPE || (MEDIA_TYPE = {}));
function SliderRowForGenre(props) {
    const Component = withPagination(SlickSlider, props);
    return require$$2$1.jsx(Component, {});
}

const fetchCategories = async (token) => {
    const responseAllCategories = await fetch("https://web-api-staging.binge.buzz/api/v3/page/allCategories", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
            "Device-Type": "websdk",
        },
        body: JSON.stringify({
            page: "corporate-sdk-home",
        }),
    });
    const resAllCatData = await responseAllCategories.json();
    return resAllCatData.categories;
};

const BingeSlider = ({ token, isLoading, }) => {
    const [categories, setCategories] = React.useState([]);
    React.useEffect(() => {
        const getCategories = async () => {
            if (token) {
                try {
                    const fetchedCategories = await fetchCategories(token);
                    setCategories(fetchedCategories);
                }
                catch (error) {
                    console.error("Error fetching categories:", error);
                }
            }
        };
        if (token) {
            getCategories();
        }
    }, [token]);
    return (require$$2$1.jsxs(Box$1, { sx: { mt: "100px !important" }, children: [categories?.map((item, index) => {
                console.log("item", item);
                return (require$$2$1.jsxs(Box$1, { sx: { mb: categories.length > 1 ? "80px" : 0 }, children: [categories.length > 1 && (require$$2$1.jsx(Typography$1, { className: "watchnow-text", sx: { fontSize: "18px", mb: 1, fontWeight: "bold" }, children: item.name })), require$$2$1.jsx(SliderRowForGenre, { isLoading: isLoading, category: item, type: "cardWithHover", visibleOverflow: true, token: token ?? "" }, item.category_id)] }, item.category_id));
            }), require$$2$1.jsxs(Button$1, { className: "watchnow-text", sx: {
                    background: "#FF4A50",
                    borderRadius: "32px",
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                    gap: "6px",
                    padding: "16px 22px",
                    color: "#fff",
                    textTransform: "none",
                    fontSize: { xs: "15px", sm: "14px", lg: "16px" },
                    fontWeight: { xs: "400", lg: "600" },
                    mt: "121px",
                    mb: "160px",
                    mx: "auto",
                    "&:hover": {
                        background: "#FF4A50",
                    },
                }, onClick: () => {
                    window.location.assign("https://www.binge.buzz");
                }, children: ["Watch Now", require$$2$1.jsx(WatchIcon, {})] })] }));
};

const fetchImages = async (token) => {
    const response = await fetch("https://web-api-staging.binge.buzz/api/v3/banner/vod-home", {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
            "Device-Type": "websdk",
        },
    });
    const imageResponse = await response.json();
    return imageResponse;
};

const BingeDescription = ({ title, description, }) => {
    const typewriterRef = React.useRef(null);
    React.useEffect(() => {
        if (typewriterRef.current) {
            typewriterRef.current.stop();
            typewriterRef.current.deleteAll();
            typewriterRef.current.typeString(description || "").start();
        }
    }, [description]);
    return (require$$2$1.jsxs(Box$1, { sx: {
            width: {
                xs: "95%",
                sm: "80%",
                md: "65%",
                lg: "50%",
            },
            mx: "auto !important",
            display: "flex",
            flexDirection: "column",
            gap: "21px",
            mt: "43px !important",
        }, children: [require$$2$1.jsx(Typography$1, { className: "banner-text", sx: {
                    color: "#202939",
                    fontSize: {
                        xs: "30px",
                        sm: "36px",
                    },
                    fontWeight: "700",
                    textAlign: "center",
                }, children: title }), require$$2$1.jsx(Box$1, { className: "binge-text", sx: {
                    color: "#697586",
                    fontSize: {
                        xs: "14px",
                        sm: "16px",
                    },
                    fontWeight: "400",
                    textAlign: "center",
                }, children: require$$2$1.jsx(Typography$1, { children: description || "" }) })] }));
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const stringToByteArray$1 = function (str) {
  // TODO(user): Use native implementations if/when available
  const out = [];
  let p = 0;
  for (let i = 0; i < str.length; i++) {
    let c = str.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
      // Surrogate Pair
      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }
  return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */
const byteArrayToString = function (bytes) {
  // TODO(user): Use native implementations if/when available
  const out = [];
  let pos = 0,
    c = 0;
  while (pos < bytes.length) {
    const c1 = bytes[pos++];
    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else if (c1 > 191 && c1 < 224) {
      const c2 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
    } else if (c1 > 239 && c1 < 365) {
      // Surrogate Pair
      const c2 = bytes[pos++];
      const c3 = bytes[pos++];
      const c4 = bytes[pos++];
      const u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
      out[c++] = String.fromCharCode(0xd800 + (u >> 10));
      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
    } else {
      const c2 = bytes[pos++];
      const c3 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
    }
  }
  return out.join('');
};
// We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()
// TODO(dlarocque): Define this as a class, since we no longer target ES5.
const base64 = {
  /**
   * Maps bytes to characters.
   */
  byteToCharMap_: null,
  /**
   * Maps characters to bytes.
   */
  charToByteMap_: null,
  /**
   * Maps bytes to websafe characters.
   * @private
   */
  byteToCharMapWebSafe_: null,
  /**
   * Maps websafe characters to bytes.
   * @private
   */
  charToByteMapWebSafe_: null,
  /**
   * Our default alphabet, shared between
   * ENCODED_VALS and ENCODED_VALS_WEBSAFE
   */
  ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
  /**
   * Our default alphabet. Value 64 (=) is special; it means "nothing."
   */
  get ENCODED_VALS() {
    return this.ENCODED_VALS_BASE + '+/=';
  },
  /**
   * Our websafe alphabet.
   */
  get ENCODED_VALS_WEBSAFE() {
    return this.ENCODED_VALS_BASE + '-_.';
  },
  /**
   * Whether this browser supports the atob and btoa functions. This extension
   * started at Mozilla but is now implemented by many browsers. We use the
   * ASSUME_* variables to avoid pulling in the full useragent detection library
   * but still allowing the standard per-browser compilations.
   *
   */
  HAS_NATIVE_SUPPORT: typeof atob === 'function',
  /**
   * Base64-encode an array of bytes.
   *
   * @param input An array of bytes (numbers with
   *     value in [0, 255]) to encode.
   * @param webSafe Boolean indicating we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeByteArray(input, webSafe) {
    if (!Array.isArray(input)) {
      throw Error('encodeByteArray takes an array as a parameter');
    }
    this.init_();
    const byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
    const output = [];
    for (let i = 0; i < input.length; i += 3) {
      const byte1 = input[i];
      const haveByte2 = i + 1 < input.length;
      const byte2 = haveByte2 ? input[i + 1] : 0;
      const haveByte3 = i + 2 < input.length;
      const byte3 = haveByte3 ? input[i + 2] : 0;
      const outByte1 = byte1 >> 2;
      const outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;
      let outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;
      let outByte4 = byte3 & 0x3f;
      if (!haveByte3) {
        outByte4 = 64;
        if (!haveByte2) {
          outByte3 = 64;
        }
      }
      output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
    }
    return output.join('');
  },
  /**
   * Base64-encode a string.
   *
   * @param input A string to encode.
   * @param webSafe If true, we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeString(input, webSafe) {
    // Shortcut for Mozilla browsers that implement
    // a native base64 encoder in the form of "btoa/atob"
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return btoa(input);
    }
    return this.encodeByteArray(stringToByteArray$1(input), webSafe);
  },
  /**
   * Base64-decode a string.
   *
   * @param input to decode.
   * @param webSafe True if we should use the
   *     alternative alphabet.
   * @return string representing the decoded value.
   */
  decodeString(input, webSafe) {
    // Shortcut for Mozilla browsers that implement
    // a native base64 encoder in the form of "btoa/atob"
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return atob(input);
    }
    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
  },
  /**
   * Base64-decode a string.
   *
   * In base-64 decoding, groups of four characters are converted into three
   * bytes.  If the encoder did not apply padding, the input length may not
   * be a multiple of 4.
   *
   * In this case, the last group will have fewer than 4 characters, and
   * padding will be inferred.  If the group has one or two characters, it decodes
   * to one byte.  If the group has three characters, it decodes to two bytes.
   *
   * @param input Input to decode.
   * @param webSafe True if we should use the web-safe alphabet.
   * @return bytes representing the decoded value.
   */
  decodeStringToByteArray(input, webSafe) {
    this.init_();
    const charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
    const output = [];
    for (let i = 0; i < input.length;) {
      const byte1 = charToByteMap[input.charAt(i++)];
      const haveByte2 = i < input.length;
      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
      ++i;
      const haveByte3 = i < input.length;
      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
      ++i;
      const haveByte4 = i < input.length;
      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
      ++i;
      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
        throw new DecodeBase64StringError();
      }
      const outByte1 = byte1 << 2 | byte2 >> 4;
      output.push(outByte1);
      if (byte3 !== 64) {
        const outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;
        output.push(outByte2);
        if (byte4 !== 64) {
          const outByte3 = byte3 << 6 & 0xc0 | byte4;
          output.push(outByte3);
        }
      }
    }
    return output;
  },
  /**
   * Lazy static initialization function. Called before
   * accessing any of the static map variables.
   * @private
   */
  init_() {
    if (!this.byteToCharMap_) {
      this.byteToCharMap_ = {};
      this.charToByteMap_ = {};
      this.byteToCharMapWebSafe_ = {};
      this.charToByteMapWebSafe_ = {};
      // We want quick mappings back and forth, so we precompute two maps.
      for (let i = 0; i < this.ENCODED_VALS.length; i++) {
        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
        this.charToByteMap_[this.byteToCharMap_[i]] = i;
        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
        // Be forgiving when decoding and correctly decode both encodings.
        if (i >= this.ENCODED_VALS_BASE.length) {
          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
        }
      }
    }
  }
};
/**
 * An error encountered while decoding base64 string.
 */
class DecodeBase64StringError extends Error {
  constructor() {
    super(...arguments);
    this.name = 'DecodeBase64StringError';
  }
}
/**
 * URL-safe base64 encoding
 */
const base64Encode = function (str) {
  const utf8Bytes = stringToByteArray$1(str);
  return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 encoding (without "." padding in the end).
 * e.g. Used in JSON Web Token (JWT) parts.
 */
const base64urlEncodeWithoutPadding = function (str) {
  // Use base64url encoding and remove padding in the end (dot characters).
  return base64Encode(str).replace(/\./g, '');
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */
const base64Decode = function (str) {
  try {
    return base64.decodeString(str, true);
  } catch (e) {
    console.error('base64Decode failed: ', e);
  }
  return null;
};

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Polyfill for `globalThis` object.
 * @returns the `globalThis` object for the given environment.
 * @public
 */
function getGlobal() {
  if (typeof self !== 'undefined') {
    return self;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  throw new Error('Unable to locate global object.');
}

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;
/**
 * Attempt to read defaults from a JSON string provided to
 * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in
 * process(.)env(.)__FIREBASE_DEFAULTS_PATH__
 * The dots are in parens because certain compilers (Vite?) cannot
 * handle seeing that variable in comments.
 * See https://github.com/firebase/firebase-js-sdk/issues/6838
 */
const getDefaultsFromEnvVariable = () => {
  if (typeof process === 'undefined' || typeof process.env === 'undefined') {
    return;
  }
  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;
  if (defaultsJsonString) {
    return JSON.parse(defaultsJsonString);
  }
};
const getDefaultsFromCookie = () => {
  if (typeof document === 'undefined') {
    return;
  }
  let match;
  try {
    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
  } catch (e) {
    // Some environments such as Angular Universal SSR have a
    // `document` object but error on accessing `document.cookie`.
    return;
  }
  const decoded = match && base64Decode(match[1]);
  return decoded && JSON.parse(decoded);
};
/**
 * Get the __FIREBASE_DEFAULTS__ object. It checks in order:
 * (1) if such an object exists as a property of `globalThis`
 * (2) if such an object was provided on a shell environment variable
 * (3) if such an object exists in a cookie
 * @public
 */
const getDefaults = () => {
  try {
    return getDefaultsFromGlobal() || getDefaultsFromEnvVariable() || getDefaultsFromCookie();
  } catch (e) {
    /**
     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due
     * to any environment case we have not accounted for. Log to
     * info instead of swallowing so we can find these unknown cases
     * and add paths for them if needed.
     */
    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
    return;
  }
};
/**
 * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.
 * @public
 */
const getDefaultAppConfig = () => {
  var _a;
  return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config;
};
/**
 * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties
 * prefixed by "_")
 * @public
 */
const getExperimentalSetting = name => {
  var _a;
  return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`];
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Deferred {
  constructor() {
    this.reject = () => {};
    this.resolve = () => {};
    this.promise = new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
    });
  }
  /**
   * Our API internals are not promisified and cannot because our callback APIs have subtle expectations around
   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
   * and returns a node-style callback which will resolve or reject the Deferred's promise.
   */
  wrapCallback(callback) {
    return (error, value) => {
      if (error) {
        this.reject(error);
      } else {
        this.resolve(value);
      }
      if (typeof callback === 'function') {
        // Attaching noop handler just in case developer wasn't expecting
        // promises
        this.promise.catch(() => {});
        // Some of our callbacks don't expect a value and our own tests
        // assert that the parameter length is 1
        if (callback.length === 1) {
          callback(error);
        } else {
          callback(error, value);
        }
      }
    };
  }
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */
function getUA() {
  if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') {
    return navigator['userAgent'];
  } else {
    return '';
  }
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */
function isMobileCordova() {
  return typeof window !== 'undefined' &&
  // @ts-ignore Setting up an broadly applicable index signature for Window
  // just to deal with this case would probably be a bad idea.
  !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
/**
 * Detect Cloudflare Worker context.
 */
function isCloudflareWorker() {
  return typeof navigator !== 'undefined' && navigator.userAgent === 'Cloudflare-Workers';
}
function isBrowserExtension() {
  const runtime = typeof chrome === 'object' ? chrome.runtime : typeof browser === 'object' ? browser.runtime : undefined;
  return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */
function isReactNative() {
  return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
}
/** Detects Internet Explorer. */
function isIE() {
  const ua = getUA();
  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/**
 * This method checks if indexedDB is supported by current browser/service worker context
 * @return true if indexedDB is supported by current browser/service worker context
 */
function isIndexedDBAvailable() {
  try {
    return typeof indexedDB === 'object';
  } catch (e) {
    return false;
  }
}
/**
 * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
 * if errors occur during the database open operation.
 *
 * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
 * private browsing)
 */
function validateIndexedDBOpenable() {
  return new Promise((resolve, reject) => {
    try {
      let preExist = true;
      const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';
      const request = self.indexedDB.open(DB_CHECK_NAME);
      request.onsuccess = () => {
        request.result.close();
        // delete database only when it doesn't pre-exist
        if (!preExist) {
          self.indexedDB.deleteDatabase(DB_CHECK_NAME);
        }
        resolve(true);
      };
      request.onupgradeneeded = () => {
        preExist = false;
      };
      request.onerror = () => {
        var _a;
        reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');
      };
    } catch (error) {
      reject(error);
    }
  });
}
/**
 *
 * This method checks whether cookie is enabled within current browser
 * @return true if cookie is enabled within current browser
 */
function areCookiesEnabled() {
  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {
    return false;
  }
  return true;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Standardized Firebase Error.
 *
 * Usage:
 *
 *   // TypeScript string literals for type-safe codes
 *   type Err =
 *     'unknown' |
 *     'object-not-found'
 *     ;
 *
 *   // Closure enum for type-safe error codes
 *   // at-enum {string}
 *   var Err = {
 *     UNKNOWN: 'unknown',
 *     OBJECT_NOT_FOUND: 'object-not-found',
 *   }
 *
 *   let errors: Map<Err, string> = {
 *     'generic-error': "Unknown error",
 *     'file-not-found': "Could not find file: {$file}",
 *   };
 *
 *   // Type-safe function - must pass a valid error code as param.
 *   let error = new ErrorFactory<Err>('service', 'Service', errors);
 *
 *   ...
 *   throw error.create(Err.GENERIC);
 *   ...
 *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
 *   ...
 *   // Service: Could not file file: foo.txt (service/file-not-found).
 *
 *   catch (e) {
 *     assert(e.message === "Could not find file: foo.txt.");
 *     if ((e as FirebaseError)?.code === 'service/file-not-found') {
 *       console.log("Could not read file: " + e['file']);
 *     }
 *   }
 */
const ERROR_NAME = 'FirebaseError';
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
class FirebaseError extends Error {
  constructor(/** The error code for this error. */
  code, message, /** Custom data for this error. */
  customData) {
    super(message);
    this.code = code;
    this.customData = customData;
    /** The custom name for all FirebaseErrors. */
    this.name = ERROR_NAME;
    // Fix For ES5
    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
    // TODO(dlarocque): Replace this with `new.target`: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
    //                   which we can now use since we no longer target ES5.
    Object.setPrototypeOf(this, FirebaseError.prototype);
    // Maintains proper stack trace for where our error was thrown.
    // Only available on V8.
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, ErrorFactory.prototype.create);
    }
  }
}
class ErrorFactory {
  constructor(service, serviceName, errors) {
    this.service = service;
    this.serviceName = serviceName;
    this.errors = errors;
  }
  create(code, ...data) {
    const customData = data[0] || {};
    const fullCode = `${this.service}/${code}`;
    const template = this.errors[code];
    const message = template ? replaceTemplate(template, customData) : 'Error';
    // Service Name: Error message (service/code).
    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
    const error = new FirebaseError(fullCode, fullMessage, customData);
    return error;
  }
}
function replaceTemplate(template, data) {
  return template.replace(PATTERN, (_, key) => {
    const value = data[key];
    return value != null ? String(value) : `<${key}?>`;
  });
}
const PATTERN = /\{\$([^}]+)}/g;
function isEmpty(obj) {
  for (const key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      return false;
    }
  }
  return true;
}
/**
 * Deep equal two objects. Support Arrays and Objects.
 */
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  const aKeys = Object.keys(a);
  const bKeys = Object.keys(b);
  for (const k of aKeys) {
    if (!bKeys.includes(k)) {
      return false;
    }
    const aProp = a[k];
    const bProp = b[k];
    if (isObject(aProp) && isObject(bProp)) {
      if (!deepEqual(aProp, bProp)) {
        return false;
      }
    } else if (aProp !== bProp) {
      return false;
    }
  }
  for (const k of bKeys) {
    if (!aKeys.includes(k)) {
      return false;
    }
  }
  return true;
}
function isObject(thing) {
  return thing !== null && typeof thing === 'object';
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */
function querystring(querystringParams) {
  const params = [];
  for (const [key, value] of Object.entries(querystringParams)) {
    if (Array.isArray(value)) {
      value.forEach(arrayVal => {
        params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
      });
    } else {
      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    }
  }
  return params.length ? '&' + params.join('&') : '';
}

/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */
function createSubscribe(executor, onNoObservers) {
  const proxy = new ObserverProxy(executor, onNoObservers);
  return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */
class ObserverProxy {
  /**
   * @param executor Function which can make calls to a single Observer
   *     as a proxy.
   * @param onNoObservers Callback when count of Observers goes to zero.
   */
  constructor(executor, onNoObservers) {
    this.observers = [];
    this.unsubscribes = [];
    this.observerCount = 0;
    // Micro-task scheduling by calling task.then().
    this.task = Promise.resolve();
    this.finalized = false;
    this.onNoObservers = onNoObservers;
    // Call the executor asynchronously so subscribers that are called
    // synchronously after the creation of the subscribe function
    // can still receive the very first value generated in the executor.
    this.task.then(() => {
      executor(this);
    }).catch(e => {
      this.error(e);
    });
  }
  next(value) {
    this.forEachObserver(observer => {
      observer.next(value);
    });
  }
  error(error) {
    this.forEachObserver(observer => {
      observer.error(error);
    });
    this.close(error);
  }
  complete() {
    this.forEachObserver(observer => {
      observer.complete();
    });
    this.close();
  }
  /**
   * Subscribe function that can be used to add an Observer to the fan-out list.
   *
   * - We require that no event is sent to a subscriber synchronously to their
   *   call to subscribe().
   */
  subscribe(nextOrObserver, error, complete) {
    let observer;
    if (nextOrObserver === undefined && error === undefined && complete === undefined) {
      throw new Error('Missing Observer.');
    }
    // Assemble an Observer object when passed as callback functions.
    if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {
      observer = nextOrObserver;
    } else {
      observer = {
        next: nextOrObserver,
        error,
        complete
      };
    }
    if (observer.next === undefined) {
      observer.next = noop;
    }
    if (observer.error === undefined) {
      observer.error = noop;
    }
    if (observer.complete === undefined) {
      observer.complete = noop;
    }
    const unsub = this.unsubscribeOne.bind(this, this.observers.length);
    // Attempt to subscribe to a terminated Observable - we
    // just respond to the Observer with the final error or complete
    // event.
    if (this.finalized) {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.task.then(() => {
        try {
          if (this.finalError) {
            observer.error(this.finalError);
          } else {
            observer.complete();
          }
        } catch (e) {
          // nothing
        }
        return;
      });
    }
    this.observers.push(observer);
    return unsub;
  }
  // Unsubscribe is synchronous - we guarantee that no events are sent to
  // any unsubscribed Observer.
  unsubscribeOne(i) {
    if (this.observers === undefined || this.observers[i] === undefined) {
      return;
    }
    delete this.observers[i];
    this.observerCount -= 1;
    if (this.observerCount === 0 && this.onNoObservers !== undefined) {
      this.onNoObservers(this);
    }
  }
  forEachObserver(fn) {
    if (this.finalized) {
      // Already closed by previous event....just eat the additional values.
      return;
    }
    // Since sendOne calls asynchronously - there is no chance that
    // this.observers will become undefined.
    for (let i = 0; i < this.observers.length; i++) {
      this.sendOne(i, fn);
    }
  }
  // Call the Observer via one of it's callback function. We are careful to
  // confirm that the observe has not been unsubscribed since this asynchronous
  // function had been queued.
  sendOne(i, fn) {
    // Execute the callback asynchronously
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    this.task.then(() => {
      if (this.observers !== undefined && this.observers[i] !== undefined) {
        try {
          fn(this.observers[i]);
        } catch (e) {
          // Ignore exceptions raised in Observers or missing methods of an
          // Observer.
          // Log error to console. b/31404806
          if (typeof console !== 'undefined' && console.error) {
            console.error(e);
          }
        }
      }
    });
  }
  close(err) {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    if (err !== undefined) {
      this.finalError = err;
    }
    // Proxy is no longer needed - garbage collect references
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    this.task.then(() => {
      this.observers = undefined;
      this.onNoObservers = undefined;
    });
  }
}
/**
 * Return true if the object passed in implements any of the named methods.
 */
function implementsAnyMethods(obj, methods) {
  if (typeof obj !== 'object' || obj === null) {
    return false;
  }
  for (const method of methods) {
    if (method in obj && typeof obj[method] === 'function') {
      return true;
    }
  }
  return false;
}
function noop() {
  // do nothing
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The amount of milliseconds to exponentially increase.
 */
const DEFAULT_INTERVAL_MILLIS = 1000;
/**
 * The factor to backoff by.
 * Should be a number greater than 1.
 */
const DEFAULT_BACKOFF_FACTOR = 2;
/**
 * The maximum milliseconds to increase to.
 *
 * <p>Visible for testing
 */
const MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.
/**
 * The percentage of backoff time to randomize by.
 * See
 * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
 * for context.
 *
 * <p>Visible for testing
 */
const RANDOM_FACTOR = 0.5;
/**
 * Based on the backoff method from
 * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
 * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
 */
function calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {
  // Calculates an exponentially increasing value.
  // Deviation: calculates value from count and a constant interval, so we only need to save value
  // and count to restore state.
  const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
  // A random "fuzz" to avoid waves of retries.
  // Deviation: randomFactor is required.
  const randomWait = Math.round(
  // A fraction of the backoff value to add/subtract.
  // Deviation: changes multiplication order to improve readability.
  RANDOM_FACTOR * currBaseValue * (
  // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
  // if we add or subtract.
  Math.random() - 0.5) * 2);
  // Limits backoff to max to avoid effectively permanent backoff.
  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getModularInstance(service) {
  if (service && service._delegate) {
    return service._delegate;
  } else {
    return service;
  }
}

/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */
class Component {
  /**
   *
   * @param name The public service name, e.g. app, auth, firestore, database
   * @param instanceFactory Service factory responsible for creating the public interface
   * @param type whether the service provided by the component is public or private
   */
  constructor(name, instanceFactory, type) {
    this.name = name;
    this.instanceFactory = instanceFactory;
    this.type = type;
    this.multipleInstances = false;
    /**
     * Properties to be added to the service namespace
     */
    this.serviceProps = {};
    this.instantiationMode = "LAZY" /* InstantiationMode.LAZY */;
    this.onInstanceCreated = null;
  }
  setInstantiationMode(mode) {
    this.instantiationMode = mode;
    return this;
  }
  setMultipleInstances(multipleInstances) {
    this.multipleInstances = multipleInstances;
    return this;
  }
  setServiceProps(props) {
    this.serviceProps = props;
    return this;
  }
  setInstanceCreatedCallback(callback) {
    this.onInstanceCreated = callback;
    return this;
  }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */
class Provider {
  constructor(name, container) {
    this.name = name;
    this.container = container;
    this.component = null;
    this.instances = new Map();
    this.instancesDeferred = new Map();
    this.instancesOptions = new Map();
    this.onInitCallbacks = new Map();
  }
  /**
   * @param identifier A provider can provide multiple instances of a service
   * if this.component.multipleInstances is true.
   */
  get(identifier) {
    // if multipleInstances is not supported, use the default name
    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
    if (!this.instancesDeferred.has(normalizedIdentifier)) {
      const deferred = new Deferred();
      this.instancesDeferred.set(normalizedIdentifier, deferred);
      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
        // initialize the service if it can be auto-initialized
        try {
          const instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier
          });
          if (instance) {
            deferred.resolve(instance);
          }
        } catch (e) {
          // when the instance factory throws an exception during get(), it should not cause
          // a fatal error. We just return the unresolved promise in this case.
        }
      }
    }
    return this.instancesDeferred.get(normalizedIdentifier).promise;
  }
  getImmediate(options) {
    var _a;
    // if multipleInstances is not supported, use the default name
    const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
    const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
    if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
      try {
        return this.getOrInitializeService({
          instanceIdentifier: normalizedIdentifier
        });
      } catch (e) {
        if (optional) {
          return null;
        } else {
          throw e;
        }
      }
    } else {
      // In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw
      if (optional) {
        return null;
      } else {
        throw Error(`Service ${this.name} is not available`);
      }
    }
  }
  getComponent() {
    return this.component;
  }
  setComponent(component) {
    if (component.name !== this.name) {
      throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
    }
    if (this.component) {
      throw Error(`Component for ${this.name} has already been provided`);
    }
    this.component = component;
    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
    if (!this.shouldAutoInitialize()) {
      return;
    }
    // if the service is eager, initialize the default instance
    if (isComponentEager(component)) {
      try {
        this.getOrInitializeService({
          instanceIdentifier: DEFAULT_ENTRY_NAME$1
        });
      } catch (e) {
        // when the instance factory for an eager Component throws an exception during the eager
        // initialization, it should not cause a fatal error.
        // TODO: Investigate if we need to make it configurable, because some component may want to cause
        // a fatal error in this case?
      }
    }
    // Create service instances for the pending promises and resolve them
    // NOTE: if this.multipleInstances is false, only the default instance will be created
    // and all promises with resolve with it regardless of the identifier.
    for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
      const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
      try {
        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
        const instance = this.getOrInitializeService({
          instanceIdentifier: normalizedIdentifier
        });
        instanceDeferred.resolve(instance);
      } catch (e) {
        // when the instance factory throws an exception, it should not cause
        // a fatal error. We just leave the promise unresolved.
      }
    }
  }
  clearInstance(identifier = DEFAULT_ENTRY_NAME$1) {
    this.instancesDeferred.delete(identifier);
    this.instancesOptions.delete(identifier);
    this.instances.delete(identifier);
  }
  // app.delete() will call this method on every provider to delete the services
  // TODO: should we mark the provider as deleted?
  async delete() {
    const services = Array.from(this.instances.values());
    await Promise.all([...services.filter(service => 'INTERNAL' in service) // legacy services
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    .map(service => service.INTERNAL.delete()), ...services.filter(service => '_delete' in service) // modularized services
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    .map(service => service._delete())]);
  }
  isComponentSet() {
    return this.component != null;
  }
  isInitialized(identifier = DEFAULT_ENTRY_NAME$1) {
    return this.instances.has(identifier);
  }
  getOptions(identifier = DEFAULT_ENTRY_NAME$1) {
    return this.instancesOptions.get(identifier) || {};
  }
  initialize(opts = {}) {
    const {
      options = {}
    } = opts;
    const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
    if (this.isInitialized(normalizedIdentifier)) {
      throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
    }
    if (!this.isComponentSet()) {
      throw Error(`Component ${this.name} has not been registered yet`);
    }
    const instance = this.getOrInitializeService({
      instanceIdentifier: normalizedIdentifier,
      options
    });
    // resolve any pending promise waiting for the service instance
    for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
      const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
      if (normalizedIdentifier === normalizedDeferredIdentifier) {
        instanceDeferred.resolve(instance);
      }
    }
    return instance;
  }
  /**
   *
   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
   *
   * @param identifier An optional instance identifier
   * @returns a function to unregister the callback
   */
  onInit(callback, identifier) {
    var _a;
    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
    const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
    existingCallbacks.add(callback);
    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
    const existingInstance = this.instances.get(normalizedIdentifier);
    if (existingInstance) {
      callback(existingInstance, normalizedIdentifier);
    }
    return () => {
      existingCallbacks.delete(callback);
    };
  }
  /**
   * Invoke onInit callbacks synchronously
   * @param instance the service instance`
   */
  invokeOnInitCallbacks(instance, identifier) {
    const callbacks = this.onInitCallbacks.get(identifier);
    if (!callbacks) {
      return;
    }
    for (const callback of callbacks) {
      try {
        callback(instance, identifier);
      } catch (_a) {
        // ignore errors in the onInit callback
      }
    }
  }
  getOrInitializeService({
    instanceIdentifier,
    options = {}
  }) {
    let instance = this.instances.get(instanceIdentifier);
    if (!instance && this.component) {
      instance = this.component.instanceFactory(this.container, {
        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
        options
      });
      this.instances.set(instanceIdentifier, instance);
      this.instancesOptions.set(instanceIdentifier, options);
      /**
       * Invoke onInit listeners.
       * Note this.component.onInstanceCreated is different, which is used by the component creator,
       * while onInit listeners are registered by consumers of the provider.
       */
      this.invokeOnInitCallbacks(instance, instanceIdentifier);
      /**
       * Order is important
       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
       * makes `isInitialized()` return true.
       */
      if (this.component.onInstanceCreated) {
        try {
          this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
        } catch (_a) {
          // ignore errors in the onInstanceCreatedCallback
        }
      }
    }
    return instance || null;
  }
  normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME$1) {
    if (this.component) {
      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME$1;
    } else {
      return identifier; // assume multiple instances are supported before the component is provided.
    }
  }
  shouldAutoInitialize() {
    return !!this.component && this.component.instantiationMode !== "EXPLICIT" /* InstantiationMode.EXPLICIT */;
  }
}
// undefined should be passed to the service factory for the default instance
function normalizeIdentifierForFactory(identifier) {
  return identifier === DEFAULT_ENTRY_NAME$1 ? undefined : identifier;
}
function isComponentEager(component) {
  return component.instantiationMode === "EAGER" /* InstantiationMode.EAGER */;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */
class ComponentContainer {
  constructor(name) {
    this.name = name;
    this.providers = new Map();
  }
  /**
   *
   * @param component Component being added
   * @param overwrite When a component with the same name has already been registered,
   * if overwrite is true: overwrite the existing component with the new component and create a new
   * provider with the new component. It can be useful in tests where you want to use different mocks
   * for different tests.
   * if overwrite is false: throw an exception
   */
  addComponent(component) {
    const provider = this.getProvider(component.name);
    if (provider.isComponentSet()) {
      throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
    }
    provider.setComponent(component);
  }
  addOrOverwriteComponent(component) {
    const provider = this.getProvider(component.name);
    if (provider.isComponentSet()) {
      // delete the existing provider from the container, so we can register the new component
      this.providers.delete(component.name);
    }
    this.addComponent(component);
  }
  /**
   * getProvider provides a type safe interface where it can only be called with a field name
   * present in NameServiceMapping interface.
   *
   * Firebase SDKs providing services should extend NameServiceMapping interface to register
   * themselves.
   */
  getProvider(name) {
    if (this.providers.has(name)) {
      return this.providers.get(name);
    }
    // create a Provider for a service that hasn't registered with Firebase
    const provider = new Provider(name, this);
    this.providers.set(name, provider);
    return provider;
  }
  getProviders() {
    return Array.from(this.providers.values());
  }
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A container for all of the Logger instances
 */
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */
var LogLevel;
(function (LogLevel) {
  LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
  LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
  LogLevel[LogLevel["INFO"] = 2] = "INFO";
  LogLevel[LogLevel["WARN"] = 3] = "WARN";
  LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
  LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(LogLevel || (LogLevel = {}));
const levelStringToEnum = {
  'debug': LogLevel.DEBUG,
  'verbose': LogLevel.VERBOSE,
  'info': LogLevel.INFO,
  'warn': LogLevel.WARN,
  'error': LogLevel.ERROR,
  'silent': LogLevel.SILENT
};
/**
 * The default log level
 */
const defaultLogLevel = LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */
const ConsoleMethod = {
  [LogLevel.DEBUG]: 'log',
  [LogLevel.VERBOSE]: 'log',
  [LogLevel.INFO]: 'info',
  [LogLevel.WARN]: 'warn',
  [LogLevel.ERROR]: 'error'
};
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */
const defaultLogHandler = (instance, logType, ...args) => {
  if (logType < instance.logLevel) {
    return;
  }
  const now = new Date().toISOString();
  const method = ConsoleMethod[logType];
  if (method) {
    console[method](`[${now}]  ${instance.name}:`, ...args);
  } else {
    throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
  }
};
class Logger {
  /**
   * Gives you an instance of a Logger to capture messages according to
   * Firebase's logging scheme.
   *
   * @param name The name that the logs will be associated with
   */
  constructor(name) {
    this.name = name;
    /**
     * The log level of the given Logger instance.
     */
    this._logLevel = defaultLogLevel;
    /**
     * The main (internal) log handler for the Logger instance.
     * Can be set to a new function in internal package code but not by user.
     */
    this._logHandler = defaultLogHandler;
    /**
     * The optional, additional, user-defined log handler for the Logger instance.
     */
    this._userLogHandler = null;
  }
  get logLevel() {
    return this._logLevel;
  }
  set logLevel(val) {
    if (!(val in LogLevel)) {
      throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
    }
    this._logLevel = val;
  }
  // Workaround for setter/getter having to be the same type.
  setLogLevel(val) {
    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
  }
  get logHandler() {
    return this._logHandler;
  }
  set logHandler(val) {
    if (typeof val !== 'function') {
      throw new TypeError('Value assigned to `logHandler` must be a function');
    }
    this._logHandler = val;
  }
  get userLogHandler() {
    return this._userLogHandler;
  }
  set userLogHandler(val) {
    this._userLogHandler = val;
  }
  /**
   * The functions below are all based on the `console` interface
   */
  debug(...args) {
    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
    this._logHandler(this, LogLevel.DEBUG, ...args);
  }
  log(...args) {
    this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);
    this._logHandler(this, LogLevel.VERBOSE, ...args);
  }
  info(...args) {
    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
    this._logHandler(this, LogLevel.INFO, ...args);
  }
  warn(...args) {
    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
    this._logHandler(this, LogLevel.WARN, ...args);
  }
  error(...args) {
    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
    this._logHandler(this, LogLevel.ERROR, ...args);
  }
}

const instanceOfAny = (object, constructors) => constructors.some(c => object instanceof c);
let idbProxyableTypes;
let cursorAdvanceMethods;
// This is a function to prevent it throwing up in node environments.
function getIdbProxyableTypes() {
  return idbProxyableTypes || (idbProxyableTypes = [IDBDatabase, IDBObjectStore, IDBIndex, IDBCursor, IDBTransaction]);
}
// This is a function to prevent it throwing up in node environments.
function getCursorAdvanceMethods() {
  return cursorAdvanceMethods || (cursorAdvanceMethods = [IDBCursor.prototype.advance, IDBCursor.prototype.continue, IDBCursor.prototype.continuePrimaryKey]);
}
const cursorRequestMap = new WeakMap();
const transactionDoneMap = new WeakMap();
const transactionStoreNamesMap = new WeakMap();
const transformCache = new WeakMap();
const reverseTransformCache = new WeakMap();
function promisifyRequest(request) {
  const promise = new Promise((resolve, reject) => {
    const unlisten = () => {
      request.removeEventListener('success', success);
      request.removeEventListener('error', error);
    };
    const success = () => {
      resolve(wrap(request.result));
      unlisten();
    };
    const error = () => {
      reject(request.error);
      unlisten();
    };
    request.addEventListener('success', success);
    request.addEventListener('error', error);
  });
  promise.then(value => {
    // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
    // (see wrapFunction).
    if (value instanceof IDBCursor) {
      cursorRequestMap.set(value, request);
    }
    // Catching to avoid "Uncaught Promise exceptions"
  }).catch(() => {});
  // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
  // is because we create many promises from a single IDBRequest.
  reverseTransformCache.set(promise, request);
  return promise;
}
function cacheDonePromiseForTransaction(tx) {
  // Early bail if we've already created a done promise for this transaction.
  if (transactionDoneMap.has(tx)) return;
  const done = new Promise((resolve, reject) => {
    const unlisten = () => {
      tx.removeEventListener('complete', complete);
      tx.removeEventListener('error', error);
      tx.removeEventListener('abort', error);
    };
    const complete = () => {
      resolve();
      unlisten();
    };
    const error = () => {
      reject(tx.error || new DOMException('AbortError', 'AbortError'));
      unlisten();
    };
    tx.addEventListener('complete', complete);
    tx.addEventListener('error', error);
    tx.addEventListener('abort', error);
  });
  // Cache it for later retrieval.
  transactionDoneMap.set(tx, done);
}
let idbProxyTraps = {
  get(target, prop, receiver) {
    if (target instanceof IDBTransaction) {
      // Special handling for transaction.done.
      if (prop === 'done') return transactionDoneMap.get(target);
      // Polyfill for objectStoreNames because of Edge.
      if (prop === 'objectStoreNames') {
        return target.objectStoreNames || transactionStoreNamesMap.get(target);
      }
      // Make tx.store return the only store in the transaction, or undefined if there are many.
      if (prop === 'store') {
        return receiver.objectStoreNames[1] ? undefined : receiver.objectStore(receiver.objectStoreNames[0]);
      }
    }
    // Else transform whatever we get back.
    return wrap(target[prop]);
  },
  set(target, prop, value) {
    target[prop] = value;
    return true;
  },
  has(target, prop) {
    if (target instanceof IDBTransaction && (prop === 'done' || prop === 'store')) {
      return true;
    }
    return prop in target;
  }
};
function replaceTraps(callback) {
  idbProxyTraps = callback(idbProxyTraps);
}
function wrapFunction(func) {
  // Due to expected object equality (which is enforced by the caching in `wrap`), we
  // only create one new func per func.
  // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
  if (func === IDBDatabase.prototype.transaction && !('objectStoreNames' in IDBTransaction.prototype)) {
    return function (storeNames, ...args) {
      const tx = func.call(unwrap(this), storeNames, ...args);
      transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
      return wrap(tx);
    };
  }
  // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
  // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
  // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
  // with real promises, so each advance methods returns a new promise for the cursor object, or
  // undefined if the end of the cursor has been reached.
  if (getCursorAdvanceMethods().includes(func)) {
    return function (...args) {
      // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
      // the original object.
      func.apply(unwrap(this), args);
      return wrap(cursorRequestMap.get(this));
    };
  }
  return function (...args) {
    // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
    // the original object.
    return wrap(func.apply(unwrap(this), args));
  };
}
function transformCachableValue(value) {
  if (typeof value === 'function') return wrapFunction(value);
  // This doesn't return, it just creates a 'done' promise for the transaction,
  // which is later returned for transaction.done (see idbObjectHandler).
  if (value instanceof IDBTransaction) cacheDonePromiseForTransaction(value);
  if (instanceOfAny(value, getIdbProxyableTypes())) return new Proxy(value, idbProxyTraps);
  // Return the same value back if we're not going to transform it.
  return value;
}
function wrap(value) {
  // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
  // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
  if (value instanceof IDBRequest) return promisifyRequest(value);
  // If we've already transformed this value before, reuse the transformed value.
  // This is faster, but it also provides object equality.
  if (transformCache.has(value)) return transformCache.get(value);
  const newValue = transformCachableValue(value);
  // Not all types are transformed.
  // These may be primitive types, so they can't be WeakMap keys.
  if (newValue !== value) {
    transformCache.set(value, newValue);
    reverseTransformCache.set(newValue, value);
  }
  return newValue;
}
const unwrap = value => reverseTransformCache.get(value);

/**
 * Open a database.
 *
 * @param name Name of the database.
 * @param version Schema version.
 * @param callbacks Additional callbacks.
 */
function openDB(name, version, {
  blocked,
  upgrade,
  blocking,
  terminated
} = {}) {
  const request = indexedDB.open(name, version);
  const openPromise = wrap(request);
  if (upgrade) {
    request.addEventListener('upgradeneeded', event => {
      upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);
    });
  }
  if (blocked) {
    request.addEventListener('blocked', event => blocked(
    // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
    event.oldVersion, event.newVersion, event));
  }
  openPromise.then(db => {
    if (terminated) db.addEventListener('close', () => terminated());
    if (blocking) {
      db.addEventListener('versionchange', event => blocking(event.oldVersion, event.newVersion, event));
    }
  }).catch(() => {});
  return openPromise;
}
const readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
const writeMethods = ['put', 'add', 'delete', 'clear'];
const cachedMethods = new Map();
function getMethod(target, prop) {
  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === 'string')) {
    return;
  }
  if (cachedMethods.get(prop)) return cachedMethods.get(prop);
  const targetFuncName = prop.replace(/FromIndex$/, '');
  const useIndex = prop !== targetFuncName;
  const isWrite = writeMethods.includes(targetFuncName);
  if (
  // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
  !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))) {
    return;
  }
  const method = async function (storeName, ...args) {
    // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
    const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
    let target = tx.store;
    if (useIndex) target = target.index(args.shift());
    // Must reject if op rejects.
    // If it's a write operation, must reject if tx.done rejects.
    // Must reject with op rejection first.
    // Must resolve with op value.
    // Must handle both promises (no unhandled rejections)
    return (await Promise.all([target[targetFuncName](...args), isWrite && tx.done]))[0];
  };
  cachedMethods.set(prop, method);
  return method;
}
replaceTraps(oldTraps => ({
  ...oldTraps,
  get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
  has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)
}));

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PlatformLoggerServiceImpl {
  constructor(container) {
    this.container = container;
  }
  // In initial implementation, this will be called by installations on
  // auth token refresh, and installations will send this string.
  getPlatformInfoString() {
    const providers = this.container.getProviders();
    // Loop through providers and get library/version pairs from any that are
    // version components.
    return providers.map(provider => {
      if (isVersionServiceProvider(provider)) {
        const service = provider.getImmediate();
        return `${service.library}/${service.version}`;
      } else {
        return null;
      }
    }).filter(logString => logString).join(' ');
  }
}
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */
function isVersionServiceProvider(provider) {
  const component = provider.getComponent();
  return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* ComponentType.VERSION */;
}
const name$q = "@firebase/app";
const version$1$1 = "0.11.0";

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const logger$1 = new Logger('@firebase/app');
const name$p = "@firebase/app-compat";
const name$o = "@firebase/analytics-compat";
const name$n = "@firebase/analytics";
const name$m = "@firebase/app-check-compat";
const name$l = "@firebase/app-check";
const name$k = "@firebase/auth";
const name$j = "@firebase/auth-compat";
const name$i = "@firebase/database";
const name$h = "@firebase/data-connect";
const name$g = "@firebase/database-compat";
const name$f = "@firebase/functions";
const name$e = "@firebase/functions-compat";
const name$d = "@firebase/installations";
const name$c = "@firebase/installations-compat";
const name$b = "@firebase/messaging";
const name$a = "@firebase/messaging-compat";
const name$9 = "@firebase/performance";
const name$8 = "@firebase/performance-compat";
const name$7 = "@firebase/remote-config";
const name$6 = "@firebase/remote-config-compat";
const name$5 = "@firebase/storage";
const name$4 = "@firebase/storage-compat";
const name$3$1 = "@firebase/firestore";
const name$2$1 = "@firebase/vertexai";
const name$1$1 = "@firebase/firestore-compat";
const name$r = "firebase";
const version$4 = "11.3.0";

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The default app name
 *
 * @internal
 */
const DEFAULT_ENTRY_NAME = '[DEFAULT]';
const PLATFORM_LOG_STRING = {
  [name$q]: 'fire-core',
  [name$p]: 'fire-core-compat',
  [name$n]: 'fire-analytics',
  [name$o]: 'fire-analytics-compat',
  [name$l]: 'fire-app-check',
  [name$m]: 'fire-app-check-compat',
  [name$k]: 'fire-auth',
  [name$j]: 'fire-auth-compat',
  [name$i]: 'fire-rtdb',
  [name$h]: 'fire-data-connect',
  [name$g]: 'fire-rtdb-compat',
  [name$f]: 'fire-fn',
  [name$e]: 'fire-fn-compat',
  [name$d]: 'fire-iid',
  [name$c]: 'fire-iid-compat',
  [name$b]: 'fire-fcm',
  [name$a]: 'fire-fcm-compat',
  [name$9]: 'fire-perf',
  [name$8]: 'fire-perf-compat',
  [name$7]: 'fire-rc',
  [name$6]: 'fire-rc-compat',
  [name$5]: 'fire-gcs',
  [name$4]: 'fire-gcs-compat',
  [name$3$1]: 'fire-fst',
  [name$1$1]: 'fire-fst-compat',
  [name$2$1]: 'fire-vertex',
  'fire-js': 'fire-js',
  // Platform identifier for JS SDK.
  [name$r]: 'fire-js-all'
};

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @internal
 */
const _apps = new Map();
/**
 * @internal
 */
const _serverApps = new Map();
/**
 * Registered components.
 *
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const _components = new Map();
/**
 * @param component - the component being added to this app's container
 *
 * @internal
 */
function _addComponent(app, component) {
  try {
    app.container.addComponent(component);
  } catch (e) {
    logger$1.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
  }
}
/**
 *
 * @param component - the component to register
 * @returns whether or not the component is registered successfully
 *
 * @internal
 */
function _registerComponent(component) {
  const componentName = component.name;
  if (_components.has(componentName)) {
    logger$1.debug(`There were multiple attempts to register component ${componentName}.`);
    return false;
  }
  _components.set(componentName, component);
  // add the component to existing app instances
  for (const app of _apps.values()) {
    _addComponent(app, component);
  }
  for (const serverApp of _serverApps.values()) {
    _addComponent(serverApp, component);
  }
  return true;
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 *
 * @returns the provider for the service with the matching name
 *
 * @internal
 */
function _getProvider(app, name) {
  const heartbeatController = app.container.getProvider('heartbeat').getImmediate({
    optional: true
  });
  if (heartbeatController) {
    void heartbeatController.triggerHeartbeat();
  }
  return app.container.getProvider(name);
}
/**
 *
 * @param obj - an object of type FirebaseApp.
 *
 * @returns true if the provided object is of type FirebaseServerAppImpl.
 *
 * @internal
 */
function _isFirebaseServerApp(obj) {
  if (obj === null || obj === undefined) {
    return false;
  }
  return obj.settings !== undefined;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ERRORS$1 = {
  ["no-app" /* AppError.NO_APP */]: "No Firebase App '{$appName}' has been created - " + 'call initializeApp() first',
  ["bad-app-name" /* AppError.BAD_APP_NAME */]: "Illegal App name: '{$appName}'",
  ["duplicate-app" /* AppError.DUPLICATE_APP */]: "Firebase App named '{$appName}' already exists with different options or config",
  ["app-deleted" /* AppError.APP_DELETED */]: "Firebase App named '{$appName}' already deleted",
  ["server-app-deleted" /* AppError.SERVER_APP_DELETED */]: 'Firebase Server App has been deleted',
  ["no-options" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',
  ["invalid-app-argument" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.',
  ["invalid-log-argument" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',
  ["idb-open" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',
  ["idb-get" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',
  ["idb-set" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',
  ["idb-delete" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',
  ["finalization-registry-not-supported" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */]: 'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',
  ["invalid-server-app-environment" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */]: 'FirebaseServerApp is not for use in browser environments.'
};
const ERROR_FACTORY$2 = new ErrorFactory('app', 'Firebase', ERRORS$1);

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FirebaseAppImpl {
  constructor(options, config, container) {
    this._isDeleted = false;
    this._options = Object.assign({}, options);
    this._config = Object.assign({}, config);
    this._name = config.name;
    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
    this._container = container;
    this.container.addComponent(new Component('app', () => this, "PUBLIC" /* ComponentType.PUBLIC */));
  }
  get automaticDataCollectionEnabled() {
    this.checkDestroyed();
    return this._automaticDataCollectionEnabled;
  }
  set automaticDataCollectionEnabled(val) {
    this.checkDestroyed();
    this._automaticDataCollectionEnabled = val;
  }
  get name() {
    this.checkDestroyed();
    return this._name;
  }
  get options() {
    this.checkDestroyed();
    return this._options;
  }
  get config() {
    this.checkDestroyed();
    return this._config;
  }
  get container() {
    return this._container;
  }
  get isDeleted() {
    return this._isDeleted;
  }
  set isDeleted(val) {
    this._isDeleted = val;
  }
  /**
   * This function will throw an Error if the App has already been deleted -
   * use before performing API actions on the App.
   */
  checkDestroyed() {
    if (this.isDeleted) {
      throw ERROR_FACTORY$2.create("app-deleted" /* AppError.APP_DELETED */, {
        appName: this._name
      });
    }
  }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The current SDK version.
 *
 * @public
 */
const SDK_VERSION = version$4;
function initializeApp(_options, rawConfig = {}) {
  let options = _options;
  if (typeof rawConfig !== 'object') {
    const name = rawConfig;
    rawConfig = {
      name
    };
  }
  const config = Object.assign({
    name: DEFAULT_ENTRY_NAME,
    automaticDataCollectionEnabled: false
  }, rawConfig);
  const name = config.name;
  if (typeof name !== 'string' || !name) {
    throw ERROR_FACTORY$2.create("bad-app-name" /* AppError.BAD_APP_NAME */, {
      appName: String(name)
    });
  }
  options || (options = getDefaultAppConfig());
  if (!options) {
    throw ERROR_FACTORY$2.create("no-options" /* AppError.NO_OPTIONS */);
  }
  const existingApp = _apps.get(name);
  if (existingApp) {
    // return the existing app if options and config deep equal the ones in the existing app.
    if (deepEqual(options, existingApp.options) && deepEqual(config, existingApp.config)) {
      return existingApp;
    } else {
      throw ERROR_FACTORY$2.create("duplicate-app" /* AppError.DUPLICATE_APP */, {
        appName: name
      });
    }
  }
  const container = new ComponentContainer(name);
  for (const component of _components.values()) {
    container.addComponent(component);
  }
  const newApp = new FirebaseAppImpl(options, config, container);
  _apps.set(name, newApp);
  return newApp;
}
/**
 * Retrieves a {@link @firebase/app#FirebaseApp} instance.
 *
 * When called with no arguments, the default app is returned. When an app name
 * is provided, the app corresponding to that name is returned.
 *
 * An exception is thrown if the app being retrieved has not yet been
 * initialized.
 *
 * @example
 * ```javascript
 * // Return the default app
 * const app = getApp();
 * ```
 *
 * @example
 * ```javascript
 * // Return a named app
 * const otherApp = getApp("otherApp");
 * ```
 *
 * @param name - Optional name of the app to return. If no name is
 *   provided, the default is `"[DEFAULT]"`.
 *
 * @returns The app corresponding to the provided app name.
 *   If no app name is provided, the default app is returned.
 *
 * @public
 */
function getApp(name = DEFAULT_ENTRY_NAME) {
  const app = _apps.get(name);
  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {
    return initializeApp();
  }
  if (!app) {
    throw ERROR_FACTORY$2.create("no-app" /* AppError.NO_APP */, {
      appName: name
    });
  }
  return app;
}
/**
 * Registers a library's name and version for platform logging purposes.
 * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
 * @param version - Current version of that library.
 * @param variant - Bundle variant, e.g., node, rn, etc.
 *
 * @public
 */
function registerVersion(libraryKeyOrName, version, variant) {
  var _a;
  // TODO: We can use this check to whitelist strings when/if we set up
  // a good whitelist system.
  let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
  if (variant) {
    library += `-${variant}`;
  }
  const libraryMismatch = library.match(/\s|\//);
  const versionMismatch = version.match(/\s|\//);
  if (libraryMismatch || versionMismatch) {
    const warning = [`Unable to register library "${library}" with version "${version}":`];
    if (libraryMismatch) {
      warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
    }
    if (libraryMismatch && versionMismatch) {
      warning.push('and');
    }
    if (versionMismatch) {
      warning.push(`version name "${version}" contains illegal characters (whitespace or "/")`);
    }
    logger$1.warn(warning.join(' '));
    return;
  }
  _registerComponent(new Component(`${library}-version`, () => ({
    library,
    version
  }), "VERSION" /* ComponentType.VERSION */));
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DB_NAME = 'firebase-heartbeat-database';
const DB_VERSION = 1;
const STORE_NAME = 'firebase-heartbeat-store';
let dbPromise$1 = null;
function getDbPromise$1() {
  if (!dbPromise$1) {
    dbPromise$1 = openDB(DB_NAME, DB_VERSION, {
      upgrade: (db, oldVersion) => {
        // We don't use 'break' in this switch statement, the fall-through
        // behavior is what we want, because if there are multiple versions between
        // the old version and the current version, we want ALL the migrations
        // that correspond to those versions to run, not only the last one.
        // eslint-disable-next-line default-case
        switch (oldVersion) {
          case 0:
            try {
              db.createObjectStore(STORE_NAME);
            } catch (e) {
              // Safari/iOS browsers throw occasional exceptions on
              // db.createObjectStore() that may be a bug. Avoid blocking
              // the rest of the app functionality.
              console.warn(e);
            }
        }
      }
    }).catch(e => {
      throw ERROR_FACTORY$2.create("idb-open" /* AppError.IDB_OPEN */, {
        originalErrorMessage: e.message
      });
    });
  }
  return dbPromise$1;
}
async function readHeartbeatsFromIndexedDB(app) {
  try {
    const db = await getDbPromise$1();
    const tx = db.transaction(STORE_NAME);
    const result = await tx.objectStore(STORE_NAME).get(computeKey(app));
    // We already have the value but tx.done can throw,
    // so we need to await it here to catch errors
    await tx.done;
    return result;
  } catch (e) {
    if (e instanceof FirebaseError) {
      logger$1.warn(e.message);
    } else {
      const idbGetError = ERROR_FACTORY$2.create("idb-get" /* AppError.IDB_GET */, {
        originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
      });
      logger$1.warn(idbGetError.message);
    }
  }
}
async function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
  try {
    const db = await getDbPromise$1();
    const tx = db.transaction(STORE_NAME, 'readwrite');
    const objectStore = tx.objectStore(STORE_NAME);
    await objectStore.put(heartbeatObject, computeKey(app));
    await tx.done;
  } catch (e) {
    if (e instanceof FirebaseError) {
      logger$1.warn(e.message);
    } else {
      const idbGetError = ERROR_FACTORY$2.create("idb-set" /* AppError.IDB_WRITE */, {
        originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
      });
      logger$1.warn(idbGetError.message);
    }
  }
}
function computeKey(app) {
  return `${app.name}!${app.options.appId}`;
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const MAX_HEADER_BYTES = 1024;
const MAX_NUM_STORED_HEARTBEATS = 30;
class HeartbeatServiceImpl {
  constructor(container) {
    this.container = container;
    /**
     * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate
     * the header string.
     * Stores one record per date. This will be consolidated into the standard
     * format of one record per user agent string before being sent as a header.
     * Populated from indexedDB when the controller is instantiated and should
     * be kept in sync with indexedDB.
     * Leave public for easier testing.
     */
    this._heartbeatsCache = null;
    const app = this.container.getProvider('app').getImmediate();
    this._storage = new HeartbeatStorageImpl(app);
    this._heartbeatsCachePromise = this._storage.read().then(result => {
      this._heartbeatsCache = result;
      return result;
    });
  }
  /**
   * Called to report a heartbeat. The function will generate
   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
   * to IndexedDB.
   * Note that we only store one heartbeat per day. So if a heartbeat for today is
   * already logged, subsequent calls to this function in the same day will be ignored.
   */
  async triggerHeartbeat() {
    var _a, _b;
    try {
      const platformLogger = this.container.getProvider('platform-logger').getImmediate();
      // This is the "Firebase user agent" string from the platform logger
      // service, not the browser user agent.
      const agent = platformLogger.getPlatformInfoString();
      const date = getUTCDateString();
      if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null) {
        this._heartbeatsCache = await this._heartbeatsCachePromise;
        // If we failed to construct a heartbeats cache, then return immediately.
        if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) {
          return;
        }
      }
      // Do not store a heartbeat if one is already stored for this day
      // or if a header has already been sent today.
      if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {
        return;
      } else {
        // There is no entry for this date. Create one.
        this._heartbeatsCache.heartbeats.push({
          date,
          agent
        });
        // If the number of stored heartbeats exceeds the maximum number of stored heartbeats, remove the heartbeat with the earliest date.
        // Since this is executed each time a heartbeat is pushed, the limit can only be exceeded by one, so only one needs to be removed.
        if (this._heartbeatsCache.heartbeats.length > MAX_NUM_STORED_HEARTBEATS) {
          const earliestHeartbeatIdx = getEarliestHeartbeatIdx(this._heartbeatsCache.heartbeats);
          this._heartbeatsCache.heartbeats.splice(earliestHeartbeatIdx, 1);
        }
      }
      return this._storage.overwrite(this._heartbeatsCache);
    } catch (e) {
      logger$1.warn(e);
    }
  }
  /**
   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
   * It also clears all heartbeats from memory as well as in IndexedDB.
   *
   * NOTE: Consuming product SDKs should not send the header if this method
   * returns an empty string.
   */
  async getHeartbeatsHeader() {
    var _a;
    try {
      if (this._heartbeatsCache === null) {
        await this._heartbeatsCachePromise;
      }
      // If it's still null or the array is empty, there is no data to send.
      if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null || this._heartbeatsCache.heartbeats.length === 0) {
        return '';
      }
      const date = getUTCDateString();
      // Extract as many heartbeats from the cache as will fit under the size limit.
      const {
        heartbeatsToSend,
        unsentEntries
      } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
      const headerString = base64urlEncodeWithoutPadding(JSON.stringify({
        version: 2,
        heartbeats: heartbeatsToSend
      }));
      // Store last sent date to prevent another being logged/sent for the same day.
      this._heartbeatsCache.lastSentHeartbeatDate = date;
      if (unsentEntries.length > 0) {
        // Store any unsent entries if they exist.
        this._heartbeatsCache.heartbeats = unsentEntries;
        // This seems more likely than emptying the array (below) to lead to some odd state
        // since the cache isn't empty and this will be called again on the next request,
        // and is probably safest if we await it.
        await this._storage.overwrite(this._heartbeatsCache);
      } else {
        this._heartbeatsCache.heartbeats = [];
        // Do not wait for this, to reduce latency.
        void this._storage.overwrite(this._heartbeatsCache);
      }
      return headerString;
    } catch (e) {
      logger$1.warn(e);
      return '';
    }
  }
}
function getUTCDateString() {
  const today = new Date();
  // Returns date format 'YYYY-MM-DD'
  return today.toISOString().substring(0, 10);
}
function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
  // Heartbeats grouped by user agent in the standard format to be sent in
  // the header.
  const heartbeatsToSend = [];
  // Single date format heartbeats that are not sent.
  let unsentEntries = heartbeatsCache.slice();
  for (const singleDateHeartbeat of heartbeatsCache) {
    // Look for an existing entry with the same user agent.
    const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);
    if (!heartbeatEntry) {
      // If no entry for this user agent exists, create one.
      heartbeatsToSend.push({
        agent: singleDateHeartbeat.agent,
        dates: [singleDateHeartbeat.date]
      });
      if (countBytes(heartbeatsToSend) > maxSize) {
        // If the header would exceed max size, remove the added heartbeat
        // entry and stop adding to the header.
        heartbeatsToSend.pop();
        break;
      }
    } else {
      heartbeatEntry.dates.push(singleDateHeartbeat.date);
      // If the header would exceed max size, remove the added date
      // and stop adding to the header.
      if (countBytes(heartbeatsToSend) > maxSize) {
        heartbeatEntry.dates.pop();
        break;
      }
    }
    // Pop unsent entry from queue. (Skipped if adding the entry exceeded
    // quota and the loop breaks early.)
    unsentEntries = unsentEntries.slice(1);
  }
  return {
    heartbeatsToSend,
    unsentEntries
  };
}
class HeartbeatStorageImpl {
  constructor(app) {
    this.app = app;
    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
  }
  async runIndexedDBEnvironmentCheck() {
    if (!isIndexedDBAvailable()) {
      return false;
    } else {
      return validateIndexedDBOpenable().then(() => true).catch(() => false);
    }
  }
  /**
   * Read all heartbeats.
   */
  async read() {
    const canUseIndexedDB = await this._canUseIndexedDBPromise;
    if (!canUseIndexedDB) {
      return {
        heartbeats: []
      };
    } else {
      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);
      if (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) {
        return idbHeartbeatObject;
      } else {
        return {
          heartbeats: []
        };
      }
    }
  }
  // overwrite the storage with the provided heartbeats
  async overwrite(heartbeatsObject) {
    var _a;
    const canUseIndexedDB = await this._canUseIndexedDBPromise;
    if (!canUseIndexedDB) {
      return;
    } else {
      const existingHeartbeatsObject = await this.read();
      return writeHeartbeatsToIndexedDB(this.app, {
        lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
        heartbeats: heartbeatsObject.heartbeats
      });
    }
  }
  // add heartbeats
  async add(heartbeatsObject) {
    var _a;
    const canUseIndexedDB = await this._canUseIndexedDBPromise;
    if (!canUseIndexedDB) {
      return;
    } else {
      const existingHeartbeatsObject = await this.read();
      return writeHeartbeatsToIndexedDB(this.app, {
        lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
        heartbeats: [...existingHeartbeatsObject.heartbeats, ...heartbeatsObject.heartbeats]
      });
    }
  }
}
/**
 * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped
 * in a platform logging header JSON object, stringified, and converted
 * to base 64.
 */
function countBytes(heartbeatsCache) {
  // base64 has a restricted set of characters, all of which should be 1 byte.
  return base64urlEncodeWithoutPadding(
  // heartbeatsCache wrapper properties
  JSON.stringify({
    version: 2,
    heartbeats: heartbeatsCache
  })).length;
}
/**
 * Returns the index of the heartbeat with the earliest date.
 * If the heartbeats array is empty, -1 is returned.
 */
function getEarliestHeartbeatIdx(heartbeats) {
  if (heartbeats.length === 0) {
    return -1;
  }
  let earliestHeartbeatIdx = 0;
  let earliestHeartbeatDate = heartbeats[0].date;
  for (let i = 1; i < heartbeats.length; i++) {
    if (heartbeats[i].date < earliestHeartbeatDate) {
      earliestHeartbeatDate = heartbeats[i].date;
      earliestHeartbeatIdx = i;
    }
  }
  return earliestHeartbeatIdx;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function registerCoreComponents(variant) {
  _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */));
  _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */));
  // Register `app` package.
  registerVersion(name$q, version$1$1, variant);
  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
  registerVersion(name$q, version$1$1, 'esm2017');
  // Register platform SDK identifier (no version).
  registerVersion('fire-js', '');
}

/**
 * Firebase App
 *
 * @remarks This package coordinates the communication between the different Firebase components
 * @packageDocumentation
 */
registerCoreComponents('');

const name$3 = "@firebase/installations";
const version$3 = "0.6.12";

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const PENDING_TIMEOUT_MS = 10000;
const PACKAGE_VERSION = `w:${version$3}`;
const INTERNAL_AUTH_VERSION = 'FIS_v2';
const INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';
const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour
const SERVICE = 'installations';
const SERVICE_NAME = 'Installations';

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ERROR_DESCRIPTION_MAP = {
  ["missing-app-config-values" /* ErrorCode.MISSING_APP_CONFIG_VALUES */]: 'Missing App configuration value: "{$valueName}"',
  ["not-registered" /* ErrorCode.NOT_REGISTERED */]: 'Firebase Installation is not registered.',
  ["installation-not-found" /* ErrorCode.INSTALLATION_NOT_FOUND */]: 'Firebase Installation not found.',
  ["request-failed" /* ErrorCode.REQUEST_FAILED */]: '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
  ["app-offline" /* ErrorCode.APP_OFFLINE */]: 'Could not process request. Application offline.',
  ["delete-pending-registration" /* ErrorCode.DELETE_PENDING_REGISTRATION */]: "Can't delete installation while there is a pending registration request."
};
const ERROR_FACTORY$1 = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
/** Returns true if error is a FirebaseError that is based on an error from the server. */
function isServerError(error) {
  return error instanceof FirebaseError && error.code.includes("request-failed" /* ErrorCode.REQUEST_FAILED */);
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getInstallationsEndpoint({
  projectId
}) {
  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;
}
function extractAuthTokenInfoFromResponse(response) {
  return {
    token: response.token,
    requestStatus: 2 /* RequestStatus.COMPLETED */,
    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
    creationTime: Date.now()
  };
}
async function getErrorFromResponse(requestName, response) {
  const responseJson = await response.json();
  const errorData = responseJson.error;
  return ERROR_FACTORY$1.create("request-failed" /* ErrorCode.REQUEST_FAILED */, {
    requestName,
    serverCode: errorData.code,
    serverMessage: errorData.message,
    serverStatus: errorData.status
  });
}
function getHeaders$1({
  apiKey
}) {
  return new Headers({
    'Content-Type': 'application/json',
    Accept: 'application/json',
    'x-goog-api-key': apiKey
  });
}
function getHeadersWithAuth(appConfig, {
  refreshToken
}) {
  const headers = getHeaders$1(appConfig);
  headers.append('Authorization', getAuthorizationHeader(refreshToken));
  return headers;
}
/**
 * Calls the passed in fetch wrapper and returns the response.
 * If the returned response has a status of 5xx, re-runs the function once and
 * returns the response.
 */
async function retryIfServerError(fn) {
  const result = await fn();
  if (result.status >= 500 && result.status < 600) {
    // Internal Server Error. Retry request.
    return fn();
  }
  return result;
}
function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
  // This works because the server will never respond with fractions of a second.
  return Number(responseExpiresIn.replace('s', '000'));
}
function getAuthorizationHeader(refreshToken) {
  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function createInstallationRequest({
  appConfig,
  heartbeatServiceProvider
}, {
  fid
}) {
  const endpoint = getInstallationsEndpoint(appConfig);
  const headers = getHeaders$1(appConfig);
  // If heartbeat service exists, add the heartbeat string to the header.
  const heartbeatService = heartbeatServiceProvider.getImmediate({
    optional: true
  });
  if (heartbeatService) {
    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();
    if (heartbeatsHeader) {
      headers.append('x-firebase-client', heartbeatsHeader);
    }
  }
  const body = {
    fid,
    authVersion: INTERNAL_AUTH_VERSION,
    appId: appConfig.appId,
    sdkVersion: PACKAGE_VERSION
  };
  const request = {
    method: 'POST',
    headers,
    body: JSON.stringify(body)
  };
  const response = await retryIfServerError(() => fetch(endpoint, request));
  if (response.ok) {
    const responseValue = await response.json();
    const registeredInstallationEntry = {
      fid: responseValue.fid || fid,
      registrationStatus: 2 /* RequestStatus.COMPLETED */,
      refreshToken: responseValue.refreshToken,
      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
    };
    return registeredInstallationEntry;
  } else {
    throw await getErrorFromResponse('Create Installation', response);
  }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Returns a promise that resolves after given time passes. */
function sleep(ms) {
  return new Promise(resolve => {
    setTimeout(resolve, ms);
  });
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function bufferToBase64UrlSafe(array) {
  const b64 = btoa(String.fromCharCode(...array));
  return b64.replace(/\+/g, '-').replace(/\//g, '_');
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
const INVALID_FID = '';
/**
 * Generates a new FID using random values from Web Crypto API.
 * Returns an empty string if FID generation fails for any reason.
 */
function generateFid() {
  try {
    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5
    // bytes. our implementation generates a 17 byte array instead.
    const fidByteArray = new Uint8Array(17);
    const crypto = self.crypto || self.msCrypto;
    crypto.getRandomValues(fidByteArray);
    // Replace the first 4 random bits with the constant FID header of 0b0111.
    fidByteArray[0] = 0b01110000 + fidByteArray[0] % 0b00010000;
    const fid = encode(fidByteArray);
    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
  } catch (_a) {
    // FID generation errored
    return INVALID_FID;
  }
}
/** Converts a FID Uint8Array to a base64 string representation. */
function encode(fidByteArray) {
  const b64String = bufferToBase64UrlSafe(fidByteArray);
  // Remove the 23rd character that was added because of the extra 4 bits at the
  // end of our 17 byte array, and the '=' padding.
  return b64String.substr(0, 22);
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Returns a string key that can be used to identify the app. */
function getKey(appConfig) {
  return `${appConfig.appName}!${appConfig.appId}`;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const fidChangeCallbacks = new Map();
/**
 * Calls the onIdChange callbacks with the new FID value, and broadcasts the
 * change to other tabs.
 */
function fidChanged(appConfig, fid) {
  const key = getKey(appConfig);
  callFidChangeCallbacks(key, fid);
  broadcastFidChange(key, fid);
}
function callFidChangeCallbacks(key, fid) {
  const callbacks = fidChangeCallbacks.get(key);
  if (!callbacks) {
    return;
  }
  for (const callback of callbacks) {
    callback(fid);
  }
}
function broadcastFidChange(key, fid) {
  const channel = getBroadcastChannel();
  if (channel) {
    channel.postMessage({
      key,
      fid
    });
  }
  closeBroadcastChannel();
}
let broadcastChannel = null;
/** Opens and returns a BroadcastChannel if it is supported by the browser. */
function getBroadcastChannel() {
  if (!broadcastChannel && 'BroadcastChannel' in self) {
    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');
    broadcastChannel.onmessage = e => {
      callFidChangeCallbacks(e.data.key, e.data.fid);
    };
  }
  return broadcastChannel;
}
function closeBroadcastChannel() {
  if (fidChangeCallbacks.size === 0 && broadcastChannel) {
    broadcastChannel.close();
    broadcastChannel = null;
  }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DATABASE_NAME = 'firebase-installations-database';
const DATABASE_VERSION = 1;
const OBJECT_STORE_NAME = 'firebase-installations-store';
let dbPromise = null;
function getDbPromise() {
  if (!dbPromise) {
    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {
      upgrade: (db, oldVersion) => {
        // We don't use 'break' in this switch statement, the fall-through
        // behavior is what we want, because if there are multiple versions between
        // the old version and the current version, we want ALL the migrations
        // that correspond to those versions to run, not only the last one.
        // eslint-disable-next-line default-case
        switch (oldVersion) {
          case 0:
            db.createObjectStore(OBJECT_STORE_NAME);
        }
      }
    });
  }
  return dbPromise;
}
/** Assigns or overwrites the record for the given key with the given value. */
async function set(appConfig, value) {
  const key = getKey(appConfig);
  const db = await getDbPromise();
  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
  const objectStore = tx.objectStore(OBJECT_STORE_NAME);
  const oldValue = await objectStore.get(key);
  await objectStore.put(value, key);
  await tx.done;
  if (!oldValue || oldValue.fid !== value.fid) {
    fidChanged(appConfig, value.fid);
  }
  return value;
}
/** Removes record(s) from the objectStore that match the given key. */
async function remove(appConfig) {
  const key = getKey(appConfig);
  const db = await getDbPromise();
  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
  await tx.objectStore(OBJECT_STORE_NAME).delete(key);
  await tx.done;
}
/**
 * Atomically updates a record with the result of updateFn, which gets
 * called with the current value. If newValue is undefined, the record is
 * deleted instead.
 * @return Updated value
 */
async function update(appConfig, updateFn) {
  const key = getKey(appConfig);
  const db = await getDbPromise();
  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
  const store = tx.objectStore(OBJECT_STORE_NAME);
  const oldValue = await store.get(key);
  const newValue = updateFn(oldValue);
  if (newValue === undefined) {
    await store.delete(key);
  } else {
    await store.put(newValue, key);
  }
  await tx.done;
  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
    fidChanged(appConfig, newValue.fid);
  }
  return newValue;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Updates and returns the InstallationEntry from the database.
 * Also triggers a registration request if it is necessary and possible.
 */
async function getInstallationEntry(installations) {
  let registrationPromise;
  const installationEntry = await update(installations.appConfig, oldEntry => {
    const installationEntry = updateOrCreateInstallationEntry(oldEntry);
    const entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry);
    registrationPromise = entryWithPromise.registrationPromise;
    return entryWithPromise.installationEntry;
  });
  if (installationEntry.fid === INVALID_FID) {
    // FID generation failed. Waiting for the FID from the server.
    return {
      installationEntry: await registrationPromise
    };
  }
  return {
    installationEntry,
    registrationPromise
  };
}
/**
 * Creates a new Installation Entry if one does not exist.
 * Also clears timed out pending requests.
 */
function updateOrCreateInstallationEntry(oldEntry) {
  const entry = oldEntry || {
    fid: generateFid(),
    registrationStatus: 0 /* RequestStatus.NOT_STARTED */
  };
  return clearTimedOutRequest(entry);
}
/**
 * If the Firebase Installation is not registered yet, this will trigger the
 * registration and return an InProgressInstallationEntry.
 *
 * If registrationPromise does not exist, the installationEntry is guaranteed
 * to be registered.
 */
function triggerRegistrationIfNecessary(installations, installationEntry) {
  if (installationEntry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {
    if (!navigator.onLine) {
      // Registration required but app is offline.
      const registrationPromiseWithError = Promise.reject(ERROR_FACTORY$1.create("app-offline" /* ErrorCode.APP_OFFLINE */));
      return {
        installationEntry,
        registrationPromise: registrationPromiseWithError
      };
    }
    // Try registering. Change status to IN_PROGRESS.
    const inProgressEntry = {
      fid: installationEntry.fid,
      registrationStatus: 1 /* RequestStatus.IN_PROGRESS */,
      registrationTime: Date.now()
    };
    const registrationPromise = registerInstallation(installations, inProgressEntry);
    return {
      installationEntry: inProgressEntry,
      registrationPromise
    };
  } else if (installationEntry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {
    return {
      installationEntry,
      registrationPromise: waitUntilFidRegistration(installations)
    };
  } else {
    return {
      installationEntry
    };
  }
}
/** This will be executed only once for each new Firebase Installation. */
async function registerInstallation(installations, installationEntry) {
  try {
    const registeredInstallationEntry = await createInstallationRequest(installations, installationEntry);
    return set(installations.appConfig, registeredInstallationEntry);
  } catch (e) {
    if (isServerError(e) && e.customData.serverCode === 409) {
      // Server returned a "FID cannot be used" error.
      // Generate a new ID next time.
      await remove(installations.appConfig);
    } else {
      // Registration failed. Set FID as not registered.
      await set(installations.appConfig, {
        fid: installationEntry.fid,
        registrationStatus: 0 /* RequestStatus.NOT_STARTED */
      });
    }
    throw e;
  }
}
/** Call if FID registration is pending in another request. */
async function waitUntilFidRegistration(installations) {
  // Unfortunately, there is no way of reliably observing when a value in
  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),
  // so we need to poll.
  let entry = await updateInstallationRequest(installations.appConfig);
  while (entry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {
    // createInstallation request still in progress.
    await sleep(100);
    entry = await updateInstallationRequest(installations.appConfig);
  }
  if (entry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {
    // The request timed out or failed in a different call. Try again.
    const {
      installationEntry,
      registrationPromise
    } = await getInstallationEntry(installations);
    if (registrationPromise) {
      return registrationPromise;
    } else {
      // if there is no registrationPromise, entry is registered.
      return installationEntry;
    }
  }
  return entry;
}
/**
 * Called only if there is a CreateInstallation request in progress.
 *
 * Updates the InstallationEntry in the DB based on the status of the
 * CreateInstallation request.
 *
 * Returns the updated InstallationEntry.
 */
function updateInstallationRequest(appConfig) {
  return update(appConfig, oldEntry => {
    if (!oldEntry) {
      throw ERROR_FACTORY$1.create("installation-not-found" /* ErrorCode.INSTALLATION_NOT_FOUND */);
    }
    return clearTimedOutRequest(oldEntry);
  });
}
function clearTimedOutRequest(entry) {
  if (hasInstallationRequestTimedOut(entry)) {
    return {
      fid: entry.fid,
      registrationStatus: 0 /* RequestStatus.NOT_STARTED */
    };
  }
  return entry;
}
function hasInstallationRequestTimedOut(installationEntry) {
  return installationEntry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */ && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function generateAuthTokenRequest({
  appConfig,
  heartbeatServiceProvider
}, installationEntry) {
  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
  const headers = getHeadersWithAuth(appConfig, installationEntry);
  // If heartbeat service exists, add the heartbeat string to the header.
  const heartbeatService = heartbeatServiceProvider.getImmediate({
    optional: true
  });
  if (heartbeatService) {
    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();
    if (heartbeatsHeader) {
      headers.append('x-firebase-client', heartbeatsHeader);
    }
  }
  const body = {
    installation: {
      sdkVersion: PACKAGE_VERSION,
      appId: appConfig.appId
    }
  };
  const request = {
    method: 'POST',
    headers,
    body: JSON.stringify(body)
  };
  const response = await retryIfServerError(() => fetch(endpoint, request));
  if (response.ok) {
    const responseValue = await response.json();
    const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
    return completedAuthToken;
  } else {
    throw await getErrorFromResponse('Generate Auth Token', response);
  }
}
function getGenerateAuthTokenEndpoint(appConfig, {
  fid
}) {
  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns a valid authentication token for the installation. Generates a new
 * token if one doesn't exist, is expired or about to expire.
 *
 * Should only be called if the Firebase Installation is registered.
 */
async function refreshAuthToken(installations, forceRefresh = false) {
  let tokenPromise;
  const entry = await update(installations.appConfig, oldEntry => {
    if (!isEntryRegistered(oldEntry)) {
      throw ERROR_FACTORY$1.create("not-registered" /* ErrorCode.NOT_REGISTERED */);
    }
    const oldAuthToken = oldEntry.authToken;
    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
      // There is a valid token in the DB.
      return oldEntry;
    } else if (oldAuthToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */) {
      // There already is a token request in progress.
      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);
      return oldEntry;
    } else {
      // No token or token expired.
      if (!navigator.onLine) {
        throw ERROR_FACTORY$1.create("app-offline" /* ErrorCode.APP_OFFLINE */);
      }
      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);
      return inProgressEntry;
    }
  });
  const authToken = tokenPromise ? await tokenPromise : entry.authToken;
  return authToken;
}
/**
 * Call only if FID is registered and Auth Token request is in progress.
 *
 * Waits until the current pending request finishes. If the request times out,
 * tries once in this thread as well.
 */
async function waitUntilAuthTokenRequest(installations, forceRefresh) {
  // Unfortunately, there is no way of reliably observing when a value in
  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),
  // so we need to poll.
  let entry = await updateAuthTokenRequest(installations.appConfig);
  while (entry.authToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */) {
    // generateAuthToken still in progress.
    await sleep(100);
    entry = await updateAuthTokenRequest(installations.appConfig);
  }
  const authToken = entry.authToken;
  if (authToken.requestStatus === 0 /* RequestStatus.NOT_STARTED */) {
    // The request timed out or failed in a different call. Try again.
    return refreshAuthToken(installations, forceRefresh);
  } else {
    return authToken;
  }
}
/**
 * Called only if there is a GenerateAuthToken request in progress.
 *
 * Updates the InstallationEntry in the DB based on the status of the
 * GenerateAuthToken request.
 *
 * Returns the updated InstallationEntry.
 */
function updateAuthTokenRequest(appConfig) {
  return update(appConfig, oldEntry => {
    if (!isEntryRegistered(oldEntry)) {
      throw ERROR_FACTORY$1.create("not-registered" /* ErrorCode.NOT_REGISTERED */);
    }
    const oldAuthToken = oldEntry.authToken;
    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
      return Object.assign(Object.assign({}, oldEntry), {
        authToken: {
          requestStatus: 0 /* RequestStatus.NOT_STARTED */
        }
      });
    }
    return oldEntry;
  });
}
async function fetchAuthTokenFromServer(installations, installationEntry) {
  try {
    const authToken = await generateAuthTokenRequest(installations, installationEntry);
    const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {
      authToken
    });
    await set(installations.appConfig, updatedInstallationEntry);
    return authToken;
  } catch (e) {
    if (isServerError(e) && (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {
      // Server returned a "FID not found" or a "Invalid authentication" error.
      // Generate a new ID next time.
      await remove(installations.appConfig);
    } else {
      const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {
        authToken: {
          requestStatus: 0 /* RequestStatus.NOT_STARTED */
        }
      });
      await set(installations.appConfig, updatedInstallationEntry);
    }
    throw e;
  }
}
function isEntryRegistered(installationEntry) {
  return installationEntry !== undefined && installationEntry.registrationStatus === 2 /* RequestStatus.COMPLETED */;
}
function isAuthTokenValid(authToken) {
  return authToken.requestStatus === 2 /* RequestStatus.COMPLETED */ && !isAuthTokenExpired(authToken);
}
function isAuthTokenExpired(authToken) {
  const now = Date.now();
  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;
}
/** Returns an updated InstallationEntry with an InProgressAuthToken. */
function makeAuthTokenRequestInProgressEntry(oldEntry) {
  const inProgressAuthToken = {
    requestStatus: 1 /* RequestStatus.IN_PROGRESS */,
    requestTime: Date.now()
  };
  return Object.assign(Object.assign({}, oldEntry), {
    authToken: inProgressAuthToken
  });
}
function hasAuthTokenRequestTimedOut(authToken) {
  return authToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */ && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Creates a Firebase Installation if there isn't one for the app and
 * returns the Installation ID.
 * @param installations - The `Installations` instance.
 *
 * @public
 */
async function getId(installations) {
  const installationsImpl = installations;
  const {
    installationEntry,
    registrationPromise
  } = await getInstallationEntry(installationsImpl);
  if (registrationPromise) {
    registrationPromise.catch(console.error);
  } else {
    // If the installation is already registered, update the authentication
    // token if needed.
    refreshAuthToken(installationsImpl).catch(console.error);
  }
  return installationEntry.fid;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns a Firebase Installations auth token, identifying the current
 * Firebase Installation.
 * @param installations - The `Installations` instance.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */
async function getToken(installations, forceRefresh = false) {
  const installationsImpl = installations;
  await completeInstallationRegistration(installationsImpl);
  // At this point we either have a Registered Installation in the DB, or we've
  // already thrown an error.
  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);
  return authToken.token;
}
async function completeInstallationRegistration(installations) {
  const {
    registrationPromise
  } = await getInstallationEntry(installations);
  if (registrationPromise) {
    // A createInstallation request is in progress. Wait until it finishes.
    await registrationPromise;
  }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function extractAppConfig(app) {
  if (!app || !app.options) {
    throw getMissingValueError('App Configuration');
  }
  if (!app.name) {
    throw getMissingValueError('App Name');
  }
  // Required app config keys
  const configKeys = ['projectId', 'apiKey', 'appId'];
  for (const keyName of configKeys) {
    if (!app.options[keyName]) {
      throw getMissingValueError(keyName);
    }
  }
  return {
    appName: app.name,
    projectId: app.options.projectId,
    apiKey: app.options.apiKey,
    appId: app.options.appId
  };
}
function getMissingValueError(valueName) {
  return ERROR_FACTORY$1.create("missing-app-config-values" /* ErrorCode.MISSING_APP_CONFIG_VALUES */, {
    valueName
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const INSTALLATIONS_NAME = 'installations';
const INSTALLATIONS_NAME_INTERNAL = 'installations-internal';
const publicFactory = container => {
  const app = container.getProvider('app').getImmediate();
  // Throws if app isn't configured properly.
  const appConfig = extractAppConfig(app);
  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');
  const installationsImpl = {
    app,
    appConfig,
    heartbeatServiceProvider,
    _delete: () => Promise.resolve()
  };
  return installationsImpl;
};
const internalFactory = container => {
  const app = container.getProvider('app').getImmediate();
  // Internal FIS instance relies on public FIS instance.
  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();
  const installationsInternal = {
    getId: () => getId(installations),
    getToken: forceRefresh => getToken(installations, forceRefresh)
  };
  return installationsInternal;
};
function registerInstallations() {
  _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, "PUBLIC" /* ComponentType.PUBLIC */));
  _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, "PRIVATE" /* ComponentType.PRIVATE */));
}

/**
 * The Firebase Installations Web SDK.
 * This SDK does not work in a Node.js environment.
 *
 * @packageDocumentation
 */
registerInstallations();
registerVersion(name$3, version$3);
// BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
registerVersion(name$3, version$3, 'esm2017');

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Type constant for Firebase Analytics.
 */
const ANALYTICS_TYPE = 'analytics';
// Key to attach FID to in gtag params.
const GA_FID_KEY = 'firebase_id';
const ORIGIN_KEY = 'origin';
const FETCH_TIMEOUT_MILLIS = 60 * 1000;
const DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';
const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const logger = new Logger('@firebase/analytics');

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ERRORS = {
  ["already-exists" /* AnalyticsError.ALREADY_EXISTS */]: 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.',
  ["already-initialized" /* AnalyticsError.ALREADY_INITIALIZED */]: 'initializeAnalytics() cannot be called again with different options than those ' + 'it was initially called with. It can be called again with the same options to ' + 'return the existing instance, or getAnalytics() can be used ' + 'to get a reference to the already-initialized instance.',
  ["already-initialized-settings" /* AnalyticsError.ALREADY_INITIALIZED_SETTINGS */]: 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.',
  ["interop-component-reg-failed" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */]: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',
  ["invalid-analytics-context" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */]: 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}',
  ["indexeddb-unavailable" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */]: 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}',
  ["fetch-throttle" /* AnalyticsError.FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',
  ["config-fetch-failed" /* AnalyticsError.CONFIG_FETCH_FAILED */]: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',
  ["no-api-key" /* AnalyticsError.NO_API_KEY */]: 'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.',
  ["no-app-id" /* AnalyticsError.NO_APP_ID */]: 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.',
  ["no-client-id" /* AnalyticsError.NO_CLIENT_ID */]: 'The "client_id" field is empty.',
  ["invalid-gtag-resource" /* AnalyticsError.INVALID_GTAG_RESOURCE */]: 'Trusted Types detected an invalid gtag resource: {$gtagURL}.'
};
const ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Verifies and creates a TrustedScriptURL.
 */
function createGtagTrustedTypesScriptURL(url) {
  if (!url.startsWith(GTAG_URL)) {
    const err = ERROR_FACTORY.create("invalid-gtag-resource" /* AnalyticsError.INVALID_GTAG_RESOURCE */, {
      gtagURL: url
    });
    logger.warn(err.message);
    return '';
  }
  return url;
}
/**
 * Makeshift polyfill for Promise.allSettled(). Resolves when all promises
 * have either resolved or rejected.
 *
 * @param promises Array of promises to wait for.
 */
function promiseAllSettled(promises) {
  return Promise.all(promises.map(promise => promise.catch(e => e)));
}
/**
 * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.
 *
 * @param policyName A string containing the name of the policy
 * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods
 * | the TrustedTypePolicy reference documentation}.
 */
function createTrustedTypesPolicy(policyName, policyOptions) {
  // Create a TrustedTypes policy that we can use for updating src
  // properties
  let trustedTypesPolicy;
  if (window.trustedTypes) {
    trustedTypesPolicy = window.trustedTypes.createPolicy(policyName, policyOptions);
  }
  return trustedTypesPolicy;
}
/**
 * Inserts gtag script tag into the page to asynchronously download gtag.
 * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
 */
function insertScriptTag(dataLayerName, measurementId) {
  const trustedTypesPolicy = createTrustedTypesPolicy('firebase-js-sdk-policy', {
    createScriptURL: createGtagTrustedTypesScriptURL
  });
  const script = document.createElement('script');
  // We are not providing an analyticsId in the URL because it would trigger a `page_view`
  // without fid. We will initialize ga-id using gtag (config) command together with fid.
  const gtagScriptURL = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;
  script.src = trustedTypesPolicy ? trustedTypesPolicy === null || trustedTypesPolicy === void 0 ? void 0 : trustedTypesPolicy.createScriptURL(gtagScriptURL) : gtagScriptURL;
  script.async = true;
  document.head.appendChild(script);
}
/**
 * Get reference to, or create, global datalayer.
 * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
 */
function getOrCreateDataLayer(dataLayerName) {
  // Check for existing dataLayer and create if needed.
  let dataLayer = [];
  if (Array.isArray(window[dataLayerName])) {
    dataLayer = window[dataLayerName];
  } else {
    window[dataLayerName] = dataLayer;
  }
  return dataLayer;
}
/**
 * Wrapped gtag logic when gtag is called with 'config' command.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 * @param measurementId GA Measurement ID to set config for.
 * @param gtagParams Gtag config params to set.
 */
async function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {
  // If config is already fetched, we know the appId and can use it to look up what FID promise we
  /// are waiting for, and wait only on that one.
  const correspondingAppId = measurementIdToAppId[measurementId];
  try {
    if (correspondingAppId) {
      await initializationPromisesMap[correspondingAppId];
    } else {
      // If config is not fetched yet, wait for all configs (we don't know which one we need) and
      // find the appId (if any) corresponding to this measurementId. If there is one, wait on
      // that appId's initialization promise. If there is none, promise resolves and gtag
      // call goes through.
      const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);
      const foundConfig = dynamicConfigResults.find(config => config.measurementId === measurementId);
      if (foundConfig) {
        await initializationPromisesMap[foundConfig.appId];
      }
    }
  } catch (e) {
    logger.error(e);
  }
  gtagCore("config" /* GtagCommand.CONFIG */, measurementId, gtagParams);
}
/**
 * Wrapped gtag logic when gtag is called with 'event' command.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementId GA Measurement ID to log event to.
 * @param gtagParams Params to log with this event.
 */
async function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {
  try {
    let initializationPromisesToWaitFor = [];
    // If there's a 'send_to' param, check if any ID specified matches
    // an initializeIds() promise we are waiting for.
    if (gtagParams && gtagParams['send_to']) {
      let gaSendToList = gtagParams['send_to'];
      // Make it an array if is isn't, so it can be dealt with the same way.
      if (!Array.isArray(gaSendToList)) {
        gaSendToList = [gaSendToList];
      }
      // Checking 'send_to' fields requires having all measurement ID results back from
      // the dynamic config fetch.
      const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);
      for (const sendToId of gaSendToList) {
        // Any fetched dynamic measurement ID that matches this 'send_to' ID
        const foundConfig = dynamicConfigResults.find(config => config.measurementId === sendToId);
        const initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];
        if (initializationPromise) {
          initializationPromisesToWaitFor.push(initializationPromise);
        } else {
          // Found an item in 'send_to' that is not associated
          // directly with an FID, possibly a group.  Empty this array,
          // exit the loop early, and let it get populated below.
          initializationPromisesToWaitFor = [];
          break;
        }
      }
    }
    // This will be unpopulated if there was no 'send_to' field , or
    // if not all entries in the 'send_to' field could be mapped to
    // a FID. In these cases, wait on all pending initialization promises.
    if (initializationPromisesToWaitFor.length === 0) {
      /* eslint-disable-next-line @typescript-eslint/no-floating-promises */
      initializationPromisesToWaitFor = Object.values(initializationPromisesMap);
    }
    // Run core gtag function with args after all relevant initialization
    // promises have been resolved.
    await Promise.all(initializationPromisesToWaitFor);
    // Workaround for http://b/141370449 - third argument cannot be undefined.
    gtagCore("event" /* GtagCommand.EVENT */, measurementId, gtagParams || {});
  } catch (e) {
    logger.error(e);
  }
}
/**
 * Wraps a standard gtag function with extra code to wait for completion of
 * relevant initialization promises before sending requests.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 */
function wrapGtag(gtagCore,
/**
 * Allows wrapped gtag calls to wait on whichever initialization promises are required,
 * depending on the contents of the gtag params' `send_to` field, if any.
 */
initializationPromisesMap,
/**
 * Wrapped gtag calls sometimes require all dynamic config fetches to have returned
 * before determining what initialization promises (which include FIDs) to wait for.
 */
dynamicConfigPromisesList,
/**
 * Wrapped gtag config calls can narrow down which initialization promise (with FID)
 * to wait for if the measurementId is already fetched, by getting the corresponding appId,
 * which is the key for the initialization promises map.
 */
measurementIdToAppId) {
  /**
   * Wrapper around gtag that ensures FID is sent with gtag calls.
   * @param command Gtag command type.
   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.
   * @param gtagParams Params if event is EVENT/CONFIG.
   */
  async function gtagWrapper(command, ...args) {
    try {
      // If event, check that relevant initialization promises have completed.
      if (command === "event" /* GtagCommand.EVENT */) {
        const [measurementId, gtagParams] = args;
        // If EVENT, second arg must be measurementId.
        await gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams);
      } else if (command === "config" /* GtagCommand.CONFIG */) {
        const [measurementId, gtagParams] = args;
        // If CONFIG, second arg must be measurementId.
        await gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams);
      } else if (command === "consent" /* GtagCommand.CONSENT */) {
        const [consentAction, gtagParams] = args;
        // consentAction can be one of 'default' or 'update'.
        gtagCore("consent" /* GtagCommand.CONSENT */, consentAction, gtagParams);
      } else if (command === "get" /* GtagCommand.GET */) {
        const [measurementId, fieldName, callback] = args;
        gtagCore("get" /* GtagCommand.GET */, measurementId, fieldName, callback);
      } else if (command === "set" /* GtagCommand.SET */) {
        const [customParams] = args;
        // If SET, second arg must be params.
        gtagCore("set" /* GtagCommand.SET */, customParams);
      } else {
        gtagCore(command, ...args);
      }
    } catch (e) {
      logger.error(e);
    }
  }
  return gtagWrapper;
}
/**
 * Creates global gtag function or wraps existing one if found.
 * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and
 * 'event' calls that belong to the GAID associated with this Firebase instance.
 *
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 * @param dataLayerName Name of global GA datalayer array.
 * @param gtagFunctionName Name of global gtag function ("gtag" if not user-specified).
 */
function wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {
  // Create a basic core gtag function
  let gtagCore = function (..._args) {
    // Must push IArguments object, not an array.
    window[dataLayerName].push(arguments);
  };
  // Replace it with existing one if found
  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {
    // @ts-ignore
    gtagCore = window[gtagFunctionName];
  }
  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);
  return {
    gtagCore,
    wrappedGtag: window[gtagFunctionName]
  };
}
/**
 * Returns the script tag in the DOM matching both the gtag url pattern
 * and the provided data layer name.
 */
function findGtagScriptOnPage(dataLayerName) {
  const scriptTags = window.document.getElementsByTagName('script');
  for (const tag of Object.values(scriptTags)) {
    if (tag.src && tag.src.includes(GTAG_URL) && tag.src.includes(dataLayerName)) {
      return tag;
    }
  }
  return null;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Backoff factor for 503 errors, which we want to be conservative about
 * to avoid overloading servers. Each retry interval will be
 * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one
 * will be ~30 seconds (with fuzzing).
 */
const LONG_RETRY_FACTOR = 30;
/**
 * Base wait interval to multiplied by backoffFactor^backoffCount.
 */
const BASE_INTERVAL_MILLIS = 1000;
/**
 * Stubbable retry data storage class.
 */
class RetryData {
  constructor(throttleMetadata = {}, intervalMillis = BASE_INTERVAL_MILLIS) {
    this.throttleMetadata = throttleMetadata;
    this.intervalMillis = intervalMillis;
  }
  getThrottleMetadata(appId) {
    return this.throttleMetadata[appId];
  }
  setThrottleMetadata(appId, metadata) {
    this.throttleMetadata[appId] = metadata;
  }
  deleteThrottleMetadata(appId) {
    delete this.throttleMetadata[appId];
  }
}
const defaultRetryData = new RetryData();
/**
 * Set GET request headers.
 * @param apiKey App API key.
 */
function getHeaders(apiKey) {
  return new Headers({
    Accept: 'application/json',
    'x-goog-api-key': apiKey
  });
}
/**
 * Fetches dynamic config from backend.
 * @param app Firebase app to fetch config for.
 */
async function fetchDynamicConfig(appFields) {
  var _a;
  const {
    appId,
    apiKey
  } = appFields;
  const request = {
    method: 'GET',
    headers: getHeaders(apiKey)
  };
  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);
  const response = await fetch(appUrl, request);
  if (response.status !== 200 && response.status !== 304) {
    let errorMessage = '';
    try {
      // Try to get any error message text from server response.
      const jsonResponse = await response.json();
      if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {
        errorMessage = jsonResponse.error.message;
      }
    } catch (_ignored) {}
    throw ERROR_FACTORY.create("config-fetch-failed" /* AnalyticsError.CONFIG_FETCH_FAILED */, {
      httpStatus: response.status,
      responseMessage: errorMessage
    });
  }
  return response.json();
}
/**
 * Fetches dynamic config from backend, retrying if failed.
 * @param app Firebase app to fetch config for.
 */
async function fetchDynamicConfigWithRetry(app,
// retryData and timeoutMillis are parameterized to allow passing a different value for testing.
retryData = defaultRetryData, timeoutMillis) {
  const {
    appId,
    apiKey,
    measurementId
  } = app.options;
  if (!appId) {
    throw ERROR_FACTORY.create("no-app-id" /* AnalyticsError.NO_APP_ID */);
  }
  if (!apiKey) {
    if (measurementId) {
      return {
        measurementId,
        appId
      };
    }
    throw ERROR_FACTORY.create("no-api-key" /* AnalyticsError.NO_API_KEY */);
  }
  const throttleMetadata = retryData.getThrottleMetadata(appId) || {
    backoffCount: 0,
    throttleEndTimeMillis: Date.now()
  };
  const signal = new AnalyticsAbortSignal();
  setTimeout(async () => {
    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
    signal.abort();
  }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);
  return attemptFetchDynamicConfigWithRetry({
    appId,
    apiKey,
    measurementId
  }, throttleMetadata, signal, retryData);
}
/**
 * Runs one retry attempt.
 * @param appFields Necessary app config fields.
 * @param throttleMetadata Ongoing metadata to determine throttling times.
 * @param signal Abort signal.
 */
async function attemptFetchDynamicConfigWithRetry(appFields, {
  throttleEndTimeMillis,
  backoffCount
}, signal, retryData = defaultRetryData // for testing
) {
  var _a;
  const {
    appId,
    measurementId
  } = appFields;
  // Starts with a (potentially zero) timeout to support resumption from stored state.
  // Ensures the throttle end time is honored if the last attempt timed out.
  // Note the SDK will never make a request if the fetch timeout expires at this point.
  try {
    await setAbortableTimeout(signal, throttleEndTimeMillis);
  } catch (e) {
    if (measurementId) {
      logger.warn(`Timed out fetching this Firebase app's measurement ID from the server.` + ` Falling back to the measurement ID ${measurementId}` + ` provided in the "measurementId" field in the local Firebase config. [${e === null || e === void 0 ? void 0 : e.message}]`);
      return {
        appId,
        measurementId
      };
    }
    throw e;
  }
  try {
    const response = await fetchDynamicConfig(appFields);
    // Note the SDK only clears throttle state if response is success or non-retriable.
    retryData.deleteThrottleMetadata(appId);
    return response;
  } catch (e) {
    const error = e;
    if (!isRetriableError(error)) {
      retryData.deleteThrottleMetadata(appId);
      if (measurementId) {
        logger.warn(`Failed to fetch this Firebase app's measurement ID from the server.` + ` Falling back to the measurement ID ${measurementId}` + ` provided in the "measurementId" field in the local Firebase config. [${error === null || error === void 0 ? void 0 : error.message}]`);
        return {
          appId,
          measurementId
        };
      } else {
        throw e;
      }
    }
    const backoffMillis = Number((_a = error === null || error === void 0 ? void 0 : error.customData) === null || _a === void 0 ? void 0 : _a.httpStatus) === 503 ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : calculateBackoffMillis(backoffCount, retryData.intervalMillis);
    // Increments backoff state.
    const throttleMetadata = {
      throttleEndTimeMillis: Date.now() + backoffMillis,
      backoffCount: backoffCount + 1
    };
    // Persists state.
    retryData.setThrottleMetadata(appId, throttleMetadata);
    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);
    return attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData);
  }
}
/**
 * Supports waiting on a backoff by:
 *
 * <ul>
 *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
 *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
 *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
 *       request appear the same.</li>
 * </ul>
 *
 * <p>Visible for testing.
 */
function setAbortableTimeout(signal, throttleEndTimeMillis) {
  return new Promise((resolve, reject) => {
    // Derives backoff from given end time, normalizing negative numbers to zero.
    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
    const timeout = setTimeout(resolve, backoffMillis);
    // Adds listener, rather than sets onabort, because signal is a shared object.
    signal.addEventListener(() => {
      clearTimeout(timeout);
      // If the request completes before this timeout, the rejection has no effect.
      reject(ERROR_FACTORY.create("fetch-throttle" /* AnalyticsError.FETCH_THROTTLE */, {
        throttleEndTimeMillis
      }));
    });
  });
}
/**
 * Returns true if the {@link Error} indicates a fetch request may succeed later.
 */
function isRetriableError(e) {
  if (!(e instanceof FirebaseError) || !e.customData) {
    return false;
  }
  // Uses string index defined by ErrorData, which FirebaseError implements.
  const httpStatus = Number(e.customData['httpStatus']);
  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;
}
/**
 * Shims a minimal AbortSignal (copied from Remote Config).
 *
 * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
 * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
 * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
 * swapped out if/when we do.
 */
class AnalyticsAbortSignal {
  constructor() {
    this.listeners = [];
  }
  addEventListener(listener) {
    this.listeners.push(listener);
  }
  abort() {
    this.listeners.forEach(listener => listener());
  }
}
/**
 * Logs an analytics event through the Firebase SDK.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param eventName Google Analytics event name, choose from standard list or use a custom string.
 * @param eventParams Analytics event parameters.
 */
async function logEvent$1(gtagFunction, initializationPromise, eventName, eventParams, options) {
  if (options && options.global) {
    gtagFunction("event" /* GtagCommand.EVENT */, eventName, eventParams);
    return;
  } else {
    const measurementId = await initializationPromise;
    const params = Object.assign(Object.assign({}, eventParams), {
      'send_to': measurementId
    });
    gtagFunction("event" /* GtagCommand.EVENT */, eventName, params);
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function validateIndexedDB() {
  if (!isIndexedDBAvailable()) {
    logger.warn(ERROR_FACTORY.create("indexeddb-unavailable" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {
      errorInfo: 'IndexedDB is not available in this environment.'
    }).message);
    return false;
  } else {
    try {
      await validateIndexedDBOpenable();
    } catch (e) {
      logger.warn(ERROR_FACTORY.create("indexeddb-unavailable" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {
        errorInfo: e === null || e === void 0 ? void 0 : e.toString()
      }).message);
      return false;
    }
  }
  return true;
}
/**
 * Initialize the analytics instance in gtag.js by calling config command with fid.
 *
 * NOTE: We combine analytics initialization and setting fid together because we want fid to be
 * part of the `page_view` event that's sent during the initialization
 * @param app Firebase app
 * @param gtagCore The gtag function that's not wrapped.
 * @param dynamicConfigPromisesList Array of all dynamic config promises.
 * @param measurementIdToAppId Maps measurementID to appID.
 * @param installations _FirebaseInstallationsInternal instance.
 *
 * @returns Measurement ID.
 */
async function _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {
  var _a;
  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);
  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.
  dynamicConfigPromise.then(config => {
    measurementIdToAppId[config.measurementId] = config.appId;
    if (app.options.measurementId && config.measurementId !== app.options.measurementId) {
      logger.warn(`The measurement ID in the local Firebase config (${app.options.measurementId})` + ` does not match the measurement ID fetched from the server (${config.measurementId}).` + ` To ensure analytics events are always sent to the correct Analytics property,` + ` update the` + ` measurement ID field in the local config or remove it from the local config.`);
    }
  }).catch(e => logger.error(e));
  // Add to list to track state of all dynamic config promises.
  dynamicConfigPromisesList.push(dynamicConfigPromise);
  const fidPromise = validateIndexedDB().then(envIsValid => {
    if (envIsValid) {
      return installations.getId();
    } else {
      return undefined;
    }
  });
  const [dynamicConfig, fid] = await Promise.all([dynamicConfigPromise, fidPromise]);
  // Detect if user has already put the gtag <script> tag on this page with the passed in
  // data layer name.
  if (!findGtagScriptOnPage(dataLayerName)) {
    insertScriptTag(dataLayerName, dynamicConfig.measurementId);
  }
  // This command initializes gtag.js and only needs to be called once for the entire web app,
  // but since it is idempotent, we can call it multiple times.
  // We keep it together with other initialization logic for better code structure.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  gtagCore('js', new Date());
  // User config added first. We don't want users to accidentally overwrite
  // base Firebase config properties.
  const configProperties = (_a = options === null || options === void 0 ? void 0 : options.config) !== null && _a !== void 0 ? _a : {};
  // guard against developers accidentally setting properties with prefix `firebase_`
  configProperties[ORIGIN_KEY] = 'firebase';
  configProperties.update = true;
  if (fid != null) {
    configProperties[GA_FID_KEY] = fid;
  }
  // It should be the first config command called on this GA-ID
  // Initialize this GA-ID and set FID on it using the gtag config API.
  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in
  // `configProperties`.
  gtagCore("config" /* GtagCommand.CONFIG */, dynamicConfig.measurementId, configProperties);
  return dynamicConfig.measurementId;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Analytics Service class.
 */
class AnalyticsService {
  constructor(app) {
    this.app = app;
  }
  _delete() {
    delete initializationPromisesMap[this.app.options.appId];
    return Promise.resolve();
  }
}
/**
 * Maps appId to full initialization promise. Wrapped gtag calls must wait on
 * all or some of these, depending on the call's `send_to` param and the status
 * of the dynamic config fetches (see below).
 */
let initializationPromisesMap = {};
/**
 * List of dynamic config fetch promises. In certain cases, wrapped gtag calls
 * wait on all these to be complete in order to determine if it can selectively
 * wait for only certain initialization (FID) promises or if it must wait for all.
 */
let dynamicConfigPromisesList = [];
/**
 * Maps fetched measurementIds to appId. Populated when the app's dynamic config
 * fetch completes. If already populated, gtag config calls can use this to
 * selectively wait for only this app's initialization promise (FID) instead of all
 * initialization promises.
 */
const measurementIdToAppId = {};
/**
 * Name for window global data layer array used by GA: defaults to 'dataLayer'.
 */
let dataLayerName = 'dataLayer';
/**
 * Name for window global gtag function used by GA: defaults to 'gtag'.
 */
let gtagName = 'gtag';
/**
 * Reproduction of standard gtag function or reference to existing
 * gtag function on window object.
 */
let gtagCoreFunction;
/**
 * Wrapper around gtag function that ensures FID is sent with all
 * relevant event and config calls.
 */
let wrappedGtagFunction;
/**
 * Flag to ensure page initialization steps (creation or wrapping of
 * dataLayer and gtag script) are only run once per page load.
 */
let globalInitDone = false;
/**
 * Returns true if no environment mismatch is found.
 * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT
 * error that also lists details for each mismatch found.
 */
function warnOnBrowserContextMismatch() {
  const mismatchedEnvMessages = [];
  if (isBrowserExtension()) {
    mismatchedEnvMessages.push('This is a browser extension environment.');
  }
  if (!areCookiesEnabled()) {
    mismatchedEnvMessages.push('Cookies are not available.');
  }
  if (mismatchedEnvMessages.length > 0) {
    const details = mismatchedEnvMessages.map((message, index) => `(${index + 1}) ${message}`).join(' ');
    const err = ERROR_FACTORY.create("invalid-analytics-context" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */, {
      errorInfo: details
    });
    logger.warn(err.message);
  }
}
/**
 * Analytics instance factory.
 * @internal
 */
function factory(app, installations, options) {
  warnOnBrowserContextMismatch();
  const appId = app.options.appId;
  if (!appId) {
    throw ERROR_FACTORY.create("no-app-id" /* AnalyticsError.NO_APP_ID */);
  }
  if (!app.options.apiKey) {
    if (app.options.measurementId) {
      logger.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest` + ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` + ` provided in the "measurementId" field in the local Firebase config.`);
    } else {
      throw ERROR_FACTORY.create("no-api-key" /* AnalyticsError.NO_API_KEY */);
    }
  }
  if (initializationPromisesMap[appId] != null) {
    throw ERROR_FACTORY.create("already-exists" /* AnalyticsError.ALREADY_EXISTS */, {
      id: appId
    });
  }
  if (!globalInitDone) {
    // Steps here should only be done once per page: creation or wrapping
    // of dataLayer and global gtag function.
    getOrCreateDataLayer(dataLayerName);
    const {
      wrappedGtag,
      gtagCore
    } = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName);
    wrappedGtagFunction = wrappedGtag;
    gtagCoreFunction = gtagCore;
    globalInitDone = true;
  }
  // Async but non-blocking.
  // This map reflects the completion state of all promises for each appId.
  initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);
  const analyticsInstance = new AnalyticsService(app);
  return analyticsInstance;
}

/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Returns an {@link Analytics} instance for the given app.
 *
 * @public
 *
 * @param app - The {@link @firebase/app#FirebaseApp} to use.
 */
function getAnalytics(app = getApp()) {
  app = getModularInstance(app);
  // Dependencies
  const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);
  if (analyticsProvider.isInitialized()) {
    return analyticsProvider.getImmediate();
  }
  return initializeAnalytics(app);
}
/**
 * Returns an {@link Analytics} instance for the given app.
 *
 * @public
 *
 * @param app - The {@link @firebase/app#FirebaseApp} to use.
 */
function initializeAnalytics(app, options = {}) {
  // Dependencies
  const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);
  if (analyticsProvider.isInitialized()) {
    const existingInstance = analyticsProvider.getImmediate();
    if (deepEqual(options, analyticsProvider.getOptions())) {
      return existingInstance;
    } else {
      throw ERROR_FACTORY.create("already-initialized" /* AnalyticsError.ALREADY_INITIALIZED */);
    }
  }
  const analyticsInstance = analyticsProvider.initialize({
    options
  });
  return analyticsInstance;
}
/**
 * Sends a Google Analytics event with given `eventParams`. This method
 * automatically associates this logged event with this Firebase web
 * app instance on this device.
 * List of official event parameters can be found in the gtag.js
 * reference documentation:
 * {@link https://developers.google.com/gtagjs/reference/ga4-events
 * | the GA4 reference documentation}.
 *
 * @public
 */
function logEvent(analyticsInstance, eventName, eventParams, options) {
  analyticsInstance = getModularInstance(analyticsInstance);
  logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(e => logger.error(e));
}
const name$2 = "@firebase/analytics";
const version$2 = "0.10.11";

/**
 * The Firebase Analytics Web SDK.
 * This SDK does not work in a Node.js environment.
 *
 * @packageDocumentation
 */
function registerAnalytics() {
  _registerComponent(new Component(ANALYTICS_TYPE, (container, {
    options: analyticsOptions
  }) => {
    // getImmediate for FirebaseApp will always succeed
    const app = container.getProvider('app').getImmediate();
    const installations = container.getProvider('installations-internal').getImmediate();
    return factory(app, installations, analyticsOptions);
  }, "PUBLIC" /* ComponentType.PUBLIC */));
  _registerComponent(new Component('analytics-internal', internalFactory, "PRIVATE" /* ComponentType.PRIVATE */));
  registerVersion(name$2, version$2);
  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
  registerVersion(name$2, version$2, 'esm2017');
  function internalFactory(container) {
    try {
      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();
      return {
        logEvent: (eventName, eventParams, options) => logEvent(analytics, eventName, eventParams, options)
      };
    } catch (e) {
      throw ERROR_FACTORY.create("interop-component-reg-failed" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */, {
        reason: e
      });
    }
  }
}
registerAnalytics();

var name$1 = "firebase";
var version$1 = "11.3.0";

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
registerVersion(name$1, version$1, 'app');

function _prodErrorMap() {
  // We will include this one message in the prod error map since by the very
  // nature of this error, developers will never be able to see the message
  // using the debugErrorMap (which is installed during auth initialization).
  return {
    ["dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.'
  };
}
/**
 * A minimal error map with all verbose error messages stripped.
 *
 * See discussion at {@link AuthErrorMap}
 *
 * @public
 */
const prodErrorMap = _prodErrorMap;
const _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory('auth', 'Firebase', _prodErrorMap());

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const logClient = new Logger('@firebase/auth');
function _logWarn(msg, ...args) {
  if (logClient.logLevel <= LogLevel.WARN) {
    logClient.warn(`Auth (${SDK_VERSION}): ${msg}`, ...args);
  }
}
function _logError(msg, ...args) {
  if (logClient.logLevel <= LogLevel.ERROR) {
    logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _fail(authOrCode, ...rest) {
  throw createErrorInternal(authOrCode, ...rest);
}
function _createError(authOrCode, ...rest) {
  return createErrorInternal(authOrCode, ...rest);
}
function _errorWithCustomMessage(auth, code, message) {
  const errorMap = Object.assign(Object.assign({}, prodErrorMap()), {
    [code]: message
  });
  const factory = new ErrorFactory('auth', 'Firebase', errorMap);
  return factory.create(code, {
    appName: auth.name
  });
}
function _serverAppCurrentUserOperationNotSupportedError(auth) {
  return _errorWithCustomMessage(auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */, 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');
}
function createErrorInternal(authOrCode, ...rest) {
  if (typeof authOrCode !== 'string') {
    const code = rest[0];
    const fullParams = [...rest.slice(1)];
    if (fullParams[0]) {
      fullParams[0].appName = authOrCode.name;
    }
    return authOrCode._errorFactory.create(code, ...fullParams);
  }
  return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
}
function _assert(assertion, authOrCode, ...rest) {
  if (!assertion) {
    throw createErrorInternal(authOrCode, ...rest);
  }
}
/**
 * Unconditionally fails, throwing an internal error with the given message.
 *
 * @param failure type of failure encountered
 * @throws Error
 */
function debugFail(failure) {
  // Log the failure in addition to throw an exception, just in case the
  // exception is swallowed.
  const message = `INTERNAL ASSERTION FAILED: ` + failure;
  _logError(message);
  // NOTE: We don't use FirebaseError here because these are internal failures
  // that cannot be handled by the user. (Also it would create a circular
  // dependency between the error and assert modules which doesn't work.)
  throw new Error(message);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * @param assertion
 * @param message
 */
function debugAssert(assertion, message) {
  if (!assertion) {
    debugFail(message);
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _getCurrentUrl() {
  var _a;
  return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || '';
}
function _isHttpOrHttps() {
  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';
}
function _getCurrentScheme() {
  var _a;
  return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Determine whether the browser is working online
 */
function _isOnline() {
  if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && (
  // Apply only for traditional web apps and Chrome extensions.
  // This is especially true for Cordova apps which have unreliable
  // navigator.onLine behavior unless cordova-plugin-network-information is
  // installed which overwrites the native navigator.onLine value and
  // defines navigator.connection.
  _isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)) {
    return navigator.onLine;
  }
  // If we can't determine the state, assume it is online.
  return true;
}
function _getUserLanguage() {
  if (typeof navigator === 'undefined') {
    return null;
  }
  const navigatorLanguage = navigator;
  return (
    // Most reliable, but only supported in Chrome/Firefox.
    navigatorLanguage.languages && navigatorLanguage.languages[0] ||
    // Supported in most browsers, but returns the language of the browser
    // UI, not the language set in browser settings.
    navigatorLanguage.language ||
    // Couldn't determine language.
    null
  );
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A structure to help pick between a range of long and short delay durations
 * depending on the current environment. In general, the long delay is used for
 * mobile environments whereas short delays are used for desktop environments.
 */
class Delay {
  constructor(shortDelay, longDelay) {
    this.shortDelay = shortDelay;
    this.longDelay = longDelay;
    // Internal error when improperly initialized.
    debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');
    this.isMobile = isMobileCordova() || isReactNative();
  }
  get() {
    if (!_isOnline()) {
      // Pick the shorter timeout.
      return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);
    }
    // If running in a mobile environment, return the long delay, otherwise
    // return the short delay.
    // This could be improved in the future to dynamically change based on other
    // variables instead of just reading the current environment.
    return this.isMobile ? this.longDelay : this.shortDelay;
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _emulatorUrl(config, path) {
  debugAssert(config.emulator, 'Emulator should always be set here');
  const {
    url
  } = config.emulator;
  if (!path) {
    return url;
  }
  return `${url}${path.startsWith('/') ? path.slice(1) : path}`;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FetchProvider {
  static initialize(fetchImpl, headersImpl, responseImpl) {
    this.fetchImpl = fetchImpl;
    if (headersImpl) {
      this.headersImpl = headersImpl;
    }
    if (responseImpl) {
      this.responseImpl = responseImpl;
    }
  }
  static fetch() {
    if (this.fetchImpl) {
      return this.fetchImpl;
    }
    if (typeof self !== 'undefined' && 'fetch' in self) {
      return self.fetch;
    }
    if (typeof globalThis !== 'undefined' && globalThis.fetch) {
      return globalThis.fetch;
    }
    if (typeof fetch !== 'undefined') {
      return fetch;
    }
    debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
  }
  static headers() {
    if (this.headersImpl) {
      return this.headersImpl;
    }
    if (typeof self !== 'undefined' && 'Headers' in self) {
      return self.Headers;
    }
    if (typeof globalThis !== 'undefined' && globalThis.Headers) {
      return globalThis.Headers;
    }
    if (typeof Headers !== 'undefined') {
      return Headers;
    }
    debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
  }
  static response() {
    if (this.responseImpl) {
      return this.responseImpl;
    }
    if (typeof self !== 'undefined' && 'Response' in self) {
      return self.Response;
    }
    if (typeof globalThis !== 'undefined' && globalThis.Response) {
      return globalThis.Response;
    }
    if (typeof Response !== 'undefined') {
      return Response;
    }
    debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Map from errors returned by the server to errors to developer visible errors
 */
const SERVER_ERROR_MAP = {
  // Custom token errors.
  ["CREDENTIAL_MISMATCH" /* ServerError.CREDENTIAL_MISMATCH */]: "custom-token-mismatch" /* AuthErrorCode.CREDENTIAL_MISMATCH */,

  // This can only happen if the SDK sends a bad request.
  ["MISSING_CUSTOM_TOKEN" /* ServerError.MISSING_CUSTOM_TOKEN */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,

  // Create Auth URI errors.
  ["INVALID_IDENTIFIER" /* ServerError.INVALID_IDENTIFIER */]: "invalid-email" /* AuthErrorCode.INVALID_EMAIL */,

  // This can only happen if the SDK sends a bad request.
  ["MISSING_CONTINUE_URI" /* ServerError.MISSING_CONTINUE_URI */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,

  // Sign in with email and password errors (some apply to sign up too).
  ["INVALID_PASSWORD" /* ServerError.INVALID_PASSWORD */]: "wrong-password" /* AuthErrorCode.INVALID_PASSWORD */,

  // This can only happen if the SDK sends a bad request.
  ["MISSING_PASSWORD" /* ServerError.MISSING_PASSWORD */]: "missing-password" /* AuthErrorCode.MISSING_PASSWORD */,

  // Thrown if Email Enumeration Protection is enabled in the project and the email or password is
  // invalid.
  ["INVALID_LOGIN_CREDENTIALS" /* ServerError.INVALID_LOGIN_CREDENTIALS */]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */,

  // Sign up with email and password errors.
  ["EMAIL_EXISTS" /* ServerError.EMAIL_EXISTS */]: "email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */,
  ["PASSWORD_LOGIN_DISABLED" /* ServerError.PASSWORD_LOGIN_DISABLED */]: "operation-not-allowed" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,

  // Verify assertion for sign in with credential errors:
  ["INVALID_IDP_RESPONSE" /* ServerError.INVALID_IDP_RESPONSE */]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */,
  ["INVALID_PENDING_TOKEN" /* ServerError.INVALID_PENDING_TOKEN */]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */,
  ["FEDERATED_USER_ID_ALREADY_LINKED" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: "credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,

  // This can only happen if the SDK sends a bad request.
  ["MISSING_REQ_TYPE" /* ServerError.MISSING_REQ_TYPE */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,

  // Send Password reset email errors:
  ["EMAIL_NOT_FOUND" /* ServerError.EMAIL_NOT_FOUND */]: "user-not-found" /* AuthErrorCode.USER_DELETED */,
  ["RESET_PASSWORD_EXCEED_LIMIT" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: "too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,
  ["EXPIRED_OOB_CODE" /* ServerError.EXPIRED_OOB_CODE */]: "expired-action-code" /* AuthErrorCode.EXPIRED_OOB_CODE */,
  ["INVALID_OOB_CODE" /* ServerError.INVALID_OOB_CODE */]: "invalid-action-code" /* AuthErrorCode.INVALID_OOB_CODE */,

  // This can only happen if the SDK sends a bad request.
  ["MISSING_OOB_CODE" /* ServerError.MISSING_OOB_CODE */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,

  // Operations that require ID token in request:
  ["CREDENTIAL_TOO_OLD_LOGIN_AGAIN" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: "requires-recent-login" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,
  ["INVALID_ID_TOKEN" /* ServerError.INVALID_ID_TOKEN */]: "invalid-user-token" /* AuthErrorCode.INVALID_AUTH */,
  ["TOKEN_EXPIRED" /* ServerError.TOKEN_EXPIRED */]: "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */,
  ["USER_NOT_FOUND" /* ServerError.USER_NOT_FOUND */]: "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */,

  // Other errors.
  ["TOO_MANY_ATTEMPTS_TRY_LATER" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: "too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,
  ["PASSWORD_DOES_NOT_MEET_REQUIREMENTS" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: "password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */,

  // Phone Auth related errors.
  ["INVALID_CODE" /* ServerError.INVALID_CODE */]: "invalid-verification-code" /* AuthErrorCode.INVALID_CODE */,
  ["INVALID_SESSION_INFO" /* ServerError.INVALID_SESSION_INFO */]: "invalid-verification-id" /* AuthErrorCode.INVALID_SESSION_INFO */,
  ["INVALID_TEMPORARY_PROOF" /* ServerError.INVALID_TEMPORARY_PROOF */]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */,
  ["MISSING_SESSION_INFO" /* ServerError.MISSING_SESSION_INFO */]: "missing-verification-id" /* AuthErrorCode.MISSING_SESSION_INFO */,
  ["SESSION_EXPIRED" /* ServerError.SESSION_EXPIRED */]: "code-expired" /* AuthErrorCode.CODE_EXPIRED */,

  // Other action code errors when additional settings passed.
  // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
  // This is OK as this error will be caught by client side validation.
  ["MISSING_ANDROID_PACKAGE_NAME" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: "missing-android-pkg-name" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,
  ["UNAUTHORIZED_DOMAIN" /* ServerError.UNAUTHORIZED_DOMAIN */]: "unauthorized-continue-uri" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,

  // getProjectConfig errors when clientId is passed.
  ["INVALID_OAUTH_CLIENT_ID" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: "invalid-oauth-client-id" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,

  // User actions (sign-up or deletion) disabled errors.
  ["ADMIN_ONLY_OPERATION" /* ServerError.ADMIN_ONLY_OPERATION */]: "admin-restricted-operation" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,

  // Multi factor related errors.
  ["INVALID_MFA_PENDING_CREDENTIAL" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: "invalid-multi-factor-session" /* AuthErrorCode.INVALID_MFA_SESSION */,
  ["MFA_ENROLLMENT_NOT_FOUND" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: "multi-factor-info-not-found" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,
  ["MISSING_MFA_ENROLLMENT_ID" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: "missing-multi-factor-info" /* AuthErrorCode.MISSING_MFA_INFO */,
  ["MISSING_MFA_PENDING_CREDENTIAL" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: "missing-multi-factor-session" /* AuthErrorCode.MISSING_MFA_SESSION */,
  ["SECOND_FACTOR_EXISTS" /* ServerError.SECOND_FACTOR_EXISTS */]: "second-factor-already-in-use" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,
  ["SECOND_FACTOR_LIMIT_EXCEEDED" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: "maximum-second-factor-count-exceeded" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,

  // Blocking functions related errors.
  ["BLOCKING_FUNCTION_ERROR_RESPONSE" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,

  // Recaptcha related errors.
  ["RECAPTCHA_NOT_ENABLED" /* ServerError.RECAPTCHA_NOT_ENABLED */]: "recaptcha-not-enabled" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,
  ["MISSING_RECAPTCHA_TOKEN" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: "missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,
  ["INVALID_RECAPTCHA_TOKEN" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: "invalid-recaptcha-token" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,
  ["INVALID_RECAPTCHA_ACTION" /* ServerError.INVALID_RECAPTCHA_ACTION */]: "invalid-recaptcha-action" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,
  ["MISSING_CLIENT_TYPE" /* ServerError.MISSING_CLIENT_TYPE */]: "missing-client-type" /* AuthErrorCode.MISSING_CLIENT_TYPE */,
  ["MISSING_RECAPTCHA_VERSION" /* ServerError.MISSING_RECAPTCHA_VERSION */]: "missing-recaptcha-version" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,
  ["INVALID_RECAPTCHA_VERSION" /* ServerError.INVALID_RECAPTCHA_VERSION */]: "invalid-recaptcha-version" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,
  ["INVALID_REQ_TYPE" /* ServerError.INVALID_REQ_TYPE */]: "invalid-req-type" /* AuthErrorCode.INVALID_REQ_TYPE */
};

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);
function _addTidIfNecessary(auth, request) {
  if (auth.tenantId && !request.tenantId) {
    return Object.assign(Object.assign({}, request), {
      tenantId: auth.tenantId
    });
  }
  return request;
}
async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {
  return _performFetchWithErrorHandling(auth, customErrorMap, async () => {
    let body = {};
    let params = {};
    if (request) {
      if (method === "GET" /* HttpMethod.GET */) {
        params = request;
      } else {
        body = {
          body: JSON.stringify(request)
        };
      }
    }
    const query = querystring(Object.assign({
      key: auth.config.apiKey
    }, params)).slice(1);
    const headers = await auth._getAdditionalHeaders();
    headers["Content-Type" /* HttpHeader.CONTENT_TYPE */] = 'application/json';
    if (auth.languageCode) {
      headers["X-Firebase-Locale" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;
    }
    const fetchArgs = Object.assign({
      method,
      headers
    }, body);
    /* Security-conscious server-side frameworks tend to have built in mitigations for referrer
       problems". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on
       'RequestInitializerDict' is not implemented."
       https://github.com/cloudflare/next-on-pages/issues/487 */
    if (!isCloudflareWorker()) {
      fetchArgs.referrerPolicy = 'no-referrer';
    }
    return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs);
  });
}
async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
  auth._canInitEmulator = false;
  const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);
  try {
    const networkTimeout = new NetworkTimeout(auth);
    const response = await Promise.race([fetchFn(), networkTimeout.promise]);
    // If we've reached this point, the fetch succeeded and the networkTimeout
    // didn't throw; clear the network timeout delay so that Node won't hang
    networkTimeout.clearNetworkTimeout();
    const json = await response.json();
    if ('needConfirmation' in json) {
      throw _makeTaggedError(auth, "account-exists-with-different-credential" /* AuthErrorCode.NEED_CONFIRMATION */, json);
    }
    if (response.ok && !('errorMessage' in json)) {
      return json;
    } else {
      const errorMessage = response.ok ? json.errorMessage : json.error.message;
      const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');
      if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {
        throw _makeTaggedError(auth, "credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);
      } else if (serverErrorCode === "EMAIL_EXISTS" /* ServerError.EMAIL_EXISTS */) {
        throw _makeTaggedError(auth, "email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */, json);
      } else if (serverErrorCode === "USER_DISABLED" /* ServerError.USER_DISABLED */) {
        throw _makeTaggedError(auth, "user-disabled" /* AuthErrorCode.USER_DISABLED */, json);
      }
      const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\s]+/g, '-');
      if (serverErrorMessage) {
        throw _errorWithCustomMessage(auth, authError, serverErrorMessage);
      } else {
        _fail(auth, authError);
      }
    }
  } catch (e) {
    if (e instanceof FirebaseError) {
      throw e;
    }
    // Changing this to a different error code will log user out when there is a network error
    // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.
    // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316
    _fail(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, {
      'message': String(e)
    });
  }
}
async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {
  const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);
  if ('mfaPendingCredential' in serverResponse) {
    _fail(auth, "multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */, {
      _serverResponse: serverResponse
    });
  }
  return serverResponse;
}
function _getFinalTarget(auth, host, path, query) {
  const base = `${host}${path}?${query}`;
  if (!auth.config.emulator) {
    return `${auth.config.apiScheme}://${base}`;
  }
  return _emulatorUrl(auth.config, base);
}
class NetworkTimeout {
  clearNetworkTimeout() {
    clearTimeout(this.timer);
  }
  constructor(auth) {
    this.auth = auth;
    // Node timers and browser timers are fundamentally incompatible, but we
    // don't care about the value here
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    this.timer = null;
    this.promise = new Promise((_, reject) => {
      this.timer = setTimeout(() => {
        return reject(_createError(this.auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));
      }, DEFAULT_API_TIMEOUT_MS.get());
    });
  }
}
function _makeTaggedError(auth, code, response) {
  const errorParams = {
    appName: auth.name
  };
  if (response.email) {
    errorParams.email = response.email;
  }
  if (response.phoneNumber) {
    errorParams.phoneNumber = response.phoneNumber;
  }
  const error = _createError(auth, code, errorParams);
  // We know customData is defined on error because errorParams is defined
  error.customData._tokenResponse = response;
  return error;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function deleteAccount(auth, request) {
  return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:delete" /* Endpoint.DELETE_ACCOUNT */, request);
}
async function getAccountInfo(auth, request) {
  return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:lookup" /* Endpoint.GET_ACCOUNT_INFO */, request);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function utcTimestampToDateString(utcTimestamp) {
  if (!utcTimestamp) {
    return undefined;
  }
  try {
    // Convert to date object.
    const date = new Date(Number(utcTimestamp));
    // Test date is valid.
    if (!isNaN(date.getTime())) {
      // Convert to UTC date string.
      return date.toUTCString();
    }
  } catch (e) {
    // Do nothing. undefined will be returned.
  }
  return undefined;
}
/**
 * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.
 *
 * @remarks
 * Returns the current token if it has not expired or if it will not expire in the next five
 * minutes. Otherwise, this will refresh the token and return a new one.
 *
 * @param user - The user.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */
async function getIdTokenResult(user, forceRefresh = false) {
  const userInternal = getModularInstance(user);
  const token = await userInternal.getIdToken(forceRefresh);
  const claims = _parseToken(token);
  _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
  const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;
  const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];
  return {
    claims,
    token,
    authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
    issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
    expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
    signInProvider: signInProvider || null,
    signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null
  };
}
function secondsStringToMilliseconds(seconds) {
  return Number(seconds) * 1000;
}
function _parseToken(token) {
  const [algorithm, payload, signature] = token.split('.');
  if (algorithm === undefined || payload === undefined || signature === undefined) {
    _logError('JWT malformed, contained fewer than 3 sections');
    return null;
  }
  try {
    const decoded = base64Decode(payload);
    if (!decoded) {
      _logError('Failed to decode base64 JWT payload');
      return null;
    }
    return JSON.parse(decoded);
  } catch (e) {
    _logError('Caught error parsing JWT payload as JSON', e === null || e === void 0 ? void 0 : e.toString());
    return null;
  }
}
/**
 * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.
 */
function _tokenExpiresIn(token) {
  const parsedToken = _parseToken(token);
  _assert(parsedToken, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
  _assert(typeof parsedToken.exp !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
  _assert(typeof parsedToken.iat !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
  return Number(parsedToken.exp) - Number(parsedToken.iat);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {
  if (bypassAuthState) {
    return promise;
  }
  try {
    return await promise;
  } catch (e) {
    if (e instanceof FirebaseError && isUserInvalidated(e)) {
      if (user.auth.currentUser === user) {
        await user.auth.signOut();
      }
    }
    throw e;
  }
}
function isUserInvalidated({
  code
}) {
  return code === `auth/${"user-disabled" /* AuthErrorCode.USER_DISABLED */}` || code === `auth/${"user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */}`;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProactiveRefresh {
  constructor(user) {
    this.user = user;
    this.isRunning = false;
    // Node timers and browser timers return fundamentally different types.
    // We don't actually care what the value is but TS won't accept unknown and
    // we can't cast properly in both environments.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    this.timerId = null;
    this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;
  }
  _start() {
    if (this.isRunning) {
      return;
    }
    this.isRunning = true;
    this.schedule();
  }
  _stop() {
    if (!this.isRunning) {
      return;
    }
    this.isRunning = false;
    if (this.timerId !== null) {
      clearTimeout(this.timerId);
    }
  }
  getInterval(wasError) {
    var _a;
    if (wasError) {
      const interval = this.errorBackoff;
      this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);
      return interval;
    } else {
      // Reset the error backoff
      this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;
      const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
      const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;
      return Math.max(0, interval);
    }
  }
  schedule(wasError = false) {
    if (!this.isRunning) {
      // Just in case...
      return;
    }
    const interval = this.getInterval(wasError);
    this.timerId = setTimeout(async () => {
      await this.iteration();
    }, interval);
  }
  async iteration() {
    try {
      await this.user.getIdToken(true);
    } catch (e) {
      // Only retry on network errors
      if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${"network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {
        this.schedule(/* wasError */true);
      }
      return;
    }
    this.schedule();
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UserMetadata {
  constructor(createdAt, lastLoginAt) {
    this.createdAt = createdAt;
    this.lastLoginAt = lastLoginAt;
    this._initializeTime();
  }
  _initializeTime() {
    this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
    this.creationTime = utcTimestampToDateString(this.createdAt);
  }
  _copy(metadata) {
    this.createdAt = metadata.createdAt;
    this.lastLoginAt = metadata.lastLoginAt;
    this._initializeTime();
  }
  toJSON() {
    return {
      createdAt: this.createdAt,
      lastLoginAt: this.lastLoginAt
    };
  }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function _reloadWithoutSaving(user) {
  var _a;
  const auth = user.auth;
  const idToken = await user.getIdToken();
  const response = await _logoutIfInvalidated(user, getAccountInfo(auth, {
    idToken
  }));
  _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
  const coreAccount = response.users[0];
  user._notifyReloadListener(coreAccount);
  const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];
  const providerData = mergeProviderData(user.providerData, newProviderData);
  // Preserves the non-nonymous status of the stored user, even if no more
  // credentials (federated or email/password) are linked to the user. If
  // the user was previously anonymous, then use provider data to update.
  // On the other hand, if it was not anonymous before, it should never be
  // considered anonymous now.
  const oldIsAnonymous = user.isAnonymous;
  const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
  const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
  const updates = {
    uid: coreAccount.localId,
    displayName: coreAccount.displayName || null,
    photoURL: coreAccount.photoUrl || null,
    email: coreAccount.email || null,
    emailVerified: coreAccount.emailVerified || false,
    phoneNumber: coreAccount.phoneNumber || null,
    tenantId: coreAccount.tenantId || null,
    providerData,
    metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
    isAnonymous
  };
  Object.assign(user, updates);
}
/**
 * Reloads user account data, if signed in.
 *
 * @param user - The user.
 *
 * @public
 */
async function reload(user) {
  const userInternal = getModularInstance(user);
  await _reloadWithoutSaving(userInternal);
  // Even though the current user hasn't changed, update
  // current user will trigger a persistence update w/ the
  // new info.
  await userInternal.auth._persistUserIfCurrent(userInternal);
  userInternal.auth._notifyListenersIfCurrent(userInternal);
}
function mergeProviderData(original, newData) {
  const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));
  return [...deduped, ...newData];
}
function extractProviderData(providers) {
  return providers.map(_a => {
    var {
        providerId
      } = _a,
      provider = __rest(_a, ["providerId"]);
    return {
      providerId,
      uid: provider.rawId || '',
      displayName: provider.displayName || null,
      email: provider.email || null,
      phoneNumber: provider.phoneNumber || null,
      photoURL: provider.photoUrl || null
    };
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function requestStsToken(auth, refreshToken) {
  const response = await _performFetchWithErrorHandling(auth, {}, async () => {
    const body = querystring({
      'grant_type': 'refresh_token',
      'refresh_token': refreshToken
    }).slice(1);
    const {
      tokenApiHost,
      apiKey
    } = auth.config;
    const url = _getFinalTarget(auth, tokenApiHost, "/v1/token" /* Endpoint.TOKEN */, `key=${apiKey}`);
    const headers = await auth._getAdditionalHeaders();
    headers["Content-Type" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';
    return FetchProvider.fetch()(url, {
      method: "POST" /* HttpMethod.POST */,
      headers,
      body
    });
  });
  // The response comes back in snake_case. Convert to camel:
  return {
    accessToken: response.access_token,
    expiresIn: response.expires_in,
    refreshToken: response.refresh_token
  };
}
async function revokeToken(auth, request) {
  return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v2/accounts:revokeToken" /* Endpoint.REVOKE_TOKEN */, _addTidIfNecessary(auth, request));
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * We need to mark this class as internal explicitly to exclude it in the public typings, because
 * it references AuthInternal which has a circular dependency with UserInternal.
 *
 * @internal
 */
class StsTokenManager {
  constructor() {
    this.refreshToken = null;
    this.accessToken = null;
    this.expirationTime = null;
  }
  get isExpired() {
    return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */;
  }
  updateFromServerResponse(response) {
    _assert(response.idToken, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    _assert(typeof response.idToken !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    _assert(typeof response.refreshToken !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);
    this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
  }
  updateFromIdToken(idToken) {
    _assert(idToken.length !== 0, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    const expiresIn = _tokenExpiresIn(idToken);
    this.updateTokensAndExpiration(idToken, null, expiresIn);
  }
  async getToken(auth, forceRefresh = false) {
    if (!forceRefresh && this.accessToken && !this.isExpired) {
      return this.accessToken;
    }
    _assert(this.refreshToken, auth, "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */);
    if (this.refreshToken) {
      await this.refresh(auth, this.refreshToken);
      return this.accessToken;
    }
    return null;
  }
  clearRefreshToken() {
    this.refreshToken = null;
  }
  async refresh(auth, oldToken) {
    const {
      accessToken,
      refreshToken,
      expiresIn
    } = await requestStsToken(auth, oldToken);
    this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
  }
  updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
    this.refreshToken = refreshToken || null;
    this.accessToken = accessToken || null;
    this.expirationTime = Date.now() + expiresInSec * 1000;
  }
  static fromJSON(appName, object) {
    const {
      refreshToken,
      accessToken,
      expirationTime
    } = object;
    const manager = new StsTokenManager();
    if (refreshToken) {
      _assert(typeof refreshToken === 'string', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, {
        appName
      });
      manager.refreshToken = refreshToken;
    }
    if (accessToken) {
      _assert(typeof accessToken === 'string', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, {
        appName
      });
      manager.accessToken = accessToken;
    }
    if (expirationTime) {
      _assert(typeof expirationTime === 'number', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, {
        appName
      });
      manager.expirationTime = expirationTime;
    }
    return manager;
  }
  toJSON() {
    return {
      refreshToken: this.refreshToken,
      accessToken: this.accessToken,
      expirationTime: this.expirationTime
    };
  }
  _assign(stsTokenManager) {
    this.accessToken = stsTokenManager.accessToken;
    this.refreshToken = stsTokenManager.refreshToken;
    this.expirationTime = stsTokenManager.expirationTime;
  }
  _clone() {
    return Object.assign(new StsTokenManager(), this.toJSON());
  }
  _performRefresh() {
    return debugFail('not implemented');
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function assertStringOrUndefined(assertion, appName) {
  _assert(typeof assertion === 'string' || typeof assertion === 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, {
    appName
  });
}
class UserImpl {
  constructor(_a) {
    var {
        uid,
        auth,
        stsTokenManager
      } = _a,
      opt = __rest(_a, ["uid", "auth", "stsTokenManager"]);
    // For the user object, provider is always Firebase.
    this.providerId = "firebase" /* ProviderId.FIREBASE */;
    this.proactiveRefresh = new ProactiveRefresh(this);
    this.reloadUserInfo = null;
    this.reloadListener = null;
    this.uid = uid;
    this.auth = auth;
    this.stsTokenManager = stsTokenManager;
    this.accessToken = stsTokenManager.accessToken;
    this.displayName = opt.displayName || null;
    this.email = opt.email || null;
    this.emailVerified = opt.emailVerified || false;
    this.phoneNumber = opt.phoneNumber || null;
    this.photoURL = opt.photoURL || null;
    this.isAnonymous = opt.isAnonymous || false;
    this.tenantId = opt.tenantId || null;
    this.providerData = opt.providerData ? [...opt.providerData] : [];
    this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);
  }
  async getIdToken(forceRefresh) {
    const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));
    _assert(accessToken, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    if (this.accessToken !== accessToken) {
      this.accessToken = accessToken;
      await this.auth._persistUserIfCurrent(this);
      this.auth._notifyListenersIfCurrent(this);
    }
    return accessToken;
  }
  getIdTokenResult(forceRefresh) {
    return getIdTokenResult(this, forceRefresh);
  }
  reload() {
    return reload(this);
  }
  _assign(user) {
    if (this === user) {
      return;
    }
    _assert(this.uid === user.uid, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    this.displayName = user.displayName;
    this.photoURL = user.photoURL;
    this.email = user.email;
    this.emailVerified = user.emailVerified;
    this.phoneNumber = user.phoneNumber;
    this.isAnonymous = user.isAnonymous;
    this.tenantId = user.tenantId;
    this.providerData = user.providerData.map(userInfo => Object.assign({}, userInfo));
    this.metadata._copy(user.metadata);
    this.stsTokenManager._assign(user.stsTokenManager);
  }
  _clone(auth) {
    const newUser = new UserImpl(Object.assign(Object.assign({}, this), {
      auth,
      stsTokenManager: this.stsTokenManager._clone()
    }));
    newUser.metadata._copy(this.metadata);
    return newUser;
  }
  _onReload(callback) {
    // There should only ever be one listener, and that is a single instance of MultiFactorUser
    _assert(!this.reloadListener, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    this.reloadListener = callback;
    if (this.reloadUserInfo) {
      this._notifyReloadListener(this.reloadUserInfo);
      this.reloadUserInfo = null;
    }
  }
  _notifyReloadListener(userInfo) {
    if (this.reloadListener) {
      this.reloadListener(userInfo);
    } else {
      // If no listener is subscribed yet, save the result so it's available when they do subscribe
      this.reloadUserInfo = userInfo;
    }
  }
  _startProactiveRefresh() {
    this.proactiveRefresh._start();
  }
  _stopProactiveRefresh() {
    this.proactiveRefresh._stop();
  }
  async _updateTokensIfNecessary(response, reload = false) {
    let tokensRefreshed = false;
    if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {
      this.stsTokenManager.updateFromServerResponse(response);
      tokensRefreshed = true;
    }
    if (reload) {
      await _reloadWithoutSaving(this);
    }
    await this.auth._persistUserIfCurrent(this);
    if (tokensRefreshed) {
      this.auth._notifyListenersIfCurrent(this);
    }
  }
  async delete() {
    if (_isFirebaseServerApp(this.auth.app)) {
      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));
    }
    const idToken = await this.getIdToken();
    await _logoutIfInvalidated(this, deleteAccount(this.auth, {
      idToken
    }));
    this.stsTokenManager.clearRefreshToken();
    // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()
    //       cancels pending actions...
    return this.auth.signOut();
  }
  toJSON() {
    return Object.assign(Object.assign({
      uid: this.uid,
      email: this.email || undefined,
      emailVerified: this.emailVerified,
      displayName: this.displayName || undefined,
      isAnonymous: this.isAnonymous,
      photoURL: this.photoURL || undefined,
      phoneNumber: this.phoneNumber || undefined,
      tenantId: this.tenantId || undefined,
      providerData: this.providerData.map(userInfo => Object.assign({}, userInfo)),
      stsTokenManager: this.stsTokenManager.toJSON(),
      // Redirect event ID must be maintained in case there is a pending
      // redirect event.
      _redirectEventId: this._redirectEventId
    }, this.metadata.toJSON()), {
      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
      apiKey: this.auth.config.apiKey,
      appName: this.auth.name
    });
  }
  get refreshToken() {
    return this.stsTokenManager.refreshToken || '';
  }
  static _fromJSON(auth, object) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;
    const email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;
    const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;
    const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;
    const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;
    const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;
    const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;
    const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;
    const {
      uid,
      emailVerified,
      isAnonymous,
      providerData,
      stsTokenManager: plainObjectTokenManager
    } = object;
    _assert(uid && plainObjectTokenManager, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
    _assert(typeof uid === 'string', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    assertStringOrUndefined(displayName, auth.name);
    assertStringOrUndefined(email, auth.name);
    _assert(typeof emailVerified === 'boolean', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    _assert(typeof isAnonymous === 'boolean', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    assertStringOrUndefined(phoneNumber, auth.name);
    assertStringOrUndefined(photoURL, auth.name);
    assertStringOrUndefined(tenantId, auth.name);
    assertStringOrUndefined(_redirectEventId, auth.name);
    assertStringOrUndefined(createdAt, auth.name);
    assertStringOrUndefined(lastLoginAt, auth.name);
    const user = new UserImpl({
      uid,
      auth,
      email,
      emailVerified,
      displayName,
      isAnonymous,
      photoURL,
      phoneNumber,
      tenantId,
      stsTokenManager,
      createdAt,
      lastLoginAt
    });
    if (providerData && Array.isArray(providerData)) {
      user.providerData = providerData.map(userInfo => Object.assign({}, userInfo));
    }
    if (_redirectEventId) {
      user._redirectEventId = _redirectEventId;
    }
    return user;
  }
  /**
   * Initialize a User from an idToken server response
   * @param auth
   * @param idTokenResponse
   */
  static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {
    const stsTokenManager = new StsTokenManager();
    stsTokenManager.updateFromServerResponse(idTokenResponse);
    // Initialize the Firebase Auth user.
    const user = new UserImpl({
      uid: idTokenResponse.localId,
      auth,
      stsTokenManager,
      isAnonymous
    });
    // Updates the user info and data and resolves with a user instance.
    await _reloadWithoutSaving(user);
    return user;
  }
  /**
   * Initialize a User from an idToken server response
   * @param auth
   * @param idTokenResponse
   */
  static async _fromGetAccountInfoResponse(auth, response, idToken) {
    const coreAccount = response.users[0];
    _assert(coreAccount.localId !== undefined, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    const providerData = coreAccount.providerUserInfo !== undefined ? extractProviderData(coreAccount.providerUserInfo) : [];
    const isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
    const stsTokenManager = new StsTokenManager();
    stsTokenManager.updateFromIdToken(idToken);
    // Initialize the Firebase Auth user.
    const user = new UserImpl({
      uid: coreAccount.localId,
      auth,
      stsTokenManager,
      isAnonymous
    });
    // update the user with data from the GetAccountInfo response.
    const updates = {
      uid: coreAccount.localId,
      displayName: coreAccount.displayName || null,
      photoURL: coreAccount.photoUrl || null,
      email: coreAccount.email || null,
      emailVerified: coreAccount.emailVerified || false,
      phoneNumber: coreAccount.phoneNumber || null,
      tenantId: coreAccount.tenantId || null,
      providerData,
      metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
      isAnonymous: !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length)
    };
    Object.assign(user, updates);
    return user;
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const instanceCache = new Map();
function _getInstance(cls) {
  debugAssert(cls instanceof Function, 'Expected a class definition');
  let instance = instanceCache.get(cls);
  if (instance) {
    debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');
    return instance;
  }
  instance = new cls();
  instanceCache.set(cls, instance);
  return instance;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class InMemoryPersistence {
  constructor() {
    this.type = "NONE" /* PersistenceType.NONE */;
    this.storage = {};
  }
  async _isAvailable() {
    return true;
  }
  async _set(key, value) {
    this.storage[key] = value;
  }
  async _get(key) {
    const value = this.storage[key];
    return value === undefined ? null : value;
  }
  async _remove(key) {
    delete this.storage[key];
  }
  _addListener(_key, _listener) {
    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
    return;
  }
  _removeListener(_key, _listener) {
    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
    return;
  }
}
InMemoryPersistence.type = 'NONE';
/**
 * An implementation of {@link Persistence} of type 'NONE'.
 *
 * @public
 */
const inMemoryPersistence = InMemoryPersistence;

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _persistenceKeyName(key, apiKey, appName) {
  return `${"firebase" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;
}
class PersistenceUserManager {
  constructor(persistence, auth, userKey) {
    this.persistence = persistence;
    this.auth = auth;
    this.userKey = userKey;
    const {
      config,
      name
    } = this.auth;
    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);
    this.fullPersistenceKey = _persistenceKeyName("persistence" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);
    this.boundEventHandler = auth._onStorageEvent.bind(auth);
    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
  }
  setCurrentUser(user) {
    return this.persistence._set(this.fullUserKey, user.toJSON());
  }
  async getCurrentUser() {
    const blob = await this.persistence._get(this.fullUserKey);
    return blob ? UserImpl._fromJSON(this.auth, blob) : null;
  }
  removeCurrentUser() {
    return this.persistence._remove(this.fullUserKey);
  }
  savePersistenceForRedirect() {
    return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
  }
  async setPersistence(newPersistence) {
    if (this.persistence === newPersistence) {
      return;
    }
    const currentUser = await this.getCurrentUser();
    await this.removeCurrentUser();
    this.persistence = newPersistence;
    if (currentUser) {
      return this.setCurrentUser(currentUser);
    }
  }
  delete() {
    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
  }
  static async create(auth, persistenceHierarchy, userKey = "authUser" /* KeyName.AUTH_USER */) {
    if (!persistenceHierarchy.length) {
      return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);
    }
    // Eliminate any persistences that are not available
    const availablePersistences = (await Promise.all(persistenceHierarchy.map(async persistence => {
      if (await persistence._isAvailable()) {
        return persistence;
      }
      return undefined;
    }))).filter(persistence => persistence);
    // Fall back to the first persistence listed, or in memory if none available
    let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);
    const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);
    // Pull out the existing user, setting the chosen persistence to that
    // persistence if the user exists.
    let userToMigrate = null;
    // Note, here we check for a user in _all_ persistences, not just the
    // ones deemed available. If we can migrate a user out of a broken
    // persistence, we will (but only if that persistence supports migration).
    for (const persistence of persistenceHierarchy) {
      try {
        const blob = await persistence._get(key);
        if (blob) {
          const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)
          if (persistence !== selectedPersistence) {
            userToMigrate = user;
          }
          selectedPersistence = persistence;
          break;
        }
      } catch (_a) {}
    }
    // If we find the user in a persistence that does support migration, use
    // that migration path (of only persistences that support migration)
    const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);
    // If the persistence does _not_ allow migration, just finish off here
    if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {
      return new PersistenceUserManager(selectedPersistence, auth, userKey);
    }
    selectedPersistence = migrationHierarchy[0];
    if (userToMigrate) {
      // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does
      // we'll just let it bubble to surface the error.
      await selectedPersistence._set(key, userToMigrate.toJSON());
    }
    // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues
    // such as users getting stuck with a previous account after signing out and refreshing the tab.
    await Promise.all(persistenceHierarchy.map(async persistence => {
      if (persistence !== selectedPersistence) {
        try {
          await persistence._remove(key);
        } catch (_a) {}
      }
    }));
    return new PersistenceUserManager(selectedPersistence, auth, userKey);
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Determine the browser for the purposes of reporting usage to the API
 */
function _getBrowserName(userAgent) {
  const ua = userAgent.toLowerCase();
  if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {
    return "Opera" /* BrowserName.OPERA */;
  } else if (_isIEMobile(ua)) {
    // Windows phone IEMobile browser.
    return "IEMobile" /* BrowserName.IEMOBILE */;
  } else if (ua.includes('msie') || ua.includes('trident/')) {
    return "IE" /* BrowserName.IE */;
  } else if (ua.includes('edge/')) {
    return "Edge" /* BrowserName.EDGE */;
  } else if (_isFirefox(ua)) {
    return "Firefox" /* BrowserName.FIREFOX */;
  } else if (ua.includes('silk/')) {
    return "Silk" /* BrowserName.SILK */;
  } else if (_isBlackBerry(ua)) {
    // Blackberry browser.
    return "Blackberry" /* BrowserName.BLACKBERRY */;
  } else if (_isWebOS(ua)) {
    // WebOS default browser.
    return "Webos" /* BrowserName.WEBOS */;
  } else if (_isSafari(ua)) {
    return "Safari" /* BrowserName.SAFARI */;
  } else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) {
    return "Chrome" /* BrowserName.CHROME */;
  } else if (_isAndroid(ua)) {
    // Android stock browser.
    return "Android" /* BrowserName.ANDROID */;
  } else {
    // Most modern browsers have name/version at end of user agent string.
    const re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
    const matches = userAgent.match(re);
    if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {
      return matches[1];
    }
  }
  return "Other" /* BrowserName.OTHER */;
}
function _isFirefox(ua = getUA()) {
  return /firefox\//i.test(ua);
}
function _isSafari(userAgent = getUA()) {
  const ua = userAgent.toLowerCase();
  return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');
}
function _isChromeIOS(ua = getUA()) {
  return /crios\//i.test(ua);
}
function _isIEMobile(ua = getUA()) {
  return /iemobile/i.test(ua);
}
function _isAndroid(ua = getUA()) {
  return /android/i.test(ua);
}
function _isBlackBerry(ua = getUA()) {
  return /blackberry/i.test(ua);
}
function _isWebOS(ua = getUA()) {
  return /webos/i.test(ua);
}
function _isIOS(ua = getUA()) {
  return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);
}
function _isIOSStandalone(ua = getUA()) {
  var _a;
  return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);
}
function _isIE10() {
  return isIE() && document.documentMode === 10;
}
function _isMobileBrowser(ua = getUA()) {
  // TODO: implement getBrowserName equivalent for OS.
  return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Determine the SDK version string
 */
function _getClientVersion(clientPlatform, frameworks = []) {
  let reportedPlatform;
  switch (clientPlatform) {
    case "Browser" /* ClientPlatform.BROWSER */:
      // In a browser environment, report the browser name.
      reportedPlatform = _getBrowserName(getUA());
      break;
    case "Worker" /* ClientPlatform.WORKER */:
      // Technically a worker runs from a browser but we need to differentiate a
      // worker from a browser.
      // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.
      reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;
      break;
    default:
      reportedPlatform = clientPlatform;
  }
  const reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web'; /* default value if no other framework is used */
  return `${reportedPlatform}/${"JsCore" /* ClientImplementation.CORE */}/${SDK_VERSION}/${reportedFrameworks}`;
}

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AuthMiddlewareQueue {
  constructor(auth) {
    this.auth = auth;
    this.queue = [];
  }
  pushCallback(callback, onAbort) {
    // The callback could be sync or async. Wrap it into a
    // function that is always async.
    const wrappedCallback = user => new Promise((resolve, reject) => {
      try {
        const result = callback(user);
        // Either resolve with existing promise or wrap a non-promise
        // return value into a promise.
        resolve(result);
      } catch (e) {
        // Sync callback throws.
        reject(e);
      }
    });
    // Attach the onAbort if present
    wrappedCallback.onAbort = onAbort;
    this.queue.push(wrappedCallback);
    const index = this.queue.length - 1;
    return () => {
      // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb
      // indexing of other elements.
      this.queue[index] = () => Promise.resolve();
    };
  }
  async runMiddleware(nextUser) {
    if (this.auth.currentUser === nextUser) {
      return;
    }
    // While running the middleware, build a temporary stack of onAbort
    // callbacks to call if one middleware callback rejects.
    const onAbortStack = [];
    try {
      for (const beforeStateCallback of this.queue) {
        await beforeStateCallback(nextUser);
        // Only push the onAbort if the callback succeeds
        if (beforeStateCallback.onAbort) {
          onAbortStack.push(beforeStateCallback.onAbort);
        }
      }
    } catch (e) {
      // Run all onAbort, with separate try/catch to ignore any errors and
      // continue
      onAbortStack.reverse();
      for (const onAbort of onAbortStack) {
        try {
          onAbort();
        } catch (_) {
          /* swallow error */
        }
      }
      throw this.auth._errorFactory.create("login-blocked" /* AuthErrorCode.LOGIN_BLOCKED */, {
        originalMessage: e === null || e === void 0 ? void 0 : e.message
      });
    }
  }
}

/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Fetches the password policy for the currently set tenant or the project if no tenant is set.
 *
 * @param auth Auth object.
 * @param request Password policy request.
 * @returns Password policy response.
 */
async function _getPasswordPolicy(auth, request = {}) {
  return _performApiRequest(auth, "GET" /* HttpMethod.GET */, "/v2/passwordPolicy" /* Endpoint.GET_PASSWORD_POLICY */, _addTidIfNecessary(auth, request));
}

/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Minimum min password length enforced by the backend, even if no minimum length is set.
const MINIMUM_MIN_PASSWORD_LENGTH = 6;
/**
 * Stores password policy requirements and provides password validation against the policy.
 *
 * @internal
 */
class PasswordPolicyImpl {
  constructor(response) {
    var _a, _b, _c, _d;
    // Only include custom strength options defined in the response.
    const responseOptions = response.customStrengthOptions;
    this.customStrengthOptions = {};
    // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.
    this.customStrengthOptions.minPasswordLength = (_a = responseOptions.minPasswordLength) !== null && _a !== void 0 ? _a : MINIMUM_MIN_PASSWORD_LENGTH;
    if (responseOptions.maxPasswordLength) {
      this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;
    }
    if (responseOptions.containsLowercaseCharacter !== undefined) {
      this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;
    }
    if (responseOptions.containsUppercaseCharacter !== undefined) {
      this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;
    }
    if (responseOptions.containsNumericCharacter !== undefined) {
      this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;
    }
    if (responseOptions.containsNonAlphanumericCharacter !== undefined) {
      this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;
    }
    this.enforcementState = response.enforcementState;
    if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {
      this.enforcementState = 'OFF';
    }
    // Use an empty string if no non-alphanumeric characters are specified in the response.
    this.allowedNonAlphanumericCharacters = (_c = (_b = response.allowedNonAlphanumericCharacters) === null || _b === void 0 ? void 0 : _b.join('')) !== null && _c !== void 0 ? _c : '';
    this.forceUpgradeOnSignin = (_d = response.forceUpgradeOnSignin) !== null && _d !== void 0 ? _d : false;
    this.schemaVersion = response.schemaVersion;
  }
  validatePassword(password) {
    var _a, _b, _c, _d, _e, _f;
    const status = {
      isValid: true,
      passwordPolicy: this
    };
    // Check the password length and character options.
    this.validatePasswordLengthOptions(password, status);
    this.validatePasswordCharacterOptions(password, status);
    // Combine the status into single isValid property.
    status.isValid && (status.isValid = (_a = status.meetsMinPasswordLength) !== null && _a !== void 0 ? _a : true);
    status.isValid && (status.isValid = (_b = status.meetsMaxPasswordLength) !== null && _b !== void 0 ? _b : true);
    status.isValid && (status.isValid = (_c = status.containsLowercaseLetter) !== null && _c !== void 0 ? _c : true);
    status.isValid && (status.isValid = (_d = status.containsUppercaseLetter) !== null && _d !== void 0 ? _d : true);
    status.isValid && (status.isValid = (_e = status.containsNumericCharacter) !== null && _e !== void 0 ? _e : true);
    status.isValid && (status.isValid = (_f = status.containsNonAlphanumericCharacter) !== null && _f !== void 0 ? _f : true);
    return status;
  }
  /**
   * Validates that the password meets the length options for the policy.
   *
   * @param password Password to validate.
   * @param status Validation status.
   */
  validatePasswordLengthOptions(password, status) {
    const minPasswordLength = this.customStrengthOptions.minPasswordLength;
    const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;
    if (minPasswordLength) {
      status.meetsMinPasswordLength = password.length >= minPasswordLength;
    }
    if (maxPasswordLength) {
      status.meetsMaxPasswordLength = password.length <= maxPasswordLength;
    }
  }
  /**
   * Validates that the password meets the character options for the policy.
   *
   * @param password Password to validate.
   * @param status Validation status.
   */
  validatePasswordCharacterOptions(password, status) {
    // Assign statuses for requirements even if the password is an empty string.
    this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */false, /* containsUppercaseCharacter= */false, /* containsNumericCharacter= */false, /* containsNonAlphanumericCharacter= */false);
    let passwordChar;
    for (let i = 0; i < password.length; i++) {
      passwordChar = password.charAt(i);
      this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */passwordChar >= 'a' && passwordChar <= 'z', /* containsUppercaseCharacter= */passwordChar >= 'A' && passwordChar <= 'Z', /* containsNumericCharacter= */passwordChar >= '0' && passwordChar <= '9', /* containsNonAlphanumericCharacter= */this.allowedNonAlphanumericCharacters.includes(passwordChar));
    }
  }
  /**
   * Updates the running validation status with the statuses for the character options.
   * Expected to be called each time a character is processed to update each option status
   * based on the current character.
   *
   * @param status Validation status.
   * @param containsLowercaseCharacter Whether the character is a lowercase letter.
   * @param containsUppercaseCharacter Whether the character is an uppercase letter.
   * @param containsNumericCharacter Whether the character is a numeric character.
   * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.
   */
  updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {
    if (this.customStrengthOptions.containsLowercaseLetter) {
      status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);
    }
    if (this.customStrengthOptions.containsUppercaseLetter) {
      status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);
    }
    if (this.customStrengthOptions.containsNumericCharacter) {
      status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);
    }
    if (this.customStrengthOptions.containsNonAlphanumericCharacter) {
      status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);
    }
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AuthImpl {
  constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {
    this.app = app;
    this.heartbeatServiceProvider = heartbeatServiceProvider;
    this.appCheckServiceProvider = appCheckServiceProvider;
    this.config = config;
    this.currentUser = null;
    this.emulatorConfig = null;
    this.operations = Promise.resolve();
    this.authStateSubscription = new Subscription(this);
    this.idTokenSubscription = new Subscription(this);
    this.beforeStateQueue = new AuthMiddlewareQueue(this);
    this.redirectUser = null;
    this.isProactiveRefreshEnabled = false;
    this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;
    // Any network calls will set this to true and prevent subsequent emulator
    // initialization
    this._canInitEmulator = true;
    this._isInitialized = false;
    this._deleted = false;
    this._initializationPromise = null;
    this._popupRedirectResolver = null;
    this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
    this._agentRecaptchaConfig = null;
    this._tenantRecaptchaConfigs = {};
    this._projectPasswordPolicy = null;
    this._tenantPasswordPolicies = {};
    // Tracks the last notified UID for state change listeners to prevent
    // repeated calls to the callbacks. Undefined means it's never been
    // called, whereas null means it's been called with a signed out user
    this.lastNotifiedUid = undefined;
    this.languageCode = null;
    this.tenantId = null;
    this.settings = {
      appVerificationDisabledForTesting: false
    };
    this.frameworks = [];
    this.name = app.name;
    this.clientVersion = config.sdkClientVersion;
  }
  _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
    if (popupRedirectResolver) {
      this._popupRedirectResolver = _getInstance(popupRedirectResolver);
    }
    // Have to check for app deletion throughout initialization (after each
    // promise resolution)
    this._initializationPromise = this.queue(async () => {
      var _a, _b;
      if (this._deleted) {
        return;
      }
      this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);
      if (this._deleted) {
        return;
      }
      // Initialize the resolver early if necessary (only applicable to web:
      // this will cause the iframe to load immediately in certain cases)
      if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {
        // If this fails, don't halt auth loading
        try {
          await this._popupRedirectResolver._initialize(this);
        } catch (e) {
          /* Ignore the error */
        }
      }
      await this.initializeCurrentUser(popupRedirectResolver);
      this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;
      if (this._deleted) {
        return;
      }
      this._isInitialized = true;
    });
    return this._initializationPromise;
  }
  /**
   * If the persistence is changed in another window, the user manager will let us know
   */
  async _onStorageEvent() {
    if (this._deleted) {
      return;
    }
    const user = await this.assertedPersistence.getCurrentUser();
    if (!this.currentUser && !user) {
      // No change, do nothing (was signed out and remained signed out).
      return;
    }
    // If the same user is to be synchronized.
    if (this.currentUser && user && this.currentUser.uid === user.uid) {
      // Data update, simply copy data changes.
      this._currentUser._assign(user);
      // If tokens changed from previous user tokens, this will trigger
      // notifyAuthListeners_.
      await this.currentUser.getIdToken();
      return;
    }
    // Update current Auth state. Either a new login or logout.
    // Skip blocking callbacks, they should not apply to a change in another tab.
    await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */true);
  }
  async initializeCurrentUserFromIdToken(idToken) {
    try {
      const response = await getAccountInfo(this, {
        idToken
      });
      const user = await UserImpl._fromGetAccountInfoResponse(this, response, idToken);
      await this.directlySetCurrentUser(user);
    } catch (err) {
      console.warn('FirebaseServerApp could not login user with provided authIdToken: ', err);
      await this.directlySetCurrentUser(null);
    }
  }
  async initializeCurrentUser(popupRedirectResolver) {
    var _a;
    if (_isFirebaseServerApp(this.app)) {
      const idToken = this.app.settings.authIdToken;
      if (idToken) {
        // Start the auth operation in the next tick to allow a moment for the customer's app to
        // attach an emulator, if desired.
        return new Promise(resolve => {
          setTimeout(() => this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));
        });
      } else {
        return this.directlySetCurrentUser(null);
      }
    }
    // First check to see if we have a pending redirect event.
    const previouslyStoredUser = await this.assertedPersistence.getCurrentUser();
    let futureCurrentUser = previouslyStoredUser;
    let needsTocheckMiddleware = false;
    if (popupRedirectResolver && this.config.authDomain) {
      await this.getOrInitRedirectPersistenceManager();
      const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
      const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;
      const result = await this.tryRedirectSignIn(popupRedirectResolver);
      // If the stored user (i.e. the old "currentUser") has a redirectId that
      // matches the redirect user, then we want to initially sign in with the
      // new user object from result.
      // TODO(samgho): More thoroughly test all of this
      if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {
        futureCurrentUser = result.user;
        needsTocheckMiddleware = true;
      }
    }
    // If no user in persistence, there is no current user. Set to null.
    if (!futureCurrentUser) {
      return this.directlySetCurrentUser(null);
    }
    if (!futureCurrentUser._redirectEventId) {
      // This isn't a redirect link operation, we can reload and bail.
      // First though, ensure that we check the middleware is happy.
      if (needsTocheckMiddleware) {
        try {
          await this.beforeStateQueue.runMiddleware(futureCurrentUser);
        } catch (e) {
          futureCurrentUser = previouslyStoredUser;
          // We know this is available since the bit is only set when the
          // resolver is available
          this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));
        }
      }
      if (futureCurrentUser) {
        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
      } else {
        return this.directlySetCurrentUser(null);
      }
    }
    _assert(this._popupRedirectResolver, this, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
    await this.getOrInitRedirectPersistenceManager();
    // If the redirect user's event ID matches the current user's event ID,
    // DO NOT reload the current user, otherwise they'll be cleared from storage.
    // This is important for the reauthenticateWithRedirect() flow.
    if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {
      return this.directlySetCurrentUser(futureCurrentUser);
    }
    return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
  }
  async tryRedirectSignIn(redirectResolver) {
    // The redirect user needs to be checked (and signed in if available)
    // during auth initialization. All of the normal sign in and link/reauth
    // flows call back into auth and push things onto the promise queue. We
    // need to await the result of the redirect sign in *inside the promise
    // queue*. This presents a problem: we run into deadlock. See:
    //    ┌> [Initialization] ─────┐
    //    ┌> [<other queue tasks>] │
    //    └─ [getRedirectResult] <─┘
    //    where [] are tasks on the queue and arrows denote awaits
    // Initialization will never complete because it's waiting on something
    // that's waiting for initialization to complete!
    //
    // Instead, this method calls getRedirectResult() (stored in
    // _completeRedirectFn) with an optional parameter that instructs all of
    // the underlying auth operations to skip anything that mutates auth state.
    let result = null;
    try {
      // We know this._popupRedirectResolver is set since redirectResolver
      // is passed in. The _completeRedirectFn expects the unwrapped extern.
      result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
    } catch (e) {
      // Swallow any errors here; the code can retrieve them in
      // getRedirectResult().
      await this._setRedirectUser(null);
    }
    return result;
  }
  async reloadAndSetCurrentUserOrClear(user) {
    try {
      await _reloadWithoutSaving(user);
    } catch (e) {
      if ((e === null || e === void 0 ? void 0 : e.code) !== `auth/${"network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {
        // Something's wrong with the user's token. Log them out and remove
        // them from storage
        return this.directlySetCurrentUser(null);
      }
    }
    return this.directlySetCurrentUser(user);
  }
  useDeviceLanguage() {
    this.languageCode = _getUserLanguage();
  }
  async _delete() {
    this._deleted = true;
  }
  async updateCurrentUser(userExtern) {
    if (_isFirebaseServerApp(this.app)) {
      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
    }
    // The public updateCurrentUser method needs to make a copy of the user,
    // and also check that the project matches
    const user = userExtern ? getModularInstance(userExtern) : null;
    if (user) {
      _assert(user.auth.config.apiKey === this.config.apiKey, this, "invalid-user-token" /* AuthErrorCode.INVALID_AUTH */);
    }
    return this._updateCurrentUser(user && user._clone(this));
  }
  async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {
    if (this._deleted) {
      return;
    }
    if (user) {
      _assert(this.tenantId === user.tenantId, this, "tenant-id-mismatch" /* AuthErrorCode.TENANT_ID_MISMATCH */);
    }
    if (!skipBeforeStateCallbacks) {
      await this.beforeStateQueue.runMiddleware(user);
    }
    return this.queue(async () => {
      await this.directlySetCurrentUser(user);
      this.notifyAuthListeners();
    });
  }
  async signOut() {
    if (_isFirebaseServerApp(this.app)) {
      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
    }
    // Run first, to block _setRedirectUser() if any callbacks fail.
    await this.beforeStateQueue.runMiddleware(null);
    // Clear the redirect user when signOut is called
    if (this.redirectPersistenceManager || this._popupRedirectResolver) {
      await this._setRedirectUser(null);
    }
    // Prevent callbacks from being called again in _updateCurrentUser, as
    // they were already called in the first line.
    return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */true);
  }
  setPersistence(persistence) {
    if (_isFirebaseServerApp(this.app)) {
      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
    }
    return this.queue(async () => {
      await this.assertedPersistence.setPersistence(_getInstance(persistence));
    });
  }
  _getRecaptchaConfig() {
    if (this.tenantId == null) {
      return this._agentRecaptchaConfig;
    } else {
      return this._tenantRecaptchaConfigs[this.tenantId];
    }
  }
  async validatePassword(password) {
    if (!this._getPasswordPolicyInternal()) {
      await this._updatePasswordPolicy();
    }
    // Password policy will be defined after fetching.
    const passwordPolicy = this._getPasswordPolicyInternal();
    // Check that the policy schema version is supported by the SDK.
    // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.
    if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {
      return Promise.reject(this._errorFactory.create("unsupported-password-policy-schema-version" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {}));
    }
    return passwordPolicy.validatePassword(password);
  }
  _getPasswordPolicyInternal() {
    if (this.tenantId === null) {
      return this._projectPasswordPolicy;
    } else {
      return this._tenantPasswordPolicies[this.tenantId];
    }
  }
  async _updatePasswordPolicy() {
    const response = await _getPasswordPolicy(this);
    const passwordPolicy = new PasswordPolicyImpl(response);
    if (this.tenantId === null) {
      this._projectPasswordPolicy = passwordPolicy;
    } else {
      this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;
    }
  }
  _getPersistence() {
    return this.assertedPersistence.persistence.type;
  }
  _updateErrorMap(errorMap) {
    this._errorFactory = new ErrorFactory('auth', 'Firebase', errorMap());
  }
  onAuthStateChanged(nextOrObserver, error, completed) {
    return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
  }
  beforeAuthStateChanged(callback, onAbort) {
    return this.beforeStateQueue.pushCallback(callback, onAbort);
  }
  onIdTokenChanged(nextOrObserver, error, completed) {
    return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
  }
  authStateReady() {
    return new Promise((resolve, reject) => {
      if (this.currentUser) {
        resolve();
      } else {
        const unsubscribe = this.onAuthStateChanged(() => {
          unsubscribe();
          resolve();
        }, reject);
      }
    });
  }
  /**
   * Revokes the given access token. Currently only supports Apple OAuth access tokens.
   */
  async revokeAccessToken(token) {
    if (this.currentUser) {
      const idToken = await this.currentUser.getIdToken();
      // Generalize this to accept other providers once supported.
      const request = {
        providerId: 'apple.com',
        tokenType: "ACCESS_TOKEN" /* TokenType.ACCESS_TOKEN */,
        token,
        idToken
      };
      if (this.tenantId != null) {
        request.tenantId = this.tenantId;
      }
      await revokeToken(this, request);
    }
  }
  toJSON() {
    var _a;
    return {
      apiKey: this.config.apiKey,
      authDomain: this.config.authDomain,
      appName: this.name,
      currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
    };
  }
  async _setRedirectUser(user, popupRedirectResolver) {
    const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
    return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);
  }
  async getOrInitRedirectPersistenceManager(popupRedirectResolver) {
    if (!this.redirectPersistenceManager) {
      const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;
      _assert(resolver, this, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
      this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], "redirectUser" /* KeyName.REDIRECT_USER */);
      this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();
    }
    return this.redirectPersistenceManager;
  }
  async _redirectUserForId(id) {
    var _a, _b;
    // Make sure we've cleared any pending persistence actions if we're not in
    // the initializer
    if (this._isInitialized) {
      await this.queue(async () => {});
    }
    if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {
      return this._currentUser;
    }
    if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {
      return this.redirectUser;
    }
    return null;
  }
  async _persistUserIfCurrent(user) {
    if (user === this.currentUser) {
      return this.queue(async () => this.directlySetCurrentUser(user));
    }
  }
  /** Notifies listeners only if the user is current */
  _notifyListenersIfCurrent(user) {
    if (user === this.currentUser) {
      this.notifyAuthListeners();
    }
  }
  _key() {
    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
  }
  _startProactiveRefresh() {
    this.isProactiveRefreshEnabled = true;
    if (this.currentUser) {
      this._currentUser._startProactiveRefresh();
    }
  }
  _stopProactiveRefresh() {
    this.isProactiveRefreshEnabled = false;
    if (this.currentUser) {
      this._currentUser._stopProactiveRefresh();
    }
  }
  /** Returns the current user cast as the internal type */
  get _currentUser() {
    return this.currentUser;
  }
  notifyAuthListeners() {
    var _a, _b;
    if (!this._isInitialized) {
      return;
    }
    this.idTokenSubscription.next(this.currentUser);
    const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;
    if (this.lastNotifiedUid !== currentUid) {
      this.lastNotifiedUid = currentUid;
      this.authStateSubscription.next(this.currentUser);
    }
  }
  registerStateListener(subscription, nextOrObserver, error, completed) {
    if (this._deleted) {
      return () => {};
    }
    const cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);
    let isUnsubscribed = false;
    const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;
    _assert(promise, this, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    // The callback needs to be called asynchronously per the spec.
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    promise.then(() => {
      if (isUnsubscribed) {
        return;
      }
      cb(this.currentUser);
    });
    if (typeof nextOrObserver === 'function') {
      const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);
      return () => {
        isUnsubscribed = true;
        unsubscribe();
      };
    } else {
      const unsubscribe = subscription.addObserver(nextOrObserver);
      return () => {
        isUnsubscribed = true;
        unsubscribe();
      };
    }
  }
  /**
   * Unprotected (from race conditions) method to set the current user. This
   * should only be called from within a queued callback. This is necessary
   * because the queue shouldn't rely on another queued callback.
   */
  async directlySetCurrentUser(user) {
    if (this.currentUser && this.currentUser !== user) {
      this._currentUser._stopProactiveRefresh();
    }
    if (user && this.isProactiveRefreshEnabled) {
      user._startProactiveRefresh();
    }
    this.currentUser = user;
    if (user) {
      await this.assertedPersistence.setCurrentUser(user);
    } else {
      await this.assertedPersistence.removeCurrentUser();
    }
  }
  queue(action) {
    // In case something errors, the callback still should be called in order
    // to keep the promise chain alive
    this.operations = this.operations.then(action, action);
    return this.operations;
  }
  get assertedPersistence() {
    _assert(this.persistenceManager, this, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    return this.persistenceManager;
  }
  _logFramework(framework) {
    if (!framework || this.frameworks.includes(framework)) {
      return;
    }
    this.frameworks.push(framework);
    // Sort alphabetically so that "FirebaseCore-web,FirebaseUI-web" and
    // "FirebaseUI-web,FirebaseCore-web" aren't viewed as different.
    this.frameworks.sort();
    this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
  }
  _getFrameworks() {
    return this.frameworks;
  }
  async _getAdditionalHeaders() {
    var _a;
    // Additional headers on every request
    const headers = {
      ["X-Client-Version" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion
    };
    if (this.app.options.appId) {
      headers["X-Firebase-gmpid" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;
    }
    // If the heartbeat service exists, add the heartbeat string
    const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider.getImmediate({
      optional: true
    })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());
    if (heartbeatsHeader) {
      headers["X-Firebase-Client" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;
    }
    // If the App Check service exists, add the App Check token in the headers
    const appCheckToken = await this._getAppCheckToken();
    if (appCheckToken) {
      headers["X-Firebase-AppCheck" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;
    }
    return headers;
  }
  async _getAppCheckToken() {
    var _a;
    if (_isFirebaseServerApp(this.app) && this.app.settings.appCheckToken) {
      return this.app.settings.appCheckToken;
    }
    const appCheckTokenResult = await ((_a = this.appCheckServiceProvider.getImmediate({
      optional: true
    })) === null || _a === void 0 ? void 0 : _a.getToken());
    if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) {
      // Context: appCheck.getToken() will never throw even if an error happened.
      // In the error case, a dummy token will be returned along with an error field describing
      // the error. In general, we shouldn't care about the error condition and just use
      // the token (actual or dummy) to send requests.
      _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);
    }
    return appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token;
  }
}
/**
 * Method to be used to cast down to our private implementation of Auth.
 * It will also handle unwrapping from the compat type if necessary
 *
 * @param auth Auth object passed in from developer
 */
function _castAuth(auth) {
  return getModularInstance(auth);
}
/** Helper class to wrap subscriber logic */
class Subscription {
  constructor(auth) {
    this.auth = auth;
    this.observer = null;
    this.addObserver = createSubscribe(observer => this.observer = observer);
  }
  get next() {
    _assert(this.observer, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    return this.observer.next.bind(this.observer);
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let externalJSProvider = {
  async loadJS() {
    throw new Error('Unable to load external scripts');
  },
  recaptchaV2Script: '',
  recaptchaEnterpriseScript: '',
  gapiScript: ''
};
function _setExternalJSProvider(p) {
  externalJSProvider = p;
}
function _loadJS(url) {
  return externalJSProvider.loadJS(url);
}
function _gapiScriptUrl() {
  return externalJSProvider.gapiScript;
}
function _generateCallbackName(prefix) {
  return `__${prefix}${Math.floor(Math.random() * 1000000)}`;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Initializes an {@link Auth} instance with fine-grained control over
 * {@link Dependencies}.
 *
 * @remarks
 *
 * This function allows more control over the {@link Auth} instance than
 * {@link getAuth}. `getAuth` uses platform-specific defaults to supply
 * the {@link Dependencies}. In general, `getAuth` is the easiest way to
 * initialize Auth and works for most use cases. Use `initializeAuth` if you
 * need control over which persistence layer is used, or to minimize bundle
 * size if you're not using either `signInWithPopup` or `signInWithRedirect`.
 *
 * For example, if your app only uses anonymous accounts and you only want
 * accounts saved for the current session, initialize `Auth` with:
 *
 * ```js
 * const auth = initializeAuth(app, {
 *   persistence: browserSessionPersistence,
 *   popupRedirectResolver: undefined,
 * });
 * ```
 *
 * @public
 */
function initializeAuth(app, deps) {
  const provider = _getProvider(app, 'auth');
  if (provider.isInitialized()) {
    const auth = provider.getImmediate();
    const initialOptions = provider.getOptions();
    if (deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {
      return auth;
    } else {
      _fail(auth, "already-initialized" /* AuthErrorCode.ALREADY_INITIALIZED */);
    }
  }
  const auth = provider.initialize({
    options: deps
  });
  return auth;
}
function _initializeAuthInstance(auth, deps) {
  const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
  const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);
  if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {
    auth._updateErrorMap(deps.errorMap);
  }
  // This promise is intended to float; auth initialization happens in the
  // background, meanwhile the auth object may be used by the app.
  // eslint-disable-next-line @typescript-eslint/no-floating-promises
  auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Interface that represents the credentials returned by an {@link AuthProvider}.
 *
 * @remarks
 * Implementations specify the details about each auth provider's credential requirements.
 *
 * @public
 */
class AuthCredential {
  /** @internal */
  constructor(
  /**
   * The authentication provider ID for the credential.
   *
   * @remarks
   * For example, 'facebook.com', or 'google.com'.
   */
  providerId,
  /**
   * The authentication sign in method for the credential.
   *
   * @remarks
   * For example, {@link SignInMethod}.EMAIL_PASSWORD, or
   * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method
   * identifier as returned in {@link fetchSignInMethodsForEmail}.
   */
  signInMethod) {
    this.providerId = providerId;
    this.signInMethod = signInMethod;
  }
  /**
   * Returns a JSON-serializable representation of this object.
   *
   * @returns a JSON-serializable representation of this object.
   */
  toJSON() {
    return debugFail('not implemented');
  }
  /** @internal */
  _getIdTokenResponse(_auth) {
    return debugFail('not implemented');
  }
  /** @internal */
  _linkToIdToken(_auth, _idToken) {
    return debugFail('not implemented');
  }
  /** @internal */
  _getReauthenticationResolver(_auth) {
    return debugFail('not implemented');
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function signInWithIdp(auth, request) {
  return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithIdp" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const IDP_REQUEST_URI$1 = 'http://localhost';
/**
 * Represents the OAuth credentials returned by an {@link OAuthProvider}.
 *
 * @remarks
 * Implementations specify the details about each auth provider's credential requirements.
 *
 * @public
 */
class OAuthCredential extends AuthCredential {
  constructor() {
    super(...arguments);
    this.pendingToken = null;
  }
  /** @internal */
  static _fromParams(params) {
    const cred = new OAuthCredential(params.providerId, params.signInMethod);
    if (params.idToken || params.accessToken) {
      // OAuth 2 and either ID token or access token.
      if (params.idToken) {
        cred.idToken = params.idToken;
      }
      if (params.accessToken) {
        cred.accessToken = params.accessToken;
      }
      // Add nonce if available and no pendingToken is present.
      if (params.nonce && !params.pendingToken) {
        cred.nonce = params.nonce;
      }
      if (params.pendingToken) {
        cred.pendingToken = params.pendingToken;
      }
    } else if (params.oauthToken && params.oauthTokenSecret) {
      // OAuth 1 and OAuth token with token secret
      cred.accessToken = params.oauthToken;
      cred.secret = params.oauthTokenSecret;
    } else {
      _fail("argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
    }
    return cred;
  }
  /** {@inheritdoc AuthCredential.toJSON}  */
  toJSON() {
    return {
      idToken: this.idToken,
      accessToken: this.accessToken,
      secret: this.secret,
      nonce: this.nonce,
      pendingToken: this.pendingToken,
      providerId: this.providerId,
      signInMethod: this.signInMethod
    };
  }
  /**
   * Static method to deserialize a JSON representation of an object into an
   * {@link  AuthCredential}.
   *
   * @param json - Input can be either Object or the stringified representation of the object.
   * When string is provided, JSON.parse would be called first.
   *
   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
   */
  static fromJSON(json) {
    const obj = typeof json === 'string' ? JSON.parse(json) : json;
    const {
        providerId,
        signInMethod
      } = obj,
      rest = __rest(obj, ["providerId", "signInMethod"]);
    if (!providerId || !signInMethod) {
      return null;
    }
    const cred = new OAuthCredential(providerId, signInMethod);
    cred.idToken = rest.idToken || undefined;
    cred.accessToken = rest.accessToken || undefined;
    cred.secret = rest.secret;
    cred.nonce = rest.nonce;
    cred.pendingToken = rest.pendingToken || null;
    return cred;
  }
  /** @internal */
  _getIdTokenResponse(auth) {
    const request = this.buildRequest();
    return signInWithIdp(auth, request);
  }
  /** @internal */
  _linkToIdToken(auth, idToken) {
    const request = this.buildRequest();
    request.idToken = idToken;
    return signInWithIdp(auth, request);
  }
  /** @internal */
  _getReauthenticationResolver(auth) {
    const request = this.buildRequest();
    request.autoCreate = false;
    return signInWithIdp(auth, request);
  }
  buildRequest() {
    const request = {
      requestUri: IDP_REQUEST_URI$1,
      returnSecureToken: true
    };
    if (this.pendingToken) {
      request.pendingToken = this.pendingToken;
    } else {
      const postBody = {};
      if (this.idToken) {
        postBody['id_token'] = this.idToken;
      }
      if (this.accessToken) {
        postBody['access_token'] = this.accessToken;
      }
      if (this.secret) {
        postBody['oauth_token_secret'] = this.secret;
      }
      postBody['providerId'] = this.providerId;
      if (this.nonce && !this.pendingToken) {
        postBody['nonce'] = this.nonce;
      }
      request.postBody = querystring(postBody);
    }
    return request;
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The base class for all Federated providers (OAuth (including OIDC), SAML).
 *
 * This class is not meant to be instantiated directly.
 *
 * @public
 */
class FederatedAuthProvider {
  /**
   * Constructor for generic OAuth providers.
   *
   * @param providerId - Provider for which credentials should be generated.
   */
  constructor(providerId) {
    this.providerId = providerId;
    /** @internal */
    this.defaultLanguageCode = null;
    /** @internal */
    this.customParameters = {};
  }
  /**
   * Set the language gode.
   *
   * @param languageCode - language code
   */
  setDefaultLanguage(languageCode) {
    this.defaultLanguageCode = languageCode;
  }
  /**
   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
   * operations.
   *
   * @remarks
   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
   *
   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
   */
  setCustomParameters(customOAuthParameters) {
    this.customParameters = customOAuthParameters;
    return this;
  }
  /**
   * Retrieve the current list of {@link CustomParameters}.
   */
  getCustomParameters() {
    return this.customParameters;
  }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Common code to all OAuth providers. This is separate from the
 * {@link OAuthProvider} so that child providers (like
 * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.
 * Instead, they rely on a static `credential` method.
 */
class BaseOAuthProvider extends FederatedAuthProvider {
  constructor() {
    super(...arguments);
    /** @internal */
    this.scopes = [];
  }
  /**
   * Add an OAuth scope to the credential.
   *
   * @param scope - Provider OAuth scope to add.
   */
  addScope(scope) {
    // If not already added, add scope to list.
    if (!this.scopes.includes(scope)) {
      this.scopes.push(scope);
    }
    return this;
  }
  /**
   * Retrieve the current list of OAuth scopes.
   */
  getScopes() {
    return [...this.scopes];
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('user_birthday');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = FacebookAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * provider.addScope('user_birthday');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Facebook Access Token.
 * const credential = FacebookAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 *
 * @public
 */
class FacebookAuthProvider extends BaseOAuthProvider {
  constructor() {
    super("facebook.com" /* ProviderId.FACEBOOK */);
  }
  /**
   * Creates a credential for Facebook.
   *
   * @example
   * ```javascript
   * // `event` from the Facebook auth.authResponseChange callback.
   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
   * const result = await signInWithCredential(credential);
   * ```
   *
   * @param accessToken - Facebook access token.
   */
  static credential(accessToken) {
    return OAuthCredential._fromParams({
      providerId: FacebookAuthProvider.PROVIDER_ID,
      signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
      accessToken
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(userCredential) {
    return FacebookAuthProvider.credentialFromTaggedObject(userCredential);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(error) {
    return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});
  }
  static credentialFromTaggedObject({
    _tokenResponse: tokenResponse
  }) {
    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
      return null;
    }
    if (!tokenResponse.oauthAccessToken) {
      return null;
    }
    try {
      return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
    } catch (_a) {
      return null;
    }
  }
}
/** Always set to {@link SignInMethod}.FACEBOOK. */
FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com" /* SignInMethod.FACEBOOK */;
/** Always set to {@link ProviderId}.FACEBOOK. */
FacebookAuthProvider.PROVIDER_ID = "facebook.com" /* ProviderId.FACEBOOK */;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new GoogleAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('profile');
 * provider.addScope('email');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Google Access Token.
 *   const credential = GoogleAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new GoogleAuthProvider();
 * provider.addScope('profile');
 * provider.addScope('email');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Google Access Token.
 * const credential = GoogleAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 *
 * @public
 */
class GoogleAuthProvider extends BaseOAuthProvider {
  constructor() {
    super("google.com" /* ProviderId.GOOGLE */);
    this.addScope('profile');
  }
  /**
   * Creates a credential for Google. At least one of ID token and access token is required.
   *
   * @example
   * ```javascript
   * // \`googleUser\` from the onsuccess Google Sign In callback.
   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
   * const result = await signInWithCredential(credential);
   * ```
   *
   * @param idToken - Google ID token.
   * @param accessToken - Google access token.
   */
  static credential(idToken, accessToken) {
    return OAuthCredential._fromParams({
      providerId: GoogleAuthProvider.PROVIDER_ID,
      signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
      idToken,
      accessToken
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(userCredential) {
    return GoogleAuthProvider.credentialFromTaggedObject(userCredential);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(error) {
    return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});
  }
  static credentialFromTaggedObject({
    _tokenResponse: tokenResponse
  }) {
    if (!tokenResponse) {
      return null;
    }
    const {
      oauthIdToken,
      oauthAccessToken
    } = tokenResponse;
    if (!oauthIdToken && !oauthAccessToken) {
      // This could be an oauth 1 credential or a phone credential
      return null;
    }
    try {
      return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
    } catch (_a) {
      return null;
    }
  }
}
/** Always set to {@link SignInMethod}.GOOGLE. */
GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com" /* SignInMethod.GOOGLE */;
/** Always set to {@link ProviderId}.GOOGLE. */
GoogleAuthProvider.PROVIDER_ID = "google.com" /* ProviderId.GOOGLE */;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.
 *
 * @remarks
 * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use
 * the {@link signInWithPopup} handler:
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new GithubAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('repo');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a GitHub Access Token.
 *   const credential = GithubAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new GithubAuthProvider();
 * provider.addScope('repo');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a GitHub Access Token.
 * const credential = GithubAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 * @public
 */
class GithubAuthProvider extends BaseOAuthProvider {
  constructor() {
    super("github.com" /* ProviderId.GITHUB */);
  }
  /**
   * Creates a credential for GitHub.
   *
   * @param accessToken - GitHub access token.
   */
  static credential(accessToken) {
    return OAuthCredential._fromParams({
      providerId: GithubAuthProvider.PROVIDER_ID,
      signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
      accessToken
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(userCredential) {
    return GithubAuthProvider.credentialFromTaggedObject(userCredential);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(error) {
    return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});
  }
  static credentialFromTaggedObject({
    _tokenResponse: tokenResponse
  }) {
    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
      return null;
    }
    if (!tokenResponse.oauthAccessToken) {
      return null;
    }
    try {
      return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
    } catch (_a) {
      return null;
    }
  }
}
/** Always set to {@link SignInMethod}.GITHUB. */
GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com" /* SignInMethod.GITHUB */;
/** Always set to {@link ProviderId}.GITHUB. */
GithubAuthProvider.PROVIDER_ID = "github.com" /* ProviderId.GITHUB */;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new TwitterAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Twitter Access Token and Secret.
 *   const credential = TwitterAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 *   const secret = credential.secret;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new TwitterAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Twitter Access Token and Secret.
 * const credential = TwitterAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * const secret = credential.secret;
 * ```
 *
 * @public
 */
class TwitterAuthProvider extends BaseOAuthProvider {
  constructor() {
    super("twitter.com" /* ProviderId.TWITTER */);
  }
  /**
   * Creates a credential for Twitter.
   *
   * @param token - Twitter access token.
   * @param secret - Twitter secret.
   */
  static credential(token, secret) {
    return OAuthCredential._fromParams({
      providerId: TwitterAuthProvider.PROVIDER_ID,
      signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
      oauthToken: token,
      oauthTokenSecret: secret
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(userCredential) {
    return TwitterAuthProvider.credentialFromTaggedObject(userCredential);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(error) {
    return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});
  }
  static credentialFromTaggedObject({
    _tokenResponse: tokenResponse
  }) {
    if (!tokenResponse) {
      return null;
    }
    const {
      oauthAccessToken,
      oauthTokenSecret
    } = tokenResponse;
    if (!oauthAccessToken || !oauthTokenSecret) {
      return null;
    }
    try {
      return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
    } catch (_a) {
      return null;
    }
  }
}
/** Always set to {@link SignInMethod}.TWITTER. */
TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com" /* SignInMethod.TWITTER */;
/** Always set to {@link ProviderId}.TWITTER. */
TwitterAuthProvider.PROVIDER_ID = "twitter.com" /* ProviderId.TWITTER */;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function signUp(auth, request) {
  return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signUp" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request));
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UserCredentialImpl {
  constructor(params) {
    this.user = params.user;
    this.providerId = params.providerId;
    this._tokenResponse = params._tokenResponse;
    this.operationType = params.operationType;
  }
  static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {
    const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);
    const providerId = providerIdForResponse(idTokenResponse);
    const userCred = new UserCredentialImpl({
      user,
      providerId,
      _tokenResponse: idTokenResponse,
      operationType
    });
    return userCred;
  }
  static async _forOperation(user, operationType, response) {
    await user._updateTokensIfNecessary(response, /* reload */true);
    const providerId = providerIdForResponse(response);
    return new UserCredentialImpl({
      user,
      providerId,
      _tokenResponse: response,
      operationType
    });
  }
}
function providerIdForResponse(response) {
  if (response.providerId) {
    return response.providerId;
  }
  if ('phoneNumber' in response) {
    return "phone" /* ProviderId.PHONE */;
  }
  return null;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Asynchronously signs in as an anonymous user.
 *
 * @remarks
 * If there is already an anonymous user signed in, that user will be returned; otherwise, a
 * new anonymous user identity will be created and returned.
 *
 * This method is not supported by {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */
async function signInAnonymously(auth) {
  var _a;
  if (_isFirebaseServerApp(auth.app)) {
    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
  }
  const authInternal = _castAuth(auth);
  await authInternal._initializationPromise;
  if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {
    // If an anonymous user is already signed in, no need to sign them in again.
    return new UserCredentialImpl({
      user: authInternal.currentUser,
      providerId: null,
      operationType: "signIn" /* OperationType.SIGN_IN */
    });
  }
  const response = await signUp(authInternal, {
    returnSecureToken: true
  });
  const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* OperationType.SIGN_IN */, response, true);
  await authInternal._updateCurrentUser(userCredential.user);
  return userCredential;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class MultiFactorError extends FirebaseError {
  constructor(auth, error, operationType, user) {
    var _a;
    super(error.code, error.message);
    this.operationType = operationType;
    this.user = user;
    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
    Object.setPrototypeOf(this, MultiFactorError.prototype);
    this.customData = {
      appName: auth.name,
      tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,
      _serverResponse: error.customData._serverResponse,
      operationType
    };
  }
  static _fromErrorAndOperation(auth, error, operationType, user) {
    return new MultiFactorError(auth, error, operationType, user);
  }
}
function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
  const idTokenProvider = operationType === "reauthenticate" /* OperationType.REAUTHENTICATE */ ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);
  return idTokenProvider.catch(error => {
    if (error.code === `auth/${"multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */}`) {
      throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);
    }
    throw error;
  });
}
async function _link$1(user, credential, bypassAuthState = false) {
  const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);
  return UserCredentialImpl._forOperation(user, "link" /* OperationType.LINK */, response);
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function _reauthenticate(user, credential, bypassAuthState = false) {
  const {
    auth
  } = user;
  if (_isFirebaseServerApp(auth.app)) {
    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
  }
  const operationType = "reauthenticate" /* OperationType.REAUTHENTICATE */;
  try {
    const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);
    _assert(response.idToken, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    const parsed = _parseToken(response.idToken);
    _assert(parsed, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    const {
      sub: localId
    } = parsed;
    _assert(user.uid === localId, auth, "user-mismatch" /* AuthErrorCode.USER_MISMATCH */);
    return UserCredentialImpl._forOperation(user, operationType, response);
  } catch (e) {
    // Convert user deleted error into user mismatch
    if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${"user-not-found" /* AuthErrorCode.USER_DELETED */}`) {
      _fail(auth, "user-mismatch" /* AuthErrorCode.USER_MISMATCH */);
    }
    throw e;
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function _signInWithCredential(auth, credential, bypassAuthState = false) {
  if (_isFirebaseServerApp(auth.app)) {
    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
  }
  const operationType = "signIn" /* OperationType.SIGN_IN */;
  const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);
  const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);
  if (!bypassAuthState) {
    await auth._updateCurrentUser(userCredential.user);
  }
  return userCredential;
}
const STORAGE_AVAILABLE_KEY = '__sak';

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// There are two different browser persistence types: local and session.
// Both have the same implementation but use a different underlying storage
// object.
class BrowserPersistenceClass {
  constructor(storageRetriever, type) {
    this.storageRetriever = storageRetriever;
    this.type = type;
  }
  _isAvailable() {
    try {
      if (!this.storage) {
        return Promise.resolve(false);
      }
      this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');
      this.storage.removeItem(STORAGE_AVAILABLE_KEY);
      return Promise.resolve(true);
    } catch (_a) {
      return Promise.resolve(false);
    }
  }
  _set(key, value) {
    this.storage.setItem(key, JSON.stringify(value));
    return Promise.resolve();
  }
  _get(key) {
    const json = this.storage.getItem(key);
    return Promise.resolve(json ? JSON.parse(json) : null);
  }
  _remove(key) {
    this.storage.removeItem(key);
    return Promise.resolve();
  }
  get storage() {
    return this.storageRetriever();
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The polling period in case events are not supported
const _POLLING_INTERVAL_MS$1 = 1000;
// The IE 10 localStorage cross tab synchronization delay in milliseconds
const IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
class BrowserLocalPersistence extends BrowserPersistenceClass {
  constructor() {
    super(() => window.localStorage, "LOCAL" /* PersistenceType.LOCAL */);
    this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);
    this.listeners = {};
    this.localCache = {};
    // setTimeout return value is platform specific
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    this.pollTimer = null;
    // Whether to use polling instead of depending on window events
    this.fallbackToPolling = _isMobileBrowser();
    this._shouldAllowMigration = true;
  }
  forAllChangedKeys(cb) {
    // Check all keys with listeners on them.
    for (const key of Object.keys(this.listeners)) {
      // Get value from localStorage.
      const newValue = this.storage.getItem(key);
      const oldValue = this.localCache[key];
      // If local map value does not match, trigger listener with storage event.
      // Differentiate this simulated event from the real storage event.
      if (newValue !== oldValue) {
        cb(key, oldValue, newValue);
      }
    }
  }
  onStorageEvent(event, poll = false) {
    // Key would be null in some situations, like when localStorage is cleared
    if (!event.key) {
      this.forAllChangedKeys((key, _oldValue, newValue) => {
        this.notifyListeners(key, newValue);
      });
      return;
    }
    const key = event.key;
    // Check the mechanism how this event was detected.
    // The first event will dictate the mechanism to be used.
    if (poll) {
      // Environment detects storage changes via polling.
      // Remove storage event listener to prevent possible event duplication.
      this.detachListener();
    } else {
      // Environment detects storage changes via storage event listener.
      // Remove polling listener to prevent possible event duplication.
      this.stopPolling();
    }
    const triggerListeners = () => {
      // Keep local map up to date in case storage event is triggered before
      // poll.
      const storedValue = this.storage.getItem(key);
      if (!poll && this.localCache[key] === storedValue) {
        // Real storage event which has already been detected, do nothing.
        // This seems to trigger in some IE browsers for some reason.
        return;
      }
      this.notifyListeners(key, storedValue);
    };
    const storedValue = this.storage.getItem(key);
    if (_isIE10() && storedValue !== event.newValue && event.newValue !== event.oldValue) {
      // IE 10 has this weird bug where a storage event would trigger with the
      // correct key, oldValue and newValue but localStorage.getItem(key) does
      // not yield the updated value until a few milliseconds. This ensures
      // this recovers from that situation.
      setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
    } else {
      triggerListeners();
    }
  }
  notifyListeners(key, value) {
    this.localCache[key] = value;
    const listeners = this.listeners[key];
    if (listeners) {
      for (const listener of Array.from(listeners)) {
        listener(value ? JSON.parse(value) : value);
      }
    }
  }
  startPolling() {
    this.stopPolling();
    this.pollTimer = setInterval(() => {
      this.forAllChangedKeys((key, oldValue, newValue) => {
        this.onStorageEvent(new StorageEvent('storage', {
          key,
          oldValue,
          newValue
        }), /* poll */true);
      });
    }, _POLLING_INTERVAL_MS$1);
  }
  stopPolling() {
    if (this.pollTimer) {
      clearInterval(this.pollTimer);
      this.pollTimer = null;
    }
  }
  attachListener() {
    window.addEventListener('storage', this.boundEventHandler);
  }
  detachListener() {
    window.removeEventListener('storage', this.boundEventHandler);
  }
  _addListener(key, listener) {
    if (Object.keys(this.listeners).length === 0) {
      // Whether browser can detect storage event when it had already been pushed to the background.
      // This may happen in some mobile browsers. A localStorage change in the foreground window
      // will not be detected in the background window via the storage event.
      // This was detected in iOS 7.x mobile browsers
      if (this.fallbackToPolling) {
        this.startPolling();
      } else {
        this.attachListener();
      }
    }
    if (!this.listeners[key]) {
      this.listeners[key] = new Set();
      // Populate the cache to avoid spuriously triggering on first poll.
      this.localCache[key] = this.storage.getItem(key);
    }
    this.listeners[key].add(listener);
  }
  _removeListener(key, listener) {
    if (this.listeners[key]) {
      this.listeners[key].delete(listener);
      if (this.listeners[key].size === 0) {
        delete this.listeners[key];
      }
    }
    if (Object.keys(this.listeners).length === 0) {
      this.detachListener();
      this.stopPolling();
    }
  }
  // Update local cache on base operations:
  async _set(key, value) {
    await super._set(key, value);
    this.localCache[key] = JSON.stringify(value);
  }
  async _get(key) {
    const value = await super._get(key);
    this.localCache[key] = JSON.stringify(value);
    return value;
  }
  async _remove(key) {
    await super._remove(key);
    delete this.localCache[key];
  }
}
BrowserLocalPersistence.type = 'LOCAL';

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BrowserSessionPersistence extends BrowserPersistenceClass {
  constructor() {
    super(() => window.sessionStorage, "SESSION" /* PersistenceType.SESSION */);
  }
  _addListener(_key, _listener) {
    // Listeners are not supported for session storage since it cannot be shared across windows
    return;
  }
  _removeListener(_key, _listener) {
    // Listeners are not supported for session storage since it cannot be shared across windows
    return;
  }
}
BrowserSessionPersistence.type = 'SESSION';
/**
 * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`
 * for the underlying storage.
 *
 * @public
 */
const browserSessionPersistence = BrowserSessionPersistence;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _generateEventId(prefix = '', digits = 10) {
  let random = '';
  for (let i = 0; i < digits; i++) {
    random += Math.floor(Math.random() * 10);
  }
  return prefix + random;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Lazy accessor for window, since the compat layer won't tree shake this out,
 * we need to make sure not to mess with window unless we have to
 */
function _window() {
  return window;
}
function _setWindowLocation(url) {
  _window().location.href = url;
}
new Delay(30000, 60000);

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Chooses a popup/redirect resolver to use. This prefers the override (which
 * is directly passed in), and falls back to the property set on the auth
 * object. If neither are available, this function errors w/ an argument error.
 */
function _withDefaultResolver(auth, resolverOverride) {
  if (resolverOverride) {
    return _getInstance(resolverOverride);
  }
  _assert(auth._popupRedirectResolver, auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
  return auth._popupRedirectResolver;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class IdpCredential extends AuthCredential {
  constructor(params) {
    super("custom" /* ProviderId.CUSTOM */, "custom" /* ProviderId.CUSTOM */);
    this.params = params;
  }
  _getIdTokenResponse(auth) {
    return signInWithIdp(auth, this._buildIdpRequest());
  }
  _linkToIdToken(auth, idToken) {
    return signInWithIdp(auth, this._buildIdpRequest(idToken));
  }
  _getReauthenticationResolver(auth) {
    return signInWithIdp(auth, this._buildIdpRequest());
  }
  _buildIdpRequest(idToken) {
    const request = {
      requestUri: this.params.requestUri,
      sessionId: this.params.sessionId,
      postBody: this.params.postBody,
      tenantId: this.params.tenantId,
      pendingToken: this.params.pendingToken,
      returnSecureToken: true,
      returnIdpCredential: true
    };
    if (idToken) {
      request.idToken = idToken;
    }
    return request;
  }
}
function _signIn(params) {
  return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
}
function _reauth(params) {
  const {
    auth,
    user
  } = params;
  _assert(user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
  return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);
}
async function _link(params) {
  const {
    auth,
    user
  } = params;
  _assert(user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
  return _link$1(user, new IdpCredential(params), params.bypassAuthState);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Popup event manager. Handles the popup's entire lifecycle; listens to auth
 * events
 */
class AbstractPopupRedirectOperation {
  constructor(auth, filter, resolver, user, bypassAuthState = false) {
    this.auth = auth;
    this.resolver = resolver;
    this.user = user;
    this.bypassAuthState = bypassAuthState;
    this.pendingPromise = null;
    this.eventManager = null;
    this.filter = Array.isArray(filter) ? filter : [filter];
  }
  execute() {
    return new Promise(async (resolve, reject) => {
      this.pendingPromise = {
        resolve,
        reject
      };
      try {
        this.eventManager = await this.resolver._initialize(this.auth);
        await this.onExecution();
        this.eventManager.registerConsumer(this);
      } catch (e) {
        this.reject(e);
      }
    });
  }
  async onAuthEvent(event) {
    const {
      urlResponse,
      sessionId,
      postBody,
      tenantId,
      error,
      type
    } = event;
    if (error) {
      this.reject(error);
      return;
    }
    const params = {
      auth: this.auth,
      requestUri: urlResponse,
      sessionId: sessionId,
      tenantId: tenantId || undefined,
      postBody: postBody || undefined,
      user: this.user,
      bypassAuthState: this.bypassAuthState
    };
    try {
      this.resolve(await this.getIdpTask(type)(params));
    } catch (e) {
      this.reject(e);
    }
  }
  onError(error) {
    this.reject(error);
  }
  getIdpTask(type) {
    switch (type) {
      case "signInViaPopup" /* AuthEventType.SIGN_IN_VIA_POPUP */:
      case "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:
        return _signIn;
      case "linkViaPopup" /* AuthEventType.LINK_VIA_POPUP */:
      case "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */:
        return _link;
      case "reauthViaPopup" /* AuthEventType.REAUTH_VIA_POPUP */:
      case "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */:
        return _reauth;
      default:
        _fail(this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    }
  }
  resolve(cred) {
    debugAssert(this.pendingPromise, 'Pending promise was never set');
    this.pendingPromise.resolve(cred);
    this.unregisterAndCleanUp();
  }
  reject(error) {
    debugAssert(this.pendingPromise, 'Pending promise was never set');
    this.pendingPromise.reject(error);
    this.unregisterAndCleanUp();
  }
  unregisterAndCleanUp() {
    if (this.eventManager) {
      this.eventManager.unregisterConsumer(this);
    }
    this.pendingPromise = null;
    this.cleanUp();
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);
/**
 * Popup event manager. Handles the popup's entire lifecycle; listens to auth
 * events
 *
 */
class PopupOperation extends AbstractPopupRedirectOperation {
  constructor(auth, filter, provider, resolver, user) {
    super(auth, filter, resolver, user);
    this.provider = provider;
    this.authWindow = null;
    this.pollId = null;
    if (PopupOperation.currentPopupAction) {
      PopupOperation.currentPopupAction.cancel();
    }
    PopupOperation.currentPopupAction = this;
  }
  async executeNotNull() {
    const result = await this.execute();
    _assert(result, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    return result;
  }
  async onExecution() {
    debugAssert(this.filter.length === 1, 'Popup operations only handle one event');
    const eventId = _generateEventId();
    this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0],
    // There's always one, see constructor
    eventId);
    this.authWindow.associatedEvent = eventId;
    // Check for web storage support and origin validation _after_ the popup is
    // loaded. These operations are slow (~1 second or so) Rather than
    // waiting on them before opening the window, optimistically open the popup
    // and check for storage support at the same time. If storage support is
    // not available, this will cause the whole thing to reject properly. It
    // will also close the popup, but since the promise has already rejected,
    // the popup closed by user poll will reject into the void.
    this.resolver._originValidation(this.auth).catch(e => {
      this.reject(e);
    });
    this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {
      if (!isSupported) {
        this.reject(_createError(this.auth, "web-storage-unsupported" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */));
      }
    });
    // Handle user closure. Notice this does *not* use await
    this.pollUserCancellation();
  }
  get eventId() {
    var _a;
    return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;
  }
  cancel() {
    this.reject(_createError(this.auth, "cancelled-popup-request" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */));
  }
  cleanUp() {
    if (this.authWindow) {
      this.authWindow.close();
    }
    if (this.pollId) {
      window.clearTimeout(this.pollId);
    }
    this.authWindow = null;
    this.pollId = null;
    PopupOperation.currentPopupAction = null;
  }
  pollUserCancellation() {
    const poll = () => {
      var _a, _b;
      if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {
        // Make sure that there is sufficient time for whatever action to
        // complete. The window could have closed but the sign in network
        // call could still be in flight. This is specifically true for
        // Firefox or if the opener is in an iframe, in which case the oauth
        // helper closes the popup.
        this.pollId = window.setTimeout(() => {
          this.pollId = null;
          this.reject(_createError(this.auth, "popup-closed-by-user" /* AuthErrorCode.POPUP_CLOSED_BY_USER */));
        }, 8000 /* _Timeout.AUTH_EVENT */);
        return;
      }
      this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
    };
    poll();
  }
}
// Only one popup is ever shown at once. The lifecycle of the current popup
// can be managed / cancelled by the constructor.
PopupOperation.currentPopupAction = null;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const PENDING_REDIRECT_KEY = 'pendingRedirect';
// We only get one redirect outcome for any one auth, so just store it
// in here.
const redirectOutcomeMap = new Map();
class RedirectAction extends AbstractPopupRedirectOperation {
  constructor(auth, resolver, bypassAuthState = false) {
    super(auth, ["signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */, "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */, "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */, "unknown" /* AuthEventType.UNKNOWN */], resolver, undefined, bypassAuthState);
    this.eventId = null;
  }
  /**
   * Override the execute function; if we already have a redirect result, then
   * just return it.
   */
  async execute() {
    let readyOutcome = redirectOutcomeMap.get(this.auth._key());
    if (!readyOutcome) {
      try {
        const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);
        const result = hasPendingRedirect ? await super.execute() : null;
        readyOutcome = () => Promise.resolve(result);
      } catch (e) {
        readyOutcome = () => Promise.reject(e);
      }
      redirectOutcomeMap.set(this.auth._key(), readyOutcome);
    }
    // If we're not bypassing auth state, the ready outcome should be set to
    // null.
    if (!this.bypassAuthState) {
      redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));
    }
    return readyOutcome();
  }
  async onAuthEvent(event) {
    if (event.type === "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */) {
      return super.onAuthEvent(event);
    } else if (event.type === "unknown" /* AuthEventType.UNKNOWN */) {
      // This is a sentinel value indicating there's no pending redirect
      this.resolve(null);
      return;
    }
    if (event.eventId) {
      const user = await this.auth._redirectUserForId(event.eventId);
      if (user) {
        this.user = user;
        return super.onAuthEvent(event);
      } else {
        this.resolve(null);
      }
    }
  }
  async onExecution() {}
  cleanUp() {}
}
async function _getAndClearPendingRedirectStatus(resolver, auth) {
  const key = pendingRedirectKey(auth);
  const persistence = resolverPersistence(resolver);
  if (!(await persistence._isAvailable())) {
    return false;
  }
  const hasPendingRedirect = (await persistence._get(key)) === 'true';
  await persistence._remove(key);
  return hasPendingRedirect;
}
function _overrideRedirectResult(auth, result) {
  redirectOutcomeMap.set(auth._key(), result);
}
function resolverPersistence(resolver) {
  return _getInstance(resolver._redirectPersistence);
}
function pendingRedirectKey(auth) {
  return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);
}
async function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {
  if (_isFirebaseServerApp(auth.app)) {
    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
  }
  const authInternal = _castAuth(auth);
  const resolver = _withDefaultResolver(authInternal, resolverExtern);
  const action = new RedirectAction(authInternal, resolver, bypassAuthState);
  const result = await action.execute();
  if (result && !bypassAuthState) {
    delete result.user._redirectEventId;
    await authInternal._persistUserIfCurrent(result.user);
    await authInternal._setRedirectUser(null, resolverExtern);
  }
  return result;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The amount of time to store the UIDs of seen events; this is
// set to 10 min by default
const EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;
class AuthEventManager {
  constructor(auth) {
    this.auth = auth;
    this.cachedEventUids = new Set();
    this.consumers = new Set();
    this.queuedRedirectEvent = null;
    this.hasHandledPotentialRedirect = false;
    this.lastProcessedEventTime = Date.now();
  }
  registerConsumer(authEventConsumer) {
    this.consumers.add(authEventConsumer);
    if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
      this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
      this.saveEventToCache(this.queuedRedirectEvent);
      this.queuedRedirectEvent = null;
    }
  }
  unregisterConsumer(authEventConsumer) {
    this.consumers.delete(authEventConsumer);
  }
  onEvent(event) {
    // Check if the event has already been handled
    if (this.hasEventBeenHandled(event)) {
      return false;
    }
    let handled = false;
    this.consumers.forEach(consumer => {
      if (this.isEventForConsumer(event, consumer)) {
        handled = true;
        this.sendToConsumer(event, consumer);
        this.saveEventToCache(event);
      }
    });
    if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {
      // If we've already seen a redirect before, or this is a popup event,
      // bail now
      return handled;
    }
    this.hasHandledPotentialRedirect = true;
    // If the redirect wasn't handled, hang on to it
    if (!handled) {
      this.queuedRedirectEvent = event;
      handled = true;
    }
    return handled;
  }
  sendToConsumer(event, consumer) {
    var _a;
    if (event.error && !isNullRedirectEvent(event)) {
      const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split('auth/')[1]) || "internal-error" /* AuthErrorCode.INTERNAL_ERROR */;
      consumer.onError(_createError(this.auth, code));
    } else {
      consumer.onAuthEvent(event);
    }
  }
  isEventForConsumer(event, consumer) {
    const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;
    return consumer.filter.includes(event.type) && eventIdMatches;
  }
  hasEventBeenHandled(event) {
    if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) {
      this.cachedEventUids.clear();
    }
    return this.cachedEventUids.has(eventUid(event));
  }
  saveEventToCache(event) {
    this.cachedEventUids.add(eventUid(event));
    this.lastProcessedEventTime = Date.now();
  }
}
function eventUid(e) {
  return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');
}
function isNullRedirectEvent({
  type,
  error
}) {
  return type === "unknown" /* AuthEventType.UNKNOWN */ && (error === null || error === void 0 ? void 0 : error.code) === `auth/${"no-auth-event" /* AuthErrorCode.NO_AUTH_EVENT */}`;
}
function isRedirectEvent(event) {
  switch (event.type) {
    case "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:
    case "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */:
    case "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */:
      return true;
    case "unknown" /* AuthEventType.UNKNOWN */:
      return isNullRedirectEvent(event);
    default:
      return false;
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function _getProjectConfig(auth, request = {}) {
  return _performApiRequest(auth, "GET" /* HttpMethod.GET */, "/v1/projects" /* Endpoint.GET_PROJECT_CONFIG */, request);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
const HTTP_REGEX = /^https?/;
async function _validateOrigin(auth) {
  // Skip origin validation if we are in an emulated environment
  if (auth.config.emulator) {
    return;
  }
  const {
    authorizedDomains
  } = await _getProjectConfig(auth);
  for (const domain of authorizedDomains) {
    try {
      if (matchDomain(domain)) {
        return;
      }
    } catch (_a) {
      // Do nothing if there's a URL error; just continue searching
    }
  }
  // In the old SDK, this error also provides helpful messages.
  _fail(auth, "unauthorized-domain" /* AuthErrorCode.INVALID_ORIGIN */);
}
function matchDomain(expected) {
  const currentUrl = _getCurrentUrl();
  const {
    protocol,
    hostname
  } = new URL(currentUrl);
  if (expected.startsWith('chrome-extension://')) {
    const ceUrl = new URL(expected);
    if (ceUrl.hostname === '' && hostname === '') {
      // For some reason we're not parsing chrome URLs properly
      return protocol === 'chrome-extension:' && expected.replace('chrome-extension://', '') === currentUrl.replace('chrome-extension://', '');
    }
    return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;
  }
  if (!HTTP_REGEX.test(protocol)) {
    return false;
  }
  if (IP_ADDRESS_REGEX.test(expected)) {
    // The domain has to be exactly equal to the pattern, as an IP domain will
    // only contain the IP, no extra character.
    return hostname === expected;
  }
  // Dots in pattern should be escaped.
  const escapedDomainPattern = expected.replace(/\./g, '\\.');
  // Non ip address domains.
  // domain.com = *.domain.com OR domain.com
  const re = new RegExp('^(.+\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');
  return re.test(hostname);
}

/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const NETWORK_TIMEOUT = new Delay(30000, 60000);
/**
 * Reset unloaded GApi modules. If gapi.load fails due to a network error,
 * it will stop working after a retrial. This is a hack to fix this issue.
 */
function resetUnloadedGapiModules() {
  // Clear last failed gapi.load state to force next gapi.load to first
  // load the failed gapi.iframes module.
  // Get gapix.beacon context.
  const beacon = _window().___jsl;
  // Get current hint.
  if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {
    // Get gapi hint.
    for (const hint of Object.keys(beacon.H)) {
      // Requested modules.
      beacon.H[hint].r = beacon.H[hint].r || [];
      // Loaded modules.
      beacon.H[hint].L = beacon.H[hint].L || [];
      // Set requested modules to a copy of the loaded modules.
      beacon.H[hint].r = [...beacon.H[hint].L];
      // Clear pending callbacks.
      if (beacon.CP) {
        for (let i = 0; i < beacon.CP.length; i++) {
          // Remove all failed pending callbacks.
          beacon.CP[i] = null;
        }
      }
    }
  }
}
function loadGapi(auth) {
  return new Promise((resolve, reject) => {
    var _a, _b, _c;
    // Function to run when gapi.load is ready.
    function loadGapiIframe() {
      // The developer may have tried to previously run gapi.load and failed.
      // Run this to fix that.
      resetUnloadedGapiModules();
      gapi.load('gapi.iframes', {
        callback: () => {
          resolve(gapi.iframes.getContext());
        },
        ontimeout: () => {
          // The above reset may be sufficient, but having this reset after
          // failure ensures that if the developer calls gapi.load after the
          // connection is re-established and before another attempt to embed
          // the iframe, it would work and would not be broken because of our
          // failed attempt.
          // Timeout when gapi.iframes.Iframe not loaded.
          resetUnloadedGapiModules();
          reject(_createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));
        },
        timeout: NETWORK_TIMEOUT.get()
      });
    }
    if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {
      // If gapi.iframes.Iframe available, resolve.
      resolve(gapi.iframes.getContext());
    } else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {
      // Gapi loader ready, load gapi.iframes.
      loadGapiIframe();
    } else {
      // Create a new iframe callback when this is called so as not to overwrite
      // any previous defined callback. This happens if this method is called
      // multiple times in parallel and could result in the later callback
      // overwriting the previous one. This would end up with a iframe
      // timeout.
      const cbName = _generateCallbackName('iframefcb');
      // GApi loader not available, dynamically load platform.js.
      _window()[cbName] = () => {
        // GApi loader should be ready.
        if (!!gapi.load) {
          loadGapiIframe();
        } else {
          // Gapi loader failed, throw error.
          reject(_createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));
        }
      };
      // Load GApi loader.
      return _loadJS(`${_gapiScriptUrl()}?onload=${cbName}`).catch(e => reject(e));
    }
  }).catch(error => {
    // Reset cached promise to allow for retrial.
    cachedGApiLoader = null;
    throw error;
  });
}
let cachedGApiLoader = null;
function _loadGapi(auth) {
  cachedGApiLoader = cachedGApiLoader || loadGapi(auth);
  return cachedGApiLoader;
}

/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const PING_TIMEOUT = new Delay(5000, 15000);
const IFRAME_PATH = '__/auth/iframe';
const EMULATED_IFRAME_PATH = 'emulator/auth/iframe';
const IFRAME_ATTRIBUTES = {
  style: {
    position: 'absolute',
    top: '-100px',
    width: '1px',
    height: '1px'
  },
  'aria-hidden': 'true',
  tabindex: '-1'
};
// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to
// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.
const EID_FROM_APIHOST = new Map([["identitytoolkit.googleapis.com" /* DefaultConfig.API_HOST */, 'p'],
// production
['staging-identitytoolkit.sandbox.googleapis.com', 's'],
// staging
['test-identitytoolkit.sandbox.googleapis.com', 't'] // test
]);
function getIframeUrl(auth) {
  const config = auth.config;
  _assert(config.authDomain, auth, "auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);
  const url = config.emulator ? _emulatorUrl(config, EMULATED_IFRAME_PATH) : `https://${auth.config.authDomain}/${IFRAME_PATH}`;
  const params = {
    apiKey: config.apiKey,
    appName: auth.name,
    v: SDK_VERSION
  };
  const eid = EID_FROM_APIHOST.get(auth.config.apiHost);
  if (eid) {
    params.eid = eid;
  }
  const frameworks = auth._getFrameworks();
  if (frameworks.length) {
    params.fw = frameworks.join(',');
  }
  return `${url}?${querystring(params).slice(1)}`;
}
async function _openIframe(auth) {
  const context = await _loadGapi(auth);
  const gapi = _window().gapi;
  _assert(gapi, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
  return context.open({
    where: document.body,
    url: getIframeUrl(auth),
    messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
    attributes: IFRAME_ATTRIBUTES,
    dontclear: true
  }, iframe => new Promise(async (resolve, reject) => {
    await iframe.restyle({
      // Prevent iframe from closing on mouse out.
      setHideOnLeave: false
    });
    const networkError = _createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */);
    // Confirm iframe is correctly loaded.
    // To fallback on failure, set a timeout.
    const networkErrorTimer = _window().setTimeout(() => {
      reject(networkError);
    }, PING_TIMEOUT.get());
    // Clear timer and resolve pending iframe ready promise.
    function clearTimerAndResolve() {
      _window().clearTimeout(networkErrorTimer);
      resolve(iframe);
    }
    // This returns an IThenable. However the reject part does not call
    // when the iframe is not loaded.
    iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {
      reject(networkError);
    });
  }));
}

/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const BASE_POPUP_OPTIONS = {
  location: 'yes',
  resizable: 'yes',
  statusbar: 'yes',
  toolbar: 'no'
};
const DEFAULT_WIDTH = 500;
const DEFAULT_HEIGHT = 600;
const TARGET_BLANK = '_blank';
const FIREFOX_EMPTY_URL = 'http://localhost';
class AuthPopup {
  constructor(window) {
    this.window = window;
    this.associatedEvent = null;
  }
  close() {
    if (this.window) {
      try {
        this.window.close();
      } catch (e) {}
    }
  }
}
function _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {
  const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();
  const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();
  let target = '';
  const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), {
    width: width.toString(),
    height: height.toString(),
    top,
    left
  });
  // Chrome iOS 7 and 8 is returning an undefined popup win when target is
  // specified, even though the popup is not necessarily blocked.
  const ua = getUA().toLowerCase();
  if (name) {
    target = _isChromeIOS(ua) ? TARGET_BLANK : name;
  }
  if (_isFirefox(ua)) {
    // Firefox complains when invalid URLs are popped out. Hacky way to bypass.
    url = url || FIREFOX_EMPTY_URL;
    // Firefox disables by default scrolling on popup windows, which can create
    // issues when the user has many Google accounts, for instance.
    options.scrollbars = 'yes';
  }
  const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, '');
  if (_isIOSStandalone(ua) && target !== '_self') {
    openAsNewWindowIOS(url || '', target);
    return new AuthPopup(null);
  }
  // about:blank getting sanitized causing browsers like IE/Edge to display
  // brief error message before redirecting to handler.
  const newWin = window.open(url || '', target, optionsString);
  _assert(newWin, auth, "popup-blocked" /* AuthErrorCode.POPUP_BLOCKED */);
  // Flaky on IE edge, encapsulate with a try and catch.
  try {
    newWin.focus();
  } catch (e) {}
  return new AuthPopup(newWin);
}
function openAsNewWindowIOS(url, target) {
  const el = document.createElement('a');
  el.href = url;
  el.target = target;
  const click = document.createEvent('MouseEvent');
  click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
  el.dispatchEvent(click);
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * URL for Authentication widget which will initiate the OAuth handshake
 *
 * @internal
 */
const WIDGET_PATH = '__/auth/handler';
/**
 * URL for emulated environment
 *
 * @internal
 */
const EMULATOR_WIDGET_PATH = 'emulator/auth/handler';
/**
 * Fragment name for the App Check token that gets passed to the widget
 *
 * @internal
 */
const FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');
async function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {
  _assert(auth.config.authDomain, auth, "auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);
  _assert(auth.config.apiKey, auth, "invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */);
  const params = {
    apiKey: auth.config.apiKey,
    appName: auth.name,
    authType,
    redirectUrl,
    v: SDK_VERSION,
    eventId
  };
  if (provider instanceof FederatedAuthProvider) {
    provider.setDefaultLanguage(auth.languageCode);
    params.providerId = provider.providerId || '';
    if (!isEmpty(provider.getCustomParameters())) {
      params.customParameters = JSON.stringify(provider.getCustomParameters());
    }
    // TODO set additionalParams from the provider as well?
    for (const [key, value] of Object.entries(additionalParams || {})) {
      params[key] = value;
    }
  }
  if (provider instanceof BaseOAuthProvider) {
    const scopes = provider.getScopes().filter(scope => scope !== '');
    if (scopes.length > 0) {
      params.scopes = scopes.join(',');
    }
  }
  if (auth.tenantId) {
    params.tid = auth.tenantId;
  }
  // TODO: maybe set eid as endpointId
  // TODO: maybe set fw as Frameworks.join(",")
  const paramsDict = params;
  for (const key of Object.keys(paramsDict)) {
    if (paramsDict[key] === undefined) {
      delete paramsDict[key];
    }
  }
  // Sets the App Check token to pass to the widget
  const appCheckToken = await auth._getAppCheckToken();
  const appCheckTokenFragment = appCheckToken ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}` : '';
  // Start at index 1 to skip the leading '&' in the query string
  return `${getHandlerBase(auth)}?${querystring(paramsDict).slice(1)}${appCheckTokenFragment}`;
}
function getHandlerBase({
  config
}) {
  if (!config.emulator) {
    return `https://${config.authDomain}/${WIDGET_PATH}`;
  }
  return _emulatorUrl(config, EMULATOR_WIDGET_PATH);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The special web storage event
 *
 */
const WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';
class BrowserPopupRedirectResolver {
  constructor() {
    this.eventManagers = {};
    this.iframes = {};
    this.originValidationPromises = {};
    this._redirectPersistence = browserSessionPersistence;
    this._completeRedirectFn = _getRedirectResult;
    this._overrideRedirectResult = _overrideRedirectResult;
  }
  // Wrapping in async even though we don't await anywhere in order
  // to make sure errors are raised as promise rejections
  async _openPopup(auth, provider, authType, eventId) {
    var _a;
    debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, '_initialize() not called before _openPopup()');
    const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
    return _open(auth, url, _generateEventId());
  }
  async _openRedirect(auth, provider, authType, eventId) {
    await this._originValidation(auth);
    const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
    _setWindowLocation(url);
    return new Promise(() => {});
  }
  _initialize(auth) {
    const key = auth._key();
    if (this.eventManagers[key]) {
      const {
        manager,
        promise
      } = this.eventManagers[key];
      if (manager) {
        return Promise.resolve(manager);
      } else {
        debugAssert(promise, 'If manager is not set, promise should be');
        return promise;
      }
    }
    const promise = this.initAndGetManager(auth);
    this.eventManagers[key] = {
      promise
    };
    // If the promise is rejected, the key should be removed so that the
    // operation can be retried later.
    promise.catch(() => {
      delete this.eventManagers[key];
    });
    return promise;
  }
  async initAndGetManager(auth) {
    const iframe = await _openIframe(auth);
    const manager = new AuthEventManager(auth);
    iframe.register('authEvent', iframeEvent => {
      _assert(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, "invalid-auth-event" /* AuthErrorCode.INVALID_AUTH_EVENT */);
      // TODO: Consider splitting redirect and popup events earlier on
      const handled = manager.onEvent(iframeEvent.authEvent);
      return {
        status: handled ? "ACK" /* GapiOutcome.ACK */ : "ERROR" /* GapiOutcome.ERROR */
      };
    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
    this.eventManagers[auth._key()] = {
      manager
    };
    this.iframes[auth._key()] = iframe;
    return manager;
  }
  _isIframeWebStorageSupported(auth, cb) {
    const iframe = this.iframes[auth._key()];
    iframe.send(WEB_STORAGE_SUPPORT_KEY, {
      type: WEB_STORAGE_SUPPORT_KEY
    }, result => {
      var _a;
      const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];
      if (isSupported !== undefined) {
        cb(!!isSupported);
      }
      _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
  }
  _originValidation(auth) {
    const key = auth._key();
    if (!this.originValidationPromises[key]) {
      this.originValidationPromises[key] = _validateOrigin(auth);
    }
    return this.originValidationPromises[key];
  }
  get _shouldInitProactively() {
    // Mobile browsers and Safari need to optimistically initialize
    return _isMobileBrowser() || _isSafari() || _isIOS();
  }
}
/**
 * An implementation of {@link PopupRedirectResolver} suitable for browser
 * based applications.
 *
 * @remarks
 * This method does not work in a Node.js environment.
 *
 * @public
 */
const browserPopupRedirectResolver = BrowserPopupRedirectResolver;
var name = "@firebase/auth";
var version = "1.9.0";

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AuthInterop {
  constructor(auth) {
    this.auth = auth;
    this.internalListeners = new Map();
  }
  getUid() {
    var _a;
    this.assertAuthConfigured();
    return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
  }
  async getToken(forceRefresh) {
    this.assertAuthConfigured();
    await this.auth._initializationPromise;
    if (!this.auth.currentUser) {
      return null;
    }
    const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);
    return {
      accessToken
    };
  }
  addAuthTokenListener(listener) {
    this.assertAuthConfigured();
    if (this.internalListeners.has(listener)) {
      return;
    }
    const unsubscribe = this.auth.onIdTokenChanged(user => {
      listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);
    });
    this.internalListeners.set(listener, unsubscribe);
    this.updateProactiveRefresh();
  }
  removeAuthTokenListener(listener) {
    this.assertAuthConfigured();
    const unsubscribe = this.internalListeners.get(listener);
    if (!unsubscribe) {
      return;
    }
    this.internalListeners.delete(listener);
    unsubscribe();
    this.updateProactiveRefresh();
  }
  assertAuthConfigured() {
    _assert(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);
  }
  updateProactiveRefresh() {
    if (this.internalListeners.size > 0) {
      this.auth._startProactiveRefresh();
    } else {
      this.auth._stopProactiveRefresh();
    }
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getVersionForPlatform(clientPlatform) {
  switch (clientPlatform) {
    case "Node" /* ClientPlatform.NODE */:
      return 'node';
    case "ReactNative" /* ClientPlatform.REACT_NATIVE */:
      return 'rn';
    case "Worker" /* ClientPlatform.WORKER */:
      return 'webworker';
    case "Cordova" /* ClientPlatform.CORDOVA */:
      return 'cordova';
    case "WebExtension" /* ClientPlatform.WEB_EXTENSION */:
      return 'web-extension';
    default:
      return undefined;
  }
}
/** @internal */
function registerAuth(clientPlatform) {
  _registerComponent(new Component("auth" /* _ComponentName.AUTH */, (container, {
    options: deps
  }) => {
    const app = container.getProvider('app').getImmediate();
    const heartbeatServiceProvider = container.getProvider('heartbeat');
    const appCheckServiceProvider = container.getProvider('app-check-internal');
    const {
      apiKey,
      authDomain
    } = app.options;
    _assert(apiKey && !apiKey.includes(':'), "invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */, {
      appName: app.name
    });
    const config = {
      apiKey,
      authDomain,
      clientPlatform,
      apiHost: "identitytoolkit.googleapis.com" /* DefaultConfig.API_HOST */,
      tokenApiHost: "securetoken.googleapis.com" /* DefaultConfig.TOKEN_API_HOST */,
      apiScheme: "https" /* DefaultConfig.API_SCHEME */,
      sdkClientVersion: _getClientVersion(clientPlatform)
    };
    const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);
    _initializeAuthInstance(authInstance, deps);
    return authInstance;
  }, "PUBLIC" /* ComponentType.PUBLIC */)
  /**
   * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()
   * For why we do this, See go/firebase-next-auth-init
   */.setInstantiationMode("EXPLICIT" /* InstantiationMode.EXPLICIT */)
  /**
   * Because all firebase products that depend on auth depend on auth-internal directly,
   * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.
   */.setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {
    const authInternalProvider = container.getProvider("auth-internal" /* _ComponentName.AUTH_INTERNAL */);
    authInternalProvider.initialize();
  }));
  _registerComponent(new Component("auth-internal" /* _ComponentName.AUTH_INTERNAL */, container => {
    const auth = _castAuth(container.getProvider("auth" /* _ComponentName.AUTH */).getImmediate());
    return (auth => new AuthInterop(auth))(auth);
  }, "PRIVATE" /* ComponentType.PRIVATE */).setInstantiationMode("EXPLICIT" /* InstantiationMode.EXPLICIT */));
  registerVersion(name, version, getVersionForPlatform(clientPlatform));
  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
  registerVersion(name, version, 'esm2017');
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;
getExperimentalSetting('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;
function getScriptParentElement() {
  var _a, _b;
  return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;
}
_setExternalJSProvider({
  loadJS(url) {
    // TODO: consider adding timeout support & cancellation
    return new Promise((resolve, reject) => {
      const el = document.createElement('script');
      el.setAttribute('src', url);
      el.onload = resolve;
      el.onerror = e => {
        const error = _createError("internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        error.customData = e;
        reject(error);
      };
      el.type = 'text/javascript';
      el.charset = 'UTF-8';
      getScriptParentElement().appendChild(el);
    });
  },
  gapiScript: 'https://apis.google.com/js/api.js',
  recaptchaV2Script: 'https://www.google.com/recaptcha/api.js',
  recaptchaEnterpriseScript: 'https://www.google.com/recaptcha/enterprise.js?render='
});
registerAuth("Browser" /* ClientPlatform.BROWSER */);

// Import the functions you need from the SDKs you need
const appConfig = {
    apiKey: "AIzaSyDKtOJpkYEDnQVKNnyCeyoN1DjajMW7o9g",
    authDomain: "binge-mobile.firebaseapp.com",
    databaseURL: "https://binge-mobile.firebaseio.com",
    projectId: "binge-mobile",
    storageBucket: "binge-mobile.appspot.com",
    messagingSenderId: "84147851202",
    appId: "1:84147851202:web:839afbf7d74575a729505b",
    measurementId: "G-CNNSYHBDMN",
};
// Initialize Firebase
const firebaseConfig = appConfig;
const app = initializeApp(firebaseConfig);
getAnalytics(app);
const auth = initializeAuth(app, {
    persistence: browserSessionPersistence,
    popupRedirectResolver: browserPopupRedirectResolver,
});
const firebaseAnonymousSignIn = async () => {
    try {
        const user = await auth.currentUser;
        // Sign in the user anonymously and return the user object
        const signInResult = await signInAnonymously(auth);
        return signInResult.user;
    }
    catch (error) {
        // Handle errors and return the error object
        return error;
    }
};

const handleAnonLogin = async () => {
    console.log("token in cookie", GetCookiesValue("annonJwtToken", false));
    if (GetCookiesValue("annonJwtToken", false))
        return GetCookiesValue("annonJwtToken", false);
    const timeoutPromise = new Promise((_, reject) => setTimeout(() => reject("Timeout"), 5000));
    const apiPromise = firebaseAnonymousSignIn();
    try {
        const res = await Promise.race([
            apiPromise,
            timeoutPromise,
        ]);
        if (res === "Timeout") {
            console.error("API call timed out");
            window.location.href = "/login";
            return null;
        }
        const response = await fetch("https://web-api-staging.binge.buzz/api/v3/oauth/verify/login/anon", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Device-Type": "websdk",
            },
            body: JSON.stringify({
                access_token: res.accessToken,
                uid: res.uid,
            }),
        });
        const responseData = await response.json();
        if (responseData?.token) {
            SetCookiesValue("annonJwtToken", responseData.token, 1, false);
            sessionStorage.setItem("annonJwtToken", responseData.token);
            return responseData.token;
        }
        else {
            return null;
        }
    }
    catch (err) {
        console.error("Error during anonymous login:", err);
        return null;
    }
};

const LandingComponent = () => {
    const [isLoading, setIsLoading] = React.useState(true);
    const [token, setToken] = React.useState(null);
    const [imagesData, setImagesData] = React.useState(null);
    React.useEffect(() => {
        const getTokenAndFetchImages = async () => {
            try {
                const fetchedToken = await handleAnonLogin();
                setToken(fetchedToken);
                const imagesResponse = await fetchImages(fetchedToken);
                setImagesData(imagesResponse);
            }
            catch (error) {
                console.error("Error fetching token or images:", error);
            }
            finally {
                setIsLoading(false);
            }
        };
        getTokenAndFetchImages();
    }, []);
    const bannerImages = {
        landscape: imagesData
            ? `https://web-api-staging.binge.buzz/${imagesData.banners[0].banner_landscape_image_path}`
            : "",
        portrait: imagesData
            ? `https://web-api-staging.binge.buzz/${imagesData.banners[0].banner_portrait_image_path}`
            : "",
    };
    const bingeDesc = {
        title: imagesData?.banners[0]["section-title"] || "",
        description: imagesData?.banners[0]["section-description"] || "",
    };
    return (require$$2$1.jsxs(require$$2$1.Fragment, { children: [require$$2$1.jsx(Banner, { isLoading: isLoading, bannerImages: bannerImages }), require$$2$1.jsx(BingeDescription, { title: bingeDesc.title, description: bingeDesc.description }), require$$2$1.jsx(BingeSlider, { token: token, isLoading: isLoading })] }));
};

const BingeLandingPage = () => {
    return (require$$2$1.jsx(ThemeProvider, { theme: createTheme({ palette }), children: require$$2$1.jsx(LandingComponent, {}) }));
};

exports.BingeLandingPage = BingeLandingPage;
//# sourceMappingURL=index.js.map
